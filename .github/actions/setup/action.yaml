name: setup
description: Setup build environment (except R)
inputs:
  rust-nightly:
    description: Set up Rust nightly toolchain?
    required: false
  target:
    description: Rust target triple to use
    required: true
outputs:
  binary-path:
    description: Path to the built binary
    value: ${{ steps.build-lib.outputs.lib-path }}

runs:
  using: composite
  steps:
      - name: Install ubuntu SYSTEM REQUIREMENTS
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update \
          && sudo apt-get install -y \
            musl-tools \
            libfontconfig1-dev \
            libfreetype6-dev \
            libfribidi-dev \
            libharfbuzz-dev \
            libcurl4-openssl-dev \
            libgit2-dev \
            libicu-dev \
            libjpeg-dev \
            libpng-dev \
            libtiff-dev \
            libxml2-dev \
            libssl-dev

      - name: Set up Rust nightly toolchain
        if: inputs.rust-nightly == 'true' || env.RPOLARS_FULL_FEATURES == 'true'
        shell: bash
        run: |
          make requirements-rs

      - name: Set up Rust target
        if: inputs.target != ''
        shell: bash
        run: |
          rustup target add ${{ inputs.target }}

      - name: Set up Rust pfofile
        if: env.RPOLARS_PROFILE == ''
        shell: bash
        run: |
          echo "RPOLARS_PROFILE=release" >>"$GITHUB_ENV"

      - name: Cache Rust
        if: inputs.target != ''
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: build-${{ env.RPOLARS_PROFILE }}-${{ inputs.target }}
          workspaces: "src/rust -> target"

      - name: Build library
        id: build-lib
        if: inputs.target != ''
        working-directory: src
        shell: bash
        run: |
          LIB_PATH="$(pwd)/rust/target/${{ inputs.target }}/${RPOLARS_PROFILE}/libr_polars.a"
          make -f Makevars${{ runner.os == 'Windows' && '.win' || '.in' }} "${LIB_PATH}"
          echo "lib-path=${LIB_PATH}" >>"$GITHUB_OUTPUT"
