name: setup
description: Setup build environment (except R)
inputs:
  rust-nightly:
    description: Set up Rust nightly toolchain?
    required: false
  target:
    description: Rust target triple to use
    required: true

runs:
  using: composite
  steps:
      - name: Install ubuntu SYSTEM REQUIREMENTS
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update \
          && sudo apt-get install -y \
            libfontconfig1-dev \
            libfreetype6-dev \
            libfribidi-dev \
            libharfbuzz-dev \
            libcurl4-openssl-dev \
            libgit2-dev \
            libicu-dev \
            libjpeg-dev \
            libpng-dev \
            libtiff-dev \
            libxml2-dev \
            libssl-dev

      - name: Set up Rust nightly toolchain
        if: inputs.rust-nightly == 'true' || env.RPOLARS_FULL_FEATURES == 'true'
        shell: bash
        run: |
          make requirements-rs

      - name: Set up Rust target
        if: inputs.target != ''
        shell: bash
        run: |
          rustup target add ${{ inputs.target }}

      - name: Set up Rust profile
        if: env.RPOLARS_PROFILE == ''
        shell: bash
        run: |
          echo "RPOLARS_PROFILE=release" >>"$GITHUB_ENV"

      - name: Find default target
        id: find-target
        if: inputs.target == ''
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            TARGET=x86_64-pc-windows-gnu
          else
            TARGET=$(rustc -vV | grep host | cut -d' ' -f2)
          fi
          echo "target=${TARGET}" >>"$GITHUB_OUTPUT"

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: build-${{ env.RPOLARS_PROFILE }}-${{ inputs.target || steps.find-target.outputs.target }}
          workspaces: "src/rust -> target"
