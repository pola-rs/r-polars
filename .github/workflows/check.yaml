# Workflow derived from https://github.com/r-lib/actions/tree/v2/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

name: R-CMD-check

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: macos-latest, r: "release" }
          - { os: windows-latest, r: "release", rtools-version: "42" }
          - { os: ubuntu-latest, r: "devel", http-user-agent: "release" }
          - { os: ubuntu-latest, r: "release" }
          #- { os: ubuntu-latest, r: "oldrel-1" }

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - uses: actions/checkout@v3

      - name: print files
        run: print(list.files("..",recursive = TRUE,full.names=TRUE))
        shell: Rscript {0}

      # - name: Fix path for Windows caching
      #   if: runner.os == 'Windows'
      #   shell: bash
      #   run: |
      #     echo "C:/Program Files/Git/usr/bin" >> $GITHUB_PATH
      #     echo "${GITHUB_PATH}"

      # - name: Get Date
      #   id: get-date
      #   run: |
      #     echo "date=$(/bin/date -u "+%Y%m%d")" >> $GITHUB_OUTPUT
      #   shell: bash

      # - name: cache polars rust targets
      #   id: cache-rust-targets
      #   uses: actions/cache@v3.2.2
      #   env:
      #     cache-name: cache-rust-targets
      #   with:
      #     path: ./src/rust/target/
      #     key: check_v5-${{ runner.os }}-cargo-target-${{ hashFiles('./src/rust/Cargo.toml', './src/rust/Cargo.lock') }}-${{ steps.get-date.outputs.date }}
      #     restore-keys: |
      #       check_v5-${{ runner.os }}-cargo-target-${{ hashFiles('./src/rust/Cargo.toml', './src/rust/Cargo.lock') }}-${{ steps.get-date.outputs.date }}
      #       check_v5-${{ runner.os }}-cargo-target-${{ hashFiles('./src/rust/Cargo.toml', './src/rust/Cargo.lock') }}
      #       check_v5-${{ runner.os }}-cargo-target

      - run: echo "rust-toolchain=nightly" >>"$GITHUB_ENV"
      - run: echo "rust-toolchain=nightly-gnu" >>$env:GITHUB_ENV
        if: runner.os == 'Windows'

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.rust-toolchain }}

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ./src/rust/
          cache-on-failure: "true"

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true
          rtools-version: ${{ matrix.config.rtools-version }}
          Ncpus: 2

      - name: Install ubuntu SYSTEM REQUIREMENTS
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update \
          && sudo apt-get install -y \
            libfontconfig1-dev \
            libfreetype6-dev \
            libfribidi-dev \
            libharfbuzz-dev \
            libcurl4-openssl-dev \
            libgit2-dev \
            libicu-dev \
            libjpeg-dev \
            libpng-dev \
            libtiff-dev \
            libxml2-dev \
            libssl-dev

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck
          needs: check
          pak-version: devel
        env:
          CI: false

      - name: find polars rust source/cache, used by Makevars in check step
        id: get_the_rust_sauce
        shell: bash
        run: |
          echo "RPOLARS_CARGO_CLEAN_DEPS=true" >> $GITHUB_ENV
          echo "RPOLARS_RUST_SOURCE=${PWD}/src/rust" >> $GITHUB_ENV
          echo "RPOLARS_RUST_SOURCE=${PWD}/src/rust"

      - uses: r-lib/actions/check-r-package@v2
        with:
          upload-snapshots: false
          error-on: '"never"' #errors are filtered by rules below

      - name: print R CMD check - install log
        shell: bash
        env:
          RUNNER_OS: ${{ runner.os }}
        run: |
          echo $RUNNER_OS
          if [ "$RUNNER_OS" == "Linux" ]
          then
            less /home/runner/work/r-polars/r-polars/check/polars.Rcheck/00install.out
          fi

          if [ "$RUNNER_OS" == "Windows" ]
          then
            less D:/a/r-polars/r-polars/check/polars.Rcheck/00install.out
          fi

          if [ "$RUNNER_OS" == "macOS" ]
          then
            less /home/runner/work/r-polars/r-polars/check/polars.Rcheck/00install.out
          fi

      - name: print files
        run: print(list.files("..",recursive = TRUE,full.names=TRUE))
        shell: Rscript {0}

      - name: raise remaining rcmdcheck errors
        run: |
         print(getwd());
         source("./inst/misc/filter_rcmdcheck.R");
        shell: Rscript {0}

