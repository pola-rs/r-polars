TARGET = @TARGET@
PROFILE = @PROFILE@
FEATURES = @FEATURES@

LIBNAME = libr_polars.a
TARGET_DIR = $(CURDIR)/rust/target
LIBDIR = $(TARGET_DIR)/$(TARGET)/$(subst dev,debug,$(PROFILE))
STATLIB = $(LIBDIR)/$(LIBNAME)
PKG_LIBS = \
	-L$(LIBDIR) \
	-lr_polars \
	-lws2_32 \
	-lncrypt \
	-lcrypt32 \
	-ladvapi32 \
	-luserenv \
	-lbcrypt \
	-lole32 \
	-lntdll \
	-lpsapi \
	-liphlpapi \
	-lpdh \
	-lpowrprof \
	-loleaut32 \
	-lnetapi32 \
	-lsecur32 \
	-lsynchronization \
	-lpropsys \
	-lruntimeobject \
	@ADDITIONAL_LIBS@ \
	-t

CARGO_BUILD_ARGS = --lib \
	--profile="$(PROFILE)" \
	--manifest-path="$(CURDIR)/rust/Cargo.toml" \
	--target-dir="$(TARGET_DIR)" \
	--target="$(TARGET)" \
	--features="$(FEATURES)"

# Rtools doesn't have the linker in the location that cargo expects, so we need
# to overwrite it via configuration.
CARGO_LINKER = x86_64-w64-mingw32.static.posix-gcc.exe

.PHONY: all
all: cleanup

$(SHLIB): $(STATLIB)

$(STATLIB): remove-prev
	# When the GNU toolchain is used (i.e. on CRAN), -lgcc_eh is specified for
	# building proc-macro2, but Rtools doesn't contain libgcc_eh. This isn't used
	# in actual, but we need this tweak to please the compiler.
	mkdir -p $(LIBDIR)/libgcc_mock && touch $(LIBDIR)/libgcc_mock/libgcc_eh.a

	if [ -f "$(CURDIR)/../tools/$(LIBNAME)" ]; then \
		mkdir -p "$(LIBDIR)" ; \
		mv "$(CURDIR)/../tools/$(LIBNAME)" "$(STATLIB)" ; \
		exit 0; \
	fi && \
	export CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER="$(CARGO_LINKER)" && \
	  export LIBRARY_PATH="$${LIBRARY_PATH};$(LIBDIR)/libgcc_mock" && \
	  cargo build $(CARGO_BUILD_ARGS)

.PHONY: remove-prev
# Remove previous build artifacts
remove-prev:
	rm -f "$(STATLIB)"

.PHONY: cleanup
# Clean up files that may cause warnings in R CMD check on CRAN just after the build
cleanup: $(SHLIB)
	if [ "$(NOT_CRAN)" != "true" ]; then \
		rm -Rf "$(STATLIB)" "$(CARGOTMP)" "$(VENDOR_DIR)" "$(LIBDIR)/build"; \
	fi

.PHONY: clean
clean:
	rm -Rf "$(SHLIB)" "$(STATLIB)" "$(OBJECTS)" "$(LIBGCC_MOCK_DIR)" "$(TARGET_DIR)"
