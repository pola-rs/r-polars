TARGET = $(subst 64,x86_64,$(subst 32,i686,$(WIN)))-pc-windows-gnu
BUILD_COMMAND = cargo build --target=$(TARGET) --lib --profile $(RPOLARS_PROFILE) --manifest-path="$(RPOLARS_RUST_SOURCE)/Cargo.toml"
RPOLARS_PROFILE ?= release

TARGET_DIR = ./rust/target
LIBDIR = $(TARGET_DIR)/$(TARGET)/$(RPOLARS_PROFILE)
STATLIB = $(LIBDIR)/libr_polars.a
PKG_LIBS = -L$(LIBDIR) -lr_polars -lws2_32 -ladvapi32 -luserenv -lbcrypt -lole32 -lntdll -lpsapi -liphlpapi -lpdh -lpowrprof -loleaut32 -lnetapi32 -lsecur32 -t
RPOLARS_RUST_SOURCE ?= ./rust

rpolars_ext_binary = "$(RPOLARS_RUST_SOURCE)/target/$(TARGET)/$(RPOLARS_PROFILE)/libr_polars.a"

all: C_clean

$(SHLIB): $(STATLIB)

CARGOTMP = $(CURDIR)/.cargo

$(STATLIB):
	echo "RPOLARS_RUST_SOURCE is set to $(RPOLARS_RUST_SOURCE)"
	mkdir -p $(TARGET_DIR)/libgcc_mock && touch $(TARGET_DIR)/libgcc_mock/libgcc_eh.a

	# CARGO_LINKER is provided in Makevars.ucrt for R >= 4.2
	if [ "$(NOT_CRAN)" != "true" ]; then \
		export CARGO_HOME=$(CARGOTMP); \
	fi && \
	export CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER="$(CARGO_LINKER)" && \
		export LIBRARY_PATH="$${LIBRARY_PATH};$(CURDIR)/$(TARGET_DIR)/libgcc_mock" && \
		if [ "$(RPOLARS_ALL_FEATURES)" == "true" ]; then \
			$(BUILD_COMMAND) --all-features; \
		else \
			$(BUILD_COMMAND); \
		fi;
	if [ "$(NOT_CRAN)" != "true" ]; then \
		rm -Rf $(CARGOTMP) && \
		rm -Rf $(LIBDIR)/build; \
	fi

	# when RPOLARS_RUST_SOURCE is defined rust binary is compiled there
	# if binary is not here, it can be symlinked instead.
	# This solves both caching and R CMD check failing cargo build files
	# see issue #28
	if [ -f "$(STATLIB)" ]; then \
		echo "found binary proceed to linking"; \
	else \
		echo "binary not built here, trying to symlink in $(rpolars_ext_binary)"; \
		mkdir -p $(LIBDIR) ; \
		ln -s $(rpolars_ext_binary) $(LIBDIR)/libr_polars.a ; \
	fi

	# CRAN might even need more files to be gone, delete them here...
	if [ "$(RPOLARS_CARGO_CLEAN_DEPS)" == "true" ]; then \
		echo "clean up target, to not let R CMD check fail on rust files"; \
		mv $(STATLIB) $(LIBDIR)/../temp_binary.a; \
		rm -rf $(LIBDIR); \
		mkdir $(LIBDIR); \
		mv $(LIBDIR)/../temp_binary.a $(STATLIB); \
		rm -rf -v ./src/.cargo; \
	else \
		echo "skip cleaning" ; \
	fi

C_clean:
	rm -Rf $(SHLIB) $(STATLIB) $(OBJECTS)

clean:
	rm -Rf $(SHLIB) $(STATLIB) $(OBJECTS) rust/target
