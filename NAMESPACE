# Generated by roxygen2: do not edit by hand

S3method("!",polars_expr)
S3method("!=",polars_expr)
S3method("!=",polars_series)
S3method("$",PlRExpr)
S3method("$",polars_chained_then)
S3method("$",polars_data_frame)
S3method("$",polars_datatype_expr)
S3method("$",polars_dtype)
S3method("$",polars_dtype_enum)
S3method("$",polars_expr)
S3method("$",polars_group_by)
S3method("$",polars_group_by_dynamic)
S3method("$",polars_lazy_frame)
S3method("$",polars_lazy_group_by)
S3method("$",polars_namespace_expr_arr)
S3method("$",polars_namespace_expr_bin)
S3method("$",polars_namespace_expr_cat)
S3method("$",polars_namespace_expr_dt)
S3method("$",polars_namespace_expr_list)
S3method("$",polars_namespace_expr_meta)
S3method("$",polars_namespace_expr_name)
S3method("$",polars_namespace_expr_str)
S3method("$",polars_namespace_expr_struct)
S3method("$",polars_namespace_series_arr)
S3method("$",polars_namespace_series_bin)
S3method("$",polars_namespace_series_cat)
S3method("$",polars_namespace_series_dt)
S3method("$",polars_namespace_series_list)
S3method("$",polars_namespace_series_str)
S3method("$",polars_namespace_series_struct)
S3method("$",polars_object)
S3method("$",polars_partitioning_scheme)
S3method("$",polars_rolling_group_by)
S3method("$",polars_selector)
S3method("$",polars_series)
S3method("$",polars_sql_context)
S3method("$",polars_then)
S3method("$<-",polars_object)
S3method("$<-",savvy_polars__sealed)
S3method("%%",polars_expr)
S3method("%%",polars_series)
S3method("%/%",polars_expr)
S3method("&",polars_expr)
S3method("*",polars_expr)
S3method("*",polars_series)
S3method("+",polars_expr)
S3method("+",polars_series)
S3method("-",polars_expr)
S3method("-",polars_series)
S3method("/",polars_expr)
S3method("/",polars_series)
S3method("<",polars_expr)
S3method("<",polars_series)
S3method("<=",polars_expr)
S3method("<=",polars_series)
S3method("==",polars_expr)
S3method("==",polars_series)
S3method(">",polars_expr)
S3method(">",polars_series)
S3method(">=",polars_expr)
S3method(">=",polars_series)
S3method("[",polars_data_frame)
S3method("[",polars_lazy_frame)
S3method("[",polars_namespace_expr_struct)
S3method("[",polars_namespace_series_struct)
S3method("[",polars_object)
S3method("[<-",polars_object)
S3method("[[",polars_data_frame)
S3method("[[<-",polars_object)
S3method("[[<-",savvy_polars__sealed)
S3method("^",polars_expr)
S3method("|",polars_expr)
S3method(as.data.frame,polars_data_frame)
S3method(as.data.frame,polars_lazy_frame)
S3method(as.list,polars_data_frame)
S3method(as.list,polars_lazy_frame)
S3method(as.vector,polars_series)
S3method(as_polars_df,"NULL")
S3method(as_polars_df,data.frame)
S3method(as_polars_df,default)
S3method(as_polars_df,list)
S3method(as_polars_df,polars_data_frame)
S3method(as_polars_df,polars_group_by)
S3method(as_polars_df,polars_lazy_frame)
S3method(as_polars_df,polars_series)
S3method(as_polars_dtype_expr,character)
S3method(as_polars_dtype_expr,default)
S3method(as_polars_dtype_expr,polars_datatype_expr)
S3method(as_polars_dtype_expr,polars_expr)
S3method(as_polars_expr,"NULL")
S3method(as_polars_expr,character)
S3method(as_polars_expr,default)
S3method(as_polars_expr,polars_expr)
S3method(as_polars_expr,raw)
S3method(as_polars_lf,default)
S3method(as_polars_lf,polars.lazyframe.frame.LazyFrame)
S3method(as_polars_lf,polars_lazy_frame)
S3method(as_polars_selector,character)
S3method(as_polars_selector,polars_expr)
S3method(as_polars_selector,polars_selector)
S3method(as_polars_series,"NULL")
S3method(as_polars_series,ArrowTabular)
S3method(as_polars_series,AsIs)
S3method(as_polars_series,Date)
S3method(as_polars_series,ITime)
S3method(as_polars_series,POSIXct)
S3method(as_polars_series,POSIXlt)
S3method(as_polars_series,RecordBatchReader)
S3method(as_polars_series,array)
S3method(as_polars_series,blob)
S3method(as_polars_series,character)
S3method(as_polars_series,clock_duration)
S3method(as_polars_series,clock_sys_time)
S3method(as_polars_series,clock_time_point)
S3method(as_polars_series,clock_zoned_time)
S3method(as_polars_series,data.frame)
S3method(as_polars_series,default)
S3method(as_polars_series,difftime)
S3method(as_polars_series,double)
S3method(as_polars_series,factor)
S3method(as_polars_series,hms)
S3method(as_polars_series,integer)
S3method(as_polars_series,integer64)
S3method(as_polars_series,list)
S3method(as_polars_series,logical)
S3method(as_polars_series,nanoarrow_array)
S3method(as_polars_series,nanoarrow_array_stream)
S3method(as_polars_series,numeric_version)
S3method(as_polars_series,polars_data_frame)
S3method(as_polars_series,polars_expr)
S3method(as_polars_series,polars_lazy_frame)
S3method(as_polars_series,polars_series)
S3method(as_polars_series,python.builtin.object)
S3method(as_polars_series,raw)
S3method(as_polars_series,vctrs_rcrd)
S3method(as_polars_series,vctrs_unspecified)
S3method(dim,polars_data_frame)
S3method(dim,polars_lazy_frame)
S3method(dimnames,polars_data_frame)
S3method(dimnames,polars_lazy_frame)
S3method(format,polars_dtype)
S3method(infer_polars_dtype,"NULL")
S3method(infer_polars_dtype,ArrowTabular)
S3method(infer_polars_dtype,AsIs)
S3method(infer_polars_dtype,RecordBatchReader)
S3method(infer_polars_dtype,data.frame)
S3method(infer_polars_dtype,default)
S3method(infer_polars_dtype,list)
S3method(infer_polars_dtype,nanoarrow_array)
S3method(infer_polars_dtype,nanoarrow_array_stream)
S3method(infer_polars_dtype,polars.dataframe.frame.DataFrame)
S3method(infer_polars_dtype,polars.series.series.Series)
S3method(infer_polars_dtype,polars_data_frame)
S3method(infer_polars_dtype,polars_expr)
S3method(infer_polars_dtype,polars_lazy_frame)
S3method(infer_polars_dtype,polars_series)
S3method(infer_polars_dtype,vctrs_vctr)
S3method(length,polars_data_frame)
S3method(length,polars_lazy_frame)
S3method(length,polars_series)
S3method(max,polars_series)
S3method(mean,polars_series)
S3method(min,polars_series)
S3method(names,polars_data_frame)
S3method(names,polars_lazy_frame)
S3method(parse_as_duration_string,character)
S3method(parse_as_duration_string,clock_duration)
S3method(parse_as_duration_string,default)
S3method(parse_as_duration_string,difftime)
S3method(print,PlRCategories__bundle)
S3method(print,PlRChainedThen__bundle)
S3method(print,PlRChainedWhen__bundle)
S3method(print,PlRDataFrame__bundle)
S3method(print,PlRDataTypeExpr__bundle)
S3method(print,PlRDataType__bundle)
S3method(print,PlRExpr__bundle)
S3method(print,PlRLazyFrame__bundle)
S3method(print,PlRLazyGroupBy__bundle)
S3method(print,PlRPartitioning__bundle)
S3method(print,PlRSQLContext__bundle)
S3method(print,PlRSelector__bundle)
S3method(print,PlRSeries__bundle)
S3method(print,PlRThen__bundle)
S3method(print,PlRWhen__bundle)
S3method(print,polars_data_frame)
S3method(print,polars_datatype_expr)
S3method(print,polars_dtype)
S3method(print,polars_envvars_list)
S3method(print,polars_expr)
S3method(print,polars_info_list)
S3method(print,polars_object)
S3method(print,polars_options_list)
S3method(print,polars_series)
S3method(row.names,polars_data_frame)
S3method(stats::median,polars_series)
S3method(sum,polars_series)
S3method(utils::.DollarNames,polars_chained_then)
S3method(utils::.DollarNames,polars_data_frame)
S3method(utils::.DollarNames,polars_datatype_expr)
S3method(utils::.DollarNames,polars_dtype)
S3method(utils::.DollarNames,polars_dtype_enum)
S3method(utils::.DollarNames,polars_expr)
S3method(utils::.DollarNames,polars_group_by)
S3method(utils::.DollarNames,polars_group_by_dynamic)
S3method(utils::.DollarNames,polars_lazy_frame)
S3method(utils::.DollarNames,polars_lazy_group_by)
S3method(utils::.DollarNames,polars_namespace_expr_arr)
S3method(utils::.DollarNames,polars_namespace_expr_bin)
S3method(utils::.DollarNames,polars_namespace_expr_cat)
S3method(utils::.DollarNames,polars_namespace_expr_dt)
S3method(utils::.DollarNames,polars_namespace_expr_list)
S3method(utils::.DollarNames,polars_namespace_expr_meta)
S3method(utils::.DollarNames,polars_namespace_expr_name)
S3method(utils::.DollarNames,polars_namespace_expr_str)
S3method(utils::.DollarNames,polars_namespace_expr_struct)
S3method(utils::.DollarNames,polars_namespace_series_arr)
S3method(utils::.DollarNames,polars_namespace_series_bin)
S3method(utils::.DollarNames,polars_namespace_series_cat)
S3method(utils::.DollarNames,polars_namespace_series_dt)
S3method(utils::.DollarNames,polars_namespace_series_list)
S3method(utils::.DollarNames,polars_namespace_series_str)
S3method(utils::.DollarNames,polars_namespace_series_struct)
S3method(utils::.DollarNames,polars_partitioning_scheme)
S3method(utils::.DollarNames,polars_rolling_group_by)
S3method(utils::.DollarNames,polars_selector)
S3method(utils::.DollarNames,polars_series)
S3method(utils::.DollarNames,polars_sql_context)
S3method(utils::.DollarNames,polars_then)
S3method(utils::head,polars_data_frame)
S3method(utils::head,polars_lazy_frame)
S3method(utils::tail,polars_data_frame)
S3method(utils::tail,polars_lazy_frame)
S3method(wrap,PlRChainedThen)
S3method(wrap,PlRChainedWhen)
S3method(wrap,PlRDataFrame)
S3method(wrap,PlRDataType)
S3method(wrap,PlRDataTypeExpr)
S3method(wrap,PlRExpr)
S3method(wrap,PlRLazyFrame)
S3method(wrap,PlRLazyGroupBy)
S3method(wrap,PlRPartitioning)
S3method(wrap,PlRSQLContext)
S3method(wrap,PlRSelector)
S3method(wrap,PlRSeries)
S3method(wrap,PlRThen)
S3method(wrap,PlRWhen)
S3method(wrap,default)
export(as_polars_df)
export(as_polars_expr)
export(as_polars_lf)
export(as_polars_series)
export(check_list_of_polars_dtype)
export(check_polars_df)
export(check_polars_dtype)
export(check_polars_dtype_expr)
export(check_polars_expr)
export(check_polars_lf)
export(check_polars_partitioning_scheme)
export(check_polars_selector)
export(check_polars_series)
export(cs)
export(infer_polars_dtype)
export(is_convertible_to_polars_expr)
export(is_convertible_to_polars_series)
export(is_list_of_polars_dtype)
export(is_polars_df)
export(is_polars_dtype)
export(is_polars_dtype_expr)
export(is_polars_expr)
export(is_polars_lf)
export(is_polars_partitioning_scheme)
export(is_polars_selector)
export(is_polars_series)
export(parquet_statistics)
export(pl)
export(polars_envvars)
export(polars_info)
export(polars_options)
export(polars_options_reset)
import(rlang)
importFrom(utils,findMatches)
importFrom(utils,head)
importFrom(utils,tail)
useDynLib(polars, .registration = TRUE)
