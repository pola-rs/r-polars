version: "3"

env:
  NOT_CRAN: "true"
  LIBR_POLARS_BUILD: "true"
  LIBR_POLARS_FEATURES: "nightly"
  DEBUG: "true"
  VIRTUAL_ENV: "{{.VENV_DIR}}"

vars:
  REQUIRED_R_PKGS_FOR_S3_METHODS: nanoarrow,tibble,knitr

  VENV_DIR: .venv_altdoc
  VENV_BIN:
    sh: echo '{{.VENV_DIR}}/{{if eq OS "windows"}}Scripts{{else}}bin{{end}}'

  MANIFEST: src/rust/Cargo.toml
  CARGO_LOCK: src/rust/Cargo.lock
  R_SOURCE: R/*
  R_TESTS: tests/*
  VIGNETTES: vignettes/**/*.Rmd
  RUST_SOURCE: src/rust/src/**/*.rs
  RUST_TOOLCHAIN_CONFIG: src/rust/rust-toolchain.toml
  MAKEVARS_IN: src/Makevars{{if eq OS "windows"}}.win{{end}}.in

  R_FUNC_LOAD_REQUIRED_PKGS:
    strsplit("{{.REQUIRED_R_PKGS_FOR_S3_METHODS}}", ",") |>
      unlist() |>
      lapply(require, character.only = TRUE) |>
      invisible()

# TODO: setup tools
# TODO: lint, auto format

tasks:
  setup-dev:
    desc: Install tools for development.
    deps:
      - setup-r-tools

  setup-r-tools:
    env:
      PKG_SYSREQS: FALSE
    desc: Install R packages for development.
    cmds:
      - Rscript -e
        'pak::repo_add("https://cloud.r-project.org/");
        pak::local_install_deps(dependencies = c("all", "Config/Needs/dev", "Config/Needs/website"))'

  setup-venv:
    desc: Setup Python venv for development.
    internal: true
    generates:
      - "{{.VENV_BIN}}"
    cmds:
      - python3 -m venv {{.VENV_DIR}}

  setup-python-tools:
    desc: Install Python tools for development.
    deps:
      - setup-venv
    cmds:
      - "{{.VENV_BIN}}/python -m pip install --upgrade uv"
      - "{{.VENV_BIN}}/uv pip install --upgrade mkdocs-material mdx_truly_sane_lists"

  build-rust:
    desc: Build the Rust library wrappers.
    aliases:
      - br
    sources:
      - "{{.MAKEVARS_IN}}"
      - configure*
      - "{{.MANIFEST}}"
      - "{{.CARGO_LOCK}}"
      - "{{.RUST_SOURCE}}"
      - "{{.RUST_TOOLCHAIN_CONFIG}}"
    generates:
      - R/000-wrappers.R
    deps:
      - format-rust
    cmds:
      - savvy-cli update .
      - Rscript -e 'pkgbuild::compile_dll()'

  build-standalone-files:
    desc: Update "standalone" R files by `usethis::use_standalone()`
    ignore_error: true # GitHub API rate limit
    generates:
      - R/import-standalone-*.R
    vars:
      RLANG_STANDALONE_FILES:
        - lifecycle
        - s3-register
        - types-check
    cmds:
      - for:
          var: RLANG_STANDALONE_FILES
        cmd: Rscript -e 'usethis::use_standalone("r-lib/rlang", "{{.ITEM}}")'

  build-autogenerated-files:
    desc: Update auto-generated files by dev scripts
    sources:
      - dev/generate-r-files/**/*
    generates:
      - R/generated-*.R
    deps:
      - format-devscripts
    cmds:
      - Rscript dev/generate-r-files/generate-s3methods-dollar.R

  build-documents:
    desc: Build the R package and generate documents.
    aliases:
      - bd
    sources:
      - DESCRIPTION
      - "{{.R_SOURCE}}"
    generates:
      - man/*.Rd
    status:
      - Rscript -e 'if (desc::desc_get("RoxygenNote") < packageVersion("roxygen2")) quit(status = 1)'
    deps:
      - build-rust
      - build-standalone-files
      - build-autogenerated-files
      - format-r
    cmds:
      - Rscript -e
        '{{.R_FUNC_LOAD_REQUIRED_PKGS}};
        devtools::document()'

  build-lib-sums:
    desc: Build lib-sums.tsv.
    sources:
      - dev/generate-lib-sums.R
      - tools/prep-lib.R
      - DESCRIPTION
      - "{{.MANIFEST}}"
    generates:
      - tools/lib-sums.tsv
    cmds:
      - Rscript dev/generate-lib-sums.R

  build-all:
    desc: Build the R package, generate documents, run all tests, and update files.
    deps:
      - build-lib-sums
      - build-documents
    cmds:
      - task: test-all
      - task: build-readme

  test-all:
    desc: Run all tests.
    cmds:
      - task: test-source

  test-source:
    desc: Run all tests for source.
    internal: true
    sources:
      - tests/**/*
      - "{{.R_SOURCE}}"
      - "{{.MAKEVARS_IN}}"
      - configure*
      - "{{.MANIFEST}}"
      - "{{.CARGO_LOCK}}"
      - "{{.RUST_SOURCE}}"
      - "{{.RUST_TOOLCHAIN_CONFIG}}"
    cmds:
      - Rscript -e 'devtools::test()'

  build-readme:
    desc: Build README.md
    sources:
      - README.Rmd
      - "{{.R_SOURCE}}"
      - "{{.MAKEVARS_IN}}"
      - configure*
      - "{{.MANIFEST}}"
      - "{{.CARGO_LOCK}}"
      - "{{.RUST_SOURCE}}"
      - "{{.RUST_TOOLCHAIN_CONFIG}}"
    generates:
      - README.md
    deps:
      - build-rust
    cmds:
      - Rscript -e
        'devtools::load_all();
        rmarkdown::render(input = "README.Rmd", output_file = "README.md")'

  install-package:
    desc: Install the R package.
    sources:
      - DESCRIPTION
      - "{{.R_SOURCE}}"
      - "{{.MAKEVARS_IN}}"
      - configure*
      - "{{.MANIFEST}}"
      - "{{.CARGO_LOCK}}"
      - "{{.RUST_SOURCE}}"
      - "{{.RUST_TOOLCHAIN_CONFIG}}"
    deps:
      - build-documents
    cmds:
      - R CMD INSTALL --no-multiarch --with-keep.source .

  test-snapshot-accept:
    desc: Accept all test snapshots. (Shortcut to accept snapshots after running tests)
    cmds:
      - Rscript -e 'testthat::snapshot_accept()'

  format-all:
    desc: Format all files.
    aliases:
      - fmt
      - fmt-all
    deps:
      - format-r
      - format-rust

  format-r:
    desc: Format R files.
    aliases:
      - fmt-r
    sources:
      - "{{.R_SOURCE}}"
      - "{{.R_TESTS}}"
      - air.toml
      # These files are auto-generated and ignored by the formatter
      - exclude: R/000-wrappers.R
      - exclude: R/import-standalone-*.R
      - exclude: R/generated-*.R
    generates:
      - "{{.R_SOURCE}}"
      - "{{.R_TESTS}}"
      - exclude: R/000-wrappers.R
      - exclude: R/import-standalone-*.R
      - exclude: R/generated-*.R
    cmds:
      - air format R/ tests/

  format-rust:
    desc: Format Rust files.
    dir: src/rust
    aliases:
      - fmt-rust
    sources:
      - "{{.RUST_SOURCE}}"
      - "{{.RUST_TOOLCHAIN_CONFIG}}"
      - "{{.MANIFEST}}"
    generates:
      - "{{.RUST_SOURCE}}"
    cmds:
      - rustup component add rustfmt
      - cargo fmt --all

  format-devscripts:
    desc: Format dev scripts.
    sources:
      - dev/**/*.R
      - air.toml
    generates:
      - dev/**/*.R
    cmds:
      - air format dev/

  build-website:
    desc: Build the website.
    sources:
      - man/*.Rd
      - altdoc/altdoc_postprocessing.R
      - altdoc/*.yml
      - "{{.VIGNETTES}}"
    generates:
      - docs/**
    cmds:
      - task: build-readme
      - task: build-altdoc-ref-home
      - Rscript -e
        'future::plan(future::multicore);
        altdoc::render_docs(freeze = FALSE, parallel = TRUE, verbose = TRUE);
        source("altdoc/altdoc_postprocessing.R");'

  build-altdoc-ref-home:
    internal: true
    desc: Build the altdoc reference home markdown
    sources:
      - "{{.R_SOURCE}}"
      - src/Makevars*
      - configure*
      - "{{.MANIFEST}}"
      - "{{.CARGO_LOCK}}"
      - "{{.RUST_SOURCE}}"
    generates:
      - altdoc/reference_home.md
    deps:
      - install-package
    cmds:
      - Rscript -e
        'library({{.PACKAGE_NAME}});
        rmarkdown::render("altdoc/reference_home.Rmd")'
