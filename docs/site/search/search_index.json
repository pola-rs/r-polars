{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#polars","title":"polars","text":"<p>The goal of this project is to bring the blazingly fast Polars data manipulation library to R. The underlying computation engine is written in Rust and this R implementation has no other dependencies than R itself (\u2265 4.1.0).</p> <p>Documentation can be found on the r-polars homepage.</p> <p>The primary developer of the upstream Polars project is Ritchie Vink (@ritchie46). This R port is maintained by S\u00f8ren Welling (@sorhawell), together with other contributors. Consider joining our Discord (subchannel) for additional help and discussion.</p> <p>Update: As of March 2023, polars has now reached nearly 100% coverage of the underlying \u201clazy\u201d Expr syntax. While translation of the \u201ceager\u201d syntax is still a little further behind, you should be able to do just about everything using <code>$select()</code> + <code>$with_columns()</code>.</p>"},{"location":"#install","title":"Install","text":"<p>The package is not yet available on CRAN. But we provide convenient installation options for a variety of operating systems:</p>"},{"location":"#r-universe","title":"R-universe","text":"<p>R-universe provides pre-compiled polars binaries for Windows and MacOS (x86_64), with source builds for other platforms. Please see the GitHub release option below for binary install options on Linux.</p> <pre><code>install.packages(\"polars\", repos = \"https://rpolars.r-universe.dev\")\n</code></pre> <p>Special thanks to Jeroen Ooms (@jeroen) for the excellent R-universe support.</p>"},{"location":"#github-releases","title":"GitHub releases","text":"<p>We also provide pre-compiled binaries for various operating systems, as well as source installs, on our GitHub releases page. You can download and install these files manually, or install directly from R. Simply match the URL for your operating system and the desired release. For example, to install the latest release of polars on Linux (x86_64) one would use:</p> <pre><code>install.packages(\n\"https://github.com/pola-rs/r-polars/releases/latest/download/polars__x86_64-pc-linux-gnu.gz\",\nrepos = NULL )\n</code></pre> <p>Similarly for Windows (URL and MacOS (x86_64, URL). Just remember to invoke the <code>repos = NULL</code> argument if you are installing these binary builds directly from within R.</p> <p>One exception worth noting is MacOS (arm64), i.e.\u00a0systems based on the new M1/M2 \u201cSilicon\u201d chips. To install polars on one of these machines, we need to build the package from source and this requires Xcode (<code>xcode-select --install</code>). Once Xcode is installed, you can run the below code chunk to build polars. The corresponding <code>Makevars</code> script will download a \\~200MB cross-compiled object file, while your machine links and builds the final R package.</p> <pre><code># install.packages(\"remotes\")\nremotes::install_github(\n\"https://github.com/pola-rs/r-polars\",\nref = \"long_arms64\", force =TRUE\n)\n</code></pre> <p>Please file an issue if you require a different target or operating system build. Finally, see the bottom of this README for details on how to install rust to build from source (only relevant for developers, or users of unsupported operating systems).</p>"},{"location":"#quickstart-example","title":"Quickstart example","text":"<p>The introductory vignette (<code>vignette(\"polars\")</code>) contains a series of detailed examples. But here is a quick illustration of polars in action.</p> <p>Start by loading the package and creating a Polars <code>DataFrame</code> object. Similar to the Python implementation, note that we use the <code>pl$</code> prefix to specify a Polars constructor.</p> <pre><code>library(polars)\ndat = pl$DataFrame(mtcars)\ndat\n#&gt; polars DataFrame: shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 ...  \u2506 ... \u2506 ...   \u2506 ...   \u2506 ... \u2506 ... \u2506 ... \u2506 ...  \u2506 ...  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Once our Polars DataFrame has been created, we can chain together a series of data manipulations as part of the same query. For example:</p> <pre><code>dat$filter(\npl$col(\"cyl\")&gt;=6\n)$groupby(\n\"cyl\", \"am\"\n)$agg(\npl$col(\"mpg\")$mean()$alias(\"mean_mpg\"),\npl$col(\"hp\")$median()$alias(\"med_hp\")\n)\n#&gt; polars DataFrame: shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 am  \u2506 mean_mpg  \u2506 med_hp \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---       \u2506 ---    \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2506 f64       \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0 \u2506 1.0 \u2506 20.566667 \u2506 110.0  \u2502\n#&gt; \u2502 6.0 \u2506 0.0 \u2506 19.125    \u2506 116.5  \u2502\n#&gt; \u2502 8.0 \u2506 0.0 \u2506 15.05     \u2506 180.0  \u2502\n#&gt; \u2502 8.0 \u2506 1.0 \u2506 15.4      \u2506 299.5  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>The above is an example of Polars\u2019 eager execution engine. But for maximum performance, it is preferable to use Polars\u2019 lazy execution mode, which allows the package to apply additional query optimizations.</p> <pre><code>ldat = dat$lazy()\nldat$filter(\npl$col(\"cyl\")&gt;=6\n)$groupby(\n\"cyl\", \"am\"\n)$agg(\npl$col(\"mpg\")$mean()$alias(\"mean_mpg\"),\npl$col(\"hp\")$median()$alias(\"med_hp\")\n)$collect()\n#&gt; polars DataFrame: shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 am  \u2506 mean_mpg  \u2506 med_hp \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---       \u2506 ---    \u2502\n#&gt; \u2502 f64 \u2506 f64 \u2506 f64       \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0 \u2506 1.0 \u2506 20.566667 \u2506 110.0  \u2502\n#&gt; \u2502 6.0 \u2506 0.0 \u2506 19.125    \u2506 116.5  \u2502\n#&gt; \u2502 8.0 \u2506 0.0 \u2506 15.05     \u2506 180.0  \u2502\n#&gt; \u2502 8.0 \u2506 1.0 \u2506 15.4      \u2506 299.5  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"#contribute","title":"Contribute","text":"<p>Contributions are very welcome!</p> <p>Here are the steps required for an example contribution, where we are implementing the cosine expression:</p> <ul> <li>Look up the polars.Expr.cos method in py-polars   documentation.</li> <li>Press the <code>[source]</code> button to see the Python   impl</li> <li>Find the cos py-polars rust   implementation   (likely just a simple call to the Rust-Polars API)</li> <li>Adapt the Rust part and place it   here.</li> <li>Adapt the Python frontend syntax to R and place it   here.   Add the roxygen docs + examples above.</li> <li>Notice we use <code>Expr_cos = \"use_extendr_wrapper\"</code>, it means we\u2019re just   using unmodified the extendr auto-generated   wrapper</li> <li>Write a test   here.</li> <li>Run <code>renv::restore()</code> and resolve all R packages</li> <li>Run <code>rextendr::document()</code> to recompile and confirm the added method   functions as intended,   e.g.\u00a0<code>pl$DataFrame(a=c(0,pi/2,pi,NA_real_))$select(pl$col(\"a\")$cos())</code></li> <li>Run <code>devtools::test()</code>. See below for how to set up your development   environment correctly.</li> </ul> <p>Note that PRs to polars will be automatically be built and tested on all platforms as part of our GitHub Actions workflow. A more detailed description of the development environment and workflow for local builds is provided below.</p>"},{"location":"#development-environment-and-workflow","title":"Development environment and workflow","text":""},{"location":"#system-dependencies","title":"System dependencies","text":"<p>Rust toolchain</p> <ul> <li>Install <code>rustup</code>, the cross-platform Rust   installer. Then:</li> </ul> <pre><code>rustup toolchain install nightly\nrustup default nightly\n</code></pre> <ul> <li> <p>Windows: Make sure the latest version of   Rtools is installed   and on your PATH.</p> </li> <li> <p>MacOS: Make sure <code>Xcode</code>   is installed.</p> </li> <li> <p>Install CMake and added it to your PATH.</p> </li> </ul>"},{"location":"#development-workflow","title":"Development workflow","text":"<p>Assuming the system dependencies have been met (above), the typical polars development workflow is as follows:</p> <p>Step 1: Fork the polars repo on GitHub and then clone it locally.</p> <pre><code>git clone git@github.com:&lt;YOUR-GITHUB-ACCOUNT&gt;/r-polars.git\ncd r-polars\n</code></pre> <p>Step 2: Build the package and install the suggested package dependencies.</p> <ul> <li>Option A: Using devtools.</li> </ul> <pre><code>Rscript -e 'devtools::install(pkg = \".\", dependencies = TRUE)' </code></pre> <ul> <li>Option B: Using renv.</li> </ul> <pre><code># Rscript -e 'install.packages(\"renv\")'\nRscript -e 'renv::activate(); renv::restore()'\n</code></pre> <p>Step 3: Make your proposed changes to the R and/or Rust code. Don\u2019t forget to run:</p> <pre><code>rextendr::document() # compile Rust code + update wrappers &amp; docs\ndevtools::test()     # run all unit tests\n</code></pre> <p>Step 4 (optional): Build the package locally.</p> <pre><code>R CMD INSTALL --no-multiarch --with-keep.source polars\n</code></pre> <p>Step 5: Commit your changes and submit a PR to the main polars repo.</p> <ul> <li>As aside, notice that <code>./renv.lock</code> sets all R packages during the   server build.</li> </ul> <p>Tip: To speed up the local R CMD check, run the following:</p> <pre><code>devtools::check(\nenv_vars = list(RPOLARS_RUST_SOURCE=\"/YOUR/OWN/ABSOLUTE/PATH/r-polars/src/rust\"),\ncheck_dir = \"./check/\"\n)\nsource(\"./inst/misc/filter_rcmdcheck.R\")\nSys.sleep(5)\nunlink(\"check\",recursive = TRUE, force =TRUE)\n</code></pre> <ul> <li>The <code>RPOLARS_RUST_SOURCE</code> environment variable allows polars to   recover the Cargo cache even if source files have been moved. Replace   with your own absolute path to your local clone!</li> <li><code>filter_rcmdcheck.R</code> removes known warnings from final check report.</li> <li><code>unlink(\"check\")</code> cleans up.</li> </ul>"},{"location":"LICENSE/","title":"MIT License","text":"<p>Copyright (c) 2023 rpolars authors</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"NEWS/","title":"Changelog","text":""},{"location":"NEWS/#polars-development-version","title":"polars (development version)","text":""},{"location":"NEWS/#polars-v050","title":"polars v0.5.0","text":""},{"location":"NEWS/#breaking-change","title":"BREAKING CHANGE","text":"<ul> <li>The package name was changed from <code>rpolars</code> to <code>polars</code>. (#84)</li> </ul>"},{"location":"NEWS/#whats-changed","title":"What's changed","text":"<ul> <li>Several new methods for DataFrame, LazyFrame \\&amp; GroupBy translated (#103, #105 @vincentarelbundock)</li> <li>Doc fixes (#102, #109 @etiennebacher)</li> <li>Experimental opt-in auto completion (#96 @sorhawell)</li> </ul>"},{"location":"NEWS/#new-contributors","title":"New Contributors","text":"<ul> <li>@etiennebacher made their first contribution in #102</li> <li>@vincentarelbundock made their first contribution in #103</li> </ul> <p>Release date: 2023-04-16. Full changelog: v0.4.6...v0.5.0</p>"},{"location":"NEWS/#rpolars-v047","title":"rpolars v0.4.7","text":""},{"location":"NEWS/#whats-changed_1","title":"What's changed","text":"<ul> <li>Revamped docs that includes a new introductory vignette (#81 @grantmcdermott)</li> <li>Misc documentation improvements</li> </ul>"},{"location":"NEWS/#rpolars-v046","title":"rpolars v0.4.6","text":"<p>Release date: 2023-03-13. Full changelog: v0.4.5...v0.4.6</p>"},{"location":"NEWS/#whats-new","title":"What's new","text":"<ul> <li>Almost all Expr translated, only missing 'binary'-expr now. #52 #53</li> <li>Run polars queries in detached background threads, no need for any parallel libraries or cluster config #56 #59</li> <li>Full support for when-then-otherwise-syntax #65</li> <li>rpolars now uses bit64 integer64 vectors as input/output for i64 vectors: #68 #69</li> <li>use <code>pl$from_arrow</code> to zero-copy(almost) import <code>Table</code>/<code>Array</code> from r-arrow. #67</li> <li>Support inter process connections with <code>scan_ipc</code></li> <li>Implement <code>scan_ipc</code> by @Sicheng-Pan in #63</li> <li>'Backend' improvements</li> <li>(prepare support for aarch64-linux) Touch libgcc_eh.a by @yutannihilation in #49</li> <li>Use py-polars rust file structure (to help devs) by @sorhawell in #55</li> <li>Refactor Makefiles by @eitsupi in #58</li> <li>Build rpolars from Nix by @Sicheng-Pan in #54</li> <li><code>extendr_api</code> 0.4 by @sorhawell in #6</li> <li>Add r-universe URL by @jeroen in #71</li> <li>chore: install nanoarrow from cran by @eitsupi in #72</li> <li>chore: install nanoarrow from cran (#72) by @sorhawell in #73</li> <li>Fix pdf latex errors by @sorhawell in #74</li> <li>re-enable devel test, pak R-devel issue went away by @sorhawell in #75</li> <li>DO NOT MERGE: tracking hello_r_universe branch by @eitsupi in #38</li> <li>revert to nightly by @sorhawell in #78</li> </ul>"},{"location":"NEWS/#new-contributors_1","title":"New Contributors","text":"<ul> <li>@Sicheng-Pan made their first contribution in #54</li> <li>@jeroen made their first contribution in #71</li> </ul>"},{"location":"NEWS/#rpolars-v045","title":"rpolars v0.4.5","text":"<p>Release date: 2023-02-21. Full Changelog: v0.4.3...v0.4.5</p>"},{"location":"NEWS/#whats-changed_2","title":"What's Changed","text":"<ul> <li>bump rust polars to latest rust-polars and fix all errors by @sorhawell in #42</li> <li>Customize extendr to better support cross Rust-R/R-Rust error handling</li> <li>bump extendr_api by @sorhawell in #44</li> <li>Str even more by @sorhawell in #47</li> <li>rpolars is now available for install from rpolars.r-universe.dev @eitsupi</li> <li>advertise R-universe by @sorhawell in #39</li> <li>Includes reasonably easy pre-compiled installation for arm64-MacBooks</li> <li>All string Expressions available</li> <li>Expr str strptime by @sorhawell in #40</li> <li>rust_result tests + fixes by @sorhawell in #41</li> <li>Str continued by @sorhawell in #43</li> <li>Str even more by @sorhawell in #47</li> <li>Starting to roll out new error-handling and type-conversions between R and rust.</li> <li>Precise source of error should be very clear even in a long method-chain e.g.   <pre><code>pl$lit(\"hey-you-there\")$str$splitn(\"-\",-3)$alias(\"struct_of_words\")$to_r()\n&gt; Error: in str$splitn the arg [n] the value -3 cannot be less than zero\nwhen calling :\npl$lit(\"hey-you-there\")$str$splitn(\"-\", -3)\n</code></pre></li> <li>Misc</li> <li>Clippy + tiny optimization by @sorhawell in #45</li> <li>Tidying by @sorhawell in #37</li> </ul>"},{"location":"NEWS/#rpolars-v043","title":"rpolars v0.4.3","text":"<p>Release date: 2023-02-01. Full Changelog: v0.4.2...v0.4.3</p>"},{"location":"NEWS/#whats-changed_3","title":"What's Changed","text":"<ul> <li>All DateTime expresssions implemented + update rust-polars to latest commit.</li> <li>Arr str by @sorhawell in #32</li> <li>Datetime continued by @sorhawell in #33</li> <li>Datatime remaining tests + tidy util functions by @sorhawell in #36</li> </ul>"},{"location":"NEWS/#developer-changes","title":"Developer changes","text":"<ul> <li>Refactoring GitHub Actions workflows by @eitsupi in #24</li> <li>Fix cache and check scan by @sorhawell in #30</li> </ul>"},{"location":"NEWS/#rpolars-v042","title":"rpolars v0.4.2","text":"<p>Release date: 2023-01-17. Full Changelog: V0.4.1...v0.4.2</p>"},{"location":"NEWS/#whats-changed_4","title":"What's Changed","text":"<ul> <li>fix minor Series syntax issue #8 @sorhawell in #22</li> <li>nanoarrow followup: docs + adjust test by @sorhawell in #21</li> <li>Add R CMD check workflow by @eitsupi in #23</li> <li><code>usethis::use_mit_license()</code> by @yutannihilation in #27</li> <li>Fix check errors by @sorhawell in #26</li> </ul>"},{"location":"NEWS/#new-contributors_2","title":"New Contributors","text":"<ul> <li>@eitsupi made their first contribution in #23</li> <li>@yutannihilation made their first contribution in #27</li> </ul>"},{"location":"NEWS/#rpolars-v041","title":"rpolars v0.4.1","text":"<p>Release date: 2023-01-12. Full Changelog: v0.4.0...V0.4.1</p>"},{"location":"NEWS/#whats-changed_5","title":"What's Changed","text":"<ul> <li>Export ArrowArrayStream from polars data frame by @paleolimbot in #5</li> <li>Minor arithmetics syntax improvement @sorhawell in #20</li> </ul>"},{"location":"NEWS/#dev-env","title":"Dev env","text":"<ul> <li>Renv is deactivated as default. Renv.lock still defines package stack on build server @sorhawell in #19</li> </ul>"},{"location":"NEWS/#minor-stuff","title":"Minor stuff","text":"<ul> <li>Improve docs by @sorhawell in #16</li> <li>Update rust polars to +26.1 by @sorhawell in #18</li> </ul>"},{"location":"NEWS/#new-contributors_3","title":"New Contributors","text":"<ul> <li>@paleolimbot made their first contribution in #5</li> </ul>"},{"location":"NEWS/#rpolars-v040","title":"rpolars v0.4.0","text":"<p>Release date: 2023-01-11. Full Changelog: v0.3.1...v0.4.0</p>"},{"location":"NEWS/#breaking-changes","title":"Breaking changes","text":"<ul> <li>Class label \"DataType\" is now called \"RPolarsDataType\". Syntax wise 'DataType' can still be used, e.g. <code>.pr$DataType$</code></li> <li>try fix name space collision with arrow by @sorhawell in #15</li> </ul>"},{"location":"NEWS/#new-features","title":"New features","text":"<ul> <li>all list Expr$arr$list functions have been translated:</li> <li>Expr list 2.0 by @sorhawell in #10</li> <li>Expr list 3.0 by @sorhawell in #12</li> </ul>"},{"location":"NEWS/#dev-environment","title":"Dev environment","text":"<ul> <li>update rextendr by @sorhawell in #13</li> </ul>"},{"location":"NEWS/#rpolars-v031","title":"rpolars v0.3.1","text":"<p>Release date: 2023-01-07. Full Changelog: v0.3.0...v0.3.1</p>"},{"location":"NEWS/#whats-changed_6","title":"What's Changed","text":"<ul> <li>drop github action upload pre-release of PR's by @sorhawell in #7</li> <li>Fix readme typo by @erjanmx in #6</li> <li>Expr arr list functions + rework r_to_series by @sorhawell in #2</li> </ul>"},{"location":"NEWS/#new-contributors_4","title":"New Contributors","text":"<ul> <li>@erjanmx made their first contribution in #6</li> </ul>"},{"location":"NEWS/#rpolars-v030","title":"rpolars v0.3.0","text":"<p>Release date: 2022-12-31. Full Changelog: v0.2.1...v0.3.0</p>"},{"location":"NEWS/#whats-changed_7","title":"What's Changed","text":"<ul> <li>use jemalloc(linux) else mimallac as py-polars by @sorhawell in #1</li> <li>Bump rust polars 26.1 by @sorhawell in #3</li> <li>Expr_interpolate now has two methods, linear, nearest</li> <li>Expr_quantile also takes quantile value as an expression</li> <li>map_alias improved error handling</li> </ul>"},{"location":"NEWS/#rpolars-v021","title":"rpolars v0.2.1","text":"<p>Release date: 2022-12-27</p> <ul> <li>rpolars is now hosted at https://github.com/pola-rs/r-polars. Happy to be here.</li> </ul>"},{"location":"articles/polars/","title":"An Introduction to Polars from R","text":""},{"location":"articles/polars/#what-is-polars","title":"What is Polars?","text":"<p>Polars is a lightning fast Data Frame library. Its embarrassingly parallel execution, cache efficient algorithms and expressive API makes it perfect for efficient data wrangling, data pipelines, snappy APIs and so much more. Polars also supports \u201cstreaming mode\u201d for out-of-memory operations. This allows users to analyze datasets many times larger than RAM.</p> <p>The underlying computation engine is written in Rust and is built on the Apache Arrow columnar memory format. It can be used in Rust or via Python bindings. The polars R-package provides equivalent bindings from R. Within R, python and rust each polars package is just called polars. The implemention polars in the different languages can be called rust-polars, py-polars, r-polars, nodejs-polars\u2026</p> <p>polars users can expect orders of magnitude(s) improvement compared to dplyr for simple transformations on datasets &gt;500Mb. The automatic Polars optimization framework means that that this speed boost can be even greater for complex queries that chain together many operations. Performance is similar to that of data.table, although polars supports additional functionality via its relationship to the Apache Arrow memory model. For example, it can scan multiple Parquet files and datasets and selectively import random subsets without having to read all of the data.</p> <p>Polars syntax is similar to that of Spark, but the workflow is column-oriented rather than row-oriented. Since R is itself a column-oriented language, this should immediately feel familiar to most R users. Like Spark and modern SQL variants, Polars optimizes queries for memory consumption and speed, so you don\u2019t have to. However, unlike Spark, Polars is natively multithreaded instead of multinoded. This makes (r)polars much simpler to install and can be used as one would any other R package.</p> <p>This R port relies on the excellent extendr package, which is the R equivalent to pyo3+maturin. extendr is very convenient for calling Rust from R, and vice versa, and is what we use to build the polars package. Once built, however, polars has no other dependencies other than R itself. This makes it very fast and lightweight to install, and so polars can immediately be used to tackle your big (or small!) data wrangling tasks.</p>"},{"location":"articles/polars/#documentation-and-tutorials","title":"Documentation and tutorials","text":"<p>Users can find detailed documentation for all objects, functions, and methods on the Reference page of this website. This documentation can also be accessed from the R console using the typical <code>?</code> syntax. For example, we will later use the <code>DataFrame()</code> constructor function and apply the <code>groupby()</code> method to a <code>DataFrame</code> object. The documentation for these can be accessed by typing these commands:</p> <pre><code>?DataFrame\n?DataFrame_groupby\n</code></pre> <p>The Polars book offers a great introduction to the Polars data frame library, with a very large number of examples in Python and Rust. The syntax and expressions in the <code>polars</code> package for R are (deliberately) as close to the Python implementation as possible, so you can always refer to the polars book for more ideas. Just remember to switch out any \u201c.\u201d (Python) for a \u201c\\$\u201d (R) when chaining methods. For example, here are two equivalent lines of code for some hypothetical dataset.</p> <pre><code># Python\ndf.groupby(\"id\").mean()\n</code></pre> <pre><code># R\ndf$groupby(\"id\")$mean()\n</code></pre>"},{"location":"articles/polars/#series-and-dataframes","title":"<code>Series</code> and <code>DataFrames</code>","text":"<p>In <code>polars</code> objects of class <code>Series</code> are analogous to R vectors. Objects of class <code>DataFrame</code> are analogous to R data frames. To convert R vectors and data frames to Polars <code>Series</code> and <code>DataFrames</code>, we load the library and use constructor functions with the <code>pl$</code> prefix. This prefix is very important, as most of the <code>polars</code> functions are made available via <code>pl$</code>:</p> <pre><code>library(polars)\nser = pl$Series((1:5) * 5)\nser\n#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  5.0\n#&gt;  10.0\n#&gt;  15.0\n#&gt;  20.0\n#&gt;  25.0\n#&gt; ]\ndat = pl$DataFrame(mtcars)\ndat\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 ...  \u2506 ... \u2506 ...   \u2506 ...   \u2506 ... \u2506 ... \u2506 ... \u2506 ...  \u2506 ...  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Both Polars and R are column-orientated. So you can think of <code>DataFrames</code> (data.frames) as being made up of a collection of <code>Series</code> (vectors). In fact, you can create a new Polars <code>DataFrame</code> as a mix of <code>Series</code> and/or regular R vectors.</p> <pre><code>pl$DataFrame(\na = pl$Series((1:5) * 5),\nb = pl$Series(letters[1:5]),\nc = pl$Series(c(1, 2, 3, 4, 5)),\nd = c(15, 14, 13, 12, 11),\nc(5, 4, 3, 2, 1),\n1:5\n)\n#&gt; shape: (5, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b   \u2506 c   \u2506 d    \u2506 new_column \u2506 new_column_1 \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 --- \u2506 ---  \u2506 ---        \u2506 ---          \u2502\n#&gt; \u2502 f64  \u2506 str \u2506 f64 \u2506 f64  \u2506 f64        \u2506 i32          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.0  \u2506 a   \u2506 1.0 \u2506 15.0 \u2506 5.0        \u2506 1            \u2502\n#&gt; \u2502 10.0 \u2506 b   \u2506 2.0 \u2506 14.0 \u2506 4.0        \u2506 2            \u2502\n#&gt; \u2502 15.0 \u2506 c   \u2506 3.0 \u2506 13.0 \u2506 3.0        \u2506 3            \u2502\n#&gt; \u2502 20.0 \u2506 d   \u2506 4.0 \u2506 12.0 \u2506 2.0        \u2506 4            \u2502\n#&gt; \u2502 25.0 \u2506 e   \u2506 5.0 \u2506 11.0 \u2506 1.0        \u2506 5            \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p><code>Series</code> and <code>DataFrame</code> can be operated on using many standard R functions. For example:</p> <pre><code># Series\nlength(ser)\n#&gt; [1] 5\nmax(ser)\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  25.0\n#&gt; ]\n# DataFrame\ndat[c(1:3, 12), c(\"mpg\", \"hp\")]\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 hp    \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2502\n#&gt; \u2502 f64  \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 110.0 \u2502\n#&gt; \u2502 21.0 \u2506 110.0 \u2502\n#&gt; \u2502 22.8 \u2506 93.0  \u2502\n#&gt; \u2502 16.4 \u2506 180.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nnames(dat)\n#&gt;  [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\" \"carb\"\ndim(dat)\n#&gt; [1] 32 11\nhead(dat, n = 2)\n#&gt; shape: (2, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"articles/polars/#methods-and-pipelines","title":"Methods and pipelines","text":"<p>Although some simple R functions work out of the box on polars objects, the full power of Polars is realized via methods. Polars methods are accessed using the <code>$</code> syntax. For example, to convert Polars <code>Series</code> and <code>DataFrames</code> back to standard R objects, we use the <code>$to_vector()</code> and <code>$to_data_frame()</code> methods:</p> <pre><code>ser$to_vector()\n#&gt; [1]  5 10 15 20 25\n</code></pre> <p>There are numerous methods designed to accomplish various tasks:</p> <pre><code>ser$max()\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  25.0\n#&gt; ]\ndat$slice(offset = 2, length = 3)  #&gt; shape: (3, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>One advantage of using methods is that many more operations are possible on Polars objects using methods than through base R functions.</p> <p>A second advantage is Methods Chaining, a core part of the Polars workflow. If you are coming from one of the other popular data wrangling libraries in R, then you probably already have an innate sense of what this means. For instance,</p> <ul> <li>In dplyr we use a pipe operator,   e.g.\u00a0<code>dat |&gt; filter(...) |&gt; select(...)</code></li> <li>In data.table we use its indexing syntax, e.g.\u00a0<code>DT[i, j, by][...]</code></li> <li>Etc.</li> </ul> <p>In polars our method chaining syntax takes the form <code>object$m1()$m2()</code>, where <code>object</code> is our data object, and <code>m1()</code> and <code>m2()</code> are appropriate methods, like subsetting or aggregation expressions.</p> <p>This might all seem a little abstract, so let\u2019s walk through some quick examples to help make things concrete. We use the <code>mtcars</code> dataset that we coerced to a <code>DataFrame</code> in introduction.[^1] We use the <code>$max</code> method to compute the maximum value in each column:</p> <pre><code>dat$max()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 33.9 \u2506 8.0 \u2506 472.0 \u2506 335.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Now, we first use the <code>$tail</code> method to select the last 10 rows of the dataset, and then use the <code>$max</code> method to compute the maximums in those 10 rows:</p> <pre><code>dat$tail(10)$max()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 30.4 \u2506 8.0 \u2506 400.0 \u2506 335.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Finally, we convert the result to a standard R data frame:</p> <pre><code>dat$tail(10)$max()$to_data_frame()\n#&gt;    mpg cyl disp  hp drat    wt qsec vs am gear carb\n#&gt; 1 30.4   8  400 335 4.43 3.845 18.9  1  1    5    8\n</code></pre> <p>Below, we will introduce several other methods, including <code>$select</code>, <code>$filter</code>, and <code>$groupby</code> which allow us to do powerful data manipulations easily. To give you a small taste, we now take group-wise means:</p> <pre><code>dat$groupby(\"cyl\")$mean()\n#&gt; shape: (3, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 mpg       \u2506 disp       \u2506 hp         \u2506 ... \u2506 vs       \u2506 am       \u2506 gear     \u2506 carb     \u2502\n#&gt; \u2502 --- \u2506 ---       \u2506 ---        \u2506 ---        \u2506     \u2506 ---      \u2506 ---      \u2506 ---      \u2506 ---      \u2502\n#&gt; \u2502 f64 \u2506 f64       \u2506 f64        \u2506 f64        \u2506     \u2506 f64      \u2506 f64      \u2506 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 8.0 \u2506 15.1      \u2506 353.1      \u2506 209.214286 \u2506 ... \u2506 0.0      \u2506 0.142857 \u2506 3.285714 \u2506 3.5      \u2502\n#&gt; \u2502 6.0 \u2506 19.742857 \u2506 183.314286 \u2506 122.285714 \u2506 ... \u2506 0.571429 \u2506 0.428571 \u2506 3.857143 \u2506 3.428571 \u2502\n#&gt; \u2502 4.0 \u2506 26.663636 \u2506 105.136364 \u2506 82.636364  \u2506 ... \u2506 0.909091 \u2506 0.727273 \u2506 4.090909 \u2506 1.545455 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"articles/polars/#select-columns-and-filter-rows","title":"<code>select</code> columns and <code>filter</code> rows","text":"<p>We can now start chaining together various methods (expressions) to manipulate it in different ways. For example, we can subset the data by rows (<code>filter()</code>) and also columns (<code>select()</code>):</p> <pre><code>dat$filter(pl$col(\"cyl\") == 6)\n#&gt; shape: (7, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.1 \u2506 6.0 \u2506 225.0 \u2506 105.0 \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 19.2 \u2506 6.0 \u2506 167.6 \u2506 123.0 \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 17.8 \u2506 6.0 \u2506 167.6 \u2506 123.0 \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndat$filter(pl$col(\"cyl\") == 6 &amp; pl$col(\"am\") == 1)\n#&gt; shape: (3, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndat$select(pl$col(c(\"mpg\", \"hp\")))\n#&gt; shape: (32, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 hp    \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2502\n#&gt; \u2502 f64  \u2506 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 110.0 \u2502\n#&gt; \u2502 21.0 \u2506 110.0 \u2502\n#&gt; \u2502 22.8 \u2506 93.0  \u2502\n#&gt; \u2502 21.4 \u2506 110.0 \u2502\n#&gt; \u2502 ...  \u2506 ...   \u2502\n#&gt; \u2502 15.8 \u2506 264.0 \u2502\n#&gt; \u2502 19.7 \u2506 175.0 \u2502\n#&gt; \u2502 15.0 \u2506 335.0 \u2502\n#&gt; \u2502 21.4 \u2506 109.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Of course, we can chain those methods to create a pipeline:</p> <pre><code>dat$filter(\npl$col(\"cyl\") == 6\n)$select(\npl$col(c(\"mpg\", \"hp\", \"cyl\"))\n)\n#&gt; shape: (7, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 hp    \u2506 cyl \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 --- \u2502\n#&gt; \u2502 f64  \u2506 f64   \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 110.0 \u2506 6.0 \u2502\n#&gt; \u2502 21.0 \u2506 110.0 \u2506 6.0 \u2502\n#&gt; \u2502 21.4 \u2506 110.0 \u2506 6.0 \u2502\n#&gt; \u2502 18.1 \u2506 105.0 \u2506 6.0 \u2502\n#&gt; \u2502 19.2 \u2506 123.0 \u2506 6.0 \u2502\n#&gt; \u2502 17.8 \u2506 123.0 \u2506 6.0 \u2502\n#&gt; \u2502 19.7 \u2506 175.0 \u2506 6.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"articles/polars/#aggregations-and-modifications","title":"Aggregations and modifications","text":"<p>The <code>select()</code> method that we introduced above also supports data modification, so you can simultaneously transform it while you are subsetting. However, the result will exclude any columns that weren\u2019t specified as part of the expression. To modify or add some columns\u2014whilst preserving all others in the dataset\u2014it is therefore better to use the <code>with_columns()</code> method. This next code chunk is equivalent to <code>mtcars |&gt; dplyr::mutate(sum_mpg=sum(mpg), sum_hp=sum(hp), .by = cyl)</code>.</p> <pre><code># Add the grouped sums of some selected columns.\ndat$with_columns(\npl$col(\"mpg\")$sum()$over(\"cyl\")$alias(\"sum_mpg\"),\npl$col(\"hp\")$sum()$over(\"cyl\")$alias(\"sum_hp\")\n)\n#&gt; shape: (32, 13)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 gear \u2506 carb \u2506 sum_mpg \u2506 sum_hp \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 ---  \u2506 ---  \u2506 ---     \u2506 ---    \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64  \u2506 f64  \u2506 f64     \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 4.0  \u2506 4.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 4.0  \u2506 4.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 ... \u2506 4.0  \u2506 1.0  \u2506 293.3   \u2506 909.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 ... \u2506 3.0  \u2506 1.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 ...  \u2506 ... \u2506 ...   \u2506 ...   \u2506 ... \u2506 ...  \u2506 ...  \u2506 ...     \u2506 ...    \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 ... \u2506 5.0  \u2506 4.0  \u2506 211.4   \u2506 2929.0 \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 ... \u2506 5.0  \u2506 6.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 ... \u2506 5.0  \u2506 8.0  \u2506 211.4   \u2506 2929.0 \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 ... \u2506 4.0  \u2506 2.0  \u2506 293.3   \u2506 909.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>For what it\u2019s worth, the previous query could have been written more concisely as:</p> <pre><code>dat$with_columns(\npl$col(c(\"mpg\", \"hp\"))$sum()$over(\"cyl\")$prefix(\"sum_\")\n)\n#&gt; shape: (32, 13)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 gear \u2506 carb \u2506 sum_mpg \u2506 sum_hp \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 ---  \u2506 ---  \u2506 ---     \u2506 ---    \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64  \u2506 f64  \u2506 f64     \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 4.0  \u2506 4.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 4.0  \u2506 4.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 ... \u2506 4.0  \u2506 1.0  \u2506 293.3   \u2506 909.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 ... \u2506 3.0  \u2506 1.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 ...  \u2506 ... \u2506 ...   \u2506 ...   \u2506 ... \u2506 ...  \u2506 ...  \u2506 ...     \u2506 ...    \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 ... \u2506 5.0  \u2506 4.0  \u2506 211.4   \u2506 2929.0 \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 ... \u2506 5.0  \u2506 6.0  \u2506 138.2   \u2506 856.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 ... \u2506 5.0  \u2506 8.0  \u2506 211.4   \u2506 2929.0 \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 ... \u2506 4.0  \u2506 2.0  \u2506 293.3   \u2506 909.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Similarly, here\u2019s how we could have aggregated (i.e., collapsed) the dataset by groups instead of modifying them. We need simply invoke the <code>groupby()</code> and <code>agg()</code> methods.</p> <pre><code>dat$groupby(\n\"cyl\",\nmaintain_order = TRUE\n)$agg(\npl$col(c(\"mpg\", \"hp\"))$sum()\n)\n#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 mpg   \u2506 hp     \u2502\n#&gt; \u2502 --- \u2506 ---   \u2506 ---    \u2502\n#&gt; \u2502 f64 \u2506 f64   \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0 \u2506 138.2 \u2506 856.0  \u2502\n#&gt; \u2502 4.0 \u2506 293.3 \u2506 909.0  \u2502\n#&gt; \u2502 8.0 \u2506 211.4 \u2506 2929.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>(arg <code>maintain_order = TRUE</code> is optional, since polars doesn\u2019t sort the results of grouped operations by default. This is similar to what data.table does and is also true for newer versions of dplyr.)</p> <p>The same principles of method chaining can be combined very flexibly to group by multiple variables and aggregation types.</p> <pre><code>dat$groupby(\n\"cyl\",\npl$col(\"am\")$cast(pl$Boolean)$alias(\"manual\")\n)$agg(\npl$col(\"mpg\")$mean()$alias(\"mean_mpg\"),\npl$col(\"hp\")$median()$alias(\"med_hp\")\n)\n#&gt; shape: (6, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 manual \u2506 mean_mpg  \u2506 med_hp \u2502\n#&gt; \u2502 --- \u2506 ---    \u2506 ---       \u2506 ---    \u2502\n#&gt; \u2502 f64 \u2506 bool   \u2506 f64       \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0 \u2506 true   \u2506 20.566667 \u2506 110.0  \u2502\n#&gt; \u2502 4.0 \u2506 true   \u2506 28.075    \u2506 78.5   \u2502\n#&gt; \u2502 8.0 \u2506 true   \u2506 15.4      \u2506 299.5  \u2502\n#&gt; \u2502 6.0 \u2506 false  \u2506 19.125    \u2506 116.5  \u2502\n#&gt; \u2502 8.0 \u2506 false  \u2506 15.05     \u2506 180.0  \u2502\n#&gt; \u2502 4.0 \u2506 false  \u2506 22.9      \u2506 95.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Note that we used the <code>cast</code> method to convert the data type of the <code>am</code> column. See the section below for more details on data types.</p>"},{"location":"articles/polars/#join","title":"Join","text":"<p>As a final example of how polars can be used for standard data wrangling tasks, let\u2019s implement a (left) join. For this example, we\u2019ll borrow some datasets from the nycflights13 package.</p> <pre><code>data(\"flights\", \"planes\", package = \"nycflights13\")\nflights = pl$DataFrame(flights)\nplanes = pl$DataFrame(planes)\nflights$join(\nplanes, on = \"tailnum\", how = \"left\"\n)\n#&gt; shape: (336776, 27)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 year \u2506 month \u2506 day \u2506 dep_time \u2506 ... \u2506 engines \u2506 seats \u2506 speed \u2506 engine    \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 --- \u2506 ---      \u2506     \u2506 ---     \u2506 ---   \u2506 ---   \u2506 ---       \u2502\n#&gt; \u2502 i32  \u2506 i32   \u2506 i32 \u2506 i32      \u2506     \u2506 i32     \u2506 i32   \u2506 i32   \u2506 str       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2013 \u2506 1     \u2506 1   \u2506 517      \u2506 ... \u2506 2       \u2506 149   \u2506 null  \u2506 Turbo-fan \u2502\n#&gt; \u2502 2013 \u2506 1     \u2506 1   \u2506 533      \u2506 ... \u2506 2       \u2506 149   \u2506 null  \u2506 Turbo-fan \u2502\n#&gt; \u2502 2013 \u2506 1     \u2506 1   \u2506 542      \u2506 ... \u2506 2       \u2506 178   \u2506 null  \u2506 Turbo-fan \u2502\n#&gt; \u2502 2013 \u2506 1     \u2506 1   \u2506 544      \u2506 ... \u2506 2       \u2506 200   \u2506 null  \u2506 Turbo-fan \u2502\n#&gt; \u2502 ...  \u2506 ...   \u2506 ... \u2506 ...      \u2506 ... \u2506 ...     \u2506 ...   \u2506 ...   \u2506 ...       \u2502\n#&gt; \u2502 2013 \u2506 9     \u2506 30  \u2506 null     \u2506 ... \u2506 null    \u2506 null  \u2506 null  \u2506 null      \u2502\n#&gt; \u2502 2013 \u2506 9     \u2506 30  \u2506 null     \u2506 ... \u2506 null    \u2506 null  \u2506 null  \u2506 null      \u2502\n#&gt; \u2502 2013 \u2506 9     \u2506 30  \u2506 null     \u2506 ... \u2506 null    \u2506 null  \u2506 null  \u2506 null      \u2502\n#&gt; \u2502 2013 \u2506 9     \u2506 30  \u2506 null     \u2506 ... \u2506 null    \u2506 null  \u2506 null  \u2506 null      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>More information on the polars joining method can be found in the reference manual.</p> <p>The package supports many other data manipulation operations, which we won\u2019t cover here. Hopefully, you will already have a sense of the key syntax features. We now turn to another core idea of the Polars ecosystem: lazy execution.</p>"},{"location":"articles/polars/#lazy-execution","title":"Lazy execution","text":"<p>While the \u201ceager\u201d execution engine of polars works perfectly well\u2014as evidenced by all of the previous examples\u2014to get the most out of the package you need to go lazy. Lazy execution enables several benefits, but the most important is that it improves performance. Delaying execution until the last possible moment allows Polars to apply automatic optimization to every query. Let\u2019s take a quick look.</p> <p>To create a so-called \u201cLazyFrame\u201d from an existing object in memory, we can invoke the <code>lazy()</code> constructor.</p> <pre><code>ldat = dat$lazy()\nldat\n#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt;   DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n</code></pre> <p>Now consider what happens when we run our subsetting query from earlier on this LazyFrame.</p> <pre><code>subset_query = ldat$filter(\npl$col(\"cyl\")==6\n)$select(\npl$col(c(\"mpg\", \"hp\", \"cyl\"))\n)\nsubset_query\n#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt;    SELECT [col(\"mpg\"), col(\"hp\"), col(\"cyl\")] FROM\n#&gt;     FILTER [(col(\"cyl\")) == (6f64)] FROM\n#&gt;       DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n</code></pre> <p>Right now we only have a tree of instructions. But underneath the hood, Polars has already worked out a more optimized version of the query. We can view this optimized plan this by requesting it.</p> <pre><code>subset_query$describe_optimized_plan()\n#&gt;   FAST_PROJECT: [mpg, hp, cyl]\n#&gt;     DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT 3/11 COLUMNS; SELECTION: \"[(col(\\\"cyl\\\")) == (6f64)]\"\n</code></pre> <p>Here we see a simple, but surprisingly effective component in query optimization: projection. Changing the order in which our subsetting operations occurs\u2014in this case, subsetting on columns first\u2014reduces the memory overhead of the overall query and leads to a downstream speedup. Of course, you would hardly notice a difference for this small dataset. But the same principles carry over to much bigger datasets and more complex queries.</p> <p>To actually execute the plan, we just need to invoke the <code>collect()</code> method. This should feel very familiar if you have previously used other lazy execution engines like those provided by arrow or dbplyr.</p> <pre><code>subset_query$collect()\n#&gt; shape: (7, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 hp    \u2506 cyl \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 --- \u2502\n#&gt; \u2502 f64  \u2506 f64   \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 110.0 \u2506 6.0 \u2502\n#&gt; \u2502 21.0 \u2506 110.0 \u2506 6.0 \u2502\n#&gt; \u2502 21.4 \u2506 110.0 \u2506 6.0 \u2502\n#&gt; \u2502 18.1 \u2506 105.0 \u2506 6.0 \u2502\n#&gt; \u2502 19.2 \u2506 123.0 \u2506 6.0 \u2502\n#&gt; \u2502 17.8 \u2506 123.0 \u2506 6.0 \u2502\n#&gt; \u2502 19.7 \u2506 175.0 \u2506 6.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"articles/polars/#data-import","title":"Data import","text":"<p>polars supports data import of both CSV and Parquet files formats. Here we demonstrate using the <code>airquality</code> dataset that also comes bundled with base R.</p> <pre><code>write.csv(airquality, \"airquality.csv\")\npl$read_csv(\"airquality.csv\")\n#&gt; shape: (153, 7)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2506 Ozone \u2506 Solar.R \u2506 Wind \u2506 Temp \u2506 Month \u2506 Day \u2502\n#&gt; \u2502 --- \u2506 ---   \u2506 ---     \u2506 ---  \u2506 ---  \u2506 ---   \u2506 --- \u2502\n#&gt; \u2502 i64 \u2506 str   \u2506 str     \u2506 f64  \u2506 i64  \u2506 i64   \u2506 i64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 41    \u2506 190     \u2506 7.4  \u2506 67   \u2506 5     \u2506 1   \u2502\n#&gt; \u2502 2   \u2506 36    \u2506 118     \u2506 8.0  \u2506 72   \u2506 5     \u2506 2   \u2502\n#&gt; \u2502 3   \u2506 12    \u2506 149     \u2506 12.6 \u2506 74   \u2506 5     \u2506 3   \u2502\n#&gt; \u2502 4   \u2506 18    \u2506 313     \u2506 11.5 \u2506 62   \u2506 5     \u2506 4   \u2502\n#&gt; \u2502 ... \u2506 ...   \u2506 ...     \u2506 ...  \u2506 ...  \u2506 ...   \u2506 ... \u2502\n#&gt; \u2502 150 \u2506 NA    \u2506 145     \u2506 13.2 \u2506 77   \u2506 9     \u2506 27  \u2502\n#&gt; \u2502 151 \u2506 14    \u2506 191     \u2506 14.3 \u2506 75   \u2506 9     \u2506 28  \u2502\n#&gt; \u2502 152 \u2506 18    \u2506 131     \u2506 8.0  \u2506 76   \u2506 9     \u2506 29  \u2502\n#&gt; \u2502 153 \u2506 20    \u2506 223     \u2506 11.5 \u2506 68   \u2506 9     \u2506 30  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Again, however, the package works best if we take the lazy approach.</p> <pre><code>pl$lazy_csv_reader(\"airquality.csv\")\n#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt;   CSV SCAN airquality.csv\n#&gt;   PROJECT */7 COLUMNS\n</code></pre> <p>We could obviously append a set of query operators to the above LazyFrame and then collect the results. However, this workflow is even better suited to Parquet files, since we can leverage their efficient storage format on disk. Let\u2019s see an example.</p> <pre><code>library(arrow)\n#&gt; \n#&gt; Attaching package: 'arrow'\n#&gt; The following object is masked from 'package:testthat':\n#&gt; \n#&gt;     matches\n#&gt; The following object is masked from 'package:utils':\n#&gt; \n#&gt;     timestamp\nwrite_parquet(airquality, \"airquality.parquet\")\n# aq = read_parquet(\"airquality.parquet) # eager version (okay)\naq = scan_parquet(\"airquality.parquet\")  # lazy version (better)\naq$filter(\npl$col(\"Month\") &lt;= 6\n)$groupby(\n\"Month\"\n)$agg(\npl$col(c(\"Ozone\", \"Temp\"))$mean()\n)$collect()\n#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Month \u2506 Ozone     \u2506 Temp      \u2502\n#&gt; \u2502 ---   \u2506 ---       \u2506 ---       \u2502\n#&gt; \u2502 i32   \u2506 f64       \u2506 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5     \u2506 23.615385 \u2506 65.548387 \u2502\n#&gt; \u2502 6     \u2506 29.444444 \u2506 79.1      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Finally, can read/scan multiple files in the same directory through pattern globbing. However, please note that partition-aware scanning is not yet supported out of the box (e.g., Hive-style partitioned datasets). Follow this issue for more details about when this will be resolved.</p> <pre><code>dir.create(\"airquality-ds\")\nwrite_dataset(airquality, \"airquality-ds\", partitioning = \"Month\")\n# Use pattern globbing to scan all parquet files in the folder\naq2 = scan_parquet(\"airquality-ds/*/*.parquet\")\n# Just print the first two rows. But note that the Month column\n# (which we used for partitioning) is missing.\naq2$limit(2)$collect()\n#&gt; shape: (2, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Ozone \u2506 Solar.R \u2506 Wind \u2506 Temp \u2506 Day \u2502\n#&gt; \u2502 ---   \u2506 ---     \u2506 ---  \u2506 ---  \u2506 --- \u2502\n#&gt; \u2502 i32   \u2506 i32     \u2506 f64  \u2506 i32  \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 41    \u2506 190     \u2506 7.4  \u2506 67   \u2506 1   \u2502\n#&gt; \u2502 36    \u2506 118     \u2506 8.0  \u2506 72   \u2506 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Before continuing, don\u2019t forget to clean up by removing the newly created temp files and directory on disk.</p> <pre><code>file.remove(c(\"airquality.csv\", \"airquality.parquet\"))\n#&gt; [1] TRUE TRUE\nunlink(\"airquality-ds\", recursive = TRUE)\n</code></pre>"},{"location":"articles/polars/#execute-r-functions-within-a-polars-query","title":"Execute R functions within a Polars query","text":"<p>It is possible to mix R code with Polars by passing R functions to polars. This can unlock a lot of flexibility, but note that it can inhibit performance. R functions are typically slower, so we recommend using native Polars functions and expressions wherever possible.</p> <pre><code>pl$DataFrame(iris)$select(\npl$col(\"Sepal.Length\")$map(\\(s) { # map with a R function\nx = s$to_vector() # convert from Polars Series to a native R vector\nx[x&gt;=5] = 10\nx[1:10] # if return is R vector, it will automatically be converted to Polars Series again\n})\n)$to_data_frame()\n#&gt;    Sepal.Length\n#&gt; 1          10.0\n#&gt; 2           4.9\n#&gt; 3           4.7\n#&gt; 4           4.6\n#&gt; 5          10.0\n#&gt; 6          10.0\n#&gt; 7           4.6\n#&gt; 8          10.0\n#&gt; 9           4.4\n#&gt; 10          4.9\n</code></pre>"},{"location":"articles/polars/#data-types","title":"Data types","text":"<p>Polars is strongly typed and new types can be created with the <code>dtypes</code> constructor. For example:</p> <pre><code>pl$dtypes$Float64\n#&gt; DataType: Float64\n</code></pre> <p>The full list of valid Polars types can be found by typing <code>pl$dtypes</code> into your R console. These include Boolean, Float32(64), Int32(64), Utf8, Categorical, Date, etc. Note that some type names differ from what they are called in R (e.g., Boolean in Polars is equivalent to <code>logical()</code> in R). This might occasionally require you to look up a specific type. But the good news is that polars generally does a good job of inferring types automatically.</p> <p>[^1]: Similar to how (most) data.table operations are limited to     objects of class <code>data.table</code>, we can only perform polars operations     on objects that have been converted to an appropriate polars     class. Later on, we\u2019ll see how to read data from disk directly in     Polars format.</p>"},{"location":"reference/DataFrame/","title":"Create new DataFrame","text":"<p>Source: R/dataframe__frame.R</p>"},{"location":"reference/DataFrame/#arguments","title":"Arguments","text":"<ul> <li> <p><code>...</code>:  * one data.frame or something that inherits data.frame or DataFrame</p> <ul> <li>one list of mixed vectors and Series of equal length</li> <li>mixed vectors and/or Series of equal length</li> </ul> <p>Columns will be named as of named arguments or alternatively by names of Series or given a placeholder name. - <code>make_names_unique</code>: default TRUE, any duplicated names will be prefixed a running number - <code>parallel</code>: bool default FALSE, experimental multithreaded interpretation of R vectors into a polars DataFrame. This is experimental as multiple threads read from R mem simultaneously. So far no issues parallel read from R has been found.</p> </li> </ul>"},{"location":"reference/DataFrame/#returns","title":"Returns","text":"<p>DataFrame</p> <p>Create new DataFrame</p>"},{"location":"reference/DataFrame/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(\n  a = list(c(1,2,3,4,5)), #NB if first column should be a list, wrap it in a Series\n  b = 1:5,\n  c = letters[1:5],\n  d = list(1:1,1:2,1:3,1:4,1:5)\n) #directly from vectors\n#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a                   \u2506 b   \u2506 c   \u2506 d             \u2502\n#&gt; \u2502 ---                 \u2506 --- \u2506 --- \u2506 ---           \u2502\n#&gt; \u2502 list[f64]           \u2506 i32 \u2506 str \u2506 list[i32]     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1.0, 2.0, ... 5.0] \u2506 1   \u2506 a   \u2506 [1]           \u2502\n#&gt; \u2502 [1.0, 2.0, ... 5.0] \u2506 2   \u2506 b   \u2506 [1, 2]        \u2502\n#&gt; \u2502 [1.0, 2.0, ... 5.0] \u2506 3   \u2506 c   \u2506 [1, 2, 3]     \u2502\n#&gt; \u2502 [1.0, 2.0, ... 5.0] \u2506 4   \u2506 d   \u2506 [1, 2, ... 4] \u2502\n#&gt; \u2502 [1.0, 2.0, ... 5.0] \u2506 5   \u2506 e   \u2506 [1, 2, ... 5] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#from a list of vectors or data.frame\npl$DataFrame(list(\n  a= c(1,2,3,4,5),\n  b=1:5,\n  c = letters[1:5],\n  d = list(1L,1:2,1:3,1:4,1:5)\n))\n#&gt; shape: (5, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2506 d             \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2506 ---           \u2502\n#&gt; \u2502 f64 \u2506 i32 \u2506 str \u2506 list[i32]     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 1   \u2506 a   \u2506 [1]           \u2502\n#&gt; \u2502 2.0 \u2506 2   \u2506 b   \u2506 [1, 2]        \u2502\n#&gt; \u2502 3.0 \u2506 3   \u2506 c   \u2506 [1, 2, 3]     \u2502\n#&gt; \u2502 4.0 \u2506 4   \u2506 d   \u2506 [1, 2, ... 4] \u2502\n#&gt; \u2502 5.0 \u2506 5   \u2506 e   \u2506 [1, 2, ... 5] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataFrame_class/","title":"Inner workings of the DataFrame-class","text":"<p>Source: R/dataframe__frame.R</p> <p>The <code>DataFrame</code>-class is simply two environments of respectively the public and private methods/function calls to the polars rust side. The instanciated <code>DataFrame</code>-object is an <code>externalptr</code> to a lowlevel rust polars DataFrame object. The pointer address is the only statefullness of the DataFrame object on the R side. Any other state resides on the rust side. The S3 method <code>.DollarNames.DataFrame</code></p> <p>exposes all public <code>$foobar()</code>-methods which are callable onto the object. Most methods return another <code>DataFrame</code>-class instance or similar which allows for method chaining. This class system in lack of a better name could be called \"environment classes\" and is the same class system extendr provides, except here there is both a public and private set of methods. For implementation reasons, the private methods are external and must be called from polars:::.pr.$DataFrame$methodname(), also all private methods must take any self as an argument, thus they are pure functions. Having the private methods as pure functions solved/simplified self-referential complications.</p>"},{"location":"reference/DataFrame_class/#details","title":"Details","text":"<p>Check out the source code in R/dataframe_frame.R how public methods are derived from private methods. Check out extendr-wrappers.R to see the extendr-auto-generated methods. These are moved to .pr and converted into pure external functions in after-wrappers.R. In zzz.R (named zzz to be last file sourced) the extendr-methods are removed and replaced by any function prefixed <code>DataFrame_</code>.</p>"},{"location":"reference/DataFrame_class/#examples","title":"Examples","text":"<pre><code>#see all exported methods\nls(polars:::DataFrame)\n#&gt;  [1] \"as_data_frame\"  \"clone\"          \"columns\"        \"drop\"          \n#&gt;  [5] \"drop_in_place\"  \"drop_nulls\"     \"dtype_strings\"  \"dtypes\"        \n#&gt;  [9] \"estimated_size\" \"fill_nan\"       \"fill_null\"      \"filter\"        \n#&gt; [13] \"first\"          \"frame_equal\"    \"get_column\"     \"get_columns\"   \n#&gt; [17] \"groupby\"        \"height\"         \"join\"           \"last\"          \n#&gt; [21] \"lazy\"           \"limit\"          \"max\"            \"mean\"          \n#&gt; [25] \"median\"         \"min\"            \"null_count\"     \"print\"         \n#&gt; [29] \"quantile\"       \"reverse\"        \"schema\"         \"select\"        \n#&gt; [33] \"shape\"          \"shift\"          \"shift_and_fill\" \"slice\"         \n#&gt; [37] \"sort\"           \"std\"            \"sum\"            \"tail\"          \n#&gt; [41] \"to_data_frame\"  \"to_list\"        \"to_series\"      \"to_struct\"     \n#&gt; [45] \"unique\"         \"unnest\"         \"var\"            \"width\"         \n#&gt; [49] \"with_column\"    \"with_columns\"  \n#see all private methods (not intended for regular use)\nls(polars:::.pr$DataFrame)\n#&gt;  [1] \"by_agg\"                    \"clone_see_me_macro\"       \n#&gt;  [3] \"columns\"                   \"drop_in_place\"            \n#&gt;  [5] \"dtype_strings\"             \"dtypes\"                   \n#&gt;  [7] \"estimated_size\"            \"export_stream\"            \n#&gt;  [9] \"frame_equal\"               \"from_arrow_record_batches\"\n#&gt; [11] \"get_column\"                \"get_columns\"              \n#&gt; [13] \"lazy\"                      \"new\"                      \n#&gt; [15] \"new_par_from_list\"         \"new_with_capacity\"        \n#&gt; [17] \"null_count\"                \"print\"                    \n#&gt; [19] \"schema\"                    \"select\"                   \n#&gt; [21] \"select_at_idx\"             \"set_column_from_robj\"     \n#&gt; [23] \"set_column_from_series\"    \"set_column_names_mut\"     \n#&gt; [25] \"shape\"                     \"to_list\"                  \n#&gt; [27] \"to_list_tag_structs\"       \"to_list_unwind\"           \n#&gt; [29] \"to_struct\"                 \"unnest\"                   \n#make an object\ndf = pl$DataFrame(iris)\n#use a public method/property\ndf$shape\n#&gt; [1] 150   5\ndf2 = df\n#use a private method, which has mutability\nresult = polars:::.pr$DataFrame$set_column_from_robj(df,150:1,\"some_ints\")\n#column exists in both dataframes-objects now, as they are just pointers to the same object\n# there are no public methods with mutability\ndf$columns\n#&gt; [1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n#&gt; [6] \"some_ints\"   \ndf2$columns\n#&gt; [1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n#&gt; [6] \"some_ints\"   \n# set_column_from_robj-method is fallible and returned a result which could be ok or an err.\n# No public method or function will ever return a result.\n# The `result` is very close to the same as output from functions decorated with purrr::safely.\n# To use results on R side, these must be unwrapped first such that\n# potentially errors can be thrown. unwrap(result) is a way to\n# bridge rust not throwing errors with R. Extendr default behaviour is to use panic!(s) which\n# would case some unneccesary confusing and  some very verbose error messages on the inner\n# workings of rust. unwrap(result) #in this case no error, just a NULL because this mutable\n# method does not return any ok-value.\n#try unwrapping an error from polars due to unmatching column lengths\nerr_result = polars:::.pr$DataFrame$set_column_from_robj(df,1:10000,\"wrong_length\")\ntryCatch(unwrap(err_result,call=NULL),error=\\(e) cat(as.character(e)))\n#&gt; Error: in set_column_from_robj: ShapeMisMatch(Owned(\"Could not add column. The Series length 10000 differs from the DataFrame height: 150\")) \n#&gt;  when calling :\n#&gt;  NULL\n </code></pre>"},{"location":"reference/DataFrame_clone/","title":"Clone a DataFrame","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_clone()\n</code></pre>"},{"location":"reference/DataFrame_clone/#returns","title":"Returns","text":"<p>DataFrame</p> <p>Rarely useful as DataFrame is nearly 100% immutable Any modification of a DataFrame would lead to a clone anyways.</p>"},{"location":"reference/DataFrame_clone/#examples","title":"Examples","text":"<pre><code>df1 = pl$DataFrame(iris);\ndf2 =  df1$clone();\ndf3 = df1\npl$mem_address(df1) != pl$mem_address(df2)\n#&gt; [1] TRUE\npl$mem_address(df1) == pl$mem_address(df3)\n#&gt; [1] TRUE\n </code></pre>"},{"location":"reference/DataFrame_columns/","title":"get/set columns (the names columns)","text":"<p>Source: R/Field.R, R/dataframe__frame.R</p> <pre><code>RField_datatype()\nDataFrame_columns()\n</code></pre>"},{"location":"reference/DataFrame_columns/#returns","title":"Returns","text":"<p>char vec of column names</p> <p>char vec of column names</p> <p>get/set column names of DataFrame object</p> <p>get/set column names of DataFrame object</p>"},{"location":"reference/DataFrame_columns/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(iris)\n#get values\ndf$columns\n#&gt; [1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n#set + get values\ndf$columns = letters[1:5] #&lt;- is fine too\ndf$columns\n#&gt; [1] \"a\" \"b\" \"c\" \"d\" \"e\"\ndf = pl$DataFrame(iris)\n#get values\ndf$columns\n#&gt; [1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n#set + get values\ndf$columns = letters[1:5] #&lt;- is fine too\ndf$columns\n#&gt; [1] \"a\" \"b\" \"c\" \"d\" \"e\"\n </code></pre>"},{"location":"reference/DataFrame_drop/","title":"Drop","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_drop(columns)\n</code></pre>"},{"location":"reference/DataFrame_drop/#arguments","title":"Arguments","text":"<ul> <li><code>columns</code>: character vector Name of the column(s) that should be removed from the dataframe.</li> </ul>"},{"location":"reference/DataFrame_drop/#returns","title":"Returns","text":"<p>DataFrame</p> <p>Remove columns from the dataframe.</p>"},{"location":"reference/DataFrame_drop/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$drop(c(\"mpg\", \"hp\"))\n#&gt; shape: (32, 9)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 disp  \u2506 drat \u2506 wt    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 --- \u2506 ---   \u2506 ---  \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64 \u2506 f64   \u2506 f64  \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0 \u2506 160.0 \u2506 3.9  \u2506 2.62  \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 6.0 \u2506 160.0 \u2506 3.9  \u2506 2.875 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 4.0 \u2506 108.0 \u2506 3.85 \u2506 2.32  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 6.0 \u2506 258.0 \u2506 3.08 \u2506 3.215 \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 ... \u2506 ...   \u2506 ...  \u2506 ...   \u2506 ... \u2506 ... \u2506 ... \u2506 ...  \u2506 ...  \u2502\n#&gt; \u2502 8.0 \u2506 351.0 \u2506 4.22 \u2506 3.17  \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 6.0 \u2506 145.0 \u2506 3.62 \u2506 2.77  \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 8.0 \u2506 301.0 \u2506 3.54 \u2506 3.57  \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 4.0 \u2506 121.0 \u2506 4.11 \u2506 2.78  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataFrame_drop_in_place/","title":"Drop in place","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_drop_in_place(name)\n</code></pre>"},{"location":"reference/DataFrame_drop_in_place/#arguments","title":"Arguments","text":"<ul> <li><code>name</code>: string Name of the column to drop.</li> </ul>"},{"location":"reference/DataFrame_drop_in_place/#returns","title":"Returns","text":"<p>Series</p> <p>Drop a single column in-place and return the dropped column.</p>"},{"location":"reference/DataFrame_drop_in_place/#examples","title":"Examples","text":"<pre><code>dat = pl$DataFrame(iris)\nx = dat$drop_in_place(\"Species\")\nx\n#&gt; polars Series: shape: (150,)\n#&gt; Series: 'Species' [cat]\n#&gt; [\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  \"setosa\"\n#&gt;  ...\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt;  \"virginica\"\n#&gt; ]\ndat$columns\n#&gt; [1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\" \n </code></pre>"},{"location":"reference/DataFrame_drop_nulls/","title":"Drop nulls","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_drop_nulls(subset = NULL)\n</code></pre>"},{"location":"reference/DataFrame_drop_nulls/#arguments","title":"Arguments","text":"<ul> <li><code>subset</code>: string or vector of strings. Column name(s) for which null values are considered. If set to NULL (default), use all columns.</li> </ul>"},{"location":"reference/DataFrame_drop_nulls/#returns","title":"Returns","text":"<p>DataFrame</p> <p>Drop all rows that contain null values.</p>"},{"location":"reference/DataFrame_drop_nulls/#examples","title":"Examples","text":"<pre><code>tmp = mtcars\ntmp[1:3, \"mpg\"] = NA\ntmp[4, \"hp\"] = NA\npl$DataFrame(tmp)$drop_nulls()$height\n#&gt; [1] 28\npl$DataFrame(tmp)$drop_nulls(\"mpg\")$height\n#&gt; [1] 29\npl$DataFrame(tmp)$drop_nulls(c(\"mpg\", \"hp\"))$height\n#&gt; [1] 28\n </code></pre>"},{"location":"reference/DataFrame_dtype_strings/","title":"dtype_strings","text":"<p>data</p> <p>Source: R/dataframe__frame.R</p>"},{"location":"reference/DataFrame_dtype_strings/#dataframe-dtype-strings","title":"DataFrame dtype strings","text":""},{"location":"reference/DataFrame_dtype_strings/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>DataFrame_dtype_strings\n</code></pre>"},{"location":"reference/DataFrame_dtype_strings/#returns","title":"Returns","text":"<p>string vector</p> <p>Get column types as strings.</p>"},{"location":"reference/DataFrame_dtype_strings/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(iris)$dtype_strings()\n#&gt; [1] \"f64\" \"f64\" \"f64\" \"f64\" \"cat\"\n </code></pre>"},{"location":"reference/DataFrame_dtypes/","title":"DataFrame dtypes","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_dtypes()\nDataFrame_schema()\n</code></pre>"},{"location":"reference/DataFrame_dtypes/#returns","title":"Returns","text":"<p>width as numeric scalar</p> <p>width as numeric scalar</p> <p>Get dtypes of columns in DataFrame. Dtypes can also be found in column headers when printing the DataFrame.</p> <p>Get dtypes of columns in DataFrame. Dtypes can also be found in column headers when printing the DataFrame.</p>"},{"location":"reference/DataFrame_dtypes/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(iris)$dtypes\n#&gt; [[1]]\n#&gt; DataType: Float64\n#&gt; #&gt; [[2]]\n#&gt; DataType: Float64\n#&gt; #&gt; [[3]]\n#&gt; DataType: Float64\n#&gt; #&gt; [[4]]\n#&gt; DataType: Float64\n#&gt; #&gt; [[5]]\n#&gt; DataType: Categorical(\n#&gt;     Some(\n#&gt;         Local(\n#&gt;             LargeUtf8Array[setosa, versicolor, virginica],\n#&gt;         ),\n#&gt;     ),\n#&gt; )\n#&gt; pl$DataFrame(iris)$schema\n#&gt; $Sepal.Length\n#&gt; DataType: Float64\n#&gt; #&gt; $Sepal.Width\n#&gt; DataType: Float64\n#&gt; #&gt; $Petal.Length\n#&gt; DataType: Float64\n#&gt; #&gt; $Petal.Width\n#&gt; DataType: Float64\n#&gt; #&gt; $Species\n#&gt; DataType: Categorical(\n#&gt;     Some(\n#&gt;         Local(\n#&gt;             LargeUtf8Array[setosa, versicolor, virginica],\n#&gt;         ),\n#&gt;     ),\n#&gt; )\n#&gt; </code></pre>"},{"location":"reference/DataFrame_estimated_size/","title":"Estimated size","text":"<p>Source: R/dataframe__frame.R</p>"},{"location":"reference/DataFrame_estimated_size/#format","title":"Format","text":"<p>function</p> <pre><code>DataFrame_estimated_size\n</code></pre>"},{"location":"reference/DataFrame_estimated_size/#returns","title":"Returns","text":"<p>Bytes</p> <p>Return an estimation of the total (heap) allocated size of the DataFrame.</p>"},{"location":"reference/DataFrame_estimated_size/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$estimated_size()\n#&gt; [1] 2816\n </code></pre>"},{"location":"reference/DataFrame_fill_nan/","title":"Fill NaN","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_fill_nan(fill_value)\n</code></pre>"},{"location":"reference/DataFrame_fill_nan/#arguments","title":"Arguments","text":"<ul> <li><code>fill_value</code>: Value to fill NaN with.</li> </ul>"},{"location":"reference/DataFrame_fill_nan/#returns","title":"Returns","text":"<p>DataFrame</p> <p>Fill floating point NaN values by an Expression evaluation.</p>"},{"location":"reference/DataFrame_fill_nan/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  a = c(1.5, 2, NaN, 4),\n  b = c(1.5, NaN, NaN, 4)\n)\ndf$fill_nan(99)\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.5  \u2506 1.5  \u2502\n#&gt; \u2502 2.0  \u2506 99.0 \u2502\n#&gt; \u2502 99.0 \u2506 99.0 \u2502\n#&gt; \u2502 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataFrame_fill_null/","title":"Fill null","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_fill_null(fill_value)\n</code></pre>"},{"location":"reference/DataFrame_fill_null/#arguments","title":"Arguments","text":"<ul> <li><code>fill_value</code>: Value to fill <code>NA</code> with.</li> </ul>"},{"location":"reference/DataFrame_fill_null/#returns","title":"Returns","text":"<p>DataFrame</p> <p>Fill null values using the specified value or strategy.</p>"},{"location":"reference/DataFrame_fill_null/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(\n  a = c(1.5, 2, NA, 4),\n  b = c(1.5, NA, NA, 4)\n)$fill_null(99)\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.5  \u2506 1.5  \u2502\n#&gt; \u2502 2.0  \u2506 99.0 \u2502\n#&gt; \u2502 99.0 \u2506 99.0 \u2502\n#&gt; \u2502 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataFrame_first/","title":"First","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_first()\n</code></pre>"},{"location":"reference/DataFrame_first/#returns","title":"Returns","text":"<p>A new <code>DataFrame</code> object with applied filter.</p> <p>Get the first row of the DataFrame.</p>"},{"location":"reference/DataFrame_first/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$first()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataFrame_frame_equal/","title":"Drop in place","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_frame_equal(other)\n</code></pre>"},{"location":"reference/DataFrame_frame_equal/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: DataFrame to compare with.</li> </ul>"},{"location":"reference/DataFrame_frame_equal/#returns","title":"Returns","text":"<p>bool</p> <p>Check if DataFrame is equal to other.</p>"},{"location":"reference/DataFrame_frame_equal/#examples","title":"Examples","text":"<pre><code>dat1 = pl$DataFrame(iris)\ndat2 = pl$DataFrame(iris)\ndat3 = pl$DataFrame(mtcars)\ndat1$frame_equal(dat2)\n#&gt; [1] FALSE\ndat1$frame_equal(dat3)\n#&gt; [1] FALSE\n </code></pre>"},{"location":"reference/DataFrame_get_column/","title":"Get Column (as one Series)","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_get_column(name)\n</code></pre>"},{"location":"reference/DataFrame_get_column/#arguments","title":"Arguments","text":"<ul> <li><code>name</code>: name of column to extract as Series</li> </ul>"},{"location":"reference/DataFrame_get_column/#returns","title":"Returns","text":"<p>Series</p> <p>get one column by name as series</p>"},{"location":"reference/DataFrame_get_column/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(iris[1,])\ndf$get_column(\"Species\")\n#&gt; polars Series: shape: (1,)\n#&gt; Series: 'Species' [cat]\n#&gt; [\n#&gt;  \"setosa\"\n#&gt; ]\n </code></pre>"},{"location":"reference/DataFrame_get_columns/","title":"get_columns","text":"<p>data</p> <p>Source: R/dataframe__frame.R</p>"},{"location":"reference/DataFrame_get_columns/#get-columns-as-series","title":"Get columns (as Series)","text":""},{"location":"reference/DataFrame_get_columns/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>DataFrame_get_columns\n</code></pre>"},{"location":"reference/DataFrame_get_columns/#returns","title":"Returns","text":"<p>list of series</p> <p>get columns as list of series</p>"},{"location":"reference/DataFrame_get_columns/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(iris[1,])\ndf$get_columns()\n#&gt; $Sepal.Length\n#&gt; polars Series: shape: (1,)\n#&gt; Series: 'Sepal.Length' [f64]\n#&gt; [\n#&gt;  5.1\n#&gt; ]\n#&gt; #&gt; $Sepal.Width\n#&gt; polars Series: shape: (1,)\n#&gt; Series: 'Sepal.Width' [f64]\n#&gt; [\n#&gt;  3.5\n#&gt; ]\n#&gt; #&gt; $Petal.Length\n#&gt; polars Series: shape: (1,)\n#&gt; Series: 'Petal.Length' [f64]\n#&gt; [\n#&gt;  1.4\n#&gt; ]\n#&gt; #&gt; $Petal.Width\n#&gt; polars Series: shape: (1,)\n#&gt; Series: 'Petal.Width' [f64]\n#&gt; [\n#&gt;  0.2\n#&gt; ]\n#&gt; #&gt; $Species\n#&gt; polars Series: shape: (1,)\n#&gt; Series: 'Species' [cat]\n#&gt; [\n#&gt;  \"setosa\"\n#&gt; ]\n#&gt; </code></pre>"},{"location":"reference/DataFrame_groupby/","title":"groupby DataFrame","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_groupby(..., maintain_order = FALSE)\n</code></pre>"},{"location":"reference/DataFrame_groupby/#arguments","title":"Arguments","text":"<ul> <li><code>...</code>: any expression</li> <li><code>maintain_order</code>: bool</li> </ul>"},{"location":"reference/DataFrame_groupby/#returns","title":"Returns","text":"<p>GroupBy (subclass of DataFrame)</p> <p>DataFrame$groupby(..., maintain_order = FALSE)</p>"},{"location":"reference/DataFrame_height/","title":"Height of DataFrame","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_height()\n</code></pre>"},{"location":"reference/DataFrame_height/#returns","title":"Returns","text":"<p>height as numeric</p> <p>Get height(nrow) of DataFrame</p>"},{"location":"reference/DataFrame_height/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(iris)$height\n#&gt; [1] 150\n </code></pre>"},{"location":"reference/DataFrame_join/","title":"join DataFrame with other DataFrame","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_join(\nother,\nleft_on = NULL,\nright_on = NULL,\non = NULL,\nhow = c(\"inner\", \"left\", \"outer\", \"semi\", \"anti\", \"cross\"),\nsuffix = \"_right\",\nallow_parallel = TRUE,\nforce_parallel = FALSE\n)\n</code></pre>"},{"location":"reference/DataFrame_join/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: DataFrame</li> <li><code>left_on</code>: names of columns in self LazyFrame, order should match. Type, see on param.</li> <li><code>right_on</code>: names of columns in other LazyFrame, order should match. Type, see on param.</li> <li><code>on</code>: named columns as char vector of named columns, or list of expressions and/or strings.</li> <li><code>how</code>: a string selecting one of the following methods: inner, left, outer, semi, anti, cross</li> <li><code>suffix</code>: name to added right table</li> <li><code>allow_parallel</code>: bool</li> <li><code>force_parallel</code>: bool</li> </ul>"},{"location":"reference/DataFrame_join/#returns","title":"Returns","text":"<p>DataFrame</p> <p>join DataFrame with other DataFrame</p>"},{"location":"reference/DataFrame_join/#examples","title":"Examples","text":"<pre><code>print(df1 &lt;- pl$DataFrame(list(key=1:3,payload=c('f','i',NA))))\n#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 key \u2506 payload \u2502\n#&gt; \u2502 --- \u2506 ---     \u2502\n#&gt; \u2502 i32 \u2506 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 f       \u2502\n#&gt; \u2502 2   \u2506 i       \u2502\n#&gt; \u2502 3   \u2506 null    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nprint(df2 &lt;- pl$DataFrame(list(key=c(3L,4L,5L,NA_integer_))))\n#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 key  \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3    \u2502\n#&gt; \u2502 4    \u2502\n#&gt; \u2502 5    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf1$join(other = df2,on = 'key')\n#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 key \u2506 payload \u2502\n#&gt; \u2502 --- \u2506 ---     \u2502\n#&gt; \u2502 i32 \u2506 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2506 null    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataFrame_last/","title":"Last","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_last()\n</code></pre>"},{"location":"reference/DataFrame_last/#returns","title":"Returns","text":"<p>A new <code>DataFrame</code> object with applied filter.</p> <p>Get the last row of the DataFrame.</p>"},{"location":"reference/DataFrame_last/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$last()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataFrame_lazy/","title":"lazy","text":"<p>data</p> <p>Source: R/dataframe__frame.R</p>"},{"location":"reference/DataFrame_lazy/#new-lazyframe-from-dataframe_objectlazy","title":"New LazyFrame from DataFrame_object$lazy()","text":""},{"location":"reference/DataFrame_lazy/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>DataFrame_lazy\n</code></pre>"},{"location":"reference/DataFrame_lazy/#returns","title":"Returns","text":"<p>a LazyFrame</p> <p>Start a new lazy query from a DataFrame</p>"},{"location":"reference/DataFrame_lazy/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(iris)$lazy()\n#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt;   DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n#&gt; #use of lazy method\npl$DataFrame(iris)$lazy()$filter(pl$col(\"Sepal.Length\") &gt;= 7.7)$collect()\n#&gt; shape: (5, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 7.7          \u2506 3.8         \u2506 6.7          \u2506 2.2         \u2506 virginica \u2502\n#&gt; \u2502 7.7          \u2506 2.6         \u2506 6.9          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 7.7          \u2506 2.8         \u2506 6.7          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 7.9          \u2506 3.8         \u2506 6.4          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 7.7          \u2506 3.0         \u2506 6.1          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataFrame_limit/","title":"Limit a DataFrame","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_limit(n)\n</code></pre>"},{"location":"reference/DataFrame_limit/#arguments","title":"Arguments","text":"<ul> <li><code>n</code>: positive numeric or integer number not larger than 2^32</li> </ul>"},{"location":"reference/DataFrame_limit/#returns","title":"Returns","text":"<p>DataFrame</p> <p>take limit of n rows of query</p>"},{"location":"reference/DataFrame_limit/#details","title":"Details","text":"<p>any number will converted to u32. Negative raises error</p>"},{"location":"reference/DataFrame_max/","title":"Max","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_max()\n</code></pre>"},{"location":"reference/DataFrame_max/#returns","title":"Returns","text":"<p>A new <code>DataFrame</code> object with applied aggregation.</p> <p>Aggregate the columns in the DataFrame to their maximum value.</p>"},{"location":"reference/DataFrame_max/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$max()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 33.9 \u2506 8.0 \u2506 472.0 \u2506 335.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataFrame_mean/","title":"Mean","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_mean()\n</code></pre>"},{"location":"reference/DataFrame_mean/#returns","title":"Returns","text":"<p>A new <code>DataFrame</code> object with applied aggregation.</p> <p>Aggregate the columns in the DataFrame to their mean value.</p>"},{"location":"reference/DataFrame_mean/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$mean()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg       \u2506 cyl    \u2506 disp       \u2506 hp       \u2506 ... \u2506 vs     \u2506 am      \u2506 gear   \u2506 carb   \u2502\n#&gt; \u2502 ---       \u2506 ---    \u2506 ---        \u2506 ---      \u2506     \u2506 ---    \u2506 ---     \u2506 ---    \u2506 ---    \u2502\n#&gt; \u2502 f64       \u2506 f64    \u2506 f64        \u2506 f64      \u2506     \u2506 f64    \u2506 f64     \u2506 f64    \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 20.090625 \u2506 6.1875 \u2506 230.721875 \u2506 146.6875 \u2506 ... \u2506 0.4375 \u2506 0.40625 \u2506 3.6875 \u2506 2.8125 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataFrame_median/","title":"Median","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_median()\n</code></pre>"},{"location":"reference/DataFrame_median/#returns","title":"Returns","text":"<p>A new <code>DataFrame</code> object with applied aggregation.</p> <p>Aggregate the columns in the DataFrame to their median value.</p>"},{"location":"reference/DataFrame_median/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$median()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 19.2 \u2506 6.0 \u2506 196.3 \u2506 123.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataFrame_min/","title":"Min","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_min()\n</code></pre>"},{"location":"reference/DataFrame_min/#returns","title":"Returns","text":"<p>A new <code>DataFrame</code> object with applied aggregation.</p> <p>Aggregate the columns in the DataFrame to their minimum value.</p>"},{"location":"reference/DataFrame_min/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$min()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp \u2506 hp   \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---  \u2506 ---  \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64  \u2506 f64  \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 10.4 \u2506 4.0 \u2506 71.1 \u2506 52.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataFrame_null_count/","title":"Null count","text":"<p>Source: R/dataframe__frame.R</p>"},{"location":"reference/DataFrame_null_count/#format","title":"Format","text":"<p>function</p> <pre><code>DataFrame_null_count\n</code></pre>"},{"location":"reference/DataFrame_null_count/#returns","title":"Returns","text":"<p>DataFrame</p> <p>Create a new DataFrame that shows the null counts per column.</p>"},{"location":"reference/DataFrame_null_count/#examples","title":"Examples","text":"<pre><code>x = mtcars\nx[1, 2:3] = NA\npl$DataFrame(x)$null_count()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg \u2506 cyl \u2506 disp \u2506 hp  \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---  \u2506 --- \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 u32 \u2506 u32 \u2506 u32  \u2506 u32 \u2506     \u2506 u32 \u2506 u32 \u2506 u32  \u2506 u32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0   \u2506 1   \u2506 1    \u2506 0   \u2506 ... \u2506 0   \u2506 0   \u2506 0    \u2506 0    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataFrame_print/","title":"internal method print DataFrame","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_print()\n</code></pre>"},{"location":"reference/DataFrame_print/#returns","title":"Returns","text":"<p>self</p> <p>internal method print DataFrame</p>"},{"location":"reference/DataFrame_print/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(iris)\n#&gt; shape: (150, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 ...          \u2506 ...         \u2506 ...          \u2506 ...         \u2506 ...       \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataFrame_quantile/","title":"Quantile","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_quantile(quantile, interpolation = \"nearest\")\n</code></pre>"},{"location":"reference/DataFrame_quantile/#arguments","title":"Arguments","text":"<ul> <li><code>quantile</code>: numeric Quantile between 0.0 and 1.0.</li> <li><code>interpolation</code>: string Interpolation method: \"nearest\", \"higher\", \"lower\", \"midpoint\", or \"linear\".</li> </ul>"},{"location":"reference/DataFrame_quantile/#returns","title":"Returns","text":"<p>DataFrame</p> <p>Aggregate the columns in the DataFrame to their quantile value.</p>"},{"location":"reference/DataFrame_quantile/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$quantile(.4)\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 17.8 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataFrame_reverse/","title":"Reverse","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_reverse()\n</code></pre>"},{"location":"reference/DataFrame_reverse/#returns","title":"Returns","text":"<p>LazyFrame</p> <p>Reverse the DataFrame.</p>"},{"location":"reference/DataFrame_reverse/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$reverse()\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 ...  \u2506 ... \u2506 ...   \u2506 ...   \u2506 ... \u2506 ... \u2506 ... \u2506 ...  \u2506 ...  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataFrame_select/","title":"perform select on DataFrame","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_select(...)\n</code></pre>"},{"location":"reference/DataFrame_select/#arguments","title":"Arguments","text":"<ul> <li><code>...</code>: expresssions or strings defining columns to select(keep) in context the DataFrame</li> </ul> <p>related to dplyr <code>mutate()</code> However discards unmentioned columns as data.table <code>.()</code>.</p>"},{"location":"reference/DataFrame_shape/","title":"Shape of DataFrame","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_shape()\n</code></pre>"},{"location":"reference/DataFrame_shape/#returns","title":"Returns","text":"<p>two length numeric vector of c(nrows,ncols)</p> <p>Get shape/dimensions of DataFrame</p>"},{"location":"reference/DataFrame_shape/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(iris)$shape\n </code></pre>"},{"location":"reference/DataFrame_shift/","title":"Shift","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_shift(periods = 1)\n</code></pre>"},{"location":"reference/DataFrame_shift/#arguments","title":"Arguments","text":"<ul> <li><code>periods</code>: integer Number of periods to shift (may be negative).</li> </ul>"},{"location":"reference/DataFrame_shift/#returns","title":"Returns","text":"<p>DataFrame</p> <p>Shift the values by a given period.</p>"},{"location":"reference/DataFrame_shift/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$shift(2)\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl  \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs   \u2506 am   \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---   \u2506 ---   \u2506     \u2506 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2506 f64   \u2506 f64   \u2506     \u2506 f64  \u2506 f64  \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 null \u2506 null  \u2506 null  \u2506 ... \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 null \u2506 null \u2506 null  \u2506 null  \u2506 ... \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 21.0 \u2506 6.0  \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0  \u2506 1.0  \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0  \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0  \u2506 1.0  \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 ...  \u2506 ...  \u2506 ...   \u2506 ...   \u2506 ... \u2506 ...  \u2506 ...  \u2506 ...  \u2506 ...  \u2502\n#&gt; \u2502 26.0 \u2506 4.0  \u2506 120.3 \u2506 91.0  \u2506 ... \u2506 0.0  \u2506 1.0  \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0  \u2506 95.1  \u2506 113.0 \u2506 ... \u2506 1.0  \u2506 1.0  \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0  \u2506 351.0 \u2506 264.0 \u2506 ... \u2506 0.0  \u2506 1.0  \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0  \u2506 145.0 \u2506 175.0 \u2506 ... \u2506 0.0  \u2506 1.0  \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataFrame_shift_and_fill/","title":"Shift and fill","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_shift_and_fill(fill_value, periods = 1)\n</code></pre>"},{"location":"reference/DataFrame_shift_and_fill/#arguments","title":"Arguments","text":"<ul> <li><code>fill_value</code>: fill None values with the result of this expression.</li> <li><code>periods</code>: integer Number of periods to shift (may be negative).</li> </ul>"},{"location":"reference/DataFrame_shift_and_fill/#returns","title":"Returns","text":"<p>DataFrame</p> <p>Shift the values by a given period and fill the resulting null values.</p>"},{"location":"reference/DataFrame_shift_and_fill/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$shift_and_fill(0, 2)\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0  \u2506 0.0 \u2506 0.0   \u2506 0.0   \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 0.0  \u2506 0.0  \u2502\n#&gt; \u2502 0.0  \u2506 0.0 \u2506 0.0   \u2506 0.0   \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 0.0  \u2506 0.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 ...  \u2506 ... \u2506 ...   \u2506 ...   \u2506 ... \u2506 ... \u2506 ... \u2506 ...  \u2506 ...  \u2502\n#&gt; \u2502 26.0 \u2506 4.0 \u2506 120.3 \u2506 91.0  \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataFrame_slice/","title":"Slice","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_slice(offset, length = NULL)\n</code></pre>"},{"location":"reference/DataFrame_slice/#arguments","title":"Arguments","text":"<ul> <li><code>offset</code>: integer</li> <li><code>length</code>: integer or NULL</li> </ul>"},{"location":"reference/DataFrame_slice/#returns","title":"Returns","text":"<p>LazyFrame</p> <p>Get a slice of this DataFrame.</p>"},{"location":"reference/DataFrame_slice/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$slice(2, 4)\n#&gt; shape: (4, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 18.1 \u2506 6.0 \u2506 225.0 \u2506 105.0 \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nmtcars[2:6,]\n#&gt;                    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#&gt; Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n#&gt; Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#&gt; Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n#&gt; Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n#&gt; Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n </code></pre>"},{"location":"reference/DataFrame_sort/","title":"DataFrame Sort","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_sort(by, ..., descending = FALSE, nulls_last = FALSE)\n</code></pre>"},{"location":"reference/DataFrame_sort/#arguments","title":"Arguments","text":"<ul> <li><code>by</code>: Column(s) to sort by. Column name strings, character vector of column names, or Iterable Into  (e.g. one Expr, or list mixed Expr and column name strings).</li> <li><code>...</code>: more columns to sort by as above but provided one Expr per argument.</li> <li><code>descending</code>: Sort descending? Default = FALSE logical vector of length 1 or same length as number of Expr's from above by + ....</li> <li><code>nulls_last</code>: Bool default FALSE, place all nulls_last?</li> </ul>"},{"location":"reference/DataFrame_sort/#returns","title":"Returns","text":"<p>LazyFrame</p> <p>sort a DataFrame by on or more Expr.</p>"},{"location":"reference/DataFrame_sort/#details","title":"Details","text":"<p>by and ... args allow to either provide e.g. a list of Expr or something which can be converted into an Expr e.g. <code>$sort(list(e1,e2,e3))</code>, or provide each Expr as an individual argument <code>$sort(e1,e2,e3)</code>\u00b4 ... or both.</p>"},{"location":"reference/DataFrame_sort/#examples","title":"Examples","text":"<pre><code>df = mtcars\ndf$mpg[1] = NA\ndf = pl$DataFrame(df)\ndf$sort(\"mpg\")\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 472.0 \u2506 205.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 460.0 \u2506 215.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 13.3 \u2506 8.0 \u2506 350.0 \u2506 245.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 ...  \u2506 ... \u2506 ...   \u2506 ...   \u2506 ... \u2506 ... \u2506 ... \u2506 ...  \u2506 ...  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 75.7  \u2506 52.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 32.4 \u2506 4.0 \u2506 78.7  \u2506 66.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 33.9 \u2506 4.0 \u2506 71.1  \u2506 65.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$sort(\"mpg\", nulls_last = TRUE)\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 472.0 \u2506 205.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 460.0 \u2506 215.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 13.3 \u2506 8.0 \u2506 350.0 \u2506 245.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 14.3 \u2506 8.0 \u2506 360.0 \u2506 245.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 ...  \u2506 ... \u2506 ...   \u2506 ...   \u2506 ... \u2506 ... \u2506 ... \u2506 ...  \u2506 ...  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 32.4 \u2506 4.0 \u2506 78.7  \u2506 66.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 33.9 \u2506 4.0 \u2506 71.1  \u2506 65.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 null \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$sort(\"cyl\", \"mpg\")\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 ...  \u2506 ... \u2506 ...   \u2506 ...   \u2506 ... \u2506 ... \u2506 ... \u2506 ...  \u2506 ...  \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$sort(c(\"cyl\", \"mpg\"))\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 ...  \u2506 ... \u2506 ...   \u2506 ...   \u2506 ... \u2506 ... \u2506 ... \u2506 ...  \u2506 ...  \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$sort(c(\"cyl\", \"mpg\"), descending = TRUE)\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 ...  \u2506 ... \u2506 ...   \u2506 ...   \u2506 ... \u2506 ... \u2506 ... \u2506 ...  \u2506 ...  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$sort(c(\"cyl\", \"mpg\"), descending = c(TRUE, FALSE))\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 472.0 \u2506 205.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 460.0 \u2506 215.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 13.3 \u2506 8.0 \u2506 350.0 \u2506 245.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 14.3 \u2506 8.0 \u2506 360.0 \u2506 245.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 ...  \u2506 ... \u2506 ...   \u2506 ...   \u2506 ... \u2506 ... \u2506 ... \u2506 ...  \u2506 ...  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 75.7  \u2506 52.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 32.4 \u2506 4.0 \u2506 78.7  \u2506 66.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 33.9 \u2506 4.0 \u2506 71.1  \u2506 65.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$sort(pl$col(\"cyl\"), pl$col(\"mpg\"))\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 ...  \u2506 ... \u2506 ...   \u2506 ...   \u2506 ... \u2506 ... \u2506 ... \u2506 ...  \u2506 ...  \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataFrame_std/","title":"Std","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_std(ddof = 1)\n</code></pre>"},{"location":"reference/DataFrame_std/#arguments","title":"Arguments","text":"<ul> <li><code>ddof</code>: integer Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1.</li> </ul>"},{"location":"reference/DataFrame_std/#returns","title":"Returns","text":"<p>A new <code>DataFrame</code> object with applied aggregation.</p> <p>Aggregate the columns of this DataFrame to their standard deviation values.</p>"},{"location":"reference/DataFrame_std/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$std()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg      \u2506 cyl      \u2506 disp       \u2506 hp        \u2506 ... \u2506 vs       \u2506 am       \u2506 gear     \u2506 carb   \u2502\n#&gt; \u2502 ---      \u2506 ---      \u2506 ---        \u2506 ---       \u2506     \u2506 ---      \u2506 ---      \u2506 ---      \u2506 ---    \u2502\n#&gt; \u2502 f64      \u2506 f64      \u2506 f64        \u2506 f64       \u2506     \u2506 f64      \u2506 f64      \u2506 f64      \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.026948 \u2506 1.785922 \u2506 123.938694 \u2506 68.562868 \u2506 ... \u2506 0.504016 \u2506 0.498991 \u2506 0.737804 \u2506 1.6152 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataFrame_sum/","title":"Sum","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_sum()\n</code></pre>"},{"location":"reference/DataFrame_sum/#returns","title":"Returns","text":"<p>A new <code>DataFrame</code> object with applied aggregation.</p> <p>Aggregate the columns of this DataFrame to their sum values.</p>"},{"location":"reference/DataFrame_sum/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$sum()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg   \u2506 cyl   \u2506 disp   \u2506 hp     \u2506 ... \u2506 vs   \u2506 am   \u2506 gear  \u2506 carb \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2506 ---    \u2506 ---    \u2506     \u2506 ---  \u2506 ---  \u2506 ---   \u2506 ---  \u2502\n#&gt; \u2502 f64   \u2506 f64   \u2506 f64    \u2506 f64    \u2506     \u2506 f64  \u2506 f64  \u2506 f64   \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 642.9 \u2506 198.0 \u2506 7383.1 \u2506 4694.0 \u2506 ... \u2506 14.0 \u2506 13.0 \u2506 118.0 \u2506 90.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataFrame_tail/","title":"Tail a DataFrame","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_tail(n)\n</code></pre>"},{"location":"reference/DataFrame_tail/#arguments","title":"Arguments","text":"<ul> <li><code>n</code>: positive numeric of integer number not larger than 2^32</li> </ul>"},{"location":"reference/DataFrame_tail/#returns","title":"Returns","text":"<p>DataFrame</p> <p>Get the last n rows.</p>"},{"location":"reference/DataFrame_tail/#details","title":"Details","text":"<p>any number will converted to u32. Negative raises error</p>"},{"location":"reference/DataFrame_to_Struct_unnest/","title":"to_struct and unnest again","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_to_struct(name = \"\")\nDataFrame_unnest(names = NULL)\n</code></pre>"},{"location":"reference/DataFrame_to_Struct_unnest/#arguments","title":"Arguments","text":"<ul> <li><code>name</code>: name of new Series</li> <li><code>names</code>: names of struct columns to unnest, default NULL unnest any struct column</li> </ul>"},{"location":"reference/DataFrame_to_Struct_unnest/#returns","title":"Returns","text":"<p>@to_struct() returns a Series</p> <p>$unnest() returns a DataFrame with all column including any that has been unnested</p> <p>to_struct and unnest again</p> <p>Unnest a DataFrame struct columns.</p>"},{"location":"reference/DataFrame_to_Struct_unnest/#examples","title":"Examples","text":"<pre><code>#round-trip conversion from DataFrame with two columns\ndf = pl$DataFrame(a=1:5,b=c(\"one\",\"two\",\"three\",\"four\",\"five\"))\ns = df$to_struct()\ns\n#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [struct[2]]\n#&gt; [\n#&gt;  {1,\"one\"}\n#&gt;  {2,\"two\"}\n#&gt;  {3,\"three\"}\n#&gt;  {4,\"four\"}\n#&gt;  {5,\"five\"}\n#&gt; ]\ns$to_r() # to r list\n#&gt; $a\n#&gt; [1] 1 2 3 4 5\n#&gt; #&gt; $b\n#&gt; [1] \"one\"   \"two\"   \"three\" \"four\"  \"five\" \n#&gt; #&gt; attr(,\"is_struct\")\n#&gt; [1] TRUE\ndf_s = s$to_frame() #place series in a new DataFrame\ndf_s$unnest() # back to starting df\n#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b     \u2502\n#&gt; \u2502 --- \u2506 ---   \u2502\n#&gt; \u2502 i32 \u2506 str   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 one   \u2502\n#&gt; \u2502 2   \u2506 two   \u2502\n#&gt; \u2502 3   \u2506 three \u2502\n#&gt; \u2502 4   \u2506 four  \u2502\n#&gt; \u2502 5   \u2506 five  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataFrame_to_data_frame/","title":"return polars DataFrame as R data.frame","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_to_data_frame(...)\n## S3 method for class 'DataFrame'\nas.data.frame(x, ...)\n</code></pre>"},{"location":"reference/DataFrame_to_data_frame/#arguments","title":"Arguments","text":"<ul> <li><code>...</code>: any params passed to as.data.frame</li> <li><code>x</code>: DataFrame</li> </ul>"},{"location":"reference/DataFrame_to_data_frame/#returns","title":"Returns","text":"<p>data.frame</p> <p>data.frame</p> <p>return polars DataFrame as R data.frame</p>"},{"location":"reference/DataFrame_to_data_frame/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(iris[1:3,])\ndf$to_data_frame()\n#&gt;   Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n#&gt; 1          5.1         3.5          1.4         0.2  setosa\n#&gt; 2          4.9         3.0          1.4         0.2  setosa\n#&gt; 3          4.7         3.2          1.3         0.2  setosa\n </code></pre>"},{"location":"reference/DataFrame_to_series/","title":"Get Series by idx, if there","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_to_series(idx = 0)\n</code></pre>"},{"location":"reference/DataFrame_to_series/#arguments","title":"Arguments","text":"<ul> <li><code>idx</code>: numeric default 0, zero-index of what column to return as Series</li> </ul>"},{"location":"reference/DataFrame_to_series/#returns","title":"Returns","text":"<p>Series or NULL</p> <p>get one column by idx as series from DataFrame. Unlike get_column this method will not fail if no series found at idx but return a NULL, idx is zero idx.</p>"},{"location":"reference/DataFrame_to_series/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(a=1:4)$to_series()\n#&gt; polars Series: shape: (4,)\n#&gt; Series: 'a' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt; ]\n </code></pre>"},{"location":"reference/DataFrame_unique/","title":"DataFrame_unique","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_unique(subset = NULL, keep = \"first\")\n</code></pre>"},{"location":"reference/DataFrame_unique/#arguments","title":"Arguments","text":"<ul> <li><code>subset</code>: string or vector of strings. Column name(s) to consider when identifying duplicates. If set to NULL (default), use all columns.</li> <li> <p><code>keep</code>: string. Which of the duplicate rows to keep:</p> <ul> <li>\"first\": Keep first unique row.</li> <li>\"last\": Keep last unique row.</li> <li>\"none\": Don\u2019t keep duplicate rows.</li> </ul> </li> </ul>"},{"location":"reference/DataFrame_unique/#returns","title":"Returns","text":"<p>DataFrame</p> <p>Drop duplicate rows from this dataframe.</p>"},{"location":"reference/DataFrame_unique/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  x = as.numeric(c(1, 1:5)),\n  y = as.numeric(c(1, 1:5)),\n  z = as.numeric(c(1, 1, 1:4)))\ndf$unique()$height\n#&gt; [1] 5\ndf$unique(subset = c(\"x\", \"z\"), keep = \"last\")$height\n#&gt; [1] 5\n </code></pre>"},{"location":"reference/DataFrame_var/","title":"Var","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_var(ddof = 1)\n</code></pre>"},{"location":"reference/DataFrame_var/#arguments","title":"Arguments","text":"<ul> <li><code>ddof</code>: integer Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1.</li> </ul>"},{"location":"reference/DataFrame_var/#returns","title":"Returns","text":"<p>A new <code>DataFrame</code> object with applied aggregation.</p> <p>Aggregate the columns of this DataFrame to their variance values.</p>"},{"location":"reference/DataFrame_var/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$var()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg       \u2506 cyl      \u2506 disp       \u2506 hp         \u2506 ... \u2506 vs       \u2506 am       \u2506 gear     \u2506 carb     \u2502\n#&gt; \u2502 ---       \u2506 ---      \u2506 ---        \u2506 ---        \u2506     \u2506 ---      \u2506 ---      \u2506 ---      \u2506 ---      \u2502\n#&gt; \u2502 f64       \u2506 f64      \u2506 f64        \u2506 f64        \u2506     \u2506 f64      \u2506 f64      \u2506 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 36.324103 \u2506 3.189516 \u2506 15360.7998 \u2506 4700.86693 \u2506 ... \u2506 0.254032 \u2506 0.248992 \u2506 0.544355 \u2506 2.608871 \u2502\n#&gt; \u2502           \u2506          \u2506 29         \u2506 5          \u2506     \u2506          \u2506          \u2506          \u2506          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataFrame_width/","title":"Width of DataFrame","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_width()\n</code></pre>"},{"location":"reference/DataFrame_width/#returns","title":"Returns","text":"<p>width as numeric scalar</p> <p>Get width(ncol) of DataFrame</p>"},{"location":"reference/DataFrame_width/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(iris)$width\n#&gt; [1] 5\n </code></pre>"},{"location":"reference/DataFrame_with_columns/","title":"modify/append column(s)","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_with_columns(...)\nDataFrame_with_column(expr)\n</code></pre>"},{"location":"reference/DataFrame_with_columns/#arguments","title":"Arguments","text":"<ul> <li><code>...</code>: any expressions or string column name, or same wrapped in a list</li> <li><code>expr</code>: a single expression or string</li> </ul>"},{"location":"reference/DataFrame_with_columns/#returns","title":"Returns","text":"<p>DataFrame</p> <p>DataFrame</p> <p>add or modify columns with expressions</p>"},{"location":"reference/DataFrame_with_columns/#details","title":"Details","text":"<p>Like dplyr <code>mutate()</code> as it keeps unmentioned columns unlike $select().</p> <p>with_column is derived from with_columns but takes only one expression argument</p>"},{"location":"reference/DataFrame_with_columns/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(iris)$with_columns(\npl$col(\"Sepal.Length\")$abs()$alias(\"abs_SL\"),\n(pl$col(\"Sepal.Length\")+2)$alias(\"add_2_SL\")\n)\n#&gt; shape: (150, 7)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2506 abs_SL \u2506 add_2_SL \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2506 ---    \u2506 ---      \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2506 f64    \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2506 5.1    \u2506 7.1      \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2506 4.9    \u2506 6.9      \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2506 4.7    \u2506 6.7      \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2506 4.6    \u2506 6.6      \u2502\n#&gt; \u2502 ...          \u2506 ...         \u2506 ...          \u2506 ...         \u2506 ...       \u2506 ...    \u2506 ...      \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2506 6.3    \u2506 8.3      \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2506 6.5    \u2506 8.5      \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2506 6.2    \u2506 8.2      \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2506 5.9    \u2506 7.9      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#rename columns by naming expression is concidered experimental\npl$set_polars_options(named_exprs = TRUE) #unlock\n#&gt; $named_exprs\n#&gt; [1] FALSE\n#&gt; pl$DataFrame(iris)$with_columns(\npl$col(\"Sepal.Length\")$abs(), #not named expr will keep name \"Sepal.Length\"\n  SW_add_2 = (pl$col(\"Sepal.Width\")+2)\n)\n#&gt; shape: (150, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2506 SW_add_2 \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2506 ---      \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2506 5.5      \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2506 5.0      \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2506 5.2      \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2506 5.1      \u2502\n#&gt; \u2502 ...          \u2506 ...         \u2506 ...          \u2506 ...         \u2506 ...       \u2506 ...      \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2506 4.5      \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2506 5.0      \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2506 5.4      \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2506 5.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/DataType/","title":"DataTypes polars types","text":"<p>Source: R/datatype.R</p> <p><code>DataType</code> any polars type (ported so far)</p>"},{"location":"reference/DataType/#examples","title":"Examples","text":"<pre><code>print(ls(pl$dtypes))\n#&gt;  [1] \"Binary\"      \"Boolean\"     \"Categorical\" \"Date\"        \"Datetime\"   \n#&gt;  [6] \"Float32\"     \"Float64\"     \"Int16\"       \"Int32\"       \"Int64\"      \n#&gt; [11] \"Int8\"        \"List\"        \"Null\"        \"Struct\"      \"Time\"       \n#&gt; [16] \"UInt16\"      \"UInt32\"      \"UInt64\"      \"UInt8\"       \"Unknown\"    \n#&gt; [21] \"Utf8\"       \npl$dtypes$Float64\n#&gt; DataType: Float64\npl$dtypes$Utf8\n#&gt; DataType: Utf8\npl$List(pl$List(pl$UInt64))\n#&gt; DataType: List(\n#&gt;     List(\n#&gt;         UInt64,\n#&gt;     ),\n#&gt; )\npl$Struct(pl$Field(\"CityNames\", pl$Utf8))\n#&gt; DataType: Struct(\n#&gt;     [\n#&gt;         Field {\n#&gt;             name: \"CityNames\",\n#&gt;             dtype: Utf8,\n#&gt;         },\n#&gt;     ],\n#&gt; )\n# Some DataType use case, this user function fails because....\n## Not run:\npl$Series(1:4)$apply(\\(x) letters[x])\n#&gt; Error: a lambda returned Strings and not the expected Integers .  Try strict=FALSE, or change expected output type or rewrite lambda \n#&gt;  when calling :\n#&gt;  source(\"~/Bureau/Git/not_my_packages/r-polars/make-docs.R\", echo = TRUE)\n## End(Not run)\n#The function changes type from Integer(Int32)[Integers] to char(Utf8)[Strings]\n#specifying the output DataType: Utf8 solves the problem\npl$Series(1:4)$apply(\\(x) letters[x],datatype = pl$dtypes$Utf8)\n#&gt; polars Series: shape: (4,)\n#&gt; Series: '_apply' [str]\n#&gt; [\n#&gt;  \"a\"\n#&gt;  \"b\"\n#&gt;  \"c\"\n#&gt;  \"d\"\n#&gt; ]\n </code></pre>"},{"location":"reference/Err/","title":"Wrap in Err","text":"<p>Source: R/rust_result.R</p> <pre><code>Err(x)\n</code></pre>"},{"location":"reference/Err/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: any R object</li> </ul>"},{"location":"reference/Err/#returns","title":"Returns","text":"<p>same R object wrapped in a Err-result</p> <p>Wrap in Err</p>"},{"location":"reference/Expr-cash-print-open-paren-close-paren/","title":"internal method print Expr","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_print()\n</code></pre> <p>internal method print Expr</p>"},{"location":"reference/Expr-cash-print-open-paren-close-paren/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(iris)\n#&gt; shape: (150, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 ...          \u2506 ...         \u2506 ...          \u2506 ...         \u2506 ...       \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr/","title":"Polars Expr","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_lit(x)\nExpr_suffix(suffix)\nExpr_prefix(prefix)\nExpr_reverse()\n</code></pre>"},{"location":"reference/Expr/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: an R Scalar, or R vector/list (via Series) into Expr</li> <li><code>suffix</code>: string suffix to be added to a name</li> <li><code>prefix</code>: string suffix to be added to a name</li> </ul>"},{"location":"reference/Expr/#returns","title":"Returns","text":"<p>Expr, literal of that value</p> <p>Expr</p> <p>Expr</p> <p>Expr</p> <p>Polars pl$Expr</p>"},{"location":"reference/Expr/#details","title":"Details","text":"<p>pl$lit(NULL) translates into a typeless polars Null</p>"},{"location":"reference/Expr/#examples","title":"Examples","text":"<pre><code>2+2\n#&gt; [1] 4\n#Expr has the following methods/constructors\nls(polars:::Expr)\n#&gt;   [1] \"abs\"              \"add\"              \"agg_groups\"       \"alias\"           \n#&gt;   [5] \"all\"              \"and\"              \"any\"              \"append\"          \n#&gt;   [9] \"apply\"            \"arccos\"           \"arccosh\"          \"arcsin\"          \n#&gt;  [13] \"arcsinh\"          \"arctan\"           \"arctanh\"          \"arg_max\"         \n#&gt;  [17] \"arg_min\"          \"arg_sort\"         \"arg_unique\"       \"argsort\"         \n#&gt;  [21] \"arr\"              \"backward_fill\"    \"bin\"              \"cast\"            \n#&gt;  [25] \"cat\"              \"ceil\"             \"clip\"             \"clip_max\"        \n#&gt;  [29] \"clip_min\"         \"cos\"              \"cosh\"             \"count\"           \n#&gt;  [33] \"cumcount\"         \"cummax\"           \"cummin\"           \"cumprod\"         \n#&gt;  [37] \"cumsum\"           \"cumulative_eval\"  \"diff\"             \"div\"             \n#&gt;  [41] \"dot\"              \"drop_nans\"        \"drop_nulls\"       \"dt\"              \n#&gt;  [45] \"entropy\"          \"eq\"               \"ewm_mean\"         \"ewm_std\"         \n#&gt;  [49] \"ewm_var\"          \"exclude\"          \"exp\"              \"explode\"         \n#&gt;  [53] \"extend_constant\"  \"extend_expr\"      \"fill_nan\"         \"fill_null\"       \n#&gt;  [57] \"filter\"           \"first\"            \"flatten\"          \"floor\"           \n#&gt;  [61] \"forward_fill\"     \"gt\"               \"gt_eq\"            \"hash\"            \n#&gt;  [65] \"head\"             \"inspect\"          \"interpolate\"      \"is_between\"      \n#&gt;  [69] \"is_duplicated\"    \"is_finite\"        \"is_first\"         \"is_in\"           \n#&gt;  [73] \"is_infinite\"      \"is_nan\"           \"is_not\"           \"is_not_nan\"      \n#&gt;  [77] \"is_not_null\"      \"is_null\"          \"is_unique\"        \"keep_name\"       \n#&gt;  [81] \"kurtosis\"         \"last\"             \"len\"              \"limit\"           \n#&gt;  [85] \"list\"             \"lit\"              \"lit_to_df\"        \"lit_to_s\"        \n#&gt;  [89] \"log\"              \"log10\"            \"lower_bound\"      \"lt\"              \n#&gt;  [93] \"lt_eq\"            \"map\"              \"map_alias\"        \"max\"             \n#&gt;  [97] \"mean\"             \"median\"           \"meta\"             \"min\"             \n#&gt; [101] \"mode\"             \"mul\"              \"n_unique\"         \"nan_max\"         \n#&gt; [105] \"nan_min\"          \"neq\"              \"null_count\"       \"or\"              \n#&gt; [109] \"over\"             \"pct_change\"       \"pow\"              \"prefix\"          \n#&gt; [113] \"print\"            \"product\"          \"quantile\"         \"rank\"            \n#&gt; [117] \"rechunk\"          \"reinterpret\"      \"rep\"              \"rep_extend\"      \n#&gt; [121] \"repeat_by\"        \"reshape\"          \"reverse\"          \"rolling_max\"     \n#&gt; [125] \"rolling_mean\"     \"rolling_median\"   \"rolling_min\"      \"rolling_quantile\"\n#&gt; [129] \"rolling_skew\"     \"rolling_std\"      \"rolling_sum\"      \"rolling_var\"     \n#&gt; [133] \"round\"            \"rpow\"             \"sample\"           \"search_sorted\"   \n#&gt; [137] \"set_sorted\"       \"shift\"            \"shift_and_fill\"   \"shrink_dtype\"    \n#&gt; [141] \"shuffle\"          \"sign\"             \"sin\"              \"sinh\"            \n#&gt; [145] \"skew\"             \"slice\"            \"sort\"             \"sort_by\"         \n#&gt; [149] \"sqrt\"             \"std\"              \"str\"              \"struct\"          \n#&gt; [153] \"sub\"              \"suffix\"           \"sum\"              \"tail\"            \n#&gt; [157] \"take\"             \"take_every\"       \"tan\"              \"tanh\"            \n#&gt; [161] \"to_physical\"      \"to_r\"             \"to_struct\"        \"top_k\"           \n#&gt; [165] \"unique\"           \"unique_counts\"    \"upper_bound\"      \"value_counts\"    \n#&gt; [169] \"var\"              \"where\"            \"xor\"             \npl$col(\"this_column\")$sum()$over(\"that_column\")\n#&gt; polars Expr: col(\"this_column\").sum().over([col(\"that_column\")])\n#scalars to literal, explit `pl$lit(42)` implicit `+ 2`\npl$col(\"some_column\") / pl$lit(42) + 2\n#&gt; polars Expr: [([(col(\"some_column\")) / (42f64)]) + (2f64)]\n#vector to literal explicitly via Series and back again\n#R vector to expression and back again\npl$select(pl$lit(pl$Series(1:4)))$to_list()[[1L]]\n#&gt; [1] 1 2 3 4\n#r vecot to literal and back r vector\npl$lit(1:4)$to_r()\n#&gt; [1] 1 2 3 4\n#r vector to literal to dataframe\npl$select(pl$lit(1:4))\n#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n#r vector to literal to Series\npl$lit(1:4)$lit_to_s()\n#&gt; polars Series: shape: (4,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt; ]\n#vectors to literal implicitly\n(pl$lit(2) + 1:4 ) / 4:1\n#&gt; polars Expr: [([(2f64) + (Series)]) / (Series)]\npl$col(\"some\")$suffix(\"_column\")\n#&gt; polars Expr: RENAME_ALIAS col(\"some\")\npl$col(\"some\")$suffix(\"_column\")\n#&gt; polars Expr: RENAME_ALIAS col(\"some\")\npl$DataFrame(list(a=1:5))$select(pl$col(\"a\")$reverse())\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprBin_contains/","title":"contains","text":"<p>Source: R/expr__binary.R</p>"},{"location":"reference/ExprBin_contains/#arguments","title":"Arguments","text":"<ul> <li><code>lit</code>: The binary substring to look for</li> </ul>"},{"location":"reference/ExprBin_contains/#returns","title":"Returns","text":"<p>Expr returning a Boolean</p> <p>R Check if binaries in Series contain a binary substring.</p>"},{"location":"reference/ExprBin_decode/","title":"decode","text":"<p>Source: R/expr__binary.R</p>"},{"location":"reference/ExprBin_decode/#arguments","title":"Arguments","text":"<ul> <li><code>encoding</code>: binary choice either 'hex' or 'base64'</li> <li><code>strict</code>: Raise an error if the underlying value cannot be decoded, otherwise mask out with a null value.</li> </ul>"},{"location":"reference/ExprBin_decode/#returns","title":"Returns","text":"<p>binary array with values decoded using provided encoding</p> <p>Decode a value using the provided encoding.</p>"},{"location":"reference/ExprBin_encode/","title":"encode","text":"<p>Source: R/expr__binary.R</p>"},{"location":"reference/ExprBin_encode/#arguments","title":"Arguments","text":"<ul> <li><code>encoding</code>: binary choice either 'hex' or 'base64'</li> </ul>"},{"location":"reference/ExprBin_encode/#returns","title":"Returns","text":"<p>binary array with values encoded using provided encoding</p> <p>Encode a value using the provided encoding.</p>"},{"location":"reference/ExprBin_ends_with/","title":"ends_with","text":"<p>Source: R/expr__binary.R</p>"},{"location":"reference/ExprBin_ends_with/#returns","title":"Returns","text":"<p>Expr returning a Boolean</p> <p>Check if string values end with a binary substring.</p>"},{"location":"reference/ExprBin_starts_with/","title":"starts_with","text":"<p>Source: R/expr__binary.R</p>"},{"location":"reference/ExprBin_starts_with/#arguments","title":"Arguments","text":"<ul> <li><code>sub</code>: Prefix substring.</li> </ul> <p>Check if values starts with a binary substring.</p>"},{"location":"reference/ExprCat_set_ordering/","title":"Set Ordering","text":"<p>Source: R/expr__categorical.R</p>"},{"location":"reference/ExprCat_set_ordering/#arguments","title":"Arguments","text":"<ul> <li> <p><code>ordering</code>: string either 'physical' or 'lexical'</p> <ul> <li>'physical' -&gt; Use the physical representation of the categories to determine the order (default).</li> <li>'lexical' -&gt; Use the string values to determine the ordering.</li> </ul> </li> </ul>"},{"location":"reference/ExprCat_set_ordering/#returns","title":"Returns","text":"<p>bool: TRUE if equal</p> <p>Determine how this categorical series should be sorted.</p>"},{"location":"reference/ExprCat_set_ordering/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  cats =  c(\"z\", \"z\", \"k\", \"a\", \"b\"),\n  vals =  c(3, 1, 2, 2, 3)\n)$with_columns(\npl$col(\"cats\")$cast(pl$Categorical)$cat$set_ordering(\"physical\")\n)\ndf$select(pl$all()$sort())\n#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cats \u2506 vals \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 cat  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 z    \u2506 1.0  \u2502\n#&gt; \u2502 z    \u2506 2.0  \u2502\n#&gt; \u2502 k    \u2506 2.0  \u2502\n#&gt; \u2502 a    \u2506 3.0  \u2502\n#&gt; \u2502 b    \u2506 3.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_cast_time_unit/","title":"cast_time_unit","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_cast_time_unit/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_cast_time_unit/#arguments","title":"Arguments","text":"<ul> <li><code>tu</code>: string option either 'ns', 'us', or 'ms'</li> </ul>"},{"location":"reference/ExprDT_cast_time_unit/#returns","title":"Returns","text":"<p>Expr of i64</p> <p>Cast the underlying data to another time unit. This may lose precision. The corresponding global timepoint will stay unchanged +/- precision.</p>"},{"location":"reference/ExprDT_cast_time_unit/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  date = pl$date_range(low = as.Date(\"2001-1-1\"), high = as.Date(\"2001-1-3\"), interval = \"1d\")\n)\ndf$select(\npl$col(\"date\"),\npl$col(\"date\")$dt$cast_time_unit()$alias(\"cast_time_unit_ns\"),\npl$col(\"date\")$dt$cast_time_unit(tu=\"ms\")$alias(\"cast_time_unit_ms\")\n)\n#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                \u2506 cast_time_unit_ns   \u2506 cast_time_unit_ms   \u2502\n#&gt; \u2502 ---                 \u2506 ---                 \u2506 ---                 \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 datetime[ns]        \u2506 datetime[ms]        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2001-01-01 00:00:00 \u2506 2001-01-01 00:00:00 \u2506 2001-01-01 00:00:00 \u2502\n#&gt; \u2502 2001-01-02 00:00:00 \u2506 2001-01-02 00:00:00 \u2506 2001-01-02 00:00:00 \u2502\n#&gt; \u2502 2001-01-03 00:00:00 \u2506 2001-01-03 00:00:00 \u2506 2001-01-03 00:00:00 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_combine/","title":"Combine Data and Time","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_combine/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_combine/#arguments","title":"Arguments","text":"<ul> <li><code>tm</code>: Expr or numeric or PTime, the number of epoch since or before(if negative) the Date or tm is an Expr e.g. a column of DataType 'Time' or something into an Expr.</li> <li><code>tu</code>: time unit of epochs, default is \"us\", if tm is a PTime, then tz passed via PTime.</li> </ul>"},{"location":"reference/ExprDT_combine/#returns","title":"Returns","text":"<p>Date/Datetime expr</p> <p>Create a naive Datetime from an existing Date/Datetime expression and a Time. Each date/datetime in the first half of the interval is mapped to the start of its bucket. Each date/datetime in the second half of the interval is mapped to the end of its bucket.</p>"},{"location":"reference/ExprDT_combine/#details","title":"Details","text":"<p>The <code>tu</code> allows the following time time units the following string language:</p> <ul> <li>1ns # 1 nanosecond</li> <li>1us # 1 microsecond</li> <li>1ms # 1 millisecond</li> </ul>"},{"location":"reference/ExprDT_combine/#examples","title":"Examples","text":"<pre><code>#Using pl$PTime\npl$lit(as.Date(\"2021-01-01\"))$dt$combine(pl$PTime(\"02:34:12\"))$lit_to_s()\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [datetime[ns]]\n#&gt; [\n#&gt;  2021-01-01 02:34:12\n#&gt; ]\npl$lit(as.Date(\"2021-01-01\"))$dt$combine(pl$PTime(3600 * 1.5, tu=\"s\"))$lit_to_s()\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [datetime[ns]]\n#&gt; [\n#&gt;  2021-01-01 01:30:00\n#&gt; ]\npl$lit(as.Date(\"2021-01-01\"))$dt$combine(pl$PTime(3600 * 1.5E6 + 123, tu=\"us\"))$lit_to_s()\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [datetime[ns]]\n#&gt; [\n#&gt;  2021-01-01 01:30:00.000123\n#&gt; ]\n#pass double and set tu manually\npl$lit(as.Date(\"2021-01-01\"))$dt$combine(3600 * 1.5E6 + 123, tu=\"us\")$lit_to_s()\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [datetime[\u03bcs]]\n#&gt; [\n#&gt;  2021-01-01 01:30:00.000123\n#&gt; ]\n#if needed to convert back to R it is more intuitive to set a specific time zone\nexpr = pl$lit(as.Date(\"2021-01-01\"))$dt$combine(3600 * 1.5E6 + 123, tu=\"us\")\nexpr$cast(pl$Datetime(tu = \"us\", tz = \"GMT\"))$to_r()\n#&gt; [1] \"2021-01-01 01:30:00 GMT\"\n </code></pre>"},{"location":"reference/ExprDT_convert_time_zone/","title":"With Time Zone","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_convert_time_zone/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_convert_time_zone/#arguments","title":"Arguments","text":"<ul> <li><code>tz</code>: String time zone from base::OlsonNames()</li> </ul>"},{"location":"reference/ExprDT_convert_time_zone/#returns","title":"Returns","text":"<p>Expr of i64</p> <p>Set time zone for a Series of type Datetime. Use to change time zone annotation, but keep the corresponding global timepoint.</p>"},{"location":"reference/ExprDT_convert_time_zone/#details","title":"Details","text":"<p>corresponds to in R manually modifying the tzone attribute of POSIXt objects</p>"},{"location":"reference/ExprDT_convert_time_zone/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  date = pl$date_range(low = as.Date(\"2001-3-1\"), high = as.Date(\"2001-5-1\"), interval = \"1mo\")\n)\ndf$select(\npl$col(\"date\"),\npl$col(\"date\")\n$dt$replace_time_zone(\"Europe/Amsterdam\")\n$dt$convert_time_zone(\"Europe/London\")\n$alias(\"London_with\"),\npl$col(\"date\")\n$dt$tz_localize(\"Europe/London\")\n$alias(\"London_localize\")\n)\n#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                \u2506 London_with                 \u2506 London_localize             \u2502\n#&gt; \u2502 ---                 \u2506 ---                         \u2506 ---                         \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 datetime[\u03bcs, Europe/London] \u2506 datetime[\u03bcs, Europe/London] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2001-03-01 00:00:00 \u2506 2001-02-28 23:00:00 GMT     \u2506 2001-03-01 00:00:00 GMT     \u2502\n#&gt; \u2502 2001-04-01 00:00:00 \u2506 2001-03-31 23:00:00 BST     \u2506 2001-04-01 00:00:00 BST     \u2502\n#&gt; \u2502 2001-05-01 00:00:00 \u2506 2001-04-30 23:00:00 BST     \u2506 2001-05-01 00:00:00 BST     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_day/","title":"Day","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_day/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_day/#returns","title":"Returns","text":"<p>Expr of day as UInt32</p> <p>Extract day from underlying Date representation. Applies to Date and Datetime columns. Returns the day of month starting from 1. The return value ranges from 1 to 31. (The last day of month differs by months.)</p>"},{"location":"reference/ExprDT_day/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  date = pl$date_range(\nas.Date(\"2020-12-25\"),\nas.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\"\n)\n)\ndf$with_columns(\npl$col(\"date\")$dt$day()$alias(\"day\")\n)\n#&gt; shape: (12, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 day \u2502\n#&gt; \u2502 ---                     \u2506 --- \u2502\n#&gt; \u2502 datetime[\u03bcs, GMT]       \u2506 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 00:00:00 GMT \u2506 25  \u2502\n#&gt; \u2502 2020-12-26 00:00:00 GMT \u2506 26  \u2502\n#&gt; \u2502 2020-12-27 00:00:00 GMT \u2506 27  \u2502\n#&gt; \u2502 2020-12-28 00:00:00 GMT \u2506 28  \u2502\n#&gt; \u2502 ...                     \u2506 ... \u2502\n#&gt; \u2502 2021-01-02 00:00:00 GMT \u2506 2   \u2502\n#&gt; \u2502 2021-01-03 00:00:00 GMT \u2506 3   \u2502\n#&gt; \u2502 2021-01-04 00:00:00 GMT \u2506 4   \u2502\n#&gt; \u2502 2021-01-05 00:00:00 GMT \u2506 5   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_days/","title":"Days","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_days/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_days/#returns","title":"Returns","text":"<p>Expr of i64</p> <p>Extract the days from a Duration type.</p>"},{"location":"reference/ExprDT_days/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  date = pl$date_range(low = as.Date(\"2020-3-1\"), high = as.Date(\"2020-5-1\"), interval = \"1mo\")\n)\ndf$select(\npl$col(\"date\"),\npl$col(\"date\")$diff()$dt$days()$alias(\"days_diff\")\n)\n#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                \u2506 days_diff \u2502\n#&gt; \u2502 ---                 \u2506 ---       \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 i64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-03-01 00:00:00 \u2506 null      \u2502\n#&gt; \u2502 2020-04-01 00:00:00 \u2506 31        \u2502\n#&gt; \u2502 2020-05-01 00:00:00 \u2506 30        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_epoch/","title":"Epoch","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_epoch/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_epoch/#arguments","title":"Arguments","text":"<ul> <li><code>tu</code>: string option either 'ns', 'us', 'ms', 's' or 'd'</li> </ul>"},{"location":"reference/ExprDT_epoch/#returns","title":"Returns","text":"<p>Expr of epoch as UInt32</p> <p>Get the time passed since the Unix EPOCH in the give time unit.</p>"},{"location":"reference/ExprDT_epoch/#details","title":"Details","text":"<p>ns and perhaps us will exceed integerish limit if returning to R as flaot64/double.</p>"},{"location":"reference/ExprDT_epoch/#examples","title":"Examples","text":"<pre><code>pl$date_range(as.Date(\"2022-1-1\"),lazy = TRUE)$dt$epoch(\"ns\")$lit_to_s()\n#&gt; polars Series: shape: (1,)\n#&gt; Series: 'literal' [i64]\n#&gt; [\n#&gt;  1640995200000000000\n#&gt; ]\npl$date_range(as.Date(\"2022-1-1\"),lazy = TRUE)$dt$epoch(\"ms\")$lit_to_s()\n#&gt; polars Series: shape: (1,)\n#&gt; Series: 'literal' [i64]\n#&gt; [\n#&gt;  1640995200000\n#&gt; ]\npl$date_range(as.Date(\"2022-1-1\"),lazy = TRUE)$dt$epoch(\"s\")$lit_to_s()\n#&gt; polars Series: shape: (1,)\n#&gt; Series: 'literal' [i64]\n#&gt; [\n#&gt;  1640995200\n#&gt; ]\npl$date_range(as.Date(\"2022-1-1\"),lazy = TRUE)$dt$epoch(\"d\")$lit_to_s()\n#&gt; polars Series: shape: (1,)\n#&gt; Series: 'literal' [i32]\n#&gt; [\n#&gt;  18993\n#&gt; ]\n </code></pre>"},{"location":"reference/ExprDT_hour/","title":"Hour","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_hour/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_hour/#returns","title":"Returns","text":"<p>Expr of hour as UInt32</p> <p>Extract hour from underlying Datetime representation. Applies to Datetime columns. Returns the hour number from 0 to 23.</p>"},{"location":"reference/ExprDT_hour/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  date = pl$date_range(\nas.Date(\"2020-12-25\"),\nas.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\"\n)\n)\ndf$with_columns(\npl$col(\"date\")$dt$hour()$alias(\"hour\")\n)\n#&gt; shape: (12, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 hour \u2502\n#&gt; \u2502 ---                     \u2506 ---  \u2502\n#&gt; \u2502 datetime[\u03bcs, GMT]       \u2506 u32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 00:00:00 GMT \u2506 0    \u2502\n#&gt; \u2502 2020-12-26 00:00:00 GMT \u2506 0    \u2502\n#&gt; \u2502 2020-12-27 00:00:00 GMT \u2506 0    \u2502\n#&gt; \u2502 2020-12-28 00:00:00 GMT \u2506 0    \u2502\n#&gt; \u2502 ...                     \u2506 ...  \u2502\n#&gt; \u2502 2021-01-02 00:00:00 GMT \u2506 0    \u2502\n#&gt; \u2502 2021-01-03 00:00:00 GMT \u2506 0    \u2502\n#&gt; \u2502 2021-01-04 00:00:00 GMT \u2506 0    \u2502\n#&gt; \u2502 2021-01-05 00:00:00 GMT \u2506 0    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_hours/","title":"Hours","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_hours/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_hours/#returns","title":"Returns","text":"<p>Expr of i64</p> <p>Extract the hours from a Duration type.</p>"},{"location":"reference/ExprDT_hours/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  date = pl$date_range(low = as.Date(\"2020-1-1\"), high = as.Date(\"2020-1-4\"), interval = \"1d\")\n)\ndf$select(\npl$col(\"date\"),\npl$col(\"date\")$diff()$dt$hours()$alias(\"hours_diff\")\n)\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                \u2506 hours_diff \u2502\n#&gt; \u2502 ---                 \u2506 ---        \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 i64        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 00:00:00 \u2506 null       \u2502\n#&gt; \u2502 2020-01-02 00:00:00 \u2506 24         \u2502\n#&gt; \u2502 2020-01-03 00:00:00 \u2506 24         \u2502\n#&gt; \u2502 2020-01-04 00:00:00 \u2506 24         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_iso_year/","title":"Iso-Year","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_iso_year/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_iso_year/#returns","title":"Returns","text":"<p>Expr of iso_year as Int32</p> <p>Extract ISO year from underlying Date representation. Applies to Date and Datetime columns. Returns the year number in the ISO standard. This may not correspond with the calendar year.</p>"},{"location":"reference/ExprDT_iso_year/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  date = pl$date_range(\nas.Date(\"2020-12-25\"),\nas.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\"\n)\n)\ndf$with_columns(\npl$col(\"date\")$dt$year()$alias(\"year\"),\npl$col(\"date\")$dt$iso_year()$alias(\"iso_year\")\n)\n#&gt; shape: (12, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 year \u2506 iso_year \u2502\n#&gt; \u2502 ---                     \u2506 ---  \u2506 ---      \u2502\n#&gt; \u2502 datetime[\u03bcs, GMT]       \u2506 i32  \u2506 i32      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 00:00:00 GMT \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 2020-12-26 00:00:00 GMT \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 2020-12-27 00:00:00 GMT \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 2020-12-28 00:00:00 GMT \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 ...                     \u2506 ...  \u2506 ...      \u2502\n#&gt; \u2502 2021-01-02 00:00:00 GMT \u2506 2021 \u2506 2020     \u2502\n#&gt; \u2502 2021-01-03 00:00:00 GMT \u2506 2021 \u2506 2020     \u2502\n#&gt; \u2502 2021-01-04 00:00:00 GMT \u2506 2021 \u2506 2021     \u2502\n#&gt; \u2502 2021-01-05 00:00:00 GMT \u2506 2021 \u2506 2021     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_microsecond/","title":"Microsecond","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_microsecond/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_microsecond/#returns","title":"Returns","text":"<p>Expr of microsecond as Int64</p> <p>Extract microseconds from underlying Datetime representation. Applies to Datetime columns.</p>"},{"location":"reference/ExprDT_microsecond/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(date = pl$date_range(\nas.numeric(as.POSIXct(\"2001-1-1\"))*1E6+456789, #manually convert to us\nas.numeric(as.POSIXct(\"2001-1-1 00:00:6\"))*1E6,\n  interval = \"2s654321us\",\n  time_unit = \"us\" #instruct polars input is us, and store as us\n))$with_columns(\npl$col(\"date\")$cast(pl$Int64)$alias(\"datetime int64\"),\npl$col(\"date\")$dt$microsecond()$alias(\"microsecond\")\n)\n#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 datetime int64  \u2506 microsecond \u2502\n#&gt; \u2502 ---                     \u2506 ---             \u2506 ---         \u2502\n#&gt; \u2502 datetime[\u03bcs]            \u2506 i64             \u2506 u32         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2000-12-31 23:00:00.456 \u2506 978303600456000 \u2506 456000      \u2502\n#&gt; \u2502 2000-12-31 23:00:03.110 \u2506 978303603110000 \u2506 110000      \u2502\n#&gt; \u2502 2000-12-31 23:00:05.764 \u2506 978303605764000 \u2506 764000      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_microseconds/","title":"microseconds","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_microseconds/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_microseconds/#returns","title":"Returns","text":"<p>Expr of i64</p> <p>Extract the microseconds from a Duration type.</p>"},{"location":"reference/ExprDT_microseconds/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(date = pl$date_range(\n    low = as.POSIXct(\"2020-1-1\", tz = \"GMT\"),\n    high = as.POSIXct(\"2020-1-1 00:00:01\", tz = \"GMT\"),\n    interval = \"1ms\"\n))\ndf$select(\npl$col(\"date\"),\npl$col(\"date\")$diff()$dt$microseconds()$alias(\"seconds_diff\")\n)\n#&gt; shape: (1001, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 seconds_diff \u2502\n#&gt; \u2502 ---                     \u2506 ---          \u2502\n#&gt; \u2502 datetime[\u03bcs]            \u2506 i64          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 00:00:00     \u2506 null         \u2502\n#&gt; \u2502 2020-01-01 00:00:00.001 \u2506 1000         \u2502\n#&gt; \u2502 2020-01-01 00:00:00.002 \u2506 1000         \u2502\n#&gt; \u2502 2020-01-01 00:00:00.003 \u2506 1000         \u2502\n#&gt; \u2502 ...                     \u2506 ...          \u2502\n#&gt; \u2502 2020-01-01 00:00:00.997 \u2506 1000         \u2502\n#&gt; \u2502 2020-01-01 00:00:00.998 \u2506 1000         \u2502\n#&gt; \u2502 2020-01-01 00:00:00.999 \u2506 1000         \u2502\n#&gt; \u2502 2020-01-01 00:00:01     \u2506 1000         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_millisecond/","title":"Millisecond","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_millisecond/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_millisecond/#returns","title":"Returns","text":"<p>Expr of millisecond as Int64</p> <p>Extract milliseconds from underlying Datetime representation. Applies to Datetime columns.</p>"},{"location":"reference/ExprDT_millisecond/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(date = pl$date_range(\nas.numeric(as.POSIXct(\"2001-1-1\"))*1E6+456789, #manually convert to us\nas.numeric(as.POSIXct(\"2001-1-1 00:00:6\"))*1E6,\n  interval = \"2s654321us\",\n  time_unit = \"us\" #instruct polars input is us, and store as us\n))$with_columns(\npl$col(\"date\")$cast(pl$Int64)$alias(\"datetime int64\"),\npl$col(\"date\")$dt$millisecond()$alias(\"millisecond\")\n)\n#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 datetime int64  \u2506 millisecond \u2502\n#&gt; \u2502 ---                     \u2506 ---             \u2506 ---         \u2502\n#&gt; \u2502 datetime[\u03bcs]            \u2506 i64             \u2506 u32         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2000-12-31 23:00:00.456 \u2506 978303600456000 \u2506 456         \u2502\n#&gt; \u2502 2000-12-31 23:00:03.110 \u2506 978303603110000 \u2506 110         \u2502\n#&gt; \u2502 2000-12-31 23:00:05.764 \u2506 978303605764000 \u2506 764         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_milliseconds/","title":"milliseconds","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_milliseconds/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_milliseconds/#returns","title":"Returns","text":"<p>Expr of i64</p> <p>Extract the milliseconds from a Duration type.</p>"},{"location":"reference/ExprDT_milliseconds/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(date = pl$date_range(\n    low = as.POSIXct(\"2020-1-1\", tz = \"GMT\"),\n    high = as.POSIXct(\"2020-1-1 00:00:01\", tz = \"GMT\"),\n    interval = \"1ms\"\n))\ndf$select(\npl$col(\"date\"),\npl$col(\"date\")$diff()$dt$milliseconds()$alias(\"seconds_diff\")\n)\n#&gt; shape: (1001, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 seconds_diff \u2502\n#&gt; \u2502 ---                     \u2506 ---          \u2502\n#&gt; \u2502 datetime[\u03bcs]            \u2506 i64          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 00:00:00     \u2506 null         \u2502\n#&gt; \u2502 2020-01-01 00:00:00.001 \u2506 1            \u2502\n#&gt; \u2502 2020-01-01 00:00:00.002 \u2506 1            \u2502\n#&gt; \u2502 2020-01-01 00:00:00.003 \u2506 1            \u2502\n#&gt; \u2502 ...                     \u2506 ...          \u2502\n#&gt; \u2502 2020-01-01 00:00:00.997 \u2506 1            \u2502\n#&gt; \u2502 2020-01-01 00:00:00.998 \u2506 1            \u2502\n#&gt; \u2502 2020-01-01 00:00:00.999 \u2506 1            \u2502\n#&gt; \u2502 2020-01-01 00:00:01     \u2506 1            \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_minute/","title":"Minute","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_minute/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_minute/#returns","title":"Returns","text":"<p>Expr of minute as UInt32</p> <p>Extract minutes from underlying Datetime representation. Applies to Datetime columns. Returns the minute number from 0 to 59.</p>"},{"location":"reference/ExprDT_minute/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  date = pl$date_range(\nas.Date(\"2020-12-25\"),\nas.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\"\n)\n)\ndf$with_columns(\npl$col(\"date\")$dt$minute()$alias(\"minute\")\n)\n#&gt; shape: (12, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 minute \u2502\n#&gt; \u2502 ---                     \u2506 ---    \u2502\n#&gt; \u2502 datetime[\u03bcs, GMT]       \u2506 u32    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 00:00:00 GMT \u2506 0      \u2502\n#&gt; \u2502 2020-12-26 00:00:00 GMT \u2506 0      \u2502\n#&gt; \u2502 2020-12-27 00:00:00 GMT \u2506 0      \u2502\n#&gt; \u2502 2020-12-28 00:00:00 GMT \u2506 0      \u2502\n#&gt; \u2502 ...                     \u2506 ...    \u2502\n#&gt; \u2502 2021-01-02 00:00:00 GMT \u2506 0      \u2502\n#&gt; \u2502 2021-01-03 00:00:00 GMT \u2506 0      \u2502\n#&gt; \u2502 2021-01-04 00:00:00 GMT \u2506 0      \u2502\n#&gt; \u2502 2021-01-05 00:00:00 GMT \u2506 0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_minutes/","title":"Minutes","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_minutes/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_minutes/#returns","title":"Returns","text":"<p>Expr of i64</p> <p>Extract the minutes from a Duration type.</p>"},{"location":"reference/ExprDT_minutes/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  date = pl$date_range(low = as.Date(\"2020-1-1\"), high = as.Date(\"2020-1-4\"), interval = \"1d\")\n)\ndf$select(\npl$col(\"date\"),\npl$col(\"date\")$diff()$dt$minutes()$alias(\"minutes_diff\")\n)\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                \u2506 minutes_diff \u2502\n#&gt; \u2502 ---                 \u2506 ---          \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 i64          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 00:00:00 \u2506 null         \u2502\n#&gt; \u2502 2020-01-02 00:00:00 \u2506 1440         \u2502\n#&gt; \u2502 2020-01-03 00:00:00 \u2506 1440         \u2502\n#&gt; \u2502 2020-01-04 00:00:00 \u2506 1440         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_month/","title":"Month","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_month/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_month/#returns","title":"Returns","text":"<p>Expr of month as UInt32</p> <p>Extract month from underlying Date representation. Applies to Date and Datetime columns. Returns the month number starting from 1. The return value ranges from 1 to 12.</p>"},{"location":"reference/ExprDT_month/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  date = pl$date_range(\nas.Date(\"2020-12-25\"),\nas.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\"\n)\n)\ndf$with_columns(\npl$col(\"date\")$dt$month()$alias(\"month\")\n)\n#&gt; shape: (12, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 month \u2502\n#&gt; \u2502 ---                     \u2506 ---   \u2502\n#&gt; \u2502 datetime[\u03bcs, GMT]       \u2506 u32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 00:00:00 GMT \u2506 12    \u2502\n#&gt; \u2502 2020-12-26 00:00:00 GMT \u2506 12    \u2502\n#&gt; \u2502 2020-12-27 00:00:00 GMT \u2506 12    \u2502\n#&gt; \u2502 2020-12-28 00:00:00 GMT \u2506 12    \u2502\n#&gt; \u2502 ...                     \u2506 ...   \u2502\n#&gt; \u2502 2021-01-02 00:00:00 GMT \u2506 1     \u2502\n#&gt; \u2502 2021-01-03 00:00:00 GMT \u2506 1     \u2502\n#&gt; \u2502 2021-01-04 00:00:00 GMT \u2506 1     \u2502\n#&gt; \u2502 2021-01-05 00:00:00 GMT \u2506 1     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_nanosecond/","title":"Nanosecond","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_nanosecond/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_nanosecond/#returns","title":"Returns","text":"<p>Expr of second as Int64</p> <p>Extract seconds from underlying Datetime representation. Applies to Datetime columns. Returns the integer second number from 0 to 59, or a floating point number from 0 &lt; 60 if <code>fractional=True</code> that includes any milli/micro/nanosecond component.</p>"},{"location":"reference/ExprDT_nanosecond/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(date = pl$date_range(\nas.numeric(as.POSIXct(\"2001-1-1\"))*1E9+123456789, #manually convert to us\nas.numeric(as.POSIXct(\"2001-1-1 00:00:6\"))*1E9,\n  interval = \"1s987654321ns\",\n  time_unit = \"ns\" #instruct polars input is us, and store as us\n))$with_columns(\npl$col(\"date\")$cast(pl$Int64)$alias(\"datetime int64\"),\npl$col(\"date\")$dt$nanosecond()$alias(\"nanosecond\")\n)\n#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 datetime int64     \u2506 nanosecond \u2502\n#&gt; \u2502 ---                     \u2506 ---                \u2506 ---        \u2502\n#&gt; \u2502 datetime[ns]            \u2506 i64                \u2506 u32        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2000-12-31 23:00:00.123 \u2506 978303600123000000 \u2506 123000000  \u2502\n#&gt; \u2502 2000-12-31 23:00:02.110 \u2506 978303602110000000 \u2506 110000000  \u2502\n#&gt; \u2502 2000-12-31 23:00:04.097 \u2506 978303604097000000 \u2506 97000000   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_nanoseconds/","title":"nanoseconds","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_nanoseconds/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_nanoseconds/#returns","title":"Returns","text":"<p>Expr of i64</p> <p>Extract the nanoseconds from a Duration type.</p>"},{"location":"reference/ExprDT_nanoseconds/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(date = pl$date_range(\n    low = as.POSIXct(\"2020-1-1\", tz = \"GMT\"),\n    high = as.POSIXct(\"2020-1-1 00:00:01\", tz = \"GMT\"),\n    interval = \"1ms\"\n))\ndf$select(\npl$col(\"date\"),\npl$col(\"date\")$diff()$dt$nanoseconds()$alias(\"seconds_diff\")\n)\n#&gt; shape: (1001, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 seconds_diff \u2502\n#&gt; \u2502 ---                     \u2506 ---          \u2502\n#&gt; \u2502 datetime[\u03bcs]            \u2506 i64          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 00:00:00     \u2506 null         \u2502\n#&gt; \u2502 2020-01-01 00:00:00.001 \u2506 1000000      \u2502\n#&gt; \u2502 2020-01-01 00:00:00.002 \u2506 1000000      \u2502\n#&gt; \u2502 2020-01-01 00:00:00.003 \u2506 1000000      \u2502\n#&gt; \u2502 ...                     \u2506 ...          \u2502\n#&gt; \u2502 2020-01-01 00:00:00.997 \u2506 1000000      \u2502\n#&gt; \u2502 2020-01-01 00:00:00.998 \u2506 1000000      \u2502\n#&gt; \u2502 2020-01-01 00:00:00.999 \u2506 1000000      \u2502\n#&gt; \u2502 2020-01-01 00:00:01     \u2506 1000000      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_offset_by/","title":"Offset By","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_offset_by/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_offset_by/#arguments","title":"Arguments","text":"<ul> <li><code>by</code>: optional string encoding duration see details.</li> </ul>"},{"location":"reference/ExprDT_offset_by/#returns","title":"Returns","text":"<p>Date/Datetime expr</p> <p>Offset this date by a relative time offset. This differs from <code>pl$col(\"foo_datetime_tu\") + value_tu</code> in that it can take months and leap years into account. Note that only a single minus sign is allowed in the <code>by</code> string, as the first character.</p>"},{"location":"reference/ExprDT_offset_by/#details","title":"Details","text":"<p>The <code>by</code> are created with the the following string language:</p> <ul> <li>1ns # 1 nanosecond</li> <li>1us # 1 microsecond</li> <li>1ms # 1 millisecond</li> <li>1s # 1 second</li> <li>1m # 1 minute</li> <li>1h # 1 hour</li> <li>1d # 1 day</li> <li>1w # 1 calendar week</li> <li>1mo # 1 calendar month</li> <li>1y # 1 calendar year</li> <li>1i # 1 index count</li> </ul> <p>These strings can be combined:</p> <ul> <li>3d12h4m25s # 3 days, 12 hours, 4 minutes, and 25 seconds</li> </ul>"},{"location":"reference/ExprDT_offset_by/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  dates = pl$date_range(as.Date(\"2000-1-1\"),as.Date(\"2005-1-1\"), \"1y\")\n)\ndf$select(\npl$col(\"dates\")$dt$offset_by(\"1y\")$alias(\"date_plus_1y\"),\npl$col(\"dates\")$dt$offset_by(\"-1y2mo\")$alias(\"date_min\")\n)\n#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date_plus_1y        \u2506 date_min            \u2502\n#&gt; \u2502 ---                 \u2506 ---                 \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 datetime[\u03bcs]        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2001-01-01 00:00:00 \u2506 1998-11-01 00:00:00 \u2502\n#&gt; \u2502 2002-01-01 00:00:00 \u2506 1999-11-01 00:00:00 \u2502\n#&gt; \u2502 2003-01-01 00:00:00 \u2506 2000-11-01 00:00:00 \u2502\n#&gt; \u2502 2004-01-01 00:00:00 \u2506 2001-11-01 00:00:00 \u2502\n#&gt; \u2502 2005-01-01 00:00:00 \u2506 2002-11-01 00:00:00 \u2502\n#&gt; \u2502 2006-01-01 00:00:00 \u2506 2003-11-01 00:00:00 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_ordinal_day/","title":"Ordinal Day","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_ordinal_day/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_ordinal_day/#returns","title":"Returns","text":"<p>Expr of ordinal_day as UInt32</p> <p>Extract ordinal day from underlying Date representation. Applies to Date and Datetime columns. Returns the day of year starting from 1. The return value ranges from 1 to 366. (The last day of year differs by years.)</p>"},{"location":"reference/ExprDT_ordinal_day/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  date = pl$date_range(\nas.Date(\"2020-12-25\"),\nas.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\"\n)\n)\ndf$with_columns(\npl$col(\"date\")$dt$ordinal_day()$alias(\"ordinal_day\")\n)\n#&gt; shape: (12, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 ordinal_day \u2502\n#&gt; \u2502 ---                     \u2506 ---         \u2502\n#&gt; \u2502 datetime[\u03bcs, GMT]       \u2506 u32         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 00:00:00 GMT \u2506 360         \u2502\n#&gt; \u2502 2020-12-26 00:00:00 GMT \u2506 361         \u2502\n#&gt; \u2502 2020-12-27 00:00:00 GMT \u2506 362         \u2502\n#&gt; \u2502 2020-12-28 00:00:00 GMT \u2506 363         \u2502\n#&gt; \u2502 ...                     \u2506 ...         \u2502\n#&gt; \u2502 2021-01-02 00:00:00 GMT \u2506 2           \u2502\n#&gt; \u2502 2021-01-03 00:00:00 GMT \u2506 3           \u2502\n#&gt; \u2502 2021-01-04 00:00:00 GMT \u2506 4           \u2502\n#&gt; \u2502 2021-01-05 00:00:00 GMT \u2506 5           \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_quarter/","title":"Quarter","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_quarter/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_quarter/#returns","title":"Returns","text":"<p>Expr of quater as UInt32</p> <p>Extract quarter from underlying Date representation. Applies to Date and Datetime columns. Returns the quarter ranging from 1 to 4.</p>"},{"location":"reference/ExprDT_quarter/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  date = pl$date_range(\nas.Date(\"2020-12-25\"),\nas.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\"\n)\n)\ndf$with_columns(\npl$col(\"date\")$dt$quarter()$alias(\"quarter\")\n)\n#&gt; shape: (12, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 quarter \u2502\n#&gt; \u2502 ---                     \u2506 ---     \u2502\n#&gt; \u2502 datetime[\u03bcs, GMT]       \u2506 u32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 00:00:00 GMT \u2506 4       \u2502\n#&gt; \u2502 2020-12-26 00:00:00 GMT \u2506 4       \u2502\n#&gt; \u2502 2020-12-27 00:00:00 GMT \u2506 4       \u2502\n#&gt; \u2502 2020-12-28 00:00:00 GMT \u2506 4       \u2502\n#&gt; \u2502 ...                     \u2506 ...     \u2502\n#&gt; \u2502 2021-01-02 00:00:00 GMT \u2506 1       \u2502\n#&gt; \u2502 2021-01-03 00:00:00 GMT \u2506 1       \u2502\n#&gt; \u2502 2021-01-04 00:00:00 GMT \u2506 1       \u2502\n#&gt; \u2502 2021-01-05 00:00:00 GMT \u2506 1       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_replace_time_zone/","title":"replace_time_zone","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_replace_time_zone/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_replace_time_zone/#arguments","title":"Arguments","text":"<ul> <li><code>tz</code>: Null or string time zone from base::OlsonNames()</li> </ul>"},{"location":"reference/ExprDT_replace_time_zone/#returns","title":"Returns","text":"<p>Expr of i64</p> <p>Cast time zone for a Series of type Datetime. Different from <code>convert_time_zone</code>, this will also modify the underlying timestamp. Use to correct a wrong time zone annotation. This will change the corresponding global timepoint.</p>"},{"location":"reference/ExprDT_replace_time_zone/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  date = pl$date_range(low = as.Date(\"2001-3-1\"), high = as.Date(\"2001-7-1\"), interval = \"1mo\")\n)\ndf = df$with_columns(\npl$col(\"date\")\n$dt$replace_time_zone(\"Europe/Amsterdam\")\n$dt$convert_time_zone(\"Europe/London\")\n$alias(\"london_timezone\")\n)\ndf2 = df$with_columns(\npl$col(\"london_timezone\")\n$dt$replace_time_zone(\"Europe/Amsterdam\")\n$alias(\"cast London_to_Amsterdam\"),\npl$col(\"london_timezone\")\n$dt$convert_time_zone(\"Europe/Amsterdam\")\n$alias(\"with London_to_Amsterdam\"),\npl$col(\"london_timezone\")\n$dt$convert_time_zone(\"Europe/Amsterdam\")\n$dt$replace_time_zone(NULL)\n$alias(\"strip tz from with-'Europe/Amsterdam'\")\n)\ndf2\n#&gt; shape: (5, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date         \u2506 london_timezone \u2506 cast                \u2506 with                \u2506 strip tz from with- \u2502\n#&gt; \u2502 ---          \u2506 ---             \u2506 London_to_Amsterdam \u2506 London_to_Amsterdam \u2506 'Europe/Amste...    \u2502\n#&gt; \u2502 datetime[\u03bcs] \u2506 datetime[\u03bcs,    \u2506 ---                 \u2506 ---                 \u2506 ---                 \u2502\n#&gt; \u2502              \u2506 Europe/London]  \u2506 datetime[\u03bcs,        \u2506 datetime[\u03bcs,        \u2506 datetime[\u03bcs]        \u2502\n#&gt; \u2502              \u2506                 \u2506 Europe/Amsterdam]   \u2506 Europe/Amsterdam]   \u2506                     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2001-03-01   \u2506 2001-02-28      \u2506 2001-02-28 23:00:00 \u2506 2001-03-01 00:00:00 \u2506 2001-03-01 00:00:00 \u2502\n#&gt; \u2502 00:00:00     \u2506 23:00:00 GMT    \u2506 CET                 \u2506 CET                 \u2506                     \u2502\n#&gt; \u2502 2001-04-01   \u2506 2001-03-31      \u2506 2001-03-31 23:00:00 \u2506 2001-04-01 00:00:00 \u2506 2001-04-01 00:00:00 \u2502\n#&gt; \u2502 00:00:00     \u2506 23:00:00 BST    \u2506 CEST                \u2506 CEST                \u2506                     \u2502\n#&gt; \u2502 2001-05-01   \u2506 2001-04-30      \u2506 2001-04-30 23:00:00 \u2506 2001-05-01 00:00:00 \u2506 2001-05-01 00:00:00 \u2502\n#&gt; \u2502 00:00:00     \u2506 23:00:00 BST    \u2506 CEST                \u2506 CEST                \u2506                     \u2502\n#&gt; \u2502 2001-06-01   \u2506 2001-05-31      \u2506 2001-05-31 23:00:00 \u2506 2001-06-01 00:00:00 \u2506 2001-06-01 00:00:00 \u2502\n#&gt; \u2502 00:00:00     \u2506 23:00:00 BST    \u2506 CEST                \u2506 CEST                \u2506                     \u2502\n#&gt; \u2502 2001-07-01   \u2506 2001-06-30      \u2506 2001-06-30 23:00:00 \u2506 2001-07-01 00:00:00 \u2506 2001-07-01 00:00:00 \u2502\n#&gt; \u2502 00:00:00     \u2506 23:00:00 BST    \u2506 CEST                \u2506 CEST                \u2506                     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_round/","title":"Round datetime","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_round/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_round/#arguments","title":"Arguments","text":"<ul> <li><code>every</code>: string encoding duration see details.</li> <li><code>ofset</code>: optional string encoding duration see details.</li> </ul>"},{"location":"reference/ExprDT_round/#returns","title":"Returns","text":"<p>Date/Datetime expr</p> <p>Divide the date/datetime range into buckets. Each date/datetime in the first half of the interval is mapped to the start of its bucket. Each date/datetime in the second half of the interval is mapped to the end of its bucket.</p>"},{"location":"reference/ExprDT_round/#details","title":"Details","text":"<p>The <code>every</code> and <code>offset</code> argument are created with the the following string language:</p> <ul> <li>1ns # 1 nanosecond</li> <li>1us # 1 microsecond</li> <li>1ms # 1 millisecond</li> <li>1s # 1 second</li> <li>1m # 1 minute</li> <li>1h # 1 hour</li> <li>1d # 1 day</li> <li>1w # 1 calendar week</li> <li>1mo # 1 calendar month</li> <li> <p>1y # 1 calendar year These strings can be combined:</p> <ul> <li>3d12h4m25s # 3 days, 12 hours, 4 minutes, and 25 seconds</li> </ul> </li> </ul> <p>This functionality is currently experimental and may change without it being considered a breaking change.</p>"},{"location":"reference/ExprDT_round/#examples","title":"Examples","text":"<pre><code>t1 = as.POSIXct(\"3040-01-01\",tz = \"GMT\")\nt2 = t1 + as.difftime(25,units = \"secs\")\ns = pl$date_range(t1, t2, interval = \"2s\", time_unit = \"ms\")\n#use a dt namespace function\ndf = pl$DataFrame(datetime = s)$with_columns(\npl$col(\"datetime\")$dt$truncate(\"4s\")$alias(\"truncated_4s\"),\npl$col(\"datetime\")$dt$truncate(\"4s\",offset(\"3s\"))$alias(\"truncated_4s_offset_2s\")\n)\ndf\n#&gt; shape: (13, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 datetime            \u2506 truncated_4s        \u2506 truncated_4s_offset_2s \u2502\n#&gt; \u2502 ---                 \u2506 ---                 \u2506 ---                    \u2502\n#&gt; \u2502 datetime[ms]        \u2506 datetime[ms]        \u2506 datetime[ms]           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3040-01-01 00:00:00 \u2506 3040-01-01 00:00:00 \u2506 3040-01-01 00:00:03    \u2502\n#&gt; \u2502 3040-01-01 00:00:02 \u2506 3040-01-01 00:00:00 \u2506 3040-01-01 00:00:03    \u2502\n#&gt; \u2502 3040-01-01 00:00:04 \u2506 3040-01-01 00:00:04 \u2506 3040-01-01 00:00:07    \u2502\n#&gt; \u2502 3040-01-01 00:00:06 \u2506 3040-01-01 00:00:04 \u2506 3040-01-01 00:00:07    \u2502\n#&gt; \u2502 ...                 \u2506 ...                 \u2506 ...                    \u2502\n#&gt; \u2502 3040-01-01 00:00:18 \u2506 3040-01-01 00:00:16 \u2506 3040-01-01 00:00:19    \u2502\n#&gt; \u2502 3040-01-01 00:00:20 \u2506 3040-01-01 00:00:20 \u2506 3040-01-01 00:00:23    \u2502\n#&gt; \u2502 3040-01-01 00:00:22 \u2506 3040-01-01 00:00:20 \u2506 3040-01-01 00:00:23    \u2502\n#&gt; \u2502 3040-01-01 00:00:24 \u2506 3040-01-01 00:00:24 \u2506 3040-01-01 00:00:27    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_second/","title":"Second","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_second/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_second/#returns","title":"Returns","text":"<p>Expr of second as UInt32</p> <p>Extract seconds from underlying Datetime representation. Applies to Datetime columns. Returns the integer second number from 0 to 59, or a floating point number from 0 &lt; 60 if <code>fractional=True</code> that includes any milli/micro/nanosecond component.</p>"},{"location":"reference/ExprDT_second/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(date = pl$date_range(\nas.numeric(as.POSIXct(\"2001-1-1\"))*1E6+456789, #manually convert to us\nas.numeric(as.POSIXct(\"2001-1-1 00:00:6\"))*1E6,\n  interval = \"2s654321us\",\n  time_unit = \"us\" #instruct polars input is us, and store as us\n))$with_columns(\npl$col(\"date\")$dt$second()$alias(\"second\"),\npl$col(\"date\")$dt$second(fractional = TRUE)$alias(\"second_frac\")\n)\n#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 second \u2506 second_frac \u2502\n#&gt; \u2502 ---                     \u2506 ---    \u2506 ---         \u2502\n#&gt; \u2502 datetime[\u03bcs]            \u2506 u32    \u2506 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2000-12-31 23:00:00.456 \u2506 0      \u2506 0.456       \u2502\n#&gt; \u2502 2000-12-31 23:00:03.110 \u2506 3      \u2506 3.11        \u2502\n#&gt; \u2502 2000-12-31 23:00:05.764 \u2506 5      \u2506 5.764       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_seconds/","title":"Seconds","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_seconds/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_seconds/#returns","title":"Returns","text":"<p>Expr of i64</p> <p>Extract the seconds from a Duration type.</p>"},{"location":"reference/ExprDT_seconds/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(date = pl$date_range(\n    low = as.POSIXct(\"2020-1-1\", tz = \"GMT\"),\n    high = as.POSIXct(\"2020-1-1 00:04:00\", tz = \"GMT\"),\n    interval = \"1m\"\n))\ndf$select(\npl$col(\"date\"),\npl$col(\"date\")$diff()$dt$seconds()$alias(\"seconds_diff\")\n)\n#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                \u2506 seconds_diff \u2502\n#&gt; \u2502 ---                 \u2506 ---          \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 i64          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-01-01 00:00:00 \u2506 null         \u2502\n#&gt; \u2502 2020-01-01 00:01:00 \u2506 60           \u2502\n#&gt; \u2502 2020-01-01 00:02:00 \u2506 60           \u2502\n#&gt; \u2502 2020-01-01 00:03:00 \u2506 60           \u2502\n#&gt; \u2502 2020-01-01 00:04:00 \u2506 60           \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_strftime/","title":"strftime","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_strftime/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_strftime/#arguments","title":"Arguments","text":"<ul> <li><code>fmt</code>: string format very much like in R passed to chrono</li> </ul>"},{"location":"reference/ExprDT_strftime/#returns","title":"Returns","text":"<p>Date/Datetime expr</p> <p>Format Date/Datetime with a formatting rule. See <code>chrono strftime/strptime&lt;https://docs.rs/chrono/latest/chrono/format/strftime/index.html&gt;</code>_.</p>"},{"location":"reference/ExprDT_strftime/#examples","title":"Examples","text":"<pre><code>pl$lit(as.POSIXct(\"2021-01-02 12:13:14\",tz=\"GMT\"))$dt$strftime(\"this is the year: %Y\")$to_r()\n#&gt; [1] \"this is the year: 2021\"\n </code></pre>"},{"location":"reference/ExprDT_timestamp/","title":"timestamp","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_timestamp/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_timestamp/#arguments","title":"Arguments","text":"<ul> <li><code>tu</code>: string option either 'ns', 'us', or 'ms'</li> </ul>"},{"location":"reference/ExprDT_timestamp/#returns","title":"Returns","text":"<p>Expr of i64</p> <p>Return a timestamp in the given time unit.</p>"},{"location":"reference/ExprDT_timestamp/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  date = pl$date_range(low = as.Date(\"2001-1-1\"), high = as.Date(\"2001-1-3\"), interval = \"1d\")\n)\ndf$select(\npl$col(\"date\"),\npl$col(\"date\")$dt$timestamp()$alias(\"timestamp_ns\"),\npl$col(\"date\")$dt$timestamp(tu=\"ms\")$alias(\"timestamp_ms\")\n)\n#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                \u2506 timestamp_ns       \u2506 timestamp_ms \u2502\n#&gt; \u2502 ---                 \u2506 ---                \u2506 ---          \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 i64                \u2506 i64          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2001-01-01 00:00:00 \u2506 978307200000000000 \u2506 978307200000 \u2502\n#&gt; \u2502 2001-01-02 00:00:00 \u2506 978393600000000000 \u2506 978393600000 \u2502\n#&gt; \u2502 2001-01-03 00:00:00 \u2506 978480000000000000 \u2506 978480000000 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_truncate/","title":"Truncate datetime","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_truncate/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_truncate/#arguments","title":"Arguments","text":"<ul> <li><code>every</code>: string encoding duration see details.</li> <li><code>ofset</code>: optional string encoding duration see details.</li> </ul>"},{"location":"reference/ExprDT_truncate/#returns","title":"Returns","text":"<p>Date/Datetime expr</p> <p>Divide the date/datetime range into buckets. Each date/datetime is mapped to the start of its bucket.</p>"},{"location":"reference/ExprDT_truncate/#details","title":"Details","text":"<p>The <code>every</code> and <code>offset</code> argument are created with the the following string language:</p> <ul> <li>1ns # 1 nanosecond</li> <li>1us # 1 microsecond</li> <li>1ms # 1 millisecond</li> <li>1s # 1 second</li> <li>1m # 1 minute</li> <li>1h # 1 hour</li> <li>1d # 1 day</li> <li>1w # 1 calendar week</li> <li>1mo # 1 calendar month</li> <li> <p>1y # 1 calendar year These strings can be combined:</p> <ul> <li>3d12h4m25s # 3 days, 12 hours, 4 minutes, and 25 seconds</li> </ul> </li> </ul>"},{"location":"reference/ExprDT_truncate/#examples","title":"Examples","text":"<pre><code>t1 = as.POSIXct(\"3040-01-01\",tz = \"GMT\")\nt2 = t1 + as.difftime(25,units = \"secs\")\ns = pl$date_range(t1, t2, interval = \"2s\", time_unit = \"ms\")\n#use a dt namespace function\ndf = pl$DataFrame(datetime = s)$with_columns(\npl$col(\"datetime\")$dt$truncate(\"4s\")$alias(\"truncated_4s\"),\npl$col(\"datetime\")$dt$truncate(\"4s\",offset(\"3s\"))$alias(\"truncated_4s_offset_2s\")\n)\ndf\n#&gt; shape: (13, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 datetime            \u2506 truncated_4s        \u2506 truncated_4s_offset_2s \u2502\n#&gt; \u2502 ---                 \u2506 ---                 \u2506 ---                    \u2502\n#&gt; \u2502 datetime[ms]        \u2506 datetime[ms]        \u2506 datetime[ms]           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3040-01-01 00:00:00 \u2506 3040-01-01 00:00:00 \u2506 3040-01-01 00:00:03    \u2502\n#&gt; \u2502 3040-01-01 00:00:02 \u2506 3040-01-01 00:00:00 \u2506 3040-01-01 00:00:03    \u2502\n#&gt; \u2502 3040-01-01 00:00:04 \u2506 3040-01-01 00:00:04 \u2506 3040-01-01 00:00:07    \u2502\n#&gt; \u2502 3040-01-01 00:00:06 \u2506 3040-01-01 00:00:04 \u2506 3040-01-01 00:00:07    \u2502\n#&gt; \u2502 ...                 \u2506 ...                 \u2506 ...                    \u2502\n#&gt; \u2502 3040-01-01 00:00:18 \u2506 3040-01-01 00:00:16 \u2506 3040-01-01 00:00:19    \u2502\n#&gt; \u2502 3040-01-01 00:00:20 \u2506 3040-01-01 00:00:20 \u2506 3040-01-01 00:00:23    \u2502\n#&gt; \u2502 3040-01-01 00:00:22 \u2506 3040-01-01 00:00:20 \u2506 3040-01-01 00:00:23    \u2502\n#&gt; \u2502 3040-01-01 00:00:24 \u2506 3040-01-01 00:00:24 \u2506 3040-01-01 00:00:27    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_tz_localize/","title":"Localize time zone","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_tz_localize/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_tz_localize/#arguments","title":"Arguments","text":"<ul> <li><code>tz</code>: string of time zone (no NULL allowed) see allowed timezone in base::OlsonNames()</li> </ul>"},{"location":"reference/ExprDT_tz_localize/#returns","title":"Returns","text":"<p>Expr of i64</p> <p>Localize tz-naive Datetime Series to tz-aware Datetime Series. This method takes a naive Datetime Series and makes this time zone aware. It does not move the time to another time zone.</p>"},{"location":"reference/ExprDT_tz_localize/#details","title":"Details","text":"<p>In R as modifying tzone attribute manually but takes into account summertime. See unittest \"dt$convert_time_zone dt$tz_localize\" for a more detailed comparison to base R.</p>"},{"location":"reference/ExprDT_tz_localize/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  date = pl$date_range(low = as.Date(\"2001-3-1\"), high = as.Date(\"2001-7-1\"), interval = \"1mo\")\n)\ndf = df$with_columns(\npl$col(\"date\")\n$dt$replace_time_zone(\"Europe/Amsterdam\")\n$dt$convert_time_zone(\"Europe/London\")\n$alias(\"london_timezone\"),\npl$col(\"date\")\n$dt$tz_localize(\"Europe/London\")\n$alias(\"tz_loc_london\")\n)\ndf2 = df$with_columns(\npl$col(\"london_timezone\")\n$dt$replace_time_zone(\"Europe/Amsterdam\")\n$alias(\"cast London_to_Amsterdam\"),\npl$col(\"london_timezone\")\n$dt$convert_time_zone(\"Europe/Amsterdam\")\n$alias(\"with London_to_Amsterdam\"),\npl$col(\"london_timezone\")\n$dt$convert_time_zone(\"Europe/Amsterdam\")\n$dt$replace_time_zone(NULL)\n$alias(\"strip tz from with-'Europe/Amsterdam'\")\n)\ndf2\n#&gt; shape: (5, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date           \u2506 london_timezon \u2506 tz_loc_london  \u2506 cast London_t \u2506 with London_t \u2506 strip tz from \u2502\n#&gt; \u2502 ---            \u2506 e              \u2506 ---            \u2506 o_Amsterdam   \u2506 o_Amsterdam   \u2506 with-'Europe/ \u2502\n#&gt; \u2502 datetime[\u03bcs]   \u2506 ---            \u2506 datetime[\u03bcs,   \u2506 ---           \u2506 ---           \u2506 Amste...      \u2502\n#&gt; \u2502                \u2506 datetime[\u03bcs,   \u2506 Europe/London] \u2506 datetime[\u03bcs,  \u2506 datetime[\u03bcs,  \u2506 ---           \u2502\n#&gt; \u2502                \u2506 Europe/London] \u2506                \u2506 Europe/Amster \u2506 Europe/Amster \u2506 datetime[\u03bcs]  \u2502\n#&gt; \u2502                \u2506                \u2506                \u2506 dam]          \u2506 dam]          \u2506               \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2001-03-01     \u2506 2001-02-28     \u2506 2001-03-01     \u2506 2001-02-28    \u2506 2001-03-01    \u2506 2001-03-01    \u2502\n#&gt; \u2502 00:00:00       \u2506 23:00:00 GMT   \u2506 00:00:00 GMT   \u2506 23:00:00 CET  \u2506 00:00:00 CET  \u2506 00:00:00      \u2502\n#&gt; \u2502 2001-04-01     \u2506 2001-03-31     \u2506 2001-04-01     \u2506 2001-03-31    \u2506 2001-04-01    \u2506 2001-04-01    \u2502\n#&gt; \u2502 00:00:00       \u2506 23:00:00 BST   \u2506 00:00:00 BST   \u2506 23:00:00 CEST \u2506 00:00:00 CEST \u2506 00:00:00      \u2502\n#&gt; \u2502 2001-05-01     \u2506 2001-04-30     \u2506 2001-05-01     \u2506 2001-04-30    \u2506 2001-05-01    \u2506 2001-05-01    \u2502\n#&gt; \u2502 00:00:00       \u2506 23:00:00 BST   \u2506 00:00:00 BST   \u2506 23:00:00 CEST \u2506 00:00:00 CEST \u2506 00:00:00      \u2502\n#&gt; \u2502 2001-06-01     \u2506 2001-05-31     \u2506 2001-06-01     \u2506 2001-05-31    \u2506 2001-06-01    \u2506 2001-06-01    \u2502\n#&gt; \u2502 00:00:00       \u2506 23:00:00 BST   \u2506 00:00:00 BST   \u2506 23:00:00 CEST \u2506 00:00:00 CEST \u2506 00:00:00      \u2502\n#&gt; \u2502 2001-07-01     \u2506 2001-06-30     \u2506 2001-07-01     \u2506 2001-06-30    \u2506 2001-07-01    \u2506 2001-07-01    \u2502\n#&gt; \u2502 00:00:00       \u2506 23:00:00 BST   \u2506 00:00:00 BST   \u2506 23:00:00 CEST \u2506 00:00:00 CEST \u2506 00:00:00      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_week/","title":"Week","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_week/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_week/#returns","title":"Returns","text":"<p>Expr of week as UInt32</p> <p>Extract the week from the underlying Date representation. Applies to Date and Datetime columns. Returns the ISO week number starting from 1. The return value ranges from 1 to 53. (The last week of year differs by years.)</p>"},{"location":"reference/ExprDT_week/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  date = pl$date_range(\nas.Date(\"2020-12-25\"),\nas.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\"\n)\n)\ndf$with_columns(\npl$col(\"date\")$dt$week()$alias(\"week\")\n)\n#&gt; shape: (12, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 week \u2502\n#&gt; \u2502 ---                     \u2506 ---  \u2502\n#&gt; \u2502 datetime[\u03bcs, GMT]       \u2506 u32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 00:00:00 GMT \u2506 52   \u2502\n#&gt; \u2502 2020-12-26 00:00:00 GMT \u2506 52   \u2502\n#&gt; \u2502 2020-12-27 00:00:00 GMT \u2506 52   \u2502\n#&gt; \u2502 2020-12-28 00:00:00 GMT \u2506 53   \u2502\n#&gt; \u2502 ...                     \u2506 ...  \u2502\n#&gt; \u2502 2021-01-02 00:00:00 GMT \u2506 53   \u2502\n#&gt; \u2502 2021-01-03 00:00:00 GMT \u2506 53   \u2502\n#&gt; \u2502 2021-01-04 00:00:00 GMT \u2506 1    \u2502\n#&gt; \u2502 2021-01-05 00:00:00 GMT \u2506 1    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_weekday/","title":"Weekday","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_weekday/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_weekday/#returns","title":"Returns","text":"<p>Expr of weekday as UInt32</p> <p>Extract the week day from the underlying Date representation. Applies to Date and Datetime columns. Returns the ISO weekday number where monday = 1 and sunday = 7</p>"},{"location":"reference/ExprDT_weekday/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  date = pl$date_range(\nas.Date(\"2020-12-25\"),\nas.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\"\n)\n)\ndf$with_columns(\npl$col(\"date\")$dt$weekday()$alias(\"weekday\")\n)\n#&gt; shape: (12, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 weekday \u2502\n#&gt; \u2502 ---                     \u2506 ---     \u2502\n#&gt; \u2502 datetime[\u03bcs, GMT]       \u2506 u32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 00:00:00 GMT \u2506 5       \u2502\n#&gt; \u2502 2020-12-26 00:00:00 GMT \u2506 6       \u2502\n#&gt; \u2502 2020-12-27 00:00:00 GMT \u2506 7       \u2502\n#&gt; \u2502 2020-12-28 00:00:00 GMT \u2506 1       \u2502\n#&gt; \u2502 ...                     \u2506 ...     \u2502\n#&gt; \u2502 2021-01-02 00:00:00 GMT \u2506 6       \u2502\n#&gt; \u2502 2021-01-03 00:00:00 GMT \u2506 7       \u2502\n#&gt; \u2502 2021-01-04 00:00:00 GMT \u2506 1       \u2502\n#&gt; \u2502 2021-01-05 00:00:00 GMT \u2506 2       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_with_time_unit/","title":"with_time_unit","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_with_time_unit/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_with_time_unit/#arguments","title":"Arguments","text":"<ul> <li><code>tu</code>: string option either 'ns', 'us', or 'ms'</li> </ul>"},{"location":"reference/ExprDT_with_time_unit/#returns","title":"Returns","text":"<p>Expr of i64</p> <p>Set time unit of a Series of dtype Datetime or Duration. This does not modify underlying data, and should be used to fix an incorrect time unit. The corresponding global timepoint will change.</p>"},{"location":"reference/ExprDT_with_time_unit/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  date = pl$date_range(low = as.Date(\"2001-1-1\"), high = as.Date(\"2001-1-3\"), interval = \"1d\")\n)\ndf$select(\npl$col(\"date\"),\npl$col(\"date\")$dt$with_time_unit()$alias(\"with_time_unit_ns\"),\npl$col(\"date\")$dt$with_time_unit(tu=\"ms\")$alias(\"with_time_unit_ms\")\n)\n#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                \u2506 with_time_unit_ns       \u2506 with_time_unit_ms     \u2502\n#&gt; \u2502 ---                 \u2506 ---                     \u2506 ---                   \u2502\n#&gt; \u2502 datetime[\u03bcs]        \u2506 datetime[ns]            \u2506 datetime[ms]          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2001-01-01 00:00:00 \u2506 1970-01-12 07:45:07.200 \u2506 +32971-04-28 00:00:00 \u2502\n#&gt; \u2502 2001-01-02 00:00:00 \u2506 1970-01-12 07:46:33.600 \u2506 +32974-01-22 00:00:00 \u2502\n#&gt; \u2502 2001-01-03 00:00:00 \u2506 1970-01-12 07:48:00     \u2506 +32976-10-18 00:00:00 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprDT_year/","title":"Year","text":"<p>Source: R/expr__datetime.R</p>"},{"location":"reference/ExprDT_year/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprDT_year/#returns","title":"Returns","text":"<p>Expr of Year as Int32</p> <p>Extract year from underlying Date representation. Applies to Date and Datetime columns. Returns the year number in the calendar date.</p>"},{"location":"reference/ExprDT_year/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  date = pl$date_range(\nas.Date(\"2020-12-25\"),\nas.Date(\"2021-1-05\"),\n    interval = \"1d\",\n    time_zone = \"GMT\"\n)\n)\ndf$with_columns(\npl$col(\"date\")$dt$year()$alias(\"year\"),\npl$col(\"date\")$dt$iso_year()$alias(\"iso_year\")\n)\n#&gt; shape: (12, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date                    \u2506 year \u2506 iso_year \u2502\n#&gt; \u2502 ---                     \u2506 ---  \u2506 ---      \u2502\n#&gt; \u2502 datetime[\u03bcs, GMT]       \u2506 i32  \u2506 i32      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2020-12-25 00:00:00 GMT \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 2020-12-26 00:00:00 GMT \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 2020-12-27 00:00:00 GMT \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 2020-12-28 00:00:00 GMT \u2506 2020 \u2506 2020     \u2502\n#&gt; \u2502 ...                     \u2506 ...  \u2506 ...      \u2502\n#&gt; \u2502 2021-01-02 00:00:00 GMT \u2506 2021 \u2506 2020     \u2502\n#&gt; \u2502 2021-01-03 00:00:00 GMT \u2506 2021 \u2506 2020     \u2502\n#&gt; \u2502 2021-01-04 00:00:00 GMT \u2506 2021 \u2506 2021     \u2502\n#&gt; \u2502 2021-01-05 00:00:00 GMT \u2506 2021 \u2506 2021     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprMeta_eq/","title":"Meta Equal","text":"<p>Source: R/expr__meta.R</p>"},{"location":"reference/ExprMeta_eq/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: Expr to compare with</li> </ul>"},{"location":"reference/ExprMeta_eq/#returns","title":"Returns","text":"<p>bool: TRUE if equal</p> <p>Are two expressions on a meta level equal</p>"},{"location":"reference/ExprMeta_eq/#examples","title":"Examples","text":"<pre><code>#three naive expression literals\ne1 = pl$lit(40) + 2\ne2 = pl$lit(42)\ne3 = pl$lit(40) +2\n#e1 and e3 are identical expressions\ne1$meta$eq(e3)\n#&gt; [1] TRUE\n#e_test is an expression testing whether e1 and e2 evaluates to the same value.\ne_test = e1 == e2 # or e_test = e1$eq(e2)\n#direct evaluate e_test, possible because only made up of literals\ne_test$to_r()\n#&gt; [1] TRUE\n#e1 and e2 are on the meta-level NOT identical expressions\ne1$meta$neq(e2)\n#&gt; [1] TRUE\n </code></pre>"},{"location":"reference/ExprMeta_has_multiple_outputs/","title":"Has multiple outputs","text":"<p>Source: R/expr__meta.R</p>"},{"location":"reference/ExprMeta_has_multiple_outputs/#returns","title":"Returns","text":"<p>Bool</p> <p>Whether this expression expands into multiple expressions.</p>"},{"location":"reference/ExprMeta_has_multiple_outputs/#examples","title":"Examples","text":"<pre><code>pl$all()$meta$has_multiple_outputs()\n#&gt; [1] TRUE\npl$col(\"some_colname\")$meta$has_multiple_outputs()\n#&gt; [1] FALSE\n </code></pre>"},{"location":"reference/ExprMeta_is_regex_projection/","title":"Is regex projecion.","text":"<p>Source: R/expr__meta.R</p>"},{"location":"reference/ExprMeta_is_regex_projection/#returns","title":"Returns","text":"<p>Bool</p> <p>Whether this expression expands to columns that match a regex pattern.</p>"},{"location":"reference/ExprMeta_is_regex_projection/#examples","title":"Examples","text":"<pre><code>pl$col(\"^Sepal.*$\")$meta$is_regex_projection()\n#&gt; [1] TRUE\npl$col(\"Sepal.Length\")$meta$is_regex_projection()\n#&gt; [1] FALSE\n </code></pre>"},{"location":"reference/ExprMeta_neq/","title":"Meta Not Equal","text":"<p>Source: R/expr__meta.R</p>"},{"location":"reference/ExprMeta_neq/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: Expr to compare with</li> </ul>"},{"location":"reference/ExprMeta_neq/#returns","title":"Returns","text":"<p>bool: TRUE if NOT equal</p> <p>Are two expressions on a meta level NOT equal</p>"},{"location":"reference/ExprMeta_neq/#examples","title":"Examples","text":"<pre><code>#three naive expression literals\ne1 = pl$lit(40) + 2\ne2 = pl$lit(42)\ne3 = pl$lit(40) +2\n#e1 and e3 are identical expressions\ne1$meta$eq(e3)\n#&gt; [1] TRUE\n#e_test is an expression testing whether e1 and e2 evaluates to the same value.\ne_test = e1 == e2 # or e_test = e1$eq(e2)\n#direct evaluate e_test, possible because only made up of literals\ne_test$to_r()\n#&gt; [1] TRUE\n#e1 and e2 are on the meta-level NOT identical expressions\ne1$meta$neq(e2)\n#&gt; [1] TRUE\n </code></pre>"},{"location":"reference/ExprMeta_output_name/","title":"Output Name","text":"<p>Source: R/expr__meta.R</p>"},{"location":"reference/ExprMeta_output_name/#returns","title":"Returns","text":"<p>R charvec of output names.</p> <p>Get the column name that this expression would produce. It might not always be possible to determine the output name as it might depend on the schema of the context. In that case this will raise an error.</p>"},{"location":"reference/ExprMeta_output_name/#examples","title":"Examples","text":"<pre><code>e = pl$col(\"alice\")$alias(\"bob\")\ne$meta$root_names() == \"alice\"\n#&gt; [1] TRUE\ne$meta$output_name() == \"bob\"\n#&gt; [1] TRUE\ne$meta$undo_aliases()$meta$output_name() == \"alice\"\n#&gt; [1] TRUE\n </code></pre>"},{"location":"reference/ExprMeta_pop/","title":"Pop","text":"<p>Source: R/expr__meta.R</p>"},{"location":"reference/ExprMeta_pop/#returns","title":"Returns","text":"<p>R list of Expr(s) usually one, only multiple if top Expr took more Expr as input.</p> <p>Pop the latest expression and return the input(s) of the popped expression.</p>"},{"location":"reference/ExprMeta_pop/#examples","title":"Examples","text":"<pre><code>e1 = pl$lit(40) + 2\ne2 = pl$lit(42)$sum()\ne1\n#&gt; polars Expr: [(40f64) + (2f64)]\ne1$meta$pop()\n#&gt; [[1]]\n#&gt; polars Expr: 2f64\n#&gt; #&gt; [[2]]\n#&gt; polars Expr: 40f64\n#&gt; e2\n#&gt; polars Expr: 42f64.sum()\ne2$meta$pop()\n#&gt; [[1]]\n#&gt; polars Expr: 42f64\n#&gt; </code></pre>"},{"location":"reference/ExprMeta_root_names/","title":"Root Name","text":"<p>Source: R/expr__meta.R</p>"},{"location":"reference/ExprMeta_root_names/#returns","title":"Returns","text":"<p>R charvec of root names.</p> <p>Get a vector with the root column name</p>"},{"location":"reference/ExprMeta_root_names/#examples","title":"Examples","text":"<pre><code>e = pl$col(\"alice\")$alias(\"bob\")\ne$meta$root_names() == \"alice\"\n#&gt; [1] TRUE\ne$meta$output_name() == \"bob\"\n#&gt; [1] TRUE\ne$meta$undo_aliases()$meta$output_name() == \"alice\"\n#&gt; [1] TRUE\n </code></pre>"},{"location":"reference/ExprMeta_undo_aliases/","title":"Undo aliases","text":"<p>Source: R/expr__meta.R</p>"},{"location":"reference/ExprMeta_undo_aliases/#returns","title":"Returns","text":"<p>Expr with aliases undone</p> <p>Undo any renaming operation like <code>alias</code> or <code>keep_name</code>.</p>"},{"location":"reference/ExprMeta_undo_aliases/#examples","title":"Examples","text":"<pre><code>e = pl$col(\"alice\")$alias(\"bob\")\ne$meta$root_names() == \"alice\"\n#&gt; [1] TRUE\ne$meta$output_name() == \"bob\"\n#&gt; [1] TRUE\ne$meta$undo_aliases()$meta$output_name() == \"alice\"\n#&gt; [1] TRUE\n </code></pre>"},{"location":"reference/ExprStr_concat/","title":"Concat","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_concat/#arguments","title":"Arguments","text":"<ul> <li><code>delimiter</code>: string The delimiter to insert between consecutive string values.</li> </ul>"},{"location":"reference/ExprStr_concat/#returns","title":"Returns","text":"<p>Expr of Utf8 concatenated</p> <p>Vertically concat the values in the Series to a single string value.</p>"},{"location":"reference/ExprStr_concat/#examples","title":"Examples","text":"<pre><code>#concatenate a Series of strings to a single string\ndf = pl$DataFrame(foo = c(\"1\", NA, 2))\ndf$select(pl$col(\"foo\")$str$concat(\"-\"))\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo      \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 str      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1-null-2 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#Series list of strings to Series of concatenated strings\ndf = pl$DataFrame(list(bar = list(c(\"a\",\"b\", \"c\"), c(\"1\",\"2\",NA))))\ndf$select(pl$col(\"bar\")$arr$eval(pl$col()$str$concat())$arr$first())\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 bar      \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 str      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a-b-c    \u2502\n#&gt; \u2502 1-2-null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_contains/","title":"contains","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_contains/#arguments","title":"Arguments","text":"<ul> <li><code>pattern</code>: String or Expr of a string, a valid regex pattern.</li> <li><code>literal</code>: bool, treat pattern as a literal string. NULL is aliased with FALSE.</li> <li><code>strict</code>: bool, raise an error if the underlying pattern is not a valid regex expression, otherwise mask out with a null value.</li> </ul>"},{"location":"reference/ExprStr_contains/#returns","title":"Returns","text":"<p>Expr returning a Boolean</p> <p>R Check if string contains a substring that matches a regex.</p>"},{"location":"reference/ExprStr_contains/#details","title":"Details","text":"<p>starts_with : Check if string values start with a substring. ends_with : Check if string values end with a substring.</p>"},{"location":"reference/ExprStr_contains/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(a = c(\"Crab\", \"cat and dog\", \"rab$bit\", NA))\ndf$select(\npl$col(\"a\"),\npl$col(\"a\")$str$contains(\"cat|bit\")$alias(\"regex\"),\npl$col(\"a\")$str$contains(\"rab$\", literal=TRUE)$alias(\"literal\")\n)\n#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a           \u2506 regex \u2506 literal \u2502\n#&gt; \u2502 ---         \u2506 ---   \u2506 ---     \u2502\n#&gt; \u2502 str         \u2506 bool  \u2506 bool    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Crab        \u2506 false \u2506 false   \u2502\n#&gt; \u2502 cat and dog \u2506 true  \u2506 false   \u2502\n#&gt; \u2502 rab$bit     \u2506 true  \u2506 true    \u2502\n#&gt; \u2502 null        \u2506 null  \u2506 null    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_count_match/","title":"count_match","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_count_match/#arguments","title":"Arguments","text":"<ul> <li><code>pattern</code>: A valid regex pattern</li> </ul>"},{"location":"reference/ExprStr_count_match/#returns","title":"Returns","text":"<p>UInt32 array. Contain null if original value is null or regex capture nothing.</p> <p>Count all successive non-overlapping regex matches.</p>"},{"location":"reference/ExprStr_count_match/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame( foo = c(\"123 bla 45 asd\", \"xyz 678 910t\"))\ndf$select(\npl$col(\"foo\")$str$count_match(r\"{(\\d)}\")$alias(\"count digits\")\n)\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 count digits \u2502\n#&gt; \u2502 ---          \u2502\n#&gt; \u2502 u32          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5            \u2502\n#&gt; \u2502 6            \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_decode/","title":"decode","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_decode/#arguments","title":"Arguments","text":"<ul> <li><code>encoding</code>: string choice either 'hex' or 'base64'</li> <li><code>...</code>: not used currently</li> <li><code>strict</code>: Raise an error if the underlying value cannot be decoded, otherwise mask out with a null value.</li> </ul>"},{"location":"reference/ExprStr_decode/#returns","title":"Returns","text":"<p>Utf8 array with values decoded using provided encoding</p> <p>Decode a value using the provided encoding.</p>"},{"location":"reference/ExprStr_decode/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame( strings = c(\"foo\", \"bar\", NA))\ndf$select(pl$col(\"strings\")$str$encode(\"hex\"))\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 strings \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 666f6f  \u2502\n#&gt; \u2502 626172  \u2502\n#&gt; \u2502 null    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$with_columns(\npl$col(\"strings\")$str$encode(\"base64\")$alias(\"base64\"), #notice DataType is not encoded\npl$col(\"strings\")$str$encode(\"hex\")$alias(\"hex\")       #... and must restored with cast\n)$with_columns(\npl$col(\"base64\")$str$decode(\"base64\")$alias(\"base64_decoded\")$cast(pl$Utf8),\npl$col(\"hex\")$str$decode(\"hex\")$alias(\"hex_decoded\")$cast(pl$Utf8)\n)\n#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 strings \u2506 base64 \u2506 hex    \u2506 base64_decoded \u2506 hex_decoded \u2502\n#&gt; \u2502 ---     \u2506 ---    \u2506 ---    \u2506 ---            \u2506 ---         \u2502\n#&gt; \u2502 str     \u2506 str    \u2506 str    \u2506 str            \u2506 str         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 foo     \u2506 Zm9v   \u2506 666f6f \u2506 foo            \u2506 foo         \u2502\n#&gt; \u2502 bar     \u2506 YmFy   \u2506 626172 \u2506 bar            \u2506 bar         \u2502\n#&gt; \u2502 null    \u2506 null   \u2506 null   \u2506 null           \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_encode/","title":"encode","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_encode/#arguments","title":"Arguments","text":"<ul> <li><code>encoding</code>: string choice either 'hex' or 'base64'</li> </ul>"},{"location":"reference/ExprStr_encode/#returns","title":"Returns","text":"<p>Utf8 array with values encoded using provided encoding</p> <p>Encode a value using the provided encoding.</p>"},{"location":"reference/ExprStr_encode/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame( strings = c(\"foo\", \"bar\", NA))\ndf$select(pl$col(\"strings\")$str$encode(\"hex\"))\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 strings \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 666f6f  \u2502\n#&gt; \u2502 626172  \u2502\n#&gt; \u2502 null    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$with_columns(\npl$col(\"strings\")$str$encode(\"base64\")$alias(\"base64\"), #notice DataType is not encoded\npl$col(\"strings\")$str$encode(\"hex\")$alias(\"hex\")       #... and must restored with cast\n)$with_columns(\npl$col(\"base64\")$str$decode(\"base64\")$alias(\"base64_decoded\")$cast(pl$Utf8),\npl$col(\"hex\")$str$decode(\"hex\")$alias(\"hex_decoded\")$cast(pl$Utf8)\n)\n#&gt; shape: (3, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 strings \u2506 base64 \u2506 hex    \u2506 base64_decoded \u2506 hex_decoded \u2502\n#&gt; \u2502 ---     \u2506 ---    \u2506 ---    \u2506 ---            \u2506 ---         \u2502\n#&gt; \u2502 str     \u2506 str    \u2506 str    \u2506 str            \u2506 str         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 foo     \u2506 Zm9v   \u2506 666f6f \u2506 foo            \u2506 foo         \u2502\n#&gt; \u2502 bar     \u2506 YmFy   \u2506 626172 \u2506 bar            \u2506 bar         \u2502\n#&gt; \u2502 null    \u2506 null   \u2506 null   \u2506 null           \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_ends_with/","title":"ends_with","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_ends_with/#arguments","title":"Arguments","text":"<ul> <li><code>sub</code>: Suffix substring or Expr.</li> </ul>"},{"location":"reference/ExprStr_ends_with/#returns","title":"Returns","text":"<p>Expr returning a Boolean</p> <p>Check if string values end with a substring.</p>"},{"location":"reference/ExprStr_ends_with/#details","title":"Details","text":"<p>contains : Check if string contains a substring that matches a regex. starts_with : Check if string values start with a substring.</p>"},{"location":"reference/ExprStr_ends_with/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(fruits = c(\"apple\", \"mango\", NA))\ndf$select(\npl$col(\"fruits\"),\npl$col(\"fruits\")$str$ends_with(\"go\")$alias(\"has_suffix\")\n)\n#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 has_suffix \u2502\n#&gt; \u2502 ---    \u2506 ---        \u2502\n#&gt; \u2502 str    \u2506 bool       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 apple  \u2506 false      \u2502\n#&gt; \u2502 mango  \u2506 true       \u2502\n#&gt; \u2502 null   \u2506 null       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_explode/","title":"explode","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_explode/#returns","title":"Returns","text":"<p>Expr: Series of dtype Utf8.</p> <p>Returns a column with a separate row for every string character.</p>"},{"location":"reference/ExprStr_explode/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(a = c(\"foo\", \"bar\"))\ndf$select(pl$col(\"a\")$str$explode())\n#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 f   \u2502\n#&gt; \u2502 o   \u2502\n#&gt; \u2502 o   \u2502\n#&gt; \u2502 b   \u2502\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 r   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_extract/","title":"extract","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_extract/#arguments","title":"Arguments","text":"<ul> <li><code>pattern</code>: A valid regex pattern</li> <li><code>group_index</code>: Index of the targeted capture group. Group 0 mean the whole pattern, first group begin at index 1. Default to the first capture group.</li> </ul>"},{"location":"reference/ExprStr_extract/#returns","title":"Returns","text":"<p>Utf8 array. Contain null if original value is null or regex capture nothing.</p> <p>Extract the target capture group from provided patterns.</p>"},{"location":"reference/ExprStr_extract/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  a =  c(\n\"http://vote.com/ballon_dor?candidate=messi&amp;ref=polars\",\n\"http://vote.com/ballon_dor?candidat=jorginho&amp;ref=polars\",\n\"http://vote.com/ballon_dor?candidate=ronaldo&amp;ref=polars\"\n)\n)\ndf$select(\npl$col(\"a\")$str$extract(r\"(candidate=(\\w+))\", 1)\n)\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a       \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 messi   \u2502\n#&gt; \u2502 null    \u2502\n#&gt; \u2502 ronaldo \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_extract_all/","title":"extract_all","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_extract_all/#arguments","title":"Arguments","text":"<ul> <li><code>pattern</code>: A valid regex pattern</li> </ul>"},{"location":"reference/ExprStr_extract_all/#returns","title":"Returns","text":"<p><code>List[Utf8]</code> array. Contain null if original value is null or regex capture nothing.</p> <p>Extracts all matches for the given regex pattern. Extracts each successive non-overlapping regex match in an individual string as an array.</p>"},{"location":"reference/ExprStr_extract_all/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame( foo = c(\"123 bla 45 asd\", \"xyz 678 910t\"))\ndf$select(\npl$col(\"foo\")$str$extract_all(r\"((\\d+))\")$alias(\"extracted_nrs\")\n)\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 extracted_nrs  \u2502\n#&gt; \u2502 ---            \u2502\n#&gt; \u2502 list[str]      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [\"123\", \"45\"]  \u2502\n#&gt; \u2502 [\"678\", \"910\"] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_json_extract/","title":"json_extract","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_json_extract/#arguments","title":"Arguments","text":"<ul> <li><code>dtype</code>: The dtype to cast the extracted value to. If None, the dtype will be inferred from the JSON value.</li> </ul>"},{"location":"reference/ExprStr_json_extract/#returns","title":"Returns","text":"<p>Expr returning a boolean</p> <p>Parse string values as JSON.</p>"},{"location":"reference/ExprStr_json_extract/#details","title":"Details","text":"<p>Throw errors if encounter invalid json strings.</p>"},{"location":"reference/ExprStr_json_extract/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  json_val =  c('{\"a\":1, \"b\": true}', NA, '{\"a\":2, \"b\": false}')\n)\ndtype = pl$Struct(pl$Field(\"a\", pl$Int64), pl$Field(\"b\", pl$Boolean))\ndf$select(pl$col(\"json_val\")$str$json_extract(dtype))\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 json_val    \u2502\n#&gt; \u2502 ---         \u2502\n#&gt; \u2502 struct[2]   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {1,true}    \u2502\n#&gt; \u2502 {null,null} \u2502\n#&gt; \u2502 {2,false}   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_json_path_match/","title":"json_path_match","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_json_path_match/#arguments","title":"Arguments","text":"<ul> <li><code>json_path</code>: A valid JSON path query string.</li> </ul>"},{"location":"reference/ExprStr_json_path_match/#returns","title":"Returns","text":"<p>Utf8 array. Contain null if original value is null or the json_path return nothing.</p> <p>Extract the first match of json string with provided JSONPath expression.</p>"},{"location":"reference/ExprStr_json_path_match/#details","title":"Details","text":"<p>Throw errors if encounter invalid json strings. All return value will be casted to Utf8 regardless of the original value. Documentation on JSONPath standard can be found <code>here &lt;https://goessner.net/articles/JsonPath/&gt;</code>_.</p>"},{"location":"reference/ExprStr_json_path_match/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  json_val =  c('{\"a\":\"1\"}', NA, '{\"a\":2}', '{\"a\":2.1}', '{\"a\":true}')\n)\ndf$select(pl$col(\"json_val\")$str$json_path_match(\"$.a\"))\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 json_val \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 str      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1        \u2502\n#&gt; \u2502 null     \u2502\n#&gt; \u2502 2        \u2502\n#&gt; \u2502 2.1      \u2502\n#&gt; \u2502 true     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_lengths/","title":"lengths","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_lengths/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprStr_lengths/#returns","title":"Returns","text":"<p>Expr of u32 lengths</p> <p>Get length of the strings as UInt32 (as number of bytes).</p>"},{"location":"reference/ExprStr_lengths/#details","title":"Details","text":"<p>The returned lengths are equal to the number of bytes in the UTF8 string. If you need the length in terms of the number of characters, use <code>n_chars</code> instead.</p>"},{"location":"reference/ExprStr_lengths/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(\n  s = c(\"Caf\u00e9\", NA, \"345\", \"\u00e6\u00f8\u00e5\")\n)$select(\npl$col(\"s\"),\npl$col(\"s\")$str$lengths()$alias(\"lengths\"),\npl$col(\"s\")$str$n_chars()$alias(\"n_chars\")\n)\n#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s    \u2506 lengths \u2506 n_chars \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2506 ---     \u2502\n#&gt; \u2502 str  \u2506 u32     \u2506 u32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Caf\u00e9 \u2506 5       \u2506 4       \u2502\n#&gt; \u2502 null \u2506 null    \u2506 null    \u2502\n#&gt; \u2502 345  \u2506 3       \u2506 3       \u2502\n#&gt; \u2502 \u00e6\u00f8\u00e5  \u2506 6       \u2506 3       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_ljust/","title":"ljust","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_ljust/#arguments","title":"Arguments","text":"<ul> <li><code>width</code>: Justify left to this length.</li> <li><code>fillchar</code>: Fill with this ASCII character.</li> </ul>"},{"location":"reference/ExprStr_ljust/#returns","title":"Returns","text":"<p>Expr of Utf8</p> <p>Return the string left justified in a string of length <code>width</code>.</p>"},{"location":"reference/ExprStr_ljust/#details","title":"Details","text":"<p>Padding is done using the specified <code>fillchar</code>. The original string is returned if <code>width</code> is less than or equal to <code>len(s)</code>.</p>"},{"location":"reference/ExprStr_ljust/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(a = c(\"cow\", \"monkey\", NA, \"hippopotamus\"))\ndf$select(pl$col(\"a\")$str$ljust(8, \"*\"))\n#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a            \u2502\n#&gt; \u2502 ---          \u2502\n#&gt; \u2502 str          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 cow*****     \u2502\n#&gt; \u2502 monkey**     \u2502\n#&gt; \u2502 null         \u2502\n#&gt; \u2502 hippopotamus \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_lstrip/","title":"lstrip","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_lstrip/#arguments","title":"Arguments","text":"<ul> <li><code>matches</code>: The set of characters to be removed. All combinations of this set of characters will be stripped. If set to NULL (default), all whitespace is removed instead.</li> </ul>"},{"location":"reference/ExprStr_lstrip/#returns","title":"Returns","text":"<p>Expr of Utf8 lowercase chars</p> <p>Remove leading characters.</p>"},{"location":"reference/ExprStr_lstrip/#details","title":"Details","text":"<p>will not strip anyt chars beyond the first char not matched. <code>strip()</code> starts from both left and right. Whereas <code>lstrip()</code>and <code>rstrip()</code> starts from left and right respectively.</p>"},{"location":"reference/ExprStr_lstrip/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(foo = c(\" hello\", \"\\tworld\"))\ndf$select(pl$col(\"foo\")$str$strip())\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo   \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 str   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 hello \u2502\n#&gt; \u2502 world \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$col(\"foo\")$str$strip(\" hel rld\"))\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 o   \u2502\n#&gt; \u2502    wo  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$col(\"foo\")$str$lstrip(\" hel rld\"))\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo   \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 str   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 o     \u2502\n#&gt; \u2502    world \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$col(\"foo\")$str$rstrip(\" hel\\trld\"))\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo    \u2502\n#&gt; \u2502 ---    \u2502\n#&gt; \u2502 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502  hello \u2502\n#&gt; \u2502    wo     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$col(\"foo\")$str$rstrip(\"rldhel\\t \"))\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo    \u2502\n#&gt; \u2502 ---    \u2502\n#&gt; \u2502 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502  hello \u2502\n#&gt; \u2502    wo     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_n_chars/","title":"n_chars","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_n_chars/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/ExprStr_n_chars/#returns","title":"Returns","text":"<p>Expr of u32 n_chars</p> <p>Get length of the strings as UInt32 (as number of chars).</p>"},{"location":"reference/ExprStr_n_chars/#details","title":"Details","text":"<p>If you know that you are working with ASCII text, <code>lengths</code> will be equivalent, and faster (returns length in terms of the number of bytes).</p>"},{"location":"reference/ExprStr_n_chars/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(\n  s = c(\"Caf\u00e9\", NA, \"345\", \"\u00e6\u00f8\u00e5\")\n)$select(\npl$col(\"s\"),\npl$col(\"s\")$str$lengths()$alias(\"lengths\"),\npl$col(\"s\")$str$n_chars()$alias(\"n_chars\")\n)\n#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s    \u2506 lengths \u2506 n_chars \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2506 ---     \u2502\n#&gt; \u2502 str  \u2506 u32     \u2506 u32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Caf\u00e9 \u2506 5       \u2506 4       \u2502\n#&gt; \u2502 null \u2506 null    \u2506 null    \u2502\n#&gt; \u2502 345  \u2506 3       \u2506 3       \u2502\n#&gt; \u2502 \u00e6\u00f8\u00e5  \u2506 6       \u2506 3       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_parse_int/","title":"parse_int","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_parse_int/#arguments","title":"Arguments","text":"<ul> <li><code>radix</code>: Positive integer which is the base of the string we are parsing. Default: 2</li> </ul>"},{"location":"reference/ExprStr_parse_int/#returns","title":"Returns","text":"<p>Expr: Series of dtype i32.</p> <p>Parse integers with base radix from strings. By default base 2.</p>"},{"location":"reference/ExprStr_parse_int/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(bin = c(\"110\", \"101\", \"010\"))\ndf$select(pl$col(\"bin\")$str$parse_int(2))\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 bin \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6   \u2502\n#&gt; \u2502 5   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_replace/","title":"replace","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_replace/#arguments","title":"Arguments","text":"<ul> <li><code>pattern</code>: Into  , regex pattern</li> <li><code>value</code>: Into  replcacement</li> <li><code>literal</code>: bool, Treat pattern as a literal string.</li> </ul>"},{"location":"reference/ExprStr_replace/#returns","title":"Returns","text":"<p>Expr of Utf8 Series</p> <p>Replace first matching regex/literal substring with a new string value.</p>"},{"location":"reference/ExprStr_replace/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(id = c(1, 2), text = c(\"123abc\", \"abc456\"))\ndf$with_columns(\npl$col(\"text\")$str$replace(r\"{abc\\b}\", \"ABC\")\n)\n#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 id  \u2506 text   \u2502\n#&gt; \u2502 --- \u2506 ---    \u2502\n#&gt; \u2502 f64 \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 123ABC \u2502\n#&gt; \u2502 2.0 \u2506 abc456 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_replace_all/","title":"replace_all","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_replace_all/#arguments","title":"Arguments","text":"<ul> <li><code>pattern</code>: Into  , regex pattern</li> <li><code>value</code>: Into  replcacement</li> <li><code>literal</code>: bool, treat pattern as a literal string.</li> </ul>"},{"location":"reference/ExprStr_replace_all/#returns","title":"Returns","text":"<p>Expr of Utf8 Series</p> <p>Replace all matching regex/literal substrings with a new string value.</p>"},{"location":"reference/ExprStr_replace_all/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(id = c(1, 2), text = c(\"abcabc\", \"123a123\"))\ndf$with_columns(\npl$col(\"text\")$str$replace_all(\"a\", \"-\")\n)\n#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 id  \u2506 text    \u2502\n#&gt; \u2502 --- \u2506 ---     \u2502\n#&gt; \u2502 f64 \u2506 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 -bc-bc  \u2502\n#&gt; \u2502 2.0 \u2506 123-123 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_rjust/","title":"rjust","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_rjust/#arguments","title":"Arguments","text":"<ul> <li><code>width</code>: Justify left to this length.</li> <li><code>fillchar</code>: Fill with this ASCII character.</li> </ul>"},{"location":"reference/ExprStr_rjust/#returns","title":"Returns","text":"<p>Expr of Utf8</p> <p>Return the string left justified in a string of length <code>width</code>.</p>"},{"location":"reference/ExprStr_rjust/#details","title":"Details","text":"<p>Padding is done using the specified <code>fillchar</code>. The original string is returned if <code>width</code> is less than or equal to <code>len(s)</code>.</p>"},{"location":"reference/ExprStr_rjust/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(a = c(\"cow\", \"monkey\", NA, \"hippopotamus\"))\ndf$select(pl$col(\"a\")$str$rjust(8, \"*\"))\n#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a            \u2502\n#&gt; \u2502 ---          \u2502\n#&gt; \u2502 str          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 *****cow     \u2502\n#&gt; \u2502 **monkey     \u2502\n#&gt; \u2502 null         \u2502\n#&gt; \u2502 hippopotamus \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_rstrip/","title":"rstrip","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_rstrip/#arguments","title":"Arguments","text":"<ul> <li><code>matches</code>: The set of characters to be removed. All combinations of this set of characters will be stripped. If set to NULL (default), all whitespace is removed instead.</li> </ul>"},{"location":"reference/ExprStr_rstrip/#returns","title":"Returns","text":"<p>Expr of Utf8 lowercase chars</p> <p>Remove leading characters.</p>"},{"location":"reference/ExprStr_rstrip/#details","title":"Details","text":"<p>will not strip anyt chars beyond the first char not matched. <code>strip()</code> starts from both left and right. Whereas <code>rstrip()</code>and <code>rstrip()</code> starts from left and right respectively.</p>"},{"location":"reference/ExprStr_rstrip/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(foo = c(\" hello\", \"\\tworld\"))\ndf$select(pl$col(\"foo\")$str$strip())\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo   \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 str   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 hello \u2502\n#&gt; \u2502 world \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$col(\"foo\")$str$strip(\" hel rld\"))\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 o   \u2502\n#&gt; \u2502    wo  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$col(\"foo\")$str$lstrip(\" hel rld\"))\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo   \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 str   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 o     \u2502\n#&gt; \u2502    world \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$col(\"foo\")$str$rstrip(\" hel\\trld\"))\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo    \u2502\n#&gt; \u2502 ---    \u2502\n#&gt; \u2502 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502  hello \u2502\n#&gt; \u2502    wo     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$col(\"foo\")$str$rstrip(\"rldhel\\t \"))\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo    \u2502\n#&gt; \u2502 ---    \u2502\n#&gt; \u2502 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502  hello \u2502\n#&gt; \u2502    wo     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_slice/","title":"slice","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_slice/#arguments","title":"Arguments","text":"<ul> <li><code>pattern</code>: Into  , regex pattern</li> <li><code>value</code>: Into  replcacement</li> <li><code>literal</code>: bool, treat pattern as a literal string.</li> </ul>"},{"location":"reference/ExprStr_slice/#returns","title":"Returns","text":"<p>Expr: Series of dtype Utf8.</p> <p>Create subslices of the string values of a Utf8 Series.</p>"},{"location":"reference/ExprStr_slice/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(s = c(\"pear\", NA, \"papaya\", \"dragonfruit\"))\ndf$with_columns(\npl$col(\"s\")$str$slice(-3)$alias(\"s_sliced\")\n)\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s           \u2506 s_sliced \u2502\n#&gt; \u2502 ---         \u2506 ---      \u2502\n#&gt; \u2502 str         \u2506 str      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 pear        \u2506 ear      \u2502\n#&gt; \u2502 null        \u2506 null     \u2502\n#&gt; \u2502 papaya      \u2506 aya      \u2502\n#&gt; \u2502 dragonfruit \u2506 uit      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_split/","title":"split","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_split/#arguments","title":"Arguments","text":"<ul> <li><code>by</code>: Substring to split by.</li> <li><code>inclusive</code>: If True, include the split character/string in the results.</li> </ul>"},{"location":"reference/ExprStr_split/#returns","title":"Returns","text":"<p>List of Utf8 type</p> <p>Split the string by a substring.</p>"},{"location":"reference/ExprStr_split/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(s = c(\"foo bar\", \"foo-bar\", \"foo bar baz\"))\ndf$select( pl$col(\"s\")$str$split(by=\" \"))\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s                     \u2502\n#&gt; \u2502 ---                   \u2502\n#&gt; \u2502 list[str]             \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [\"foo\", \"bar\"]        \u2502\n#&gt; \u2502 [\"foo-bar\"]           \u2502\n#&gt; \u2502 [\"foo\", \"bar\", \"baz\"] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_split_exact/","title":"split_exact","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_split_exact/#arguments","title":"Arguments","text":"<ul> <li><code>by</code>: Substring to split by.</li> <li><code>n</code>: Number of splits to make.</li> <li><code>inclusive</code>: If True, include the split_exact character/string in the results.</li> </ul>"},{"location":"reference/ExprStr_split_exact/#returns","title":"Returns","text":"<p>Struct where each of n+1 fields is of Utf8 type</p> <p>Split the string by a substring using <code>n</code> splits. Results in a struct of <code>n+1</code> fields. If it cannot make <code>n</code> splits, the remaining field elements will be null.</p>"},{"location":"reference/ExprStr_split_exact/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(s = c(\"a_1\", NA, \"c\", \"d_4\"))\ndf$select( pl$col(\"s\")$str$split_exact(by=\"_\",1))\n#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s           \u2502\n#&gt; \u2502 ---         \u2502\n#&gt; \u2502 struct[2]   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {\"a\",\"1\"}   \u2502\n#&gt; \u2502 {null,null} \u2502\n#&gt; \u2502 {\"c\",null}  \u2502\n#&gt; \u2502 {\"d\",\"4\"}   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_splitn/","title":"splitn","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_splitn/#arguments","title":"Arguments","text":"<ul> <li><code>by</code>: Substring to split by.</li> <li><code>n</code>: Number of splits to make.</li> </ul>"},{"location":"reference/ExprStr_splitn/#returns","title":"Returns","text":"<p>Struct where each of n+1 fields is of Utf8 type</p> <p>Split the string by a substring, restricted to returning at most <code>n</code> items. If the number of possible splits is less than <code>n-1</code>, the remaining field elements will be null. If the number of possible splits is <code>n-1</code> or greater, the last (nth) substring will contain the remainder of the string.</p>"},{"location":"reference/ExprStr_splitn/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(s = c(\"a_1\", NA, \"c\", \"d_4\"))\ndf$select( pl$col(\"s\")$str$splitn(by=\"_\",0))\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s         \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 struct[1] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {null}    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select( pl$col(\"s\")$str$splitn(by=\"_\",1))\n#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s         \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 struct[1] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {\"a_1\"}   \u2502\n#&gt; \u2502 {null}    \u2502\n#&gt; \u2502 {\"c\"}     \u2502\n#&gt; \u2502 {\"d_4\"}   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select( pl$col(\"s\")$str$splitn(by=\"_\",2))\n#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s           \u2502\n#&gt; \u2502 ---         \u2502\n#&gt; \u2502 struct[2]   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {\"a\",\"1\"}   \u2502\n#&gt; \u2502 {null,null} \u2502\n#&gt; \u2502 {\"c\",null}  \u2502\n#&gt; \u2502 {\"d\",\"4\"}   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_starts_with/","title":"starts_with","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_starts_with/#arguments","title":"Arguments","text":"<ul> <li><code>sub</code>: Prefix substring or Expr.</li> </ul>"},{"location":"reference/ExprStr_starts_with/#returns","title":"Returns","text":"<p>Expr returning a Boolean</p> <p>Check if string values starts with a substring.</p>"},{"location":"reference/ExprStr_starts_with/#details","title":"Details","text":"<p>contains : Check if string contains a substring that matches a regex. ends_with : Check if string values end with a substring.</p>"},{"location":"reference/ExprStr_starts_with/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(fruits = c(\"apple\", \"mango\", NA))\ndf$select(\npl$col(\"fruits\"),\npl$col(\"fruits\")$str$starts_with(\"app\")$alias(\"has_suffix\")\n)\n#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 fruits \u2506 has_suffix \u2502\n#&gt; \u2502 ---    \u2506 ---        \u2502\n#&gt; \u2502 str    \u2506 bool       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 apple  \u2506 true       \u2502\n#&gt; \u2502 mango  \u2506 false      \u2502\n#&gt; \u2502 null   \u2506 null       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_strip/","title":"Strip","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_strip/#arguments","title":"Arguments","text":"<ul> <li><code>matches</code>: The set of characters to be removed. All combinations of this set of characters will be stripped. If set to NULL (default), all whitespace is removed instead.</li> </ul>"},{"location":"reference/ExprStr_strip/#returns","title":"Returns","text":"<p>Expr of Utf8 lowercase chars</p> <p>Remove leading and trailing characters.</p>"},{"location":"reference/ExprStr_strip/#details","title":"Details","text":"<p>will not strip anyt chars beyond the first char not matched. <code>strip()</code> starts from both left and right. Whereas <code>lstrip()</code>and <code>rstrip()</code> starts from left and right respectively.</p>"},{"location":"reference/ExprStr_strip/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(foo = c(\" hello\", \"\\tworld\"))\ndf$select(pl$col(\"foo\")$str$strip())\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo   \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 str   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 hello \u2502\n#&gt; \u2502 world \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$col(\"foo\")$str$strip(\" hel rld\"))\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 o   \u2502\n#&gt; \u2502    wo  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$col(\"foo\")$str$lstrip(\" hel rld\"))\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo   \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 str   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 o     \u2502\n#&gt; \u2502    world \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$col(\"foo\")$str$rstrip(\" hel\\trld\"))\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo    \u2502\n#&gt; \u2502 ---    \u2502\n#&gt; \u2502 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502  hello \u2502\n#&gt; \u2502    wo     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$col(\"foo\")$str$rstrip(\"rldhel\\t \"))\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo    \u2502\n#&gt; \u2502 ---    \u2502\n#&gt; \u2502 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502  hello \u2502\n#&gt; \u2502    wo     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStr_strptime/","title":"strptime","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_strptime/#arguments","title":"Arguments","text":"<ul> <li><code>datatype</code>: a temporal data type either pl$Date, pl$Time or pl$Datetime</li> <li><code>fmt</code>: fmt string for parsenig see see details here https://docs.rs/chrono/latest/chrono/format/strftime/index.html#fn6 Notice time_zone %Z is not supported and will just ignore timezones. Numeric tz like %z, %:z .... are supported.</li> <li><code>strict</code>: bool, if true raise error if a single string cannot be parsed, else produce a polars <code>null</code>.</li> <li><code>exact</code>: bool , If True, require an exact format match. If False, allow the format to match anywhere in the target string.</li> <li><code>cache</code>: Use a cache of unique, converted dates to apply the datetime conversion.</li> <li><code>tz_aware</code>: bool, Parse timezone aware datetimes. This may be automatically toggled by the \u2018fmt\u2019 given.</li> <li><code>utc</code>: bool Parse timezone aware datetimes as UTC. This may be useful if you have data with mixed offsets.</li> </ul>"},{"location":"reference/ExprStr_strptime/#returns","title":"Returns","text":"<p>Expr of a Data, Datetime or Time Series</p> <p>Parse a Series of dtype Utf8 to a Date/Datetime Series.</p>"},{"location":"reference/ExprStr_strptime/#details","title":"Details","text":"<p>Notes When parsing a Datetime the column precision will be inferred from the format string, if given, eg: \u201c%F %T%.3f\u201d =&gt; Datetime(\u201cms\u201d). If no fractional second component is found then the default is \u201cus\u201d.</p>"},{"location":"reference/ExprStr_strptime/#examples","title":"Examples","text":"<pre><code>s = pl$Series(c(\n\"2021-04-22\",\n\"2022-01-04 00:00:00\",\n\"01/31/22\",\n\"Sun Jul  8 00:34:60 2001\"\n),\n\"date\"\n)\n#' #join multiple passes with different fmt\ns$to_frame()$with_columns(\npl$col(\"date\")\n$str$strptime(pl$Date, \"%F\", strict=FALSE)\n$fill_null(pl$col(\"date\")$str$strptime(pl$Date, \"%F %T\", strict=FALSE))\n$fill_null(pl$col(\"date\")$str$strptime(pl$Date, \"%D\", strict=FALSE))\n$fill_null(pl$col(\"date\")$str$strptime(pl$Date, \"%c\", strict=FALSE))\n)\n#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 date       \u2502\n#&gt; \u2502 ---        \u2502\n#&gt; \u2502 date       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2021-04-22 \u2502\n#&gt; \u2502 2022-01-04 \u2502\n#&gt; \u2502 2022-01-31 \u2502\n#&gt; \u2502 2001-07-08 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ntxt_datetimes = c(\n\"2023-01-01 11:22:33 -0100\",\n\"2023-01-01 11:22:33 +0300\",\n\"invalid time\"\n)\npl$lit(txt_datetimes)$str$strptime(\npl$Datetime(\"ns\"),fmt = \"%Y-%m-%d %H:%M:%S %z\", strict = FALSE,\n  tz_aware = TRUE, utc =TRUE\n)$lit_to_s()\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [datetime[ns, UTC]]\n#&gt; [\n#&gt;  2023-01-01 12:22:33 UTC\n#&gt;  2023-01-01 08:22:33 UTC\n#&gt;  null\n#&gt; ]\n </code></pre>"},{"location":"reference/ExprStr_to_lowercase/","title":"To lowercase","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_to_lowercase/#returns","title":"Returns","text":"<p>Expr of Utf8 lowercase chars</p> <p>Transform to lowercase variant.</p>"},{"location":"reference/ExprStr_to_lowercase/#examples","title":"Examples","text":"<pre><code>pl$lit(c(\"A\",\"b\", \"c\", \"1\", NA))$str$to_lowercase()$lit_to_s()\n#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [str]\n#&gt; [\n#&gt;  \"a\"\n#&gt;  \"b\"\n#&gt;  \"c\"\n#&gt;  \"1\"\n#&gt;  null\n#&gt; ]\n </code></pre>"},{"location":"reference/ExprStr_to_uppercase/","title":"To uppercase","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_to_uppercase/#returns","title":"Returns","text":"<p>Expr of Utf8 uppercase chars</p> <p>Transform to uppercase variant.</p>"},{"location":"reference/ExprStr_to_uppercase/#examples","title":"Examples","text":"<pre><code>pl$lit(c(\"A\",\"b\", \"c\", \"1\", NA))$str$to_uppercase()$lit_to_s()\n#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [str]\n#&gt; [\n#&gt;  \"A\"\n#&gt;  \"B\"\n#&gt;  \"C\"\n#&gt;  \"1\"\n#&gt;  null\n#&gt; ]\n </code></pre>"},{"location":"reference/ExprStr_zfill/","title":"zfill","text":"<p>Source: R/expr__string.R</p>"},{"location":"reference/ExprStr_zfill/#arguments","title":"Arguments","text":"<ul> <li><code>alignment</code>: Fill the value up to this length</li> </ul>"},{"location":"reference/ExprStr_zfill/#returns","title":"Returns","text":"<p>Expr</p> <p>Fills the string with zeroes.</p>"},{"location":"reference/ExprStr_zfill/#details","title":"Details","text":"<p>Return a copy of the string left filled with ASCII '0' digits to make a string of length width.</p> <p>A leading sign prefix ('+'/'-') is handled by inserting the padding after the sign character rather than before. The original string is returned if width is less than or equal to <code>len(s)</code>.</p>"},{"location":"reference/ExprStr_zfill/#examples","title":"Examples","text":"<pre><code>some_floats_expr = pl$lit(c(0,10,-5,5))\n#cast to Utf8 and ljust alignment = 5, and view as R char vector\nsome_floats_expr$cast(pl$Utf8)$str$zfill(5)$to_r()\n#&gt; [1] \"000.0\" \"010.0\" \"-05.0\" \"005.0\"\n#cast to int and the to utf8 and then ljust alignment = 5, and view as R char vector\nsome_floats_expr$cast(pl$Int64)$cast(pl$Utf8)$str$zfill(5)$to_r()\n#&gt; [1] \"00000\" \"00010\" \"-0005\" \"00005\"\n </code></pre>"},{"location":"reference/ExprStruct_field/","title":"field","text":"<p>Source: R/expr__struct.R</p>"},{"location":"reference/ExprStruct_field/#arguments","title":"Arguments","text":"<ul> <li><code>name</code>: string, the Name of the struct field to retrieve.</li> </ul>"},{"location":"reference/ExprStruct_field/#returns","title":"Returns","text":"<p>Expr: Series of same and name selected field.</p> <p>Retrieve a <code>Struct</code> field as a new Series. By default base 2.</p>"},{"location":"reference/ExprStruct_field/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n     aaa = c(1, 2),\n     bbb = c(\"ab\", \"cd\"),\n     ccc = c(TRUE, NA),\n     ddd = list(c(1, 2), 3)\n)$select(\npl$struct(pl$all())$alias(\"struct_col\")\n)\n#struct field into a new Series\ndf$select(\npl$col(\"struct_col\")$struct$field(\"bbb\"),\npl$col(\"struct_col\")$struct$field(\"ddd\")\n)\n#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 bbb \u2506 ddd        \u2502\n#&gt; \u2502 --- \u2506 ---        \u2502\n#&gt; \u2502 str \u2506 list[f64]  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 ab  \u2506 [1.0, 2.0] \u2502\n#&gt; \u2502 cd  \u2506 [3.0]      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/ExprStruct_rename_fields/","title":"rename fields","text":"<p>Source: R/expr__struct.R</p>"},{"location":"reference/ExprStruct_rename_fields/#arguments","title":"Arguments","text":"<ul> <li><code>names</code>: char vec or list of strings given in the same order as the struct's fields. Providing fewer names will drop the latter fields. Providing too many names is ignored.</li> </ul>"},{"location":"reference/ExprStruct_rename_fields/#returns","title":"Returns","text":"<p>Expr: struct-series with new names for the fields</p> <p>Rename the fields of the struct. By default base 2.</p>"},{"location":"reference/ExprStruct_rename_fields/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  aaa = 1:2,\n  bbb = c(\"ab\", \"cd\"),\n  ccc = c(TRUE, NA),\n  ddd = list(1:2, 3L)\n)$select(\npl$struct(pl$all())$alias(\"struct_col\")\n)$select(\npl$col(\"struct_col\")$struct$rename_fields(c(\"www\", \"xxx\", \"yyy\", \"zzz\"))\n)\ndf$unnest()\n#&gt; shape: (2, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 www \u2506 xxx \u2506 yyy  \u2506 zzz       \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---  \u2506 ---       \u2502\n#&gt; \u2502 i32 \u2506 str \u2506 bool \u2506 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 ab  \u2506 true \u2506 [1, 2]    \u2502\n#&gt; \u2502 2   \u2506 cd  \u2506 null \u2506 [3]       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_abs/","title":"Expr_abs","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_abs/#abs","title":"Abs","text":""},{"location":"reference/Expr_abs/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_abs\n</code></pre>"},{"location":"reference/Expr_abs/#returns","title":"Returns","text":"<p>Exprs abs</p> <p>Compute absolute values</p>"},{"location":"reference/Expr_abs/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(a=-1:1))$select(pl$col(\"a\"),pl$col(\"a\")$abs()$alias(\"abs\"))\n#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 abs \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1  \u2506 1   \u2502\n#&gt; \u2502 0   \u2506 0   \u2502\n#&gt; \u2502 1   \u2506 1   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_add/","title":"Add","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_add(other)\n## S3 method for class 'Expr'\ne1 + e2\n</code></pre>"},{"location":"reference/Expr_add/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: literal or Robj which can become a literal</li> <li><code>e1</code>: lhs Expr</li> <li><code>e2</code>: rhs Expr or anything which can become a literal Expression</li> </ul>"},{"location":"reference/Expr_add/#returns","title":"Returns","text":"<p>Exprs</p> <p>Addition</p>"},{"location":"reference/Expr_add/#examples","title":"Examples","text":"<pre><code>#three syntaxes same result\npl$lit(5) + 10\n#&gt; polars Expr: [(5f64) + (10f64)]\npl$lit(5) + pl$lit(10)\n#&gt; polars Expr: [(5f64) + (10f64)]\npl$lit(5)$add(pl$lit(10))\n#&gt; polars Expr: [(5f64) + (10f64)]\n+pl$lit(5) #unary use resolves to same as pl$lit(5)\n#&gt; polars Expr: 5f64\n </code></pre>"},{"location":"reference/Expr_agg_groups/","title":"Expr_agg_groups","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_agg_groups/#aggregate-groups","title":"aggregate groups","text":""},{"location":"reference/Expr_agg_groups/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_agg_groups\n</code></pre>"},{"location":"reference/Expr_agg_groups/#returns","title":"Returns","text":"<p>Exprs</p> <p>Get the group indexes of the group by operation. Should be used in aggregation context only.</p>"},{"location":"reference/Expr_agg_groups/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(\n  group = c(\"one\",\"one\",\"one\",\"two\",\"two\",\"two\"),\n  value =  c(94, 95, 96, 97, 97, 99)\n))\ndf$groupby(\"group\", maintain_order=TRUE)$agg(pl$col(\"value\")$agg_groups())\n#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 group \u2506 value     \u2502\n#&gt; \u2502 ---   \u2506 ---       \u2502\n#&gt; \u2502 str   \u2506 list[u32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 one   \u2506 [0, 1, 2] \u2502\n#&gt; \u2502 two   \u2506 [3, 4, 5] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_alias/","title":"Expr_alias","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_alias/#rename-expr-output","title":"Rename Expr output","text":""},{"location":"reference/Expr_alias/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_alias(name)\n</code></pre>"},{"location":"reference/Expr_alias/#arguments","title":"Arguments","text":"<ul> <li><code>name</code>: string new name of output</li> </ul>"},{"location":"reference/Expr_alias/#returns","title":"Returns","text":"<p>Expr</p> <p>Rename the output of an expression.</p>"},{"location":"reference/Expr_alias/#examples","title":"Examples","text":"<pre><code>pl$col(\"bob\")$alias(\"alice\")\n#&gt; polars Expr: col(\"bob\").alias(\"alice\")\n </code></pre>"},{"location":"reference/Expr_all/","title":"Expr_all","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_all/#all-is-true","title":"All, is true","text":""},{"location":"reference/Expr_all/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_all\n</code></pre>"},{"location":"reference/Expr_all/#returns","title":"Returns","text":"<p>Boolean literal</p> <p>Check if all boolean values in a Boolean column are <code>TRUE</code>. This method is an expression - not to be confused with <code>pl$all</code> which is a function to select all columns.</p>"},{"location":"reference/Expr_all/#details","title":"Details","text":"<p>last <code>all()</code> in example is this Expr method, the first <code>pl$all()</code> refers to \"all-columns\" and is an expression constructor</p>"},{"location":"reference/Expr_all/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(\n  all=c(TRUE,TRUE),\n  any=c(TRUE,FALSE),\n  none=c(FALSE,FALSE)\n)$select(\npl$all()$all()\n)\n#&gt; shape: (1, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 all  \u2506 any   \u2506 none  \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2506 ---   \u2502\n#&gt; \u2502 bool \u2506 bool  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true \u2506 false \u2506 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_and/","title":"Expr_and","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_and/#and","title":"And","text":""},{"location":"reference/Expr_and/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_and(other)\n</code></pre>"},{"location":"reference/Expr_and/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: literal or Robj which can become a literal</li> </ul>"},{"location":"reference/Expr_and/#returns","title":"Returns","text":"<p>Expr</p> <p>combine to boolean exprresions with AND</p>"},{"location":"reference/Expr_and/#examples","title":"Examples","text":"<pre><code>pl$lit(TRUE) &amp; TRUE\n#&gt; polars Expr: [(true) &amp; (true)]\npl$lit(TRUE)$and(pl$lit(TRUE))\n#&gt; polars Expr: [(true) &amp; (true)]\n </code></pre>"},{"location":"reference/Expr_any/","title":"Expr_any","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_any/#any-is-true","title":"Any (is true)","text":""},{"location":"reference/Expr_any/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_any\n</code></pre>"},{"location":"reference/Expr_any/#returns","title":"Returns","text":"<p>Boolean literal</p> <p>Check if any boolean value in a Boolean column is <code>TRUE</code>.</p>"},{"location":"reference/Expr_any/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(\n  all=c(TRUE,TRUE),\n  any=c(TRUE,FALSE),\n  none=c(FALSE,FALSE)\n)$select(\npl$all()$any()\n)\n#&gt; shape: (1, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 all  \u2506 any  \u2506 none  \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---   \u2502\n#&gt; \u2502 bool \u2506 bool \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true \u2506 true \u2506 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_append/","title":"Append expressions","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_append/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_append(other, upcast = TRUE)\n</code></pre>"},{"location":"reference/Expr_append/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: Expr, into Expr</li> <li><code>upcast</code>: bool upcast to, if any supertype of two non equal datatypes.</li> </ul>"},{"location":"reference/Expr_append/#returns","title":"Returns","text":"<p>Expr</p> <p>This is done by adding the chunks of <code>other</code> to this <code>output</code>.</p>"},{"location":"reference/Expr_append/#examples","title":"Examples","text":"<pre><code>#append bottom to to row\ndf = pl$DataFrame(list(a = 1:3, b = c(NA_real_,4,5)))\ndf$select(pl$all()$head(1)$append(pl$all()$tail(1)))\n#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b    \u2502\n#&gt; \u2502 --- \u2506 ---  \u2502\n#&gt; \u2502 i32 \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 null \u2502\n#&gt; \u2502 3   \u2506 5.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#implicit upcast, when default = TRUE\npl$DataFrame(list())$select(pl$lit(42)$append(42L))\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 literal \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 42.0    \u2502\n#&gt; \u2502 42.0    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\npl$DataFrame(list())$select(pl$lit(42)$append(FALSE))\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 literal \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 42.0    \u2502\n#&gt; \u2502 0.0     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\npl$DataFrame(list())$select(pl$lit(\"Bob\")$append(FALSE))\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 literal \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Bob     \u2502\n#&gt; \u2502 false   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_apply/","title":"Expr_apply","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_apply(\nf,\nreturn_type = NULL,\nstrict_return_type = TRUE,\nallow_fail_eval = FALSE\n)\n</code></pre>"},{"location":"reference/Expr_apply/#arguments","title":"Arguments","text":"<ul> <li><code>f</code>: r function see details depending on context</li> <li><code>return_type</code>: NULL or one of pl$dtypes, the output datatype, NULL is the same as input.</li> <li><code>strict_return_type</code>: bool (default TRUE), error if not correct datatype returned from R, if FALSE will convert to a Polars Null and carry on.</li> <li><code>allow_fail_eval</code>: bool (default FALSE), if TRUE will not raise user function error but convert result to a polars Null and carry on.</li> </ul>"},{"location":"reference/Expr_apply/#returns","title":"Returns","text":"<p>Expr</p> <p>Apply a custom/user-defined function (UDF) in a GroupBy or Projection context. Depending on the context it has the following behavior: -Selection</p>"},{"location":"reference/Expr_apply/#details","title":"Details","text":"<p>Apply a user function in a groupby or projection(select) context</p> <p>Depending on context the following behaviour:</p> <ul> <li>Projection/Selection: Expects an <code>f</code> to operate on R scalar values. Polars will convert each element into an R value and pass it to the function The output of the user function will be converted back into a polars type. Return type must match. See param return type. Apply in selection context should be avoided as a <code>lapply()</code> has half the overhead.</li> <li>Groupby Expects a user function <code>f</code> to take a <code>Series</code> and return a <code>Series</code> or Robj convertable to <code>Series</code>, eg. R vector. GroupBy context much faster if number groups are quite fewer than number of rows, as the iteration is only across the groups. The r user function could e.g. do vectorized operations and stay quite performant. use <code>s$to_r()</code> to convert input Series to an r vector or list. use <code>s$to_vector</code> and <code>s$to_r_list()</code> to force conversion to vector or list.</li> </ul> <p>Implementing logic using an R function is almost always significantly</p> <p>slower and more memory intensive than implementing the same logic using the native expression API because: - The native expression engine runs in Rust; functions run in R. - Use of R functions forces the DataFrame to be materialized in memory. - Polars-native expressions can be parallelised (R functions cannot*). - Polars-native expressions can be logically optimised (R functions cannot). Wherever possible you should strongly prefer the native expression API to achieve the best performance.</p>"},{"location":"reference/Expr_apply/#examples","title":"Examples","text":"<pre><code>#apply over groups - normal usage\n# s is a series of all values for one column within group, here Species\ne_all =pl$all() #perform groupby agg on all columns otherwise e.g. pl$col(\"Sepal.Length\")\ne_sum  = e_all$apply(\\(s)  sum(s$to_r()))$suffix(\"_sum\")\ne_head = e_all$apply(\\(s) head(s$to_r(),2))$suffix(\"_head\")\npl$DataFrame(iris)$groupby(\"Species\")$agg(e_sum,e_head)\n#&gt; shape: (3, 9)\n#&gt; \u250c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 S \u2506 Sepal.Leng \u2506 Sepal.Widt \u2506 Petal.Leng \u2506 ... \u2506 Sepal.Leng \u2506 Sepal.Widt \u2506 Petal.Leng \u2506 Petal.Widt \u2502\n#&gt; \u2502 p \u2506 th_sum     \u2506 h_sum      \u2506 th_sum     \u2506     \u2506 th_head    \u2506 h_head     \u2506 th_head    \u2506 h_head     \u2502\n#&gt; \u2502 e \u2506 ---        \u2506 ---        \u2506 ---        \u2506     \u2506 ---        \u2506 ---        \u2506 ---        \u2506 ---        \u2502\n#&gt; \u2502 c \u2506 f64        \u2506 f64        \u2506 f64        \u2506     \u2506 list[f64]  \u2506 list[f64]  \u2506 list[f64]  \u2506 list[f64]  \u2502\n#&gt; \u2502 i \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 e \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 s \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 - \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 - \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 - \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 c \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 a \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 t \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u255e\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 v \u2506 296.8      \u2506 138.5      \u2506 213.0      \u2506 ... \u2506 [7.0, 6.4] \u2506 [3.2, 3.2] \u2506 [4.7, 4.5] \u2506 [1.4, 1.5] \u2502\n#&gt; \u2502 e \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 r \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 s \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 i \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 c \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 o \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 l \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 o \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 r \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 v \u2506 329.4      \u2506 148.7      \u2506 277.6      \u2506 ... \u2506 [6.3, 5.8] \u2506 [3.3, 2.7] \u2506 [6.0, 5.1] \u2506 [2.5, 1.9] \u2502\n#&gt; \u2502 i \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 r \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 g \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 i \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 n \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 i \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 c \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 a \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 s \u2506 250.3      \u2506 171.4      \u2506 73.1       \u2506 ... \u2506 [5.1, 4.9] \u2506 [3.5, 3.0] \u2506 [1.4, 1.4] \u2506 [0.2, 0.2] \u2502\n#&gt; \u2502 e \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 t \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 o \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 s \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2502 a \u2506            \u2506            \u2506            \u2506     \u2506            \u2506            \u2506            \u2506            \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n# apply over single values (should be avoided as it takes ~2.5us overhead + R function exec time\n# on a 2015 MacBook Pro) x is an R scalar\n#perform on all Float64 columns, using pl$all requires user function can handle any input type\ne_all =pl$col(pl$dtypes$Float64)\ne_add10  = e_all$apply(\\(x)  {x+10})$suffix(\"_sum\")\n#quite silly index into alphabet(letters) by ceil of float value\n#must set return_type as not the same as input\ne_letter = e_all$apply(\\(x) letters[ceiling(x)], return_type = pl$dtypes$Utf8)$suffix(\"_letter\")\npl$DataFrame(iris)$select(e_add10,e_letter)\n#&gt; shape: (150, 8)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Leng \u2506 Sepal.Widt \u2506 Petal.Leng \u2506 Petal.Widt \u2506 Sepal.Leng \u2506 Sepal.Widt \u2506 Petal.Leng \u2506 Petal.Widt \u2502\n#&gt; \u2502 th_sum     \u2506 h_sum      \u2506 th_sum     \u2506 h_sum      \u2506 th_letter  \u2506 h_letter   \u2506 th_letter  \u2506 h_letter   \u2502\n#&gt; \u2502 ---        \u2506 ---        \u2506 ---        \u2506 ---        \u2506 ---        \u2506 ---        \u2506 ---        \u2506 ---        \u2502\n#&gt; \u2502 f64        \u2506 f64        \u2506 f64        \u2506 f64        \u2506 str        \u2506 str        \u2506 str        \u2506 str        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 15.1       \u2506 13.5       \u2506 11.4       \u2506 10.2       \u2506 f          \u2506 d          \u2506 b          \u2506 a          \u2502\n#&gt; \u2502 14.9       \u2506 13.0       \u2506 11.4       \u2506 10.2       \u2506 e          \u2506 c          \u2506 b          \u2506 a          \u2502\n#&gt; \u2502 14.7       \u2506 13.2       \u2506 11.3       \u2506 10.2       \u2506 e          \u2506 d          \u2506 b          \u2506 a          \u2502\n#&gt; \u2502 14.6       \u2506 13.1       \u2506 11.5       \u2506 10.2       \u2506 e          \u2506 d          \u2506 b          \u2506 a          \u2502\n#&gt; \u2502 ...        \u2506 ...        \u2506 ...        \u2506 ...        \u2506 ...        \u2506 ...        \u2506 ...        \u2506 ...        \u2502\n#&gt; \u2502 16.3       \u2506 12.5       \u2506 15.0       \u2506 11.9       \u2506 g          \u2506 c          \u2506 e          \u2506 b          \u2502\n#&gt; \u2502 16.5       \u2506 13.0       \u2506 15.2       \u2506 12.0       \u2506 g          \u2506 c          \u2506 f          \u2506 b          \u2502\n#&gt; \u2502 16.2       \u2506 13.4       \u2506 15.4       \u2506 12.3       \u2506 g          \u2506 d          \u2506 f          \u2506 c          \u2502\n#&gt; \u2502 15.9       \u2506 13.0       \u2506 15.1       \u2506 11.8       \u2506 f          \u2506 c          \u2506 f          \u2506 b          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n##timing \"slow\" apply in select /with_columns context, this makes apply\nn = 1000000L\nset.seed(1)\ndf = pl$DataFrame(list(\n  a = 1:n,\n  b = sample(letters,n,replace=TRUE)\n))\nprint(\"apply over 1 million values takes ~2.5 sec on 2015 MacBook Pro\")\n#&gt; [1] \"apply over 1 million values takes ~2.5 sec on 2015 MacBook Pro\"\nsystem.time({\nrdf = df$with_columns(\npl$col(\"a\")$apply(\\(x) {\nx*2L\n})$alias(\"bob\")\n)\n})\n#&gt; utilisateur     syst\u00e8me      \u00e9coul\u00e9 \n#&gt;       2.059       0.046       2.104 \nprint(\"R lapply 1 million values take ~1sec on 2015 MacBook Pro\")\n#&gt; [1] \"R lapply 1 million values take ~1sec on 2015 MacBook Pro\"\nsystem.time({\nlapply(df$get_column(\"a\")$to_r(),\\(x) x*2L )\n})\n#&gt; utilisateur     syst\u00e8me      \u00e9coul\u00e9 \n#&gt;       0.904       0.002       0.906 \nprint(\"using polars syntax takes ~1ms\")\n#&gt; [1] \"using polars syntax takes ~1ms\"\nsystem.time({\n(df$get_column(\"a\") * 2L)\n})\n#&gt; utilisateur     syst\u00e8me      \u00e9coul\u00e9 \n#&gt;       0.000       0.003       0.003 \nprint(\"using R vector syntax takes ~4ms\")\n#&gt; [1] \"using R vector syntax takes ~4ms\"\nr_vec = df$get_column(\"a\")$to_r()\nsystem.time({\nr_vec * 2L\n})\n#&gt; utilisateur     syst\u00e8me      \u00e9coul\u00e9 \n#&gt;       0.002       0.004       0.006 \n </code></pre>"},{"location":"reference/Expr_arccos/","title":"Expr_arccos","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_arccos/#arccos","title":"Arccos","text":""},{"location":"reference/Expr_arccos/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_arccos\n</code></pre>"},{"location":"reference/Expr_arccos/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the element-wise value for the inverse cosine.</p>"},{"location":"reference/Expr_arccos/#details","title":"Details","text":"<p>Evaluated Series has dtype Float64</p>"},{"location":"reference/Expr_arccos/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(a=c(-1,cos(0.5),0,1,NA_real_))$select(pl$col(\"a\")$arccos())\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.141593 \u2502\n#&gt; \u2502 0.5      \u2502\n#&gt; \u2502 1.570796 \u2502\n#&gt; \u2502 0.0      \u2502\n#&gt; \u2502 null     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_arccosh/","title":"Expr_arccosh","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_arccosh/#arccosh","title":"Arccosh","text":""},{"location":"reference/Expr_arccosh/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_arccosh\n</code></pre>"},{"location":"reference/Expr_arccosh/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the element-wise value for the inverse hyperbolic cosine.</p>"},{"location":"reference/Expr_arccosh/#details","title":"Details","text":"<p>Evaluated Series has dtype Float64</p>"},{"location":"reference/Expr_arccosh/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(a=c(-1,cosh(0.5),0,1,NA_real_))$select(pl$col(\"a\")$arccosh())\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 NaN  \u2502\n#&gt; \u2502 0.5  \u2502\n#&gt; \u2502 NaN  \u2502\n#&gt; \u2502 0.0  \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_arcsin/","title":"Expr_arcsin","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_arcsin/#arcsin","title":"Arcsin","text":""},{"location":"reference/Expr_arcsin/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_arcsin\n</code></pre>"},{"location":"reference/Expr_arcsin/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the element-wise value for the inverse sine.</p>"},{"location":"reference/Expr_arcsin/#details","title":"Details","text":"<p>Evaluated Series has dtype Float64</p>"},{"location":"reference/Expr_arcsin/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(a=c(-1,sin(0.5),0,1,NA_real_))$select(pl$col(\"a\")$arcsin())\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.570796 \u2502\n#&gt; \u2502 0.5       \u2502\n#&gt; \u2502 0.0       \u2502\n#&gt; \u2502 1.570796  \u2502\n#&gt; \u2502 null      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_arcsinh/","title":"Expr_arcsinh","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_arcsinh/#arcsinh","title":"Arcsinh","text":""},{"location":"reference/Expr_arcsinh/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_arcsinh\n</code></pre>"},{"location":"reference/Expr_arcsinh/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the element-wise value for the inverse hyperbolic sine.</p>"},{"location":"reference/Expr_arcsinh/#details","title":"Details","text":"<p>Evaluated Series has dtype Float64</p>"},{"location":"reference/Expr_arcsinh/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(a=c(-1,sinh(0.5),0,1,NA_real_))$select(pl$col(\"a\")$arcsinh())\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -0.881374 \u2502\n#&gt; \u2502 0.5       \u2502\n#&gt; \u2502 0.0       \u2502\n#&gt; \u2502 0.881374  \u2502\n#&gt; \u2502 null      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_arctan/","title":"Expr_arctan","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_arctan/#arctan","title":"Arctan","text":""},{"location":"reference/Expr_arctan/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_arctan\n</code></pre>"},{"location":"reference/Expr_arctan/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the element-wise value for the inverse tangent.</p>"},{"location":"reference/Expr_arctan/#details","title":"Details","text":"<p>Evaluated Series has dtype Float64</p>"},{"location":"reference/Expr_arctan/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(a=c(-1,tan(0.5),0,1,NA_real_))$select(pl$col(\"a\")$arctan())\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -0.785398 \u2502\n#&gt; \u2502 0.5       \u2502\n#&gt; \u2502 0.0       \u2502\n#&gt; \u2502 0.785398  \u2502\n#&gt; \u2502 null      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_arctanh/","title":"Expr_arctanh","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_arctanh/#arctanh","title":"Arctanh","text":""},{"location":"reference/Expr_arctanh/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_arctanh\n</code></pre>"},{"location":"reference/Expr_arctanh/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the element-wise value for the inverse hyperbolic tangent.</p>"},{"location":"reference/Expr_arctanh/#details","title":"Details","text":"<p>Evaluated Series has dtype Float64</p>"},{"location":"reference/Expr_arctanh/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(a=c(-1,tanh(0.5),0,1,NA_real_))$select(pl$col(\"a\")$arctanh())\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -inf \u2502\n#&gt; \u2502 0.5  \u2502\n#&gt; \u2502 0.0  \u2502\n#&gt; \u2502 inf  \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_arg_max/","title":"Expr_arg_max","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_arg_max/#index-of-min-value","title":"Index of min value","text":""},{"location":"reference/Expr_arg_max/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_arg_max\n</code></pre>"},{"location":"reference/Expr_arg_max/#returns","title":"Returns","text":"<p>Expr</p> <p>Get the index of the minimal value.</p>"},{"location":"reference/Expr_arg_max/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_arg_max/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(\n  a = c(6, 1, 0, NA, Inf, NaN)\n))$select(pl$col(\"a\")$arg_max())\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 4   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_arg_min/","title":"Expr_arg_min","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_arg_min/#index-of-min-value","title":"Index of min value","text":""},{"location":"reference/Expr_arg_min/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_arg_min\n</code></pre>"},{"location":"reference/Expr_arg_min/#returns","title":"Returns","text":"<p>Expr</p> <p>Get the index of the minimal value.</p>"},{"location":"reference/Expr_arg_min/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_arg_min/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(\n  a = c(6, 1, 0, NA, Inf, NaN)\n))$select(pl$col(\"a\")$arg_min())\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_arg_sort/","title":"Index of a sort","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_arg_sort/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_arg_sort(reverse = FALSE, nulls_last = FALSE)\nExpr_argsort(reverse = FALSE, nulls_last = FALSE)\n</code></pre>"},{"location":"reference/Expr_arg_sort/#arguments","title":"Arguments","text":"<ul> <li><code>reverse</code>: bool default FALSE, reverses sort</li> <li><code>nulls_last</code>: bool, default FALSE, place Nulls last</li> </ul>"},{"location":"reference/Expr_arg_sort/#returns","title":"Returns","text":"<p>Expr</p> <p>Get the index values that would sort this column. If 'reverse=True` the smallest elements will be given.</p> <p>argsort is a alias for arg_sort</p>"},{"location":"reference/Expr_arg_sort/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_arg_sort/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(\n  a = c(6, 1, 0, NA, Inf, NaN)\n))$select(pl$col(\"a\")$arg_sort())\n#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 0   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2502 5   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_arg_unique/","title":"Expr_arg_unique","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_arg_unique/#index-of-first-unique-value","title":"Index of First Unique Value.","text":""},{"location":"reference/Expr_arg_unique/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_arg_unique\n</code></pre>"},{"location":"reference/Expr_arg_unique/#returns","title":"Returns","text":"<p>Expr</p> <p>Index of First Unique Value.</p>"},{"location":"reference/Expr_arg_unique/#examples","title":"Examples","text":"<pre><code>pl$select(pl$lit(c(1:2,1:3))$arg_unique())\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_arr/","title":"arr: list related methods","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_arr()\n</code></pre>"},{"location":"reference/Expr_arr/#returns","title":"Returns","text":"<p>Expr</p> <p>Create an object namespace of all list related methods. See the individual method pages for full details</p>"},{"location":"reference/Expr_arr/#examples","title":"Examples","text":"<pre><code>df_with_list = pl$DataFrame(\n  group = c(1,1,2,2,3),\n  value = c(1:5)\n)$groupby(\n\"group\",maintain_order = TRUE\n)$agg(\npl$col(\"value\") * 3L\n)\ndf_with_list$with_column(\npl$col(\"value\")$arr$lengths()$alias(\"group_size\")\n)\n#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 group \u2506 value     \u2506 group_size \u2502\n#&gt; \u2502 ---   \u2506 ---       \u2506 ---        \u2502\n#&gt; \u2502 f64   \u2506 list[i32] \u2506 u32        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0   \u2506 [3, 6]    \u2506 2          \u2502\n#&gt; \u2502 2.0   \u2506 [9, 12]   \u2506 2          \u2502\n#&gt; \u2502 3.0   \u2506 [15]      \u2506 1          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_backward_fill/","title":"Fill Nulls Backward","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_backward_fill/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_backward_fill(limit = NULL)\n</code></pre>"},{"location":"reference/Expr_backward_fill/#arguments","title":"Arguments","text":"<ul> <li><code>limit</code>: Expr or <code>Into&lt;Expr&gt;</code> The number of consecutive null values to backward fill.</li> </ul>"},{"location":"reference/Expr_backward_fill/#returns","title":"Returns","text":"<p>Expr</p> <p>Fill missing values with the next to be seen values.</p>"},{"location":"reference/Expr_backward_fill/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_backward_fill/#examples","title":"Examples","text":"<pre><code>l = list(a=c(1L,rep(NA_integer_,3L),10))\npl$DataFrame(l)$select(\npl$col(\"a\")$backward_fill()$alias(\"bf_null\"),\npl$col(\"a\")$backward_fill(limit = 0)$alias(\"bf_l0\"),\npl$col(\"a\")$backward_fill(limit = 1)$alias(\"bf_l1\")\n)$to_list()\n#&gt; $bf_null\n#&gt; [1]  1 10 10 10 10\n#&gt; #&gt; $bf_l0\n#&gt; [1]  1 NA NA NA 10\n#&gt; #&gt; $bf_l1\n#&gt; [1]  1 NA NA 10 10\n#&gt; </code></pre>"},{"location":"reference/Expr_bin/","title":"bin: binary related methods","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_bin()\n</code></pre>"},{"location":"reference/Expr_bin/#returns","title":"Returns","text":"<p>Expr</p> <p>Create an object namespace of all binary related methods. See the individual method pages for full details</p>"},{"location":"reference/Expr_bin/#examples","title":"Examples","text":"<pre><code>#missing\n</code></pre>"},{"location":"reference/Expr_cast/","title":"Cast between DataType(s)","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_cast(dtype, strict = TRUE)\n</code></pre>"},{"location":"reference/Expr_cast/#arguments","title":"Arguments","text":"<ul> <li><code>dtype</code>: DataType to cast to.</li> <li><code>strict</code>: bool if true an error will be thrown if cast failed at resolve time.</li> </ul>"},{"location":"reference/Expr_cast/#returns","title":"Returns","text":"<p>Expr</p> <p>Cast between DataType(s)</p>"},{"location":"reference/Expr_cast/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(a = 1:3, b = 1:3))\ndf$with_columns(\npl$col(\"a\")$cast(pl$dtypes$Float64, TRUE),\npl$col(\"a\")$cast(pl$dtypes$Int32, TRUE)\n)\n#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 1   \u2502\n#&gt; \u2502 2   \u2506 2   \u2502\n#&gt; \u2502 3   \u2506 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_cat/","title":"cat: related methods","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_cat()\n</code></pre>"},{"location":"reference/Expr_cat/#returns","title":"Returns","text":"<p>Expr</p> <p>Create an object namespace of all cat related methods. See the individual method pages for full details</p>"},{"location":"reference/Expr_cat/#examples","title":"Examples","text":"<pre><code>#missing\n</code></pre>"},{"location":"reference/Expr_ceil/","title":"Expr_ceil","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_ceil/#ceiling","title":"Ceiling","text":""},{"location":"reference/Expr_ceil/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_ceil\n</code></pre>"},{"location":"reference/Expr_ceil/#returns","title":"Returns","text":"<p>Expr</p> <p>Rounds up to the nearest integer value. Only works on floating point Series.</p>"},{"location":"reference/Expr_ceil/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(\n  a = c(0.33, 0.5, 1.02, 1.5, NaN , NA, Inf, -Inf)\n))$select(\npl$col(\"a\")$ceil()\n)\n#&gt; shape: (8, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0  \u2502\n#&gt; \u2502 1.0  \u2502\n#&gt; \u2502 2.0  \u2502\n#&gt; \u2502 2.0  \u2502\n#&gt; \u2502 NaN  \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2502 inf  \u2502\n#&gt; \u2502 -inf \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_clip/","title":"Clip","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_clip(min, max)\nExpr_clip_min(min)\nExpr_clip_max(max)\n</code></pre>"},{"location":"reference/Expr_clip/#arguments","title":"Arguments","text":"<ul> <li><code>min</code>: Minimum Value, ints and floats or any literal expression of ints and floats</li> <li><code>max</code>: Maximum Value, ints and floats or any literal expression of ints and floats</li> </ul>"},{"location":"reference/Expr_clip/#returns","title":"Returns","text":"<p>Expr</p> <p>Clip (limit) the values in an array to a <code>min</code> and <code>max</code> boundary.</p>"},{"location":"reference/Expr_clip/#details","title":"Details","text":"<p>Only works for numerical types. If you want to clip other dtypes, consider writing a \"when, then, otherwise\" expression. See :func:<code>when</code> for more information.</p>"},{"location":"reference/Expr_clip/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(foo = c(-50L, 5L, NA_integer_,50L))\ndf$with_column(pl$col(\"foo\")$clip(1L,10L)$alias(\"foo_clipped\"))\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo  \u2506 foo_clipped \u2502\n#&gt; \u2502 ---  \u2506 ---         \u2502\n#&gt; \u2502 i32  \u2506 i32         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -50  \u2506 1           \u2502\n#&gt; \u2502 5    \u2506 5           \u2502\n#&gt; \u2502 null \u2506 null        \u2502\n#&gt; \u2502 50   \u2506 10          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$with_column(pl$col(\"foo\")$clip_min(1L)$alias(\"foo_clipped\"))\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo  \u2506 foo_clipped \u2502\n#&gt; \u2502 ---  \u2506 ---         \u2502\n#&gt; \u2502 i32  \u2506 i32         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -50  \u2506 1           \u2502\n#&gt; \u2502 5    \u2506 5           \u2502\n#&gt; \u2502 null \u2506 null        \u2502\n#&gt; \u2502 50   \u2506 50          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$with_column(pl$col(\"foo\")$clip_max(10L)$alias(\"foo_clipped\"))\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo  \u2506 foo_clipped \u2502\n#&gt; \u2502 ---  \u2506 ---         \u2502\n#&gt; \u2502 i32  \u2506 i32         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -50  \u2506 -50         \u2502\n#&gt; \u2502 5    \u2506 5           \u2502\n#&gt; \u2502 null \u2506 null        \u2502\n#&gt; \u2502 50   \u2506 10          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_cos/","title":"Expr_cos","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_cos/#cos","title":"Cos","text":""},{"location":"reference/Expr_cos/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_cos\n</code></pre>"},{"location":"reference/Expr_cos/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the element-wise value for the cosine.</p>"},{"location":"reference/Expr_cos/#details","title":"Details","text":"<p>Evaluated Series has dtype Float64</p>"},{"location":"reference/Expr_cos/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(a=c(0,pi/2,pi,NA_real_))$select(pl$col(\"a\")$cos())\n#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a          \u2502\n#&gt; \u2502 ---        \u2502\n#&gt; \u2502 f64        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0        \u2502\n#&gt; \u2502 6.1232e-17 \u2502\n#&gt; \u2502 -1.0       \u2502\n#&gt; \u2502 null       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_cosh/","title":"Expr_cosh","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_cosh/#cosh","title":"Cosh","text":""},{"location":"reference/Expr_cosh/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_cosh\n</code></pre>"},{"location":"reference/Expr_cosh/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the element-wise value for the hyperbolic cosine.</p>"},{"location":"reference/Expr_cosh/#details","title":"Details","text":"<p>Evaluated Series has dtype Float64</p>"},{"location":"reference/Expr_cosh/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(a=c(-1,acosh(1.5),0,1,NA_real_))$select(pl$col(\"a\")$cosh())\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.543081 \u2502\n#&gt; \u2502 1.5      \u2502\n#&gt; \u2502 1.0      \u2502\n#&gt; \u2502 1.543081 \u2502\n#&gt; \u2502 null     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_count/","title":"Expr_count","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_count/#count-values-len-is-a-alias","title":"Count values (len is a alias)","text":""},{"location":"reference/Expr_count/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_count\nExpr_len\n</code></pre>"},{"location":"reference/Expr_count/#returns","title":"Returns","text":"<p>Expr</p> <p>Expr</p> <p>Count the number of values in this expression. Similar to R length()</p>"},{"location":"reference/Expr_count/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(\n  all=c(TRUE,TRUE),\n  any=c(TRUE,FALSE),\n  none=c(FALSE,FALSE)\n)$select(\npl$all()$count()\n)\n#&gt; shape: (1, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 all \u2506 any \u2506 none \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---  \u2502\n#&gt; \u2502 u32 \u2506 u32 \u2506 u32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2   \u2506 2   \u2506 2    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\npl$DataFrame(\n  all=c(TRUE,TRUE),\n  any=c(TRUE,FALSE),\n  none=c(FALSE,FALSE)\n)$select(\npl$all()$len(),\npl$col(\"all\")$first()$len()$alias(\"all_first\")\n)\n#&gt; shape: (1, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 all \u2506 any \u2506 none \u2506 all_first \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---  \u2506 ---       \u2502\n#&gt; \u2502 u32 \u2506 u32 \u2506 u32  \u2506 u32       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2   \u2506 2   \u2506 2    \u2506 1         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_cumcount/","title":"Cumulative count","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_cumcount/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_cumcount(reverse = FALSE)\n</code></pre>"},{"location":"reference/Expr_cumcount/#arguments","title":"Arguments","text":"<ul> <li><code>reverse</code>: bool, default FALSE, if true roll over vector from back to forth</li> </ul>"},{"location":"reference/Expr_cumcount/#returns","title":"Returns","text":"<p>Expr</p> <p>Get an array with the cumulative count computed at every element. Counting from 0 to len</p>"},{"location":"reference/Expr_cumcount/#details","title":"Details","text":"<p>Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues.</p> <p>cumcount does not seem to count within lists.</p>"},{"location":"reference/Expr_cumcount/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(a=1:4))$select(\npl$col(\"a\")$cumcount()$alias(\"cumcount\"),\npl$col(\"a\")$cumcount(reverse=TRUE)$alias(\"cumcount_reversed\")\n)\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cumcount \u2506 cumcount_reversed \u2502\n#&gt; \u2502 ---      \u2506 ---               \u2502\n#&gt; \u2502 u32      \u2506 u32               \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0        \u2506 3                 \u2502\n#&gt; \u2502 1        \u2506 2                 \u2502\n#&gt; \u2502 2        \u2506 1                 \u2502\n#&gt; \u2502 3        \u2506 0                 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_cummin/","title":"Cumulative minimum","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_cummin/#format","title":"Format","text":"<p>a method</p> <p>a method</p> <pre><code>Expr_cummin(reverse = FALSE)\nExpr_cummax(reverse = FALSE)\n</code></pre>"},{"location":"reference/Expr_cummin/#arguments","title":"Arguments","text":"<ul> <li><code>reverse</code>: bool, default FALSE, if true roll over vector from back to forth</li> </ul>"},{"location":"reference/Expr_cummin/#returns","title":"Returns","text":"<p>Expr</p> <p>Expr</p> <p>Get an array with the cumulative min computed at every element.</p> <p>Get an array with the cumulative max computed at every element.</p>"},{"location":"reference/Expr_cummin/#details","title":"Details","text":"<p>Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues.</p> <p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p> <p>Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues.</p> <p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_cummin/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(a=1:4))$select(\npl$col(\"a\")$cummin()$alias(\"cummin\"),\npl$col(\"a\")$cummin(reverse=TRUE)$alias(\"cummin_reversed\")\n)\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cummin \u2506 cummin_reversed \u2502\n#&gt; \u2502 ---    \u2506 ---             \u2502\n#&gt; \u2502 i32    \u2506 i32             \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1      \u2506 1               \u2502\n#&gt; \u2502 1      \u2506 2               \u2502\n#&gt; \u2502 1      \u2506 3               \u2502\n#&gt; \u2502 1      \u2506 4               \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\npl$DataFrame(list(a=1:4))$select(\npl$col(\"a\")$cummax()$alias(\"cummux\"),\npl$col(\"a\")$cummax(reverse=TRUE)$alias(\"cummax_reversed\")\n)\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cummux \u2506 cummax_reversed \u2502\n#&gt; \u2502 ---    \u2506 ---             \u2502\n#&gt; \u2502 i32    \u2506 i32             \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1      \u2506 4               \u2502\n#&gt; \u2502 2      \u2506 4               \u2502\n#&gt; \u2502 3      \u2506 4               \u2502\n#&gt; \u2502 4      \u2506 4               \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_cumprod/","title":"Cumulative product","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_cumprod/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_cumprod(reverse = FALSE)\n</code></pre>"},{"location":"reference/Expr_cumprod/#arguments","title":"Arguments","text":"<ul> <li><code>reverse</code>: bool, default FALSE, if true roll over vector from back to forth</li> </ul>"},{"location":"reference/Expr_cumprod/#returns","title":"Returns","text":"<p>Expr</p> <p>Get an array with the cumulative product computed at every element.</p>"},{"location":"reference/Expr_cumprod/#details","title":"Details","text":"<p>Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues.</p>"},{"location":"reference/Expr_cumprod/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(a=1:4))$select(\npl$col(\"a\")$cumprod()$alias(\"cumprod\"),\npl$col(\"a\")$cumprod(reverse=TRUE)$alias(\"cumprod_reversed\")\n)\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cumprod \u2506 cumprod_reversed \u2502\n#&gt; \u2502 ---     \u2506 ---              \u2502\n#&gt; \u2502 i64     \u2506 i64              \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1       \u2506 24               \u2502\n#&gt; \u2502 2       \u2506 24               \u2502\n#&gt; \u2502 6       \u2506 12               \u2502\n#&gt; \u2502 24      \u2506 4                \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_cumsum/","title":"Cumulative sum","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_cumsum/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_cumsum(reverse = FALSE)\n</code></pre>"},{"location":"reference/Expr_cumsum/#arguments","title":"Arguments","text":"<ul> <li><code>reverse</code>: bool, default FALSE, if true roll over vector from back to forth</li> </ul>"},{"location":"reference/Expr_cumsum/#returns","title":"Returns","text":"<p>Expr</p> <p>Get an array with the cumulative sum computed at every element.</p>"},{"location":"reference/Expr_cumsum/#details","title":"Details","text":"<p>Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues.</p>"},{"location":"reference/Expr_cumsum/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(a=1:4))$select(\npl$col(\"a\")$cumsum()$alias(\"cumsum\"),\npl$col(\"a\")$cumsum(reverse=TRUE)$alias(\"cumsum_reversed\")\n)\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cumsum \u2506 cumsum_reversed \u2502\n#&gt; \u2502 ---    \u2506 ---             \u2502\n#&gt; \u2502 i32    \u2506 i32             \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1      \u2506 10              \u2502\n#&gt; \u2502 3      \u2506 9               \u2502\n#&gt; \u2502 6      \u2506 7               \u2502\n#&gt; \u2502 10     \u2506 4               \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_cumulative_eval/","title":"Cumulative eval","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_cumulative_eval(expr, min_periods = 1L, parallel = FALSE)\n</code></pre>"},{"location":"reference/Expr_cumulative_eval/#arguments","title":"Arguments","text":"<ul> <li><code>expr</code>: Expression to evaluate</li> <li><code>min_periods</code>: Number of valid values there should be in the window before the expression is evaluated. valid values = <code>length - null_count</code></li> <li><code>parallel</code>: Run in parallel. Don't do this in a groupby or another operation that already has much parallelization.</li> </ul>"},{"location":"reference/Expr_cumulative_eval/#returns","title":"Returns","text":"<p>Expr</p> <p>Run an expression over a sliding window that increases <code>1</code> slot every iteration.</p>"},{"location":"reference/Expr_cumulative_eval/#details","title":"Details","text":"<p>Warnings</p> <p>This functionality is experimental and may change without it being considered a breaking change. This can be really slow as it can have <code>O(n^2)</code> complexity. Don't use this for operations that visit all elements.</p>"},{"location":"reference/Expr_cumulative_eval/#examples","title":"Examples","text":"<pre><code>pl$lit(1:5)$cumulative_eval(pl$element()$first()-pl$element()$last() ** 2)$to_r()\n#&gt; [1]   0  -3  -8 -15 -24\n </code></pre>"},{"location":"reference/Expr_diff/","title":"Diff","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_diff(n = 1, null_behavior = \"ignore\")\n</code></pre>"},{"location":"reference/Expr_diff/#arguments","title":"Arguments","text":"<ul> <li><code>n</code>: Integerish Number of slots to shift.</li> <li><code>null_behavior</code>: option default 'ignore', else 'drop'</li> </ul>"},{"location":"reference/Expr_diff/#returns","title":"Returns","text":"<p>Expr</p> <p>Calculate the n-th discrete difference.</p>"},{"location":"reference/Expr_diff/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list( a=c(20L,10L,30L,40L)))$select(\npl$col(\"a\")$diff()$alias(\"diff_default\"),\npl$col(\"a\")$diff(2,\"ignore\")$alias(\"diff_2_ignore\")\n)\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 diff_default \u2506 diff_2_ignore \u2502\n#&gt; \u2502 ---          \u2506 ---           \u2502\n#&gt; \u2502 i32          \u2506 i32           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null         \u2506 null          \u2502\n#&gt; \u2502 -10          \u2506 null          \u2502\n#&gt; \u2502 20           \u2506 10            \u2502\n#&gt; \u2502 10           \u2506 30            \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_div/","title":"Div","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_div(other)\n## S3 method for class 'Expr'\ne1 / e2\n</code></pre>"},{"location":"reference/Expr_div/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: literal or Robj which can become a literal</li> <li><code>e1</code>: lhs Expr</li> <li><code>e2</code>: rhs Expr or anything which can become a literal Expression</li> </ul>"},{"location":"reference/Expr_div/#returns","title":"Returns","text":"<p>Exprs</p> <p>Divide</p>"},{"location":"reference/Expr_div/#examples","title":"Examples","text":"<pre><code>#three syntaxes same result\npl$lit(5) / 10\n#&gt; polars Expr: [(5f64) / (10f64)]\npl$lit(5) / pl$lit(10)\n#&gt; polars Expr: [(5f64) / (10f64)]\npl$lit(5)$div(pl$lit(10))\n#&gt; polars Expr: [(5f64) / (10f64)]\n </code></pre>"},{"location":"reference/Expr_dot/","title":"Dot product","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_dot/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_dot(other)\n</code></pre>"},{"location":"reference/Expr_dot/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: Expr to compute dot product with.</li> </ul>"},{"location":"reference/Expr_dot/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the dot/inner product between two Expressions.</p>"},{"location":"reference/Expr_dot/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(\n  a=1:4,b=c(1,2,3,4),c=\"bob\"\n)$select(\npl$col(\"a\")$dot(pl$col(\"b\"))$alias(\"a dot b\"),\npl$col(\"a\")$dot(pl$col(\"a\"))$alias(\"a dot a\")\n)\n#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a dot b \u2506 a dot a \u2502\n#&gt; \u2502 ---     \u2506 ---     \u2502\n#&gt; \u2502 f64     \u2506 i32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 30.0    \u2506 30      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_drop_nans/","title":"Expr_drop_nans","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_drop_nans/#drop-nans","title":"Drop NaN(s)","text":""},{"location":"reference/Expr_drop_nans/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_drop_nans\n</code></pre>"},{"location":"reference/Expr_drop_nans/#returns","title":"Returns","text":"<p>Expr</p> <p>Drop floating point NaN values. Similar to R syntax <code>x[!is.nan(x)]</code></p>"},{"location":"reference/Expr_drop_nans/#details","title":"Details","text":"<p>Note that NaN values are not null values! (null corrosponds to R NA, not R NULL) To drop null values, use method <code>drop_nulls</code>.</p> <p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_drop_nans/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(x=c(1,2,NaN,NA)))$select(pl$col(\"x\")$drop_nans())\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0  \u2502\n#&gt; \u2502 2.0  \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_drop_nulls/","title":"Expr_drop_nulls","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_drop_nulls/#drop-nulls","title":"Drop null(s)","text":""},{"location":"reference/Expr_drop_nulls/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_drop_nulls\n</code></pre>"},{"location":"reference/Expr_drop_nulls/#returns","title":"Returns","text":"<p>Expr</p> <p>Drop null values. Similar to R syntax <code>x[!(is.na(x) &amp; !is.nan(x))]</code></p>"},{"location":"reference/Expr_drop_nulls/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_drop_nulls/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(x=c(1,2,NaN,NA)))$select(pl$col(\"x\")$drop_nulls())\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 2.0 \u2502\n#&gt; \u2502 NaN \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_dt/","title":"dt: datetime related methods","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_dt()\n</code></pre>"},{"location":"reference/Expr_dt/#returns","title":"Returns","text":"<p>Expr</p> <p>Create an object namespace of all datetime related methods. See the individual method pages for full details</p>"},{"location":"reference/Expr_dt/#examples","title":"Examples","text":"<pre><code>#missing\n</code></pre>"},{"location":"reference/Expr_entropy/","title":"Entropy","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_entropy(base = base::exp(1), normalize = TRUE)\n</code></pre>"},{"location":"reference/Expr_entropy/#arguments","title":"Arguments","text":"<ul> <li><code>base</code>: Given exponential base, defaults to <code>e</code></li> <li><code>normalize</code>: Normalize pk if it doesn't sum to 1.</li> </ul>"},{"location":"reference/Expr_entropy/#returns","title":"Returns","text":"<p>Expr</p> <p>Computes the entropy. Uses the formula <code>-sum(pk * log(pk))</code> where <code>pk</code> are discrete probabilities. Return Null if input is not values</p>"},{"location":"reference/Expr_entropy/#examples","title":"Examples","text":"<pre><code>pl$select(pl$lit(c(\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"))$unique_counts()$entropy(base=2))\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502          \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.459148 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_eq/","title":"Equal ==","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_eq(other)\n## S3 method for class 'Expr'\ne1 == e2\n</code></pre>"},{"location":"reference/Expr_eq/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: literal or Robj which can become a literal</li> <li><code>e1</code>: lhs Expr</li> <li><code>e2</code>: rhs Expr or anything which can become a literal Expression</li> </ul>"},{"location":"reference/Expr_eq/#returns","title":"Returns","text":"<p>Exprs</p> <p>eq method and operator</p>"},{"location":"reference/Expr_eq/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_eq/#examples","title":"Examples","text":"<pre><code>#' #three syntaxes same result\npl$lit(2) == 2\n#&gt; polars Expr: [(2f64) == (2f64)]\npl$lit(2) ==  pl$lit(2)\n#&gt; polars Expr: [(2f64) == (2f64)]\npl$lit(2)$eq(pl$lit(2))\n#&gt; polars Expr: [(2f64) == (2f64)]\n </code></pre>"},{"location":"reference/Expr_ewm_mean_std_var/","title":"Exponentially-weighted moving average/std/var.","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_ewm_mean_std_var/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_ewm_mean(\ncom = NULL,\nspan = NULL,\nhalf_life = NULL,\nalpha = NULL,\nadjust = TRUE,\nmin_periods = 1L,\nignore_nulls = TRUE\n)\nExpr_ewm_std(\ncom = NULL,\nspan = NULL,\nhalf_life = NULL,\nalpha = NULL,\nadjust = TRUE,\nbias = FALSE,\nmin_periods = 1L,\nignore_nulls = TRUE\n)\nExpr_ewm_var(\ncom = NULL,\nspan = NULL,\nhalf_life = NULL,\nalpha = NULL,\nadjust = TRUE,\nbias = FALSE,\nmin_periods = 1L,\nignore_nulls = TRUE\n)\n</code></pre>"},{"location":"reference/Expr_ewm_mean_std_var/#arguments","title":"Arguments","text":"<ul> <li><code>com</code>: Specify decay in terms of center of mass, <code>\\gamma</code>, with c(\"<code>\\n</code>\", \"<code>\\\\alpha = \\\\frac{1}{1 + \\\\gamma} \\\\; \\\\forall \\\\; \\\\gamma \\\\geq 0\\n</code>\", \"<code></code>\")</li> <li><code>span</code>: Specify decay in terms of span, <code>\\theta</code>, with <code>\\alpha = \\frac{2}{\\theta + 1} \\; \\forall \\; \\theta \\geq 1</code></li> <li> <p><code>half_life</code>: Specify decay in terms of half-life, :math:<code>\\lambda</code>, with <code>\\alpha = 1 - \\exp \\left\\{ \\frac{ -\\ln(2) }{ \\lambda } \\right\\}</code></p> <p><code>\\forall \\; \\lambda &gt; 0</code> - <code>alpha</code>: Specify smoothing factor alpha directly, <code>0 &lt; \\alpha \\leq 1</code>. - <code>adjust</code>: Divide by decaying adjustment factor in beginning periods to account for imbalance in relative weightings</p> <ul> <li>When <code>adjust=TRUE</code> the EW function is calculated using weights <code>w_i = (1 - \\alpha)^i</code></li> <li>When <code>adjust=FALSE</code> the EW function is calculated recursively by c(\"<code>\\n</code>\", \"<code>y_0 = x_0 \\\\\\\\\\n</code>\", \"<code>y_t = (1 - \\\\alpha)y_{t - 1} + \\\\alpha x_t\\n</code>\")</li> <li><code>min_periods</code>: Minimum number of observations in window required to have a value (otherwise result is null).</li> <li> <p><code>ignore_nulls</code>: ignore_nulls Ignore missing values when calculating weights.</p> </li> <li> <p>When <code>ignore_nulls=FALSE</code> (default), weights are based on absolute positions. For example, the weights of :math:<code>x_0</code> and :math:<code>x_2</code> used in calculating the final weighted average of <code>[</code> <code>x_0</code>, None, <code>x_2</code>`]<code>are</code>1-\\alpha)^2<code>and</code>1<code>if</code>adjust=TRUE<code>, and</code>(1-\\alpha)^2<code>and</code>\\alpha<code>if</code>adjust=FALSE`.</p> </li> <li>When <code>ignore_nulls=TRUE</code>, weights are based on relative positions. For example, the weights of <code>x_0</code> and <code>x_2</code> used in calculating the final weighted average of <code>[</code> <code>x_0</code>, None, <code>x_2``]</code> are <code>1-\\alpha</code> and <code>1</code> if <code>adjust=TRUE</code>, and <code>1-\\alpha</code> and <code>\\alpha</code> if <code>adjust=FALSE</code>.</li> <li><code>bias</code>: When bias=FALSE`, apply a correction to make the estimate statistically unbiased.</li> </ul> </li> </ul>"},{"location":"reference/Expr_ewm_mean_std_var/#returns","title":"Returns","text":"<p>Expr</p> <p>Exponentially-weighted moving average/std/var.</p> <p>Ewm_std</p> <p>Ewm_var</p>"},{"location":"reference/Expr_ewm_mean_std_var/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(a = 1:3)$select(pl$col(\"a\")$ewm_mean(com=1))\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0      \u2502\n#&gt; \u2502 1.666667 \u2502\n#&gt; \u2502 2.428571 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\npl$DataFrame(a = 1:3)$select(pl$col(\"a\")$ewm_std(com=1))\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0      \u2502\n#&gt; \u2502 0.707107 \u2502\n#&gt; \u2502 0.963624 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\npl$DataFrame(a = 1:3)$select(pl$col(\"a\")$ewm_std(com=1))\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0      \u2502\n#&gt; \u2502 0.707107 \u2502\n#&gt; \u2502 0.963624 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_exclude/","title":"Exclude certain columns from a wildcard/regex selection.","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_exclude(columns)\n</code></pre>"},{"location":"reference/Expr_exclude/#arguments","title":"Arguments","text":"<ul> <li> <p><code>columns</code>: given param type:</p> <ul> <li>string: exclude name of column or exclude regex starting with ^and ending with$</li> <li>character vector: exclude all these column names, no regex allowed</li> <li>DataType: Exclude any of this DataType</li> <li>List(DataType): Excldue any of these DataType(s)</li> </ul> </li> </ul>"},{"location":"reference/Expr_exclude/#returns","title":"Returns","text":"<p>Expr</p> <p>You may also use regexes in the exclude list. They must start with <code>^</code> and end with <code>$</code>.</p>"},{"location":"reference/Expr_exclude/#examples","title":"Examples","text":"<pre><code>#make DataFrame\ndf = pl$DataFrame(iris)\n#by name(s)\ndf$select(pl$all()$exclude(\"Species\"))\n#&gt; shape: (150, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2502\n#&gt; \u2502 ...          \u2506 ...         \u2506 ...          \u2506 ...         \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#by type\ndf$select(pl$all()$exclude(pl$Categorical))\n#&gt; shape: (150, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2502\n#&gt; \u2502 ...          \u2506 ...         \u2506 ...          \u2506 ...         \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$all()$exclude(list(pl$Categorical,pl$Float64)))\n#&gt; shape: (0, 0)\n#&gt; \u250c\u2510\n#&gt; \u255e\u2561\n#&gt; \u2514\u2518\n#by regex\ndf$select(pl$all()$exclude(\"^Sepal.*$\"))\n#&gt; shape: (150, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 cat       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 ...          \u2506 ...         \u2506 ...       \u2502\n#&gt; \u2502 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_exp/","title":"Expr_exp","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_exp/#compute-the-exponential-element-wise","title":"Compute the exponential, element-wise.","text":""},{"location":"reference/Expr_exp/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_exp\n</code></pre>"},{"location":"reference/Expr_exp/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the exponential, element-wise.</p>"},{"location":"reference/Expr_exp/#examples","title":"Examples","text":"<pre><code>log10123 = suppressWarnings(log(-1:3))\nall.equal(\npl$DataFrame(list(a = log10123))$select(pl$col(\"a\")$exp())$to_data_frame()$a,\nexp(1)^log10123\n)\n#&gt; [1] TRUE\n </code></pre>"},{"location":"reference/Expr_explode/","title":"Expr_explode","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_explode/#explode-a-list-or-utf8-series","title":"Explode a list or utf8 Series.","text":""},{"location":"reference/Expr_explode/#format","title":"Format","text":"<p>a method</p> <p>a method</p> <pre><code>Expr_explode\nExpr_flatten\n</code></pre>"},{"location":"reference/Expr_explode/#returns","title":"Returns","text":"<p>Expr</p> <p>This means that every item is expanded to a new row.</p> <p>( flatten is an alias for explode )</p>"},{"location":"reference/Expr_explode/#details","title":"Details","text":"<p>explode/flatten does not support categorical</p>"},{"location":"reference/Expr_explode/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(a=letters))$select(pl$col(\"a\")$explode()$take(0:5))\n#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 b   \u2502\n#&gt; \u2502 c   \u2502\n#&gt; \u2502 d   \u2502\n#&gt; \u2502 e   \u2502\n#&gt; \u2502 f   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\nlisted_group_df =  pl$DataFrame(iris[c(1:3,51:53),])$groupby(\"Species\")$agg(pl$all())\nprint(listed_group_df)\n#&gt; shape: (2, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Species    \u2506 Sepal.Length    \u2506 Sepal.Width     \u2506 Petal.Length    \u2506 Petal.Width     \u2502\n#&gt; \u2502 ---        \u2506 ---             \u2506 ---             \u2506 ---             \u2506 ---             \u2502\n#&gt; \u2502 cat        \u2506 list[f64]       \u2506 list[f64]       \u2506 list[f64]       \u2506 list[f64]       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 setosa     \u2506 [5.1, 4.9, 4.7] \u2506 [3.5, 3.0, 3.2] \u2506 [1.4, 1.4, 1.3] \u2506 [0.2, 0.2, 0.2] \u2502\n#&gt; \u2502 versicolor \u2506 [7.0, 6.4, 6.9] \u2506 [3.2, 3.2, 3.1] \u2506 [4.7, 4.5, 4.9] \u2506 [1.4, 1.5, 1.5] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nvectors_df = listed_group_df$select(\npl$col(c(\"Sepal.Width\",\"Sepal.Length\"))$explode()\n)\nprint(vectors_df)\n#&gt; shape: (6, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Width \u2506 Sepal.Length \u2502\n#&gt; \u2502 ---         \u2506 ---          \u2502\n#&gt; \u2502 f64         \u2506 f64          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.5         \u2506 5.1          \u2502\n#&gt; \u2502 3.0         \u2506 4.9          \u2502\n#&gt; \u2502 3.2         \u2506 4.7          \u2502\n#&gt; \u2502 3.2         \u2506 7.0          \u2502\n#&gt; \u2502 3.2         \u2506 6.4          \u2502\n#&gt; \u2502 3.1         \u2506 6.9          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_extend_constant/","title":"Extend_constant","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_extend_constant/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_extend_constant(value, n)\n</code></pre>"},{"location":"reference/Expr_extend_constant/#arguments","title":"Arguments","text":"<ul> <li><code>value</code>: The value to extend the Series with. This value may be None to fill with nulls.</li> <li><code>n</code>: The number of values to extend.</li> </ul>"},{"location":"reference/Expr_extend_constant/#returns","title":"Returns","text":"<p>Expr</p> <p>Extend the Series with given number of values.</p>"},{"location":"reference/Expr_extend_constant/#examples","title":"Examples","text":"<pre><code>pl$select(\npl$lit(c(\"5\",\"Bob_is_not_a_number\"))\n$cast(pl$dtypes$UInt64, strict = FALSE)\n$extend_constant(10.1, 2)\n)\n#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502      \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 u64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2502 10   \u2502\n#&gt; \u2502 10   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\npl$select(\npl$lit(c(\"5\",\"Bob_is_not_a_number\"))\n$cast(pl$dtypes$Utf8, strict = FALSE)\n$extend_constant(\"chuchu\", 2)\n)\n#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502                     \u2502\n#&gt; \u2502 ---                 \u2502\n#&gt; \u2502 str                 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5                   \u2502\n#&gt; \u2502 Bob_is_not_a_number \u2502\n#&gt; \u2502 chuchu              \u2502\n#&gt; \u2502 chuchu              \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_extend_expr/","title":"Extend_expr","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_extend_expr/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_extend_expr(value, n)\n</code></pre>"},{"location":"reference/Expr_extend_expr/#arguments","title":"Arguments","text":"<ul> <li><code>value</code>: The expr to extend the Series with. This value may be None to fill with nulls.</li> <li><code>n</code>: The number of values to extend.</li> </ul>"},{"location":"reference/Expr_extend_expr/#returns","title":"Returns","text":"<p>Expr</p> <p>Extend the Series with a expression repeated a number of times</p>"},{"location":"reference/Expr_extend_expr/#examples","title":"Examples","text":"<pre><code>pl$select(\npl$lit(c(\"5\",\"Bob_is_not_a_number\"))\n$cast(pl$dtypes$UInt64, strict = FALSE)\n$extend_expr(10.1, 2)\n)\n#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502      \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 u64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2502 10   \u2502\n#&gt; \u2502 10   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\npl$select(\npl$lit(c(\"5\",\"Bob_is_not_a_number\"))\n$cast(pl$dtypes$Utf8, strict = FALSE)\n$extend_expr(\"chuchu\", 2)\n)\n#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502                     \u2502\n#&gt; \u2502 ---                 \u2502\n#&gt; \u2502 str                 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5                   \u2502\n#&gt; \u2502 Bob_is_not_a_number \u2502\n#&gt; \u2502 chuchu              \u2502\n#&gt; \u2502 chuchu              \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_fill_nan/","title":"Fill Nulls Forward","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_fill_nan/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_fill_nan(expr = NULL)\n</code></pre>"},{"location":"reference/Expr_fill_nan/#arguments","title":"Arguments","text":"<ul> <li><code>expr</code>: Expr or into Expr, value to fill NaNs with</li> </ul>"},{"location":"reference/Expr_fill_nan/#returns","title":"Returns","text":"<p>Expr</p> <p>Fill missing values with last seen values.</p>"},{"location":"reference/Expr_fill_nan/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_fill_nan/#examples","title":"Examples","text":"<pre><code>l = list(a=c(1,NaN,NaN,3))\npl$DataFrame(l)$select(\npl$col(\"a\")$fill_nan()$alias(\"fill_default\"),\npl$col(\"a\")$fill_nan(pl$lit(NA))$alias(\"fill_NA\"), #same as default\npl$col(\"a\")$fill_nan(2)$alias(\"fill_float2\"),\npl$col(\"a\")$fill_nan(\"hej\")$alias(\"fill_str\") #implicit cast to Utf8\n)$to_list()\n#&gt; $fill_default\n#&gt; [1]  1 NA NA  3\n#&gt; #&gt; $fill_NA\n#&gt; [1]  1 NA NA  3\n#&gt; #&gt; $fill_float2\n#&gt; [1] 1 2 2 3\n#&gt; #&gt; $fill_str\n#&gt; [1] \"1.0\" \"hej\" \"hej\" \"3.0\"\n#&gt; </code></pre>"},{"location":"reference/Expr_fill_null/","title":"Fill Nulls with a value or strategy.","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_fill_null/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_fill_null(value = NULL, strategy = NULL, limit = NULL)\n</code></pre>"},{"location":"reference/Expr_fill_null/#arguments","title":"Arguments","text":"<ul> <li><code>value</code>: Expr or <code>Into&lt;Expr&gt;</code> to fill Null values with</li> <li><code>strategy</code>: default NULL else 'forward', 'backward', 'min', 'max', 'mean', 'zero', 'one'</li> <li><code>limit</code>: Number of consecutive null values to fill when using the 'forward' or 'backward' strategy.</li> </ul>"},{"location":"reference/Expr_fill_null/#returns","title":"Returns","text":"<p>Expr</p> <p>Shift the values by value or as strategy.</p>"},{"location":"reference/Expr_fill_null/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_fill_null/#examples","title":"Examples","text":"<pre><code>pl$select(\npl$lit(0:3)$shift_and_fill(-2, fill_value = 42)$alias(\"shift-2\"),\npl$lit(0:3)$shift_and_fill(2, fill_value = pl$lit(42)/2)$alias(\"shift+2\")\n)\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 shift-2 \u2506 shift+2 \u2502\n#&gt; \u2502 ---     \u2506 ---     \u2502\n#&gt; \u2502 f64     \u2506 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2.0     \u2506 21.0    \u2502\n#&gt; \u2502 3.0     \u2506 21.0    \u2502\n#&gt; \u2502 42.0    \u2506 0.0     \u2502\n#&gt; \u2502 42.0    \u2506 1.0     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_filter/","title":"Filter a single column.","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_filter/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_filter(predicate)\nExpr_where(predicate)\n</code></pre>"},{"location":"reference/Expr_filter/#arguments","title":"Arguments","text":"<ul> <li><code>predicate</code>: Expr or something <code>Into&lt;Expr&gt;</code>. Should be a boolean expression.</li> </ul>"},{"location":"reference/Expr_filter/#returns","title":"Returns","text":"<p>Expr</p> <p>Mostly useful in an aggregation context. If you want to filter on a DataFrame level, use <code>LazyFrame.filter</code>.</p> <p>where() is an alias for pl$filter</p>"},{"location":"reference/Expr_filter/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(\n  group_col =  c(\"g1\", \"g1\", \"g2\"),\n  b = c(1, 2, 3)\n))\ndf$groupby(\"group_col\")$agg(\npl$col(\"b\")$filter(pl$col(\"b\") &lt; 2)$sum()$alias(\"lt\"),\npl$col(\"b\")$filter(pl$col(\"b\") &gt;= 2)$sum()$alias(\"gte\")\n)\n#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 group_col \u2506 lt   \u2506 gte \u2502\n#&gt; \u2502 ---       \u2506 ---  \u2506 --- \u2502\n#&gt; \u2502 str       \u2506 f64  \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 g2        \u2506 null \u2506 3.0 \u2502\n#&gt; \u2502 g1        \u2506 1.0  \u2506 2.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_first/","title":"Expr_first","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_first/#first","title":"First","text":""},{"location":"reference/Expr_first/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_first\n</code></pre>"},{"location":"reference/Expr_first/#returns","title":"Returns","text":"<p>Expr</p> <p>Get the first value. Similar to R head(x,1)</p>"},{"location":"reference/Expr_first/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(x=c(1,2,3)))$select(pl$col(\"x\")$first())\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_floor/","title":"Expr_floor","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_floor/#floor","title":"Floor","text":""},{"location":"reference/Expr_floor/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_floor\n</code></pre>"},{"location":"reference/Expr_floor/#returns","title":"Returns","text":"<p>Expr</p> <p>Rounds down to the nearest integer value. Only works on floating point Series.</p>"},{"location":"reference/Expr_floor/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(\n  a = c(0.33, 0.5, 1.02, 1.5, NaN , NA, Inf, -Inf)\n))$select(\npl$col(\"a\")$floor()\n)\n#&gt; shape: (8, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0  \u2502\n#&gt; \u2502 0.0  \u2502\n#&gt; \u2502 1.0  \u2502\n#&gt; \u2502 1.0  \u2502\n#&gt; \u2502 NaN  \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2502 inf  \u2502\n#&gt; \u2502 -inf \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_forward_fill/","title":"Fill Nulls Forward","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_forward_fill/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_forward_fill(limit = NULL)\n</code></pre>"},{"location":"reference/Expr_forward_fill/#arguments","title":"Arguments","text":"<ul> <li><code>limit</code>: Expr or <code>Into&lt;Expr&gt;</code> The number of consecutive null values to forward fill.</li> </ul>"},{"location":"reference/Expr_forward_fill/#returns","title":"Returns","text":"<p>Expr</p> <p>Fill missing values with last seen values.</p>"},{"location":"reference/Expr_forward_fill/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_forward_fill/#examples","title":"Examples","text":"<pre><code>l = list(a=c(1L,rep(NA_integer_,3L),10))\npl$DataFrame(l)$select(\npl$col(\"a\")$forward_fill()$alias(\"ff_null\"),\npl$col(\"a\")$forward_fill(limit = 0)$alias(\"ff_l0\"),\npl$col(\"a\")$forward_fill(limit = 1)$alias(\"ff_l1\")\n)$to_list()\n#&gt; $ff_null\n#&gt; [1]  1  1  1  1 10\n#&gt; #&gt; $ff_l0\n#&gt; [1]  1 NA NA NA 10\n#&gt; #&gt; $ff_l1\n#&gt; [1]  1  1 NA NA 10\n#&gt; </code></pre>"},{"location":"reference/Expr_gt/","title":"GreaterThan &lt;","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_gt(other)\n## S3 method for class 'Expr'\ne1 &gt; e2\n</code></pre>"},{"location":"reference/Expr_gt/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: literal or Robj which can become a literal</li> <li><code>e1</code>: lhs Expr</li> <li><code>e2</code>: rhs Expr or anything which can become a literal Expression</li> </ul>"},{"location":"reference/Expr_gt/#returns","title":"Returns","text":"<p>Exprs</p> <p>gt method and operator</p>"},{"location":"reference/Expr_gt/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_gt/#examples","title":"Examples","text":"<pre><code>#' #three syntaxes same result\npl$lit(2) &gt; 1\n#&gt; polars Expr: [(2f64) &gt; (1f64)]\npl$lit(2) &gt; pl$lit(1)\n#&gt; polars Expr: [(2f64) &gt; (1f64)]\npl$lit(2)$gt(pl$lit(1))\n#&gt; polars Expr: [(2f64) &gt; (1f64)]\n </code></pre>"},{"location":"reference/Expr_gt_eq/","title":"Greater Than Or Equal &lt;=","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_gt_eq(other)\n## S3 method for class 'Expr'\ne1 &gt;= e2\n</code></pre>"},{"location":"reference/Expr_gt_eq/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: literal or Robj which can become a literal</li> <li><code>e1</code>: lhs Expr</li> <li><code>e2</code>: rhs Expr or anything which can become a literal Expression</li> </ul>"},{"location":"reference/Expr_gt_eq/#returns","title":"Returns","text":"<p>Exprs</p> <p>gt_eq method and operator</p>"},{"location":"reference/Expr_gt_eq/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_gt_eq/#examples","title":"Examples","text":"<pre><code>#' #three syntaxes same result\npl$lit(2) &gt;= 2\n#&gt; polars Expr: [(2f64) &gt;= (2f64)]\npl$lit(2) &gt;=  pl$lit(2)\n#&gt; polars Expr: [(2f64) &gt;= (2f64)]\npl$lit(2)$gt_eq(pl$lit(2))\n#&gt; polars Expr: [(2f64) &gt;= (2f64)]\n </code></pre>"},{"location":"reference/Expr_hash/","title":"hash","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_hash(seed = 0, seed_1 = NULL, seed_2 = NULL, seed_3 = NULL)\n</code></pre>"},{"location":"reference/Expr_hash/#arguments","title":"Arguments","text":"<ul> <li><code>seed</code>: Random seed parameter. Defaults to 0.</li> <li><code>seed_1</code>: Random seed parameter. Defaults to arg seed.</li> <li><code>seed_2</code>: Random seed parameter. Defaults to arg seed.</li> <li><code>seed_3</code>: Random seed parameter. Defaults to arg seed. The column will be coerced to UInt32. Give this dtype to make the coercion a no-op.</li> </ul>"},{"location":"reference/Expr_hash/#returns","title":"Returns","text":"<p>Expr</p> <p>Hash the elements in the selection. The hash value is of type <code>UInt64</code>.</p>"},{"location":"reference/Expr_hash/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(iris)\ndf$select(pl$all()$head(2)$hash(1234)$cast(pl$Utf8))$to_list()\n#&gt; $Sepal.Length\n#&gt; [1] \"8787545805499047296\" \"3480667128160896\"   \n#&gt; #&gt; $Sepal.Width\n#&gt; [1] \"10016005571271983104\" \"12826251738751172608\"\n#&gt; #&gt; $Petal.Length\n#&gt; [1] \"11417647987883416960\" \"11417647987883416960\"\n#&gt; #&gt; $Petal.Width\n#&gt; [1] \"15099546618074063488\" \"15099546618074063488\"\n#&gt; #&gt; $Species\n#&gt; [1] \"0\" \"0\"\n#&gt; </code></pre>"},{"location":"reference/Expr_head/","title":"Head","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_head(n = 10)\n</code></pre>"},{"location":"reference/Expr_head/#arguments","title":"Arguments","text":"<ul> <li><code>n</code>: numeric number of elements to select from head</li> </ul>"},{"location":"reference/Expr_head/#returns","title":"Returns","text":"<p>Expr</p> <p>Get the head n elements. Similar to R head(x)</p>"},{"location":"reference/Expr_head/#examples","title":"Examples","text":"<pre><code>#get 3 first elements\npl$DataFrame(list(x=1:11))$select(pl$col(\"x\")$head(3))\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_inspect/","title":"Inspect evaluated Series","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_inspect(fmt = \"{}\")\n</code></pre>"},{"location":"reference/Expr_inspect/#arguments","title":"Arguments","text":"<ul> <li><code>fmt</code>: format string, should contain one set of <code>{}</code> where object will be printed This formatting mimics python \"string\".format() use in pypolars. The string can contain any thing but should have exactly one set of curly bracket .</li> </ul>"},{"location":"reference/Expr_inspect/#returns","title":"Returns","text":"<p>Expr</p> <p>Print the value that this expression evaluates to and pass on the value. The printing will happen when the expression evaluates, not when it is formed.</p>"},{"location":"reference/Expr_inspect/#examples","title":"Examples","text":"<pre><code>pl$select(pl$lit(1:5)$inspect(\n\"before dropping half the column it was:{}and not it is dropped\")$head(2)\n)\n#&gt; before dropping half the column it was:shape: (5,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt;  5\n#&gt; ]\n#&gt; and not it is dropped\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_interpolate/","title":"Interpolate <code>Nulls</code>","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_interpolate(method = \"linear\")\n</code></pre>"},{"location":"reference/Expr_interpolate/#arguments","title":"Arguments","text":"<ul> <li><code>method</code>: string 'linear' or 'nearest', default \"linear\"</li> </ul>"},{"location":"reference/Expr_interpolate/#returns","title":"Returns","text":"<p>Expr</p> <p>Fill nulls with linear interpolation over missing values. Can also be used to regrid data to a new grid - see examples below.</p>"},{"location":"reference/Expr_interpolate/#examples","title":"Examples","text":"<pre><code>pl$select(pl$lit(c(1,NA,4,NA,100,NaN,150))$interpolate())\n#&gt; shape: (7, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502       \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 f64   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0   \u2502\n#&gt; \u2502 2.5   \u2502\n#&gt; \u2502 4.0   \u2502\n#&gt; \u2502 52.0  \u2502\n#&gt; \u2502 100.0 \u2502\n#&gt; \u2502 NaN   \u2502\n#&gt; \u2502 150.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#x, y interpolation over a grid\ndf_original_grid = pl$DataFrame(list(\n  grid_points = c(1, 3, 10),\n  values = c(2.0, 6.0, 20.0)\n))\ndf_new_grid = pl$DataFrame(list(grid_points = (1:10)*1.0))\n# Interpolate from this to the new grid\ndf_new_grid$join(\ndf_original_grid, on=\"grid_points\", how=\"left\"\n)$with_columns(pl$col(\"values\")$interpolate())\n#&gt; shape: (10, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 grid_points \u2506 values \u2502\n#&gt; \u2502 ---         \u2506 ---    \u2502\n#&gt; \u2502 f64         \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0         \u2506 2.0    \u2502\n#&gt; \u2502 2.0         \u2506 4.0    \u2502\n#&gt; \u2502 3.0         \u2506 6.0    \u2502\n#&gt; \u2502 4.0         \u2506 8.0    \u2502\n#&gt; \u2502 ...         \u2506 ...    \u2502\n#&gt; \u2502 7.0         \u2506 14.0   \u2502\n#&gt; \u2502 8.0         \u2506 16.0   \u2502\n#&gt; \u2502 9.0         \u2506 18.0   \u2502\n#&gt; \u2502 10.0        \u2506 20.0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_is_between/","title":"is in between","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_is_between(start, end, include_bounds = FALSE)\n</code></pre>"},{"location":"reference/Expr_is_between/#arguments","title":"Arguments","text":"<ul> <li><code>start</code>: Lower bound as primitive or datetime</li> <li><code>end</code>: Lower bound as primitive or datetime</li> <li><code>include_bounds</code>: bool vector or scalar: FALSE: Exclude both start and end (default). TRUE: Include both start and end. c(FALSE, FALSE): Exclude start and exclude end. c(TRUE, TRUE): Include start and include end. c(FALSE, TRUE): Exclude start and include end. c(TRUE, FALSE): Include start and exclude end.</li> </ul>"},{"location":"reference/Expr_is_between/#returns","title":"Returns","text":"<p>Expr</p> <p>Check if this expression is between start and end.</p>"},{"location":"reference/Expr_is_between/#details","title":"Details","text":"<p>alias the column to 'in_between' This function is equivalent to a combination of &lt; &lt;= &gt;= and the &amp;-and operator.</p>"},{"location":"reference/Expr_is_between/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(num = 1:5))\ndf$select(pl$col(\"num\")$is_between(2,4))\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 is_between \u2502\n#&gt; \u2502 ---        \u2502\n#&gt; \u2502 bool       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 false      \u2502\n#&gt; \u2502 false      \u2502\n#&gt; \u2502 true       \u2502\n#&gt; \u2502 false      \u2502\n#&gt; \u2502 false      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$col(\"num\")$is_between(2,4,TRUE))\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 is_between \u2502\n#&gt; \u2502 ---        \u2502\n#&gt; \u2502 bool       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 false      \u2502\n#&gt; \u2502 true       \u2502\n#&gt; \u2502 true       \u2502\n#&gt; \u2502 true       \u2502\n#&gt; \u2502 false      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$col(\"num\")$is_between(2,4,c(FALSE, TRUE)))\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 is_between \u2502\n#&gt; \u2502 ---        \u2502\n#&gt; \u2502 bool       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 false      \u2502\n#&gt; \u2502 false      \u2502\n#&gt; \u2502 true       \u2502\n#&gt; \u2502 true       \u2502\n#&gt; \u2502 false      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#start end can be a vector/expr with same length as column\ndf$select(pl$col(\"num\")$is_between(c(0,2,3,3,3),6))\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 is_between \u2502\n#&gt; \u2502 ---        \u2502\n#&gt; \u2502 bool       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true       \u2502\n#&gt; \u2502 false      \u2502\n#&gt; \u2502 false      \u2502\n#&gt; \u2502 true       \u2502\n#&gt; \u2502 true       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_is_duplicated/","title":"Expr_is_duplicated","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_is_duplicated/#get-mask-of-duplicated-values","title":"Get mask of duplicated values.","text":""},{"location":"reference/Expr_is_duplicated/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_is_duplicated\n</code></pre>"},{"location":"reference/Expr_is_duplicated/#returns","title":"Returns","text":"<p>Expr (boolean)</p> <p>Get mask of duplicated values.</p>"},{"location":"reference/Expr_is_duplicated/#details","title":"Details","text":"<p>is_duplicated is the opposite of <code>is_unique()</code></p> <p>Looking for R like <code>duplicated()</code>?, use <code>some_expr$is_first()$is_not()</code></p>"},{"location":"reference/Expr_is_duplicated/#examples","title":"Examples","text":"<pre><code>v = c(1,1,2,2,3,NA,NaN,Inf)\nall.equal(\npl$select(\npl$lit(v)$is_unique()$alias(\"is_unique\"),\npl$lit(v)$is_first()$alias(\"is_first\"),\npl$lit(v)$is_duplicated()$alias(\"is_duplicated\"),\npl$lit(v)$is_first()$is_not()$alias(\"R_duplicated\")\n)$to_list(),\nlist(\n    is_unique = !v %in% v[duplicated(v)],\n    is_first  = !duplicated(v),\n    is_duplicated = v %in% v[duplicated(v)],\n    R_duplicated = duplicated(v)\n)\n)\n#&gt; [1] TRUE\n </code></pre>"},{"location":"reference/Expr_is_finite/","title":"Expr_is_finite","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_is_finite/#are-elements-finite","title":"Are elements finite","text":""},{"location":"reference/Expr_is_finite/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_is_finite\n</code></pre>"},{"location":"reference/Expr_is_finite/#returns","title":"Returns","text":"<p>Expr</p> <p>Returns a boolean output indicating which values are finite.</p>"},{"location":"reference/Expr_is_finite/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_is_finite/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(alice=c(0,NaN,NA,Inf,-Inf)))$select(pl$col(\"alice\")$is_finite())\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 alice \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true  \u2502\n#&gt; \u2502 false \u2502\n#&gt; \u2502 null  \u2502\n#&gt; \u2502 false \u2502\n#&gt; \u2502 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_is_first/","title":"Expr_is_first","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_is_first/#get-a-mask-of-the-first-unique-value","title":"Get a mask of the first unique value.","text":""},{"location":"reference/Expr_is_first/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_is_first\n</code></pre>"},{"location":"reference/Expr_is_first/#returns","title":"Returns","text":"<p>Expr (boolean)</p> <p>Get a mask of the first unique value.</p>"},{"location":"reference/Expr_is_first/#examples","title":"Examples","text":"<pre><code>v = c(1,1,2,2,3,NA,NaN,Inf)\nall.equal(\npl$select(\npl$lit(v)$is_unique()$alias(\"is_unique\"),\npl$lit(v)$is_first()$alias(\"is_first\"),\npl$lit(v)$is_duplicated()$alias(\"is_duplicated\"),\npl$lit(v)$is_first()$is_not()$alias(\"R_duplicated\")\n)$to_list(),\nlist(\n    is_unique = !v %in% v[duplicated(v)],\n    is_first  = !duplicated(v),\n    is_duplicated = v %in% v[duplicated(v)],\n    R_duplicated = duplicated(v)\n)\n)\n#&gt; [1] TRUE\n </code></pre>"},{"location":"reference/Expr_is_in/","title":"Expr_is_in","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_is_in/#is_in","title":"is_in","text":""},{"location":"reference/Expr_is_in/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_is_in(other)\n</code></pre>"},{"location":"reference/Expr_is_in/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: literal or Robj which can become a literal</li> </ul>"},{"location":"reference/Expr_is_in/#returns","title":"Returns","text":"<p>Expr</p> <p>combine to boolean expresions with similar to <code>%in%</code></p>"},{"location":"reference/Expr_is_in/#examples","title":"Examples","text":"<pre><code>#R Na_integer -&gt; polars Null(Int32) is in polars Null(Int32)\npl$DataFrame(list(a=c(1:4,NA_integer_)))$select(\npl$col(\"a\")$is_in(pl$lit(NA_real_))\n)$to_data_frame()[[1L]]\n#&gt; [1] FALSE FALSE FALSE FALSE  TRUE\n </code></pre>"},{"location":"reference/Expr_is_infinite/","title":"Expr_is_infinite","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_is_infinite/#are-elements-infinite","title":"Are elements infinite","text":""},{"location":"reference/Expr_is_infinite/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_is_infinite\n</code></pre>"},{"location":"reference/Expr_is_infinite/#returns","title":"Returns","text":"<p>Expr</p> <p>Returns a boolean output indicating which values are infinite.</p>"},{"location":"reference/Expr_is_infinite/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_is_infinite/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(alice=c(0,NaN,NA,Inf,-Inf)))$select(pl$col(\"alice\")$is_infinite())\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 alice \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 false \u2502\n#&gt; \u2502 false \u2502\n#&gt; \u2502 null  \u2502\n#&gt; \u2502 true  \u2502\n#&gt; \u2502 true  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_is_nan/","title":"Expr_is_nan","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_is_nan/#are-elements-nans","title":"Are elements NaN's","text":""},{"location":"reference/Expr_is_nan/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_is_nan\n</code></pre>"},{"location":"reference/Expr_is_nan/#returns","title":"Returns","text":"<p>Expr</p> <p>Returns a boolean Series indicating which values are NaN.</p>"},{"location":"reference/Expr_is_nan/#details","title":"Details","text":"<p>Floating point NaN's are a different flag from Null(polars) which is the same as NA_real_(R). See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_is_nan/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(alice=c(0,NaN,NA,Inf,-Inf)))$select(pl$col(\"alice\")$is_nan())\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 alice \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 false \u2502\n#&gt; \u2502 true  \u2502\n#&gt; \u2502 null  \u2502\n#&gt; \u2502 false \u2502\n#&gt; \u2502 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_is_not/","title":"Expr_is_not","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_is_not/#not","title":"Not !","text":""},{"location":"reference/Expr_is_not/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_is_not(other)\n## S3 method for class 'Expr'\n!x\n</code></pre>"},{"location":"reference/Expr_is_not/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: Expr</li> <li><code>other</code>: literal or Robj which can become a literal</li> </ul>"},{"location":"reference/Expr_is_not/#returns","title":"Returns","text":"<p>Exprs</p> <p>not method and operator</p>"},{"location":"reference/Expr_is_not/#examples","title":"Examples","text":"<pre><code>#two syntaxes same result\npl$lit(TRUE)$is_not()\n#&gt; polars Expr: true.is_not()\n!pl$lit(TRUE)\n#&gt; polars Expr: true.is_not()\n </code></pre>"},{"location":"reference/Expr_is_not_nan/","title":"Expr_is_not_nan","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_is_not_nan/#are-elements-not-nans","title":"Are elements not NaN's","text":""},{"location":"reference/Expr_is_not_nan/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_is_not_nan\n</code></pre>"},{"location":"reference/Expr_is_not_nan/#returns","title":"Returns","text":"<p>Expr</p> <p>Returns a boolean Series indicating which values are not NaN.</p>"},{"location":"reference/Expr_is_not_nan/#details","title":"Details","text":"<p>Floating point NaN's are a different flag from Null(polars) which is the same as NA_real_(R).</p> <p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_is_not_nan/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(alice=c(0,NaN,NA,Inf,-Inf)))$select(pl$col(\"alice\")$is_not_nan())\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 alice \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true  \u2502\n#&gt; \u2502 false \u2502\n#&gt; \u2502 true  \u2502\n#&gt; \u2502 true  \u2502\n#&gt; \u2502 true  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_is_not_null/","title":"Expr_is_not_null","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_is_not_null/#is_not_null","title":"is_not_null","text":""},{"location":"reference/Expr_is_not_null/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_is_not_null\n</code></pre>"},{"location":"reference/Expr_is_not_null/#returns","title":"Returns","text":"<p>Expr</p> <p>Returns a boolean Series indicating which values are not null. Similar to R syntax !is.na(x) null polars about the same as R NA</p>"},{"location":"reference/Expr_is_not_null/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_is_not_null/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(x=c(1,NA,3)))$select(pl$col(\"x\")$is_not_null())\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x     \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true  \u2502\n#&gt; \u2502 false \u2502\n#&gt; \u2502 true  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_is_null/","title":"Expr_is_null","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_is_null/#is_null","title":"is_null","text":""},{"location":"reference/Expr_is_null/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_is_null\n</code></pre>"},{"location":"reference/Expr_is_null/#returns","title":"Returns","text":"<p>Expr</p> <p>Returns a boolean Series indicating which values are null. Similar to R syntax is.na(x) null polars about the same as R NA</p>"},{"location":"reference/Expr_is_null/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_is_null/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(x=c(1,NA,3)))$select(pl$col(\"x\")$is_null())\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x     \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 false \u2502\n#&gt; \u2502 true  \u2502\n#&gt; \u2502 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_is_unique/","title":"Expr_is_unique","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_is_unique/#get-mask-of-unique-values","title":"Get mask of unique values","text":""},{"location":"reference/Expr_is_unique/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_is_unique\n</code></pre>"},{"location":"reference/Expr_is_unique/#returns","title":"Returns","text":"<p>Expr (boolean)</p> <p>Get mask of unique values</p>"},{"location":"reference/Expr_is_unique/#examples","title":"Examples","text":"<pre><code>v = c(1,1,2,2,3,NA,NaN,Inf)\nall.equal(\npl$select(\npl$lit(v)$is_unique()$alias(\"is_unique\"),\npl$lit(v)$is_first()$alias(\"is_first\"),\npl$lit(v)$is_duplicated()$alias(\"is_duplicated\"),\npl$lit(v)$is_first()$is_not()$alias(\"R_duplicated\")\n)$to_list(),\nlist(\n    is_unique = !v %in% v[duplicated(v)],\n    is_first  = !duplicated(v),\n    is_duplicated = v %in% v[duplicated(v)],\n    R_duplicated = duplicated(v)\n)\n)\n#&gt; [1] TRUE\n </code></pre>"},{"location":"reference/Expr_keep_name/","title":"Expr_keep_name","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_keep_name/#keep-the-original-root-name-of-the-expression","title":"Keep the original root name of the expression.","text":""},{"location":"reference/Expr_keep_name/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_keep_name\n</code></pre>"},{"location":"reference/Expr_keep_name/#returns","title":"Returns","text":"<p>Expr</p> <p>Keep the original root name of the expression.</p>"},{"location":"reference/Expr_keep_name/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(alice=1:3))$select(pl$col(\"alice\")$alias(\"bob\")$keep_name())\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 alice \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 i32   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1     \u2502\n#&gt; \u2502 2     \u2502\n#&gt; \u2502 3     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_kurtosis/","title":"Kurtosis","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_kurtosis(fisher = TRUE, bias = TRUE)\n</code></pre>"},{"location":"reference/Expr_kurtosis/#arguments","title":"Arguments","text":"<ul> <li><code>fisher</code>: bool se details</li> <li><code>bias</code>: bool, If FALSE, then the calculations are corrected for statistical bias.</li> </ul>"},{"location":"reference/Expr_kurtosis/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the kurtosis (Fisher or Pearson) of a dataset.</p>"},{"location":"reference/Expr_kurtosis/#details","title":"Details","text":"<p>Kurtosis is the fourth central moment divided by the square of the variance. If Fisher's definition is used, then 3.0 is subtracted from the result to give 0.0 for a normal distribution. If bias is False then the kurtosis is calculated using k statistics to eliminate bias coming from biased moment estimators See scipy.stats for more information</p>"},{"location":"reference/Expr_kurtosis/#see-scipystats-for-more-information","title":"' See scipy.stats for more information.","text":""},{"location":"reference/Expr_kurtosis/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list( a=c(1:3,2:1)))\ndf$select(pl$col(\"a\")$kurtosis())\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.153061 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_last/","title":"Expr_last","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_last/#last","title":"Last","text":""},{"location":"reference/Expr_last/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_last\n</code></pre>"},{"location":"reference/Expr_last/#returns","title":"Returns","text":"<p>Expr</p> <p>Get the lastvalue. Similar to R syntax tail(x,1)</p>"},{"location":"reference/Expr_last/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(x=c(1,2,3)))$select(pl$col(\"x\")$last())\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_limit/","title":"Limit","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_limit(n = 10)\n</code></pre>"},{"location":"reference/Expr_limit/#arguments","title":"Arguments","text":"<ul> <li><code>n</code>: numeric number of elements to select from head</li> </ul>"},{"location":"reference/Expr_limit/#returns","title":"Returns","text":"<p>Expr</p> <p>Alias for Head Get the head n elements. Similar to R head(x)</p>"},{"location":"reference/Expr_limit/#examples","title":"Examples","text":"<pre><code>#get 3 first elements\npl$DataFrame(list(x=1:11))$select(pl$col(\"x\")$limit(3))\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_list/","title":"Expr_list","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_list/#wrap-column-in-list","title":"Wrap column in list","text":""},{"location":"reference/Expr_list/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_list\n</code></pre>"},{"location":"reference/Expr_list/#returns","title":"Returns","text":"<p>Expr</p> <p>Aggregate to list.</p>"},{"location":"reference/Expr_list/#details","title":"Details","text":"<p>use to_struct to wrap a DataFrame</p>"},{"location":"reference/Expr_list/#examples","title":"Examples","text":"<pre><code>pl$select(pl$lit(1:4)$list(), pl$lit(c(\"a\")))\n#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502               \u2506 literal \u2502\n#&gt; \u2502 ---           \u2506 ---     \u2502\n#&gt; \u2502 list[i32]     \u2506 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, ... 4] \u2506 a       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_lit_to_df/","title":"Literal to DataFrame","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_lit_to_df()\n</code></pre>"},{"location":"reference/Expr_lit_to_df/#returns","title":"Returns","text":"<p>Series</p> <p>collect an expression based on literals into a DataFrame</p>"},{"location":"reference/Expr_lit_to_df/#examples","title":"Examples","text":"<pre><code>(\npl$Series(list(1:1, 1:2, 1:3, 1:4))\n$print()\n$to_lit()\n$arr$lengths()\n$sum()\n$cast(pl$dtypes$Int8)\n$lit_to_df()\n)\n#&gt; shape: (4,)\n#&gt; Series: '' [list[i32]]\n#&gt; [\n#&gt;  [1]\n#&gt;  [1, 2]\n#&gt;  [1, 2, 3]\n#&gt;  [1, 2, ... 4]\n#&gt; ]\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i8  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 10  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_lit_to_s/","title":"Literal to Series","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_lit_to_s()\n</code></pre>"},{"location":"reference/Expr_lit_to_s/#returns","title":"Returns","text":"<p>Series</p> <p>collect an expression based on literals into a Series</p>"},{"location":"reference/Expr_lit_to_s/#examples","title":"Examples","text":"<pre><code>(\npl$Series(list(1:1, 1:2, 1:3, 1:4))\n$print()\n$to_lit()\n$arr$lengths()\n$sum()\n$cast(pl$dtypes$Int8)\n$lit_to_s()\n)\n#&gt; shape: (4,)\n#&gt; Series: '' [list[i32]]\n#&gt; [\n#&gt;  [1]\n#&gt;  [1, 2]\n#&gt;  [1, 2, 3]\n#&gt;  [1, 2, ... 4]\n#&gt; ]\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [i8]\n#&gt; [\n#&gt;  10\n#&gt; ]\n </code></pre>"},{"location":"reference/Expr_log/","title":"Natural Log","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_log(base = base::exp(1))\n</code></pre>"},{"location":"reference/Expr_log/#arguments","title":"Arguments","text":"<ul> <li><code>base</code>: numeric base value for log, default base::exp(1)</li> </ul>"},{"location":"reference/Expr_log/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the base x logarithm of the input array, element-wise.</p>"},{"location":"reference/Expr_log/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(a = exp(1)^(-1:3)))$select(pl$col(\"a\")$log())\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.0 \u2502\n#&gt; \u2502 0.0  \u2502\n#&gt; \u2502 1.0  \u2502\n#&gt; \u2502 2.0  \u2502\n#&gt; \u2502 3.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_log10/","title":"Expr_log10","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_log10/#10-base-log","title":"10-base log","text":""},{"location":"reference/Expr_log10/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_log10\n</code></pre>"},{"location":"reference/Expr_log10/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the base 10 logarithm of the input array, element-wise.</p>"},{"location":"reference/Expr_log10/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(a = 10^(-1:3)))$select(pl$col(\"a\")$log10())\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.0 \u2502\n#&gt; \u2502 0.0  \u2502\n#&gt; \u2502 1.0  \u2502\n#&gt; \u2502 2.0  \u2502\n#&gt; \u2502 3.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_lt/","title":"Less Than &lt;","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_lt(other)\n## S3 method for class 'Expr'\ne1 &lt; e2\n</code></pre>"},{"location":"reference/Expr_lt/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: literal or Robj which can become a literal</li> <li><code>e1</code>: lhs Expr</li> <li><code>e2</code>: rhs Expr or anything which can become a literal Expression</li> </ul>"},{"location":"reference/Expr_lt/#returns","title":"Returns","text":"<p>Exprs</p> <p>lt method and operator</p>"},{"location":"reference/Expr_lt/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_lt/#examples","title":"Examples","text":"<pre><code>#' #three syntaxes same result\npl$lit(5) &lt; 10\n#&gt; polars Expr: [(5f64) &lt; (10f64)]\npl$lit(5) &lt; pl$lit(10)\n#&gt; polars Expr: [(5f64) &lt; (10f64)]\npl$lit(5)$lt(pl$lit(10))\n#&gt; polars Expr: [(5f64) &lt; (10f64)]\n </code></pre>"},{"location":"reference/Expr_lt_eq/","title":"Less Than Or Equal &lt;=","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_lt_eq(other)\n## S3 method for class 'Expr'\ne1 &lt;= e2\n</code></pre>"},{"location":"reference/Expr_lt_eq/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: literal or Robj which can become a literal</li> <li><code>e1</code>: lhs Expr</li> <li><code>e2</code>: rhs Expr or anything which can become a literal Expression</li> </ul>"},{"location":"reference/Expr_lt_eq/#returns","title":"Returns","text":"<p>Exprs</p> <p>lt_eq method and operator</p>"},{"location":"reference/Expr_lt_eq/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_lt_eq/#examples","title":"Examples","text":"<pre><code>#' #three syntaxes same result\npl$lit(2) &lt;= 2\n#&gt; polars Expr: [(2f64) &lt;= (2f64)]\npl$lit(2) &lt;=  pl$lit(2)\n#&gt; polars Expr: [(2f64) &lt;= (2f64)]\npl$lit(2)$lt_eq(pl$lit(2))\n#&gt; polars Expr: [(2f64) &lt;= (2f64)]\n </code></pre>"},{"location":"reference/Expr_map/","title":"Expr_map","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_map(f, output_type = NULL, agg_list = FALSE)\n</code></pre>"},{"location":"reference/Expr_map/#arguments","title":"Arguments","text":"<ul> <li><code>f</code>: a function mapping a series</li> <li><code>output_type</code>: NULL or one of pl$dtypes$..., the output datatype, NULL is the same as input.</li> <li><code>agg_list</code>: Aggregate list. Map from vector to group in groupby context. Likely not so useful.</li> </ul>"},{"location":"reference/Expr_map/#returns","title":"Returns","text":"<p>Expr</p> <p>Expr_map</p>"},{"location":"reference/Expr_map/#details","title":"Details","text":"<p>user function return should be a series or any Robj convertable into a Series. In PyPolars likely return must be Series. User functions do fully support <code>browser()</code>, helpful to investigate.</p>"},{"location":"reference/Expr_map/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(iris)$select(pl$col(\"Sepal.Length\")$map(\\(x) {\npaste(\"cheese\",as.character(x$to_vector()))\n}, pl$dtypes$Utf8))\n#&gt; shape: (150, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2502\n#&gt; \u2502 ---          \u2502\n#&gt; \u2502 str          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 cheese 5.1   \u2502\n#&gt; \u2502 cheese 4.9   \u2502\n#&gt; \u2502 cheese 4.7   \u2502\n#&gt; \u2502 cheese 4.6   \u2502\n#&gt; \u2502 ...          \u2502\n#&gt; \u2502 cheese 6.3   \u2502\n#&gt; \u2502 cheese 6.5   \u2502\n#&gt; \u2502 cheese 6.2   \u2502\n#&gt; \u2502 cheese 5.9   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_map_alias/","title":"Map alias of expression with an R function","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_map_alias(fun)\n</code></pre>"},{"location":"reference/Expr_map_alias/#arguments","title":"Arguments","text":"<ul> <li><code>fun</code>: an R function which takes a string as input and return a string</li> </ul>"},{"location":"reference/Expr_map_alias/#returns","title":"Returns","text":"<p>Expr</p> <p>Rename the output of an expression by mapping a function over the root name.</p>"},{"location":"reference/Expr_map_alias/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(alice=1:3))$select(\npl$col(\"alice\")$alias(\"joe_is_not_root\")$map_alias(\\(x) paste0(x,\"_and_bob\"))\n)\n#&gt; map_alias function is experimentally without some thread-safeguards, please report any crashes\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 alice_and_bob \u2502\n#&gt; \u2502 ---           \u2502\n#&gt; \u2502 i32           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1             \u2502\n#&gt; \u2502 2             \u2502\n#&gt; \u2502 3             \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_max/","title":"Expr_max","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_max/#max","title":"max","text":""},{"location":"reference/Expr_max/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_max\n</code></pre>"},{"location":"reference/Expr_max/#returns","title":"Returns","text":"<p>Expr</p> <p>Get maximum value.</p>"},{"location":"reference/Expr_max/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_max/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(x=c(1,NA,3)))$select(pl$col(\"x\")$max() == 3) #is true\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 bool \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_mean/","title":"Expr_mean","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_mean/#mean","title":"mean","text":""},{"location":"reference/Expr_mean/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_mean\n</code></pre>"},{"location":"reference/Expr_mean/#returns","title":"Returns","text":"<p>Expr</p> <p>Get mean value.</p>"},{"location":"reference/Expr_mean/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(x=c(1,NA,3)))$select(pl$col(\"x\")$mean()==2) #is true\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 bool \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_median/","title":"Expr_median","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_median/#median","title":"median","text":""},{"location":"reference/Expr_median/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_median\n</code></pre>"},{"location":"reference/Expr_median/#returns","title":"Returns","text":"<p>Expr</p> <p>Get median value.</p>"},{"location":"reference/Expr_median/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(x=c(1,NA,2)))$select(pl$col(\"x\")$median()==1.5) #is true\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 bool \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_meta/","title":"meta: related methods","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_meta()\n</code></pre>"},{"location":"reference/Expr_meta/#returns","title":"Returns","text":"<p>Expr</p> <p>Create an object namespace of all meta related methods. See the individual method pages for full details</p>"},{"location":"reference/Expr_meta/#examples","title":"Examples","text":"<pre><code>#missing\n</code></pre>"},{"location":"reference/Expr_min/","title":"Expr_min","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_min/#min","title":"min","text":""},{"location":"reference/Expr_min/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_min\n</code></pre>"},{"location":"reference/Expr_min/#returns","title":"Returns","text":"<p>Expr</p> <p>Get minimum value.</p>"},{"location":"reference/Expr_min/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_min/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(x=c(1,NA,3)))$select(pl$col(\"x\")$min()== 1 ) #is true\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 bool \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_mode/","title":"Expr_mode","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_mode/#mode","title":"Mode","text":""},{"location":"reference/Expr_mode/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_mode\n</code></pre>"},{"location":"reference/Expr_mode/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the most occurring value(s). Can return multiple Values.</p>"},{"location":"reference/Expr_mode/#examples","title":"Examples","text":"<pre><code>df =pl$DataFrame(list(a=1:6,b = c(1L,1L,3L,3L,5L,6L), c = c(1L,1L,2L,2L,3L,3L)))\ndf$select(pl$col(\"a\")$mode())\n#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2502 6   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$col(\"b\")$mode())\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 b   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$col(\"c\")$mode())\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 c   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_mul/","title":"Mul *","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_mul(other)\n## S3 method for class 'Expr'\ne1 * e2\n</code></pre>"},{"location":"reference/Expr_mul/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: literal or Robj which can become a literal</li> <li><code>e1</code>: lhs Expr</li> <li><code>e2</code>: rhs Expr or anything which can become a literal Expression</li> </ul>"},{"location":"reference/Expr_mul/#returns","title":"Returns","text":"<p>Exprs</p> <p>Multiplication</p>"},{"location":"reference/Expr_mul/#examples","title":"Examples","text":"<pre><code>#three syntaxes same result\npl$lit(5) * 10\n#&gt; polars Expr: [(5f64) * (10f64)]\npl$lit(5) * pl$lit(10)\n#&gt; polars Expr: [(5f64) * (10f64)]\npl$lit(5)$mul(pl$lit(10))\n#&gt; polars Expr: [(5f64) * (10f64)]\n </code></pre>"},{"location":"reference/Expr_n_unique/","title":"Expr_n_unique","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_n_unique/#count-number-of-unique-values","title":"Count number of unique values","text":""},{"location":"reference/Expr_n_unique/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_n_unique\n</code></pre>"},{"location":"reference/Expr_n_unique/#returns","title":"Returns","text":"<p>Expr</p> <p>Count number of unique values. Similar to R length(unique(x))</p>"},{"location":"reference/Expr_n_unique/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(iris)$select(pl$col(\"Species\")$n_unique())\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Species \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 u32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_nan_max/","title":"Expr_nan_max","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_nan_max/#max","title":"max","text":""},{"location":"reference/Expr_nan_max/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_nan_max\n</code></pre>"},{"location":"reference/Expr_nan_max/#returns","title":"Returns","text":"<p>Expr</p> <p>Get maximum value, but propagate/poison encountered <code>NaN</code> values. Get maximum value.</p>"},{"location":"reference/Expr_nan_max/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_nan_max/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(x=c(1,NaN,Inf,3)))$select(pl$col(\"x\")$nan_max()$is_nan()) #is true\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 bool \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_nan_min/","title":"Expr_nan_min","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_nan_min/#min-propagate-nan","title":"min propagate NaN","text":""},{"location":"reference/Expr_nan_min/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_nan_min\n</code></pre>"},{"location":"reference/Expr_nan_min/#returns","title":"Returns","text":"<p>Expr</p> <p>Get minimum value, but propagate/poison encountered <code>NaN</code> values.</p>"},{"location":"reference/Expr_nan_min/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_nan_min/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(x=c(1,NaN,-Inf,3)))$select(pl$col(\"x\")$nan_min()$is_nan()) #is true\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 bool \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_neq/","title":"Not Equal !=","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_neq(other)\n## S3 method for class 'Expr'\ne1 != e2\n</code></pre>"},{"location":"reference/Expr_neq/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: literal or Robj which can become a literal</li> <li><code>e1</code>: lhs Expr</li> <li><code>e2</code>: rhs Expr or anything which can become a literal Expression</li> </ul>"},{"location":"reference/Expr_neq/#returns","title":"Returns","text":"<p>Exprs</p> <p>neq method and operator</p>"},{"location":"reference/Expr_neq/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_neq/#examples","title":"Examples","text":"<pre><code>#' #three syntaxes same result\npl$lit(1) != 2\n#&gt; polars Expr: [(1f64) != (2f64)]\npl$lit(1) !=  pl$lit(2)\n#&gt; polars Expr: [(1f64) != (2f64)]\npl$lit(1)$neq(pl$lit(2))\n#&gt; polars Expr: [(1f64) != (2f64)]\n </code></pre>"},{"location":"reference/Expr_null_count/","title":"Expr_null_count","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_null_count/#count-nulls","title":"Count <code>Nulls</code>","text":""},{"location":"reference/Expr_null_count/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_null_count\n</code></pre>"},{"location":"reference/Expr_null_count/#returns","title":"Returns","text":"<p>Expr</p> <p>Count <code>Nulls</code></p>"},{"location":"reference/Expr_null_count/#examples","title":"Examples","text":"<pre><code>pl$select(pl$lit(c(NA,\"a\",NA,\"b\"))$null_count())\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_or/","title":"Expr_or","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_or/#or","title":"Or","text":""},{"location":"reference/Expr_or/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_or(other)\n</code></pre>"},{"location":"reference/Expr_or/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: Expr or into Expr</li> </ul>"},{"location":"reference/Expr_or/#returns","title":"Returns","text":"<p>Expr</p> <p>combine to boolean expresions with OR</p>"},{"location":"reference/Expr_or/#examples","title":"Examples","text":"<pre><code>pl$lit(TRUE) | FALSE\n#&gt; polars Expr: [(true) | (false)]\npl$lit(TRUE)$or(pl$lit(TRUE))\n#&gt; polars Expr: [(true) | (true)]\n </code></pre>"},{"location":"reference/Expr_over/","title":"over","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_over(...)\n</code></pre>"},{"location":"reference/Expr_over/#arguments","title":"Arguments","text":"<ul> <li><code>...</code>: of strings or columns to group by</li> </ul>"},{"location":"reference/Expr_over/#returns","title":"Returns","text":"<p>Expr</p> <p>Apply window function over a subgroup. This is similar to a groupby + aggregation + self join. Or similar to <code>window functions in Postgres&lt;https://www.postgresql.org/docs/current/tutorial-window.html&gt;</code>_.</p>"},{"location":"reference/Expr_over/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(\n  val = 1:5,\n  a = c(\"+\",\"+\",\"-\",\"-\",\"+\"),\n  b = c(\"+\",\"-\",\"+\",\"-\",\"+\")\n)$select(\npl$col(\"val\")$count()$over(\"a\",\"b\")\n)\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 val \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_pct_change/","title":"Pct change","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_pct_change(n = 1)\n</code></pre>"},{"location":"reference/Expr_pct_change/#arguments","title":"Arguments","text":"<ul> <li><code>n</code>: periods to shift for forming percent change.</li> </ul>"},{"location":"reference/Expr_pct_change/#returns","title":"Returns","text":"<p>Expr</p> <p>Computes percentage change between values. Percentage change (as fraction) between current element and most-recent non-null element at least <code>n</code> period(s) before the current element. Computes the change from the previous row by default.</p>"},{"location":"reference/Expr_pct_change/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list( a=c(10L, 11L, 12L, NA_integer_, 12L)))\ndf$with_column(pl$col(\"a\")$pct_change()$alias(\"pct_change\"))\n#&gt; shape: (5, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 pct_change \u2502\n#&gt; \u2502 ---  \u2506 ---        \u2502\n#&gt; \u2502 i32  \u2506 f64        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 10   \u2506 null       \u2502\n#&gt; \u2502 11   \u2506 0.1        \u2502\n#&gt; \u2502 12   \u2506 0.090909   \u2502\n#&gt; \u2502 null \u2506 0.0        \u2502\n#&gt; \u2502 12   \u2506 0.0        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_pow/","title":"Exponentiation <code>^</code> or <code>**</code>","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_pow(exponent)\n</code></pre>"},{"location":"reference/Expr_pow/#arguments","title":"Arguments","text":"<ul> <li><code>exponent</code>: exponent</li> </ul>"},{"location":"reference/Expr_pow/#returns","title":"Returns","text":"<p>Expr</p> <p>Raise expression to the power of exponent.</p>"},{"location":"reference/Expr_pow/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(a= -1:3)$select(\npl$lit(2)$pow(pl$col(\"a\"))\n)$get_column(\"literal\")$to_r()== 2^(-1:3)\n#&gt; [1] TRUE TRUE TRUE TRUE TRUE\npl$DataFrame(a = -1:3)$select(\npl$lit(2) ^ (pl$col(\"a\"))\n)$get_column(\"literal\")$to_r()== 2^(-1:3)\n#&gt; [1] TRUE TRUE TRUE TRUE TRUE\n </code></pre>"},{"location":"reference/Expr_product/","title":"Expr_product","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_product/#product","title":"Product","text":""},{"location":"reference/Expr_product/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_product\n</code></pre>"},{"location":"reference/Expr_product/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the product of an expression.</p>"},{"location":"reference/Expr_product/#details","title":"Details","text":"<p>does not support integer32 currently, .cast() to f64 or i64 first.</p>"},{"location":"reference/Expr_product/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(x=c(1,2,3)))$select(pl$col(\"x\")$product()==6) #is true\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 bool \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_quantile/","title":"Get quantile value.","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_quantile/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_quantile(quantile, interpolation = \"nearest\")\n</code></pre>"},{"location":"reference/Expr_quantile/#arguments","title":"Arguments","text":"<ul> <li><code>quantile</code>: numeric/Expression 0.0 to 1.0</li> <li><code>interpolation</code>: string value from choices \"nearest\", \"higher\", \"lower\", \"midpoint\", \"linear\"</li> </ul>"},{"location":"reference/Expr_quantile/#returns","title":"Returns","text":"<p>Expr</p> <p>Get quantile value.</p>"},{"location":"reference/Expr_quantile/#details","title":"Details","text":"<p><code>Nulls</code> are ignored and <code>NaNs</code> are ranked as the largest value. For linear interpolation <code>NaN</code> poisons <code>Inf</code>, that poisons any other value.</p>"},{"location":"reference/Expr_quantile/#examples","title":"Examples","text":"<pre><code>pl$select(pl$lit(-5:5)$quantile(.5))\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_rank/","title":"Rank","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_rank(method = \"average\", reverse = FALSE)\n</code></pre>"},{"location":"reference/Expr_rank/#arguments","title":"Arguments","text":"<ul> <li> <p><code>method</code>: string option 'average', 'min', 'max', 'dense', 'ordinal', 'random'</p> </li> </ul>"},{"location":"reference/Expr_rank/#the-method-used-to-assign-ranks-to-tied-elements-the-following-methods-are-available-default-is-average","title":"' The method used to assign ranks to tied elements. The following methods are available (default is 'average'):","text":"<ul> <li>'average' : The average of the ranks that would have been assigned to all the tied values is assigned to each value.</li> <li>'min' : The minimum of the ranks that would have been assigned to all the tied values is assigned to each value. (This is also referred to as \"competition\" ranking.)</li> <li>'max' : The maximum of the ranks that would have been assigned to all the tied values is assigned to each value.</li> <li>'dense' : Like 'min', but the rank of the next highest element is assigned the rank immediately after those assigned to the tied elements.</li> <li>'ordinal' : All values are given a distinct rank, corresponding to the order that the values occur in the Series.</li> <li>'random' : Like 'ordinal', but the rank for ties is not dependent on the order that the values occur in the Series.</li> <li><code>reverse</code>: bool, reverse the operation</li> </ul>"},{"location":"reference/Expr_rank/#returns","title":"Returns","text":"<p>Expr</p> <p>Assign ranks to data, dealing with ties appropriately.</p>"},{"location":"reference/Expr_rank/#examples","title":"Examples","text":"<pre><code>#  The 'average' method:\ndf = pl$DataFrame(list(a = c(3, 6, 1, 1, 6)))\ndf$select(pl$col(\"a\")$rank())\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2502 4.5 \u2502\n#&gt; \u2502 1.5 \u2502\n#&gt; \u2502 1.5 \u2502\n#&gt; \u2502 4.5 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n#  The 'ordinal' method:\ndf = pl$DataFrame(list(a = c(3, 6, 1, 1, 6)))\ndf$select(pl$col(\"a\")$rank(\"ordinal\"))\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 5   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_rechunk/","title":"Expr_rechunk","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_rechunk/#rechunk-memory-layout","title":"Rechunk memory layout","text":""},{"location":"reference/Expr_rechunk/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_rechunk\n</code></pre>"},{"location":"reference/Expr_rechunk/#returns","title":"Returns","text":"<p>Expr</p> <p>Create a single chunk of memory for this Series.</p>"},{"location":"reference/Expr_rechunk/#details","title":"Details","text":"<p>See rechunk() explained here <code>docs_translations</code></p>"},{"location":"reference/Expr_rechunk/#examples","title":"Examples","text":"<pre><code>#get chunked lengths with/without rechunk\nseries_list = pl$DataFrame(list(a=1:3,b=4:6))$select(\npl$col(\"a\")$append(pl$col(\"b\"))$alias(\"a_chunked\"),\npl$col(\"a\")$append(pl$col(\"b\"))$rechunk()$alias(\"a_rechunked\")\n)$get_columns()\nlapply(series_list, \\(x) x$chunk_lengths())\n#&gt; $a_chunked\n#&gt; [1] 3 3\n#&gt; #&gt; $a_rechunked\n#&gt; [1] 6\n#&gt; </code></pre>"},{"location":"reference/Expr_reinterpret/","title":"reinterpret bits","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_reinterpret(signed = TRUE)\n</code></pre>"},{"location":"reference/Expr_reinterpret/#arguments","title":"Arguments","text":"<ul> <li><code>signed</code>: bool reinterpret into Int64 else UInt64</li> </ul>"},{"location":"reference/Expr_reinterpret/#returns","title":"Returns","text":"<p>Expr</p> <p>Reinterpret the underlying bits as a signed/unsigned integer. This operation is only allowed for 64bit integers. For lower bits integers, you can safely use that cast operation.</p>"},{"location":"reference/Expr_reinterpret/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(iris)\ndf$select(pl$all()$head(2)$hash(1,2,3,4)$reinterpret())$to_data_frame()\n#&gt;           Sepal.Length          Sepal.Width         Petal.Length         Petal.Width\n#&gt; 1  1175582113423737064  7264306198948610048 -7761811347093012248 -236581591116988648\n#&gt; 2 -7705801573110956264 -1306043891937443840 -7761811347093012248 -236581591116988648\n#&gt;   Species\n#&gt; 1       0\n#&gt; 2       0\n </code></pre>"},{"location":"reference/Expr_rep/","title":"expression: repeat series","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_rep/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_rep(n, rechunk = TRUE)\n</code></pre>"},{"location":"reference/Expr_rep/#arguments","title":"Arguments","text":"<ul> <li><code>n</code>: Numeric the number of times to repeat, must be non-negative and finite</li> <li><code>rechunk</code>: bool default = TRUE, if true memory layout will be rewritten</li> </ul>"},{"location":"reference/Expr_rep/#returns","title":"Returns","text":"<p>Expr</p> <p>This expression takes input and repeats it n times and append chunk</p>"},{"location":"reference/Expr_rep/#details","title":"Details","text":"<p>if self$len() == 1 , has a special faster implementation, Here rechunk is not necessary, and takes no effect.</p> <p>if self$len() &gt; 1 , then the expression instructs the series to append onto itself n time and rewrite memory</p>"},{"location":"reference/Expr_rep/#examples","title":"Examples","text":"<pre><code>pl$select(\npl$lit(\"alice\")$rep(n = 3)\n)\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 literal \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 alice   \u2502\n#&gt; \u2502 alice   \u2502\n#&gt; \u2502 alice   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\npl$select(\npl$lit(1:3)$rep(n = 2)\n)\n#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_rep_extend/","title":"extend series with repeated series","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_rep_extend/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_rep_extend(expr, n, rechunk = TRUE, upcast = TRUE)\n</code></pre>"},{"location":"reference/Expr_rep_extend/#arguments","title":"Arguments","text":"<ul> <li><code>expr</code>: Expr or into Expr</li> <li><code>n</code>: Numeric the number of times to repeat, must be non-negative and finite</li> <li><code>rechunk</code>: bool default = TRUE, if true memory layout will be rewritten</li> <li><code>upcast</code>: bool default = TRUE, passed to self$append(), if TRUE non identical types will be casted to common super type if any. If FALSE or no common super type throw error.</li> </ul>"},{"location":"reference/Expr_rep_extend/#returns","title":"Returns","text":"<p>Expr</p> <p>Extend a series with a repeated series or value.</p>"},{"location":"reference/Expr_rep_extend/#examples","title":"Examples","text":"<pre><code>pl$select(pl$lit(c(1,2,3))$rep_extend(1:3, n = 5))\n#&gt; shape: (18, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 2.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 ... \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 2.0 \u2502\n#&gt; \u2502 3.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_repeat_by/","title":"Repeat by","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_repeat_by(by)\n</code></pre>"},{"location":"reference/Expr_repeat_by/#arguments","title":"Arguments","text":"<ul> <li><code>by</code>: Expr Numeric column that determines how often the values will be repeated. The column will be coerced to UInt32. Give this dtype to make the coercion a no-op.</li> </ul>"},{"location":"reference/Expr_repeat_by/#returns","title":"Returns","text":"<p>Expr</p> <p>Repeat the elements in this Series as specified in the given expression. The repeated elements are expanded into a <code>List</code>.</p>"},{"location":"reference/Expr_repeat_by/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(a = c(\"x\",\"y\",\"z\"), n = c(0:2)))\ndf$select(pl$col(\"a\")$repeat_by(\"n\"))\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a          \u2502\n#&gt; \u2502 ---        \u2502\n#&gt; \u2502 list[str]  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 []         \u2502\n#&gt; \u2502 [\"y\"]      \u2502\n#&gt; \u2502 [\"z\", \"z\"] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_reshape/","title":"Reshape","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_reshape/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_reshape(dims)\n</code></pre>"},{"location":"reference/Expr_reshape/#arguments","title":"Arguments","text":"<ul> <li><code>dims</code>: numeric vec of the dimension sizes. If a -1 is used in any of the dimensions, that dimension is inferred.</li> </ul>"},{"location":"reference/Expr_reshape/#returns","title":"Returns","text":"<p>Expr</p> <p>Reshape this Expr to a flat Series or a Series of Lists.</p>"},{"location":"reference/Expr_reshape/#examples","title":"Examples","text":"<pre><code>pl$select(pl$lit(1:12)$reshape(c(3,4)))\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502                 \u2502\n#&gt; \u2502 ---             \u2502\n#&gt; \u2502 list[i32]       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, ... 4]   \u2502\n#&gt; \u2502 [5, 6, ... 8]   \u2502\n#&gt; \u2502 [9, 10, ... 12] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\npl$select(pl$lit(1:12)$reshape(c(3,-1)))\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502                 \u2502\n#&gt; \u2502 ---             \u2502\n#&gt; \u2502 list[i32]       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, ... 4]   \u2502\n#&gt; \u2502 [5, 6, ... 8]   \u2502\n#&gt; \u2502 [9, 10, ... 12] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_rolling_max/","title":"Rolling max","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_rolling_max(\nwindow_size,\nweights = NULL,\nmin_periods = NULL,\ncenter = FALSE,\nby = NULL,\nclosed = \"left\"\n)\n</code></pre>"},{"location":"reference/Expr_rolling_max/#arguments","title":"Arguments","text":"<ul> <li> <p><code>window_size</code>: The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:</p> <ul> <li>1ns (1 nanosecond)</li> <li>1us (1 microsecond)</li> <li>1ms (1 millisecond)</li> <li>1s (1 second)</li> <li>1m (1 minute)</li> <li>1h (1 hour)</li> <li>1d (1 day)</li> <li>1w (1 week)</li> <li>1mo (1 calendar month)</li> <li>1y (1 calendar year)</li> <li>1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.</li> <li><code>weights</code>: An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.</li> <li><code>min_periods</code>: The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size.</li> <li><code>center</code>: Set the labels at the center of the window</li> <li><code>by</code>: If the <code>window_size</code> is temporal for instance <code>\"5h\"</code> or <code>\"3s</code>, you must set the column that will be used to determine the windows. This column must be of dtype <code>{Date, Datetime}</code></li> <li><code>closed</code>: : 'left', 'right', 'both', 'none'</li> </ul> <p>Define whether the temporal window interval is closed or not.</p> </li> </ul>"},{"location":"reference/Expr_rolling_max/#returns","title":"Returns","text":"<p>Expr</p> <p>Apply a rolling max (moving max) over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector. The resulting values will be aggregated to their sum.</p>"},{"location":"reference/Expr_rolling_max/#details","title":"Details","text":"<p>This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>groupby_rolling</code> this method can cache the window size computation.</p>"},{"location":"reference/Expr_rolling_max/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(a=1:6))$select(pl$col(\"a\")$rolling_max(window_size = 2))\n#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2502\n#&gt; \u2502 2    \u2502\n#&gt; \u2502 3    \u2502\n#&gt; \u2502 4    \u2502\n#&gt; \u2502 5    \u2502\n#&gt; \u2502 6    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_rolling_mean/","title":"Rolling mean","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_rolling_mean(\nwindow_size,\nweights = NULL,\nmin_periods = NULL,\ncenter = FALSE,\nby = NULL,\nclosed = \"left\"\n)\n</code></pre>"},{"location":"reference/Expr_rolling_mean/#arguments","title":"Arguments","text":"<ul> <li> <p><code>window_size</code>: The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:</p> <ul> <li>1ns (1 nanosecond)</li> <li>1us (1 microsecond)</li> <li>1ms (1 millisecond)</li> <li>1s (1 second)</li> <li>1m (1 minute)</li> <li>1h (1 hour)</li> <li>1d (1 day)</li> <li>1w (1 week)</li> <li>1mo (1 calendar month)</li> <li>1y (1 calendar year)</li> <li>1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.</li> <li><code>weights</code>: An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.</li> <li><code>min_periods</code>: The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size.</li> <li><code>center</code>: Set the labels at the center of the window</li> <li><code>by</code>: If the <code>window_size</code> is temporal for instance <code>\"5h\"</code> or <code>\"3s</code>, you must set the column that will be used to determine the windows. This column must be of dtype <code>{Date, Datetime}</code></li> <li><code>closed</code>: : 'left', 'right', 'both', 'none'</li> </ul> <p>Define whether the temporal window interval is closed or not.</p> </li> </ul>"},{"location":"reference/Expr_rolling_mean/#returns","title":"Returns","text":"<p>Expr</p> <p>Apply a rolling mean (moving mean) over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector. The resulting values will be aggregated to their sum.</p>"},{"location":"reference/Expr_rolling_mean/#details","title":"Details","text":"<p>This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>groupby_rolling</code> this method can cache the window size computation.</p>"},{"location":"reference/Expr_rolling_mean/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(a=1:6))$select(pl$col(\"a\")$rolling_mean(window_size = 2))\n#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2502\n#&gt; \u2502 1.5  \u2502\n#&gt; \u2502 2.5  \u2502\n#&gt; \u2502 3.5  \u2502\n#&gt; \u2502 4.5  \u2502\n#&gt; \u2502 5.5  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_rolling_median/","title":"Rolling median","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_rolling_median(\nwindow_size,\nweights = NULL,\nmin_periods = NULL,\ncenter = FALSE,\nby = NULL,\nclosed = \"left\"\n)\n</code></pre>"},{"location":"reference/Expr_rolling_median/#arguments","title":"Arguments","text":"<ul> <li> <p><code>window_size</code>: The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:</p> <ul> <li>1ns (1 nanosecond)</li> <li>1us (1 microsecond)</li> <li>1ms (1 millisecond)</li> <li>1s (1 second)</li> <li>1m (1 minute)</li> <li>1h (1 hour)</li> <li>1d (1 day)</li> <li>1w (1 week)</li> <li>1mo (1 calendar month)</li> <li>1y (1 calendar year)</li> <li>1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.</li> <li><code>weights</code>: An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.</li> <li><code>min_periods</code>: The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size.</li> <li><code>center</code>: Set the labels at the center of the window</li> <li><code>by</code>: If the <code>window_size</code> is temporal for instance <code>\"5h\"</code> or <code>\"3s</code>, you must set the column that will be used to determine the windows. This column must be of dtype <code>{Date, Datetime}</code></li> <li><code>closed</code>: : 'left', 'right', 'both', 'none'</li> </ul> <p>Define whether the temporal window interval is closed or not.</p> </li> </ul>"},{"location":"reference/Expr_rolling_median/#returns","title":"Returns","text":"<p>Expr</p> <p>Apply a rolling median (moving median) over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector. The resulting values will be aggregated to their sum.</p>"},{"location":"reference/Expr_rolling_median/#details","title":"Details","text":"<p>This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>groupby_rolling</code> this method can cache the window size computation.</p>"},{"location":"reference/Expr_rolling_median/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(a=1:6))$select(pl$col(\"a\")$rolling_median(window_size = 2))\n#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2502\n#&gt; \u2502 1.5  \u2502\n#&gt; \u2502 2.5  \u2502\n#&gt; \u2502 3.5  \u2502\n#&gt; \u2502 4.5  \u2502\n#&gt; \u2502 5.5  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_rolling_min/","title":"Rolling Min","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_rolling_min(\nwindow_size,\nweights = NULL,\nmin_periods = NULL,\ncenter = FALSE,\nby = NULL,\nclosed = \"left\"\n)\n</code></pre>"},{"location":"reference/Expr_rolling_min/#arguments","title":"Arguments","text":"<ul> <li> <p><code>window_size</code>: The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:</p> <ul> <li>1ns (1 nanosecond)</li> <li>1us (1 microsecond)</li> <li>1ms (1 millisecond)</li> <li>1s (1 second)</li> <li>1m (1 minute)</li> <li>1h (1 hour)</li> <li>1d (1 day)</li> <li>1w (1 week)</li> <li>1mo (1 calendar month)</li> <li>1y (1 calendar year)</li> <li>1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.</li> <li><code>weights</code>: An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.</li> <li><code>min_periods</code>: The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size.</li> <li><code>center</code>: Set the labels at the center of the window</li> <li><code>by</code>: If the <code>window_size</code> is temporal for instance <code>\"5h\"</code> or <code>\"3s</code>, you must set the column that will be used to determine the windows. This column must be of dtype <code>{Date, Datetime}</code></li> <li><code>closed</code>: : 'left', 'right', 'both', 'none'</li> </ul> <p>Define whether the temporal window interval is closed or not.</p> </li> </ul>"},{"location":"reference/Expr_rolling_min/#returns","title":"Returns","text":"<p>Expr</p> <p>Apply a rolling min (moving min) over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector. The resulting values will be aggregated to their sum.</p>"},{"location":"reference/Expr_rolling_min/#details","title":"Details","text":"<p>This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>groupby_rolling</code> this method can cache the window size computation.</p>"},{"location":"reference/Expr_rolling_min/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(a=1:6))$select(pl$col(\"a\")$rolling_min(window_size = 2))\n#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2502\n#&gt; \u2502 1    \u2502\n#&gt; \u2502 2    \u2502\n#&gt; \u2502 3    \u2502\n#&gt; \u2502 4    \u2502\n#&gt; \u2502 5    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_rolling_quantile/","title":"Rolling quantile","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_rolling_quantile(\nquantile,\ninterpolation = \"nearest\",\nwindow_size,\nweights = NULL,\nmin_periods = NULL,\ncenter = FALSE,\nby = NULL,\nclosed = \"left\"\n)\n</code></pre>"},{"location":"reference/Expr_rolling_quantile/#arguments","title":"Arguments","text":"<ul> <li><code>quantile</code>: Quantile between 0.0 and 1.0.</li> <li><code>interpolation</code>: choice c('nearest', 'higher', 'lower', 'midpoint', 'linear')</li> <li> <p><code>window_size</code>: The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:</p> <ul> <li>1ns (1 nanosecond)</li> <li>1us (1 microsecond)</li> <li>1ms (1 millisecond)</li> <li>1s (1 second)</li> <li>1m (1 minute)</li> <li>1h (1 hour)</li> <li>1d (1 day)</li> <li>1w (1 week)</li> <li>1mo (1 calendar month)</li> <li>1y (1 calendar year)</li> <li>1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.</li> <li><code>weights</code>: An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.</li> <li><code>min_periods</code>: The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size.</li> <li><code>center</code>: Set the labels at the center of the window</li> <li><code>by</code>: If the <code>window_size</code> is temporal for instance <code>\"5h\"</code> or <code>\"3s</code>, you must set the column that will be used to determine the windows. This column must be of dtype <code>{Date, Datetime}</code></li> <li><code>closed</code>: : 'left', 'right', 'both', 'none'</li> </ul> <p>Define whether the temporal window interval is closed or not.</p> </li> </ul>"},{"location":"reference/Expr_rolling_quantile/#returns","title":"Returns","text":"<p>Expr</p> <p>Apply a rolling quantile (moving quantile) over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector. The resulting values will be aggregated to their sum.</p>"},{"location":"reference/Expr_rolling_quantile/#details","title":"Details","text":"<p>This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>groupby_rolling</code> this method can cache the window size computation.</p>"},{"location":"reference/Expr_rolling_quantile/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(a=1:6))$select(\npl$col(\"a\")$rolling_quantile(window_size = 2, quantile = .5)\n)\n#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2502\n#&gt; \u2502 2.0  \u2502\n#&gt; \u2502 3.0  \u2502\n#&gt; \u2502 4.0  \u2502\n#&gt; \u2502 5.0  \u2502\n#&gt; \u2502 6.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_rolling_skew/","title":"Rolling skew","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_rolling_skew(window_size, bias = TRUE)\n</code></pre>"},{"location":"reference/Expr_rolling_skew/#arguments","title":"Arguments","text":"<ul> <li><code>window_size</code>: integerish, Size of the rolling window</li> <li><code>bias</code>: bool default = TRUE, If False, then the calculations are corrected for statistical bias.</li> </ul>"},{"location":"reference/Expr_rolling_skew/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute a rolling skew.</p>"},{"location":"reference/Expr_rolling_skew/#details","title":"Details","text":"<p>Extra comments copied from rust-polars_0.25.1 Compute the sample skewness of a data set.</p> <p>For normally distributed data, the skewness should be about zero. For uni-modal continuous distributions, a skewness value greater than zero means that there is more weight in the right tail of the distribution. The function <code>skewtest</code> can be used to determine if the skewness value is close enough to zero, statistically speaking. see: https://github.com/scipy/scipy/blob/47bb6febaa10658c72962b9615d5d5aa2513fa3a/scipy/stats/stats.py#L1024</p>"},{"location":"reference/Expr_rolling_skew/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(a=iris$Sepal.Length))$select(pl$col(\"a\")$rolling_skew(window_size = 4 )$head(10))\n#&gt; shape: (10, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null      \u2502\n#&gt; \u2502 null      \u2502\n#&gt; \u2502 null      \u2502\n#&gt; \u2502 0.278031  \u2502\n#&gt; \u2502 ...       \u2502\n#&gt; \u2502 0.493382  \u2502\n#&gt; \u2502 0.0       \u2502\n#&gt; \u2502 0.278031  \u2502\n#&gt; \u2502 -0.186618 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_rolling_std/","title":"Rolling std","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_rolling_std(\nwindow_size,\nweights = NULL,\nmin_periods = NULL,\ncenter = FALSE,\nby = NULL,\nclosed = \"left\"\n)\n</code></pre>"},{"location":"reference/Expr_rolling_std/#arguments","title":"Arguments","text":"<ul> <li> <p><code>window_size</code>: The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:</p> <ul> <li>1ns (1 nanosecond)</li> <li>1us (1 microsecond)</li> <li>1ms (1 millisecond)</li> <li>1s (1 second)</li> <li>1m (1 minute)</li> <li>1h (1 hour)</li> <li>1d (1 day)</li> <li>1w (1 week)</li> <li>1mo (1 calendar month)</li> <li>1y (1 calendar year)</li> <li>1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.</li> <li><code>weights</code>: An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.</li> <li><code>min_periods</code>: The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size.</li> <li><code>center</code>: Set the labels at the center of the window</li> <li><code>by</code>: If the <code>window_size</code> is temporal for instance <code>\"5h\"</code> or <code>\"3s</code>, you must set the column that will be used to determine the windows. This column must be of dtype <code>{Date, Datetime}</code></li> <li><code>closed</code>: : 'left', 'right', 'both', 'none'</li> </ul> <p>Define whether the temporal window interval is closed or not.</p> </li> </ul>"},{"location":"reference/Expr_rolling_std/#returns","title":"Returns","text":"<p>Expr</p> <p>Apply a rolling std (moving std) over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector. The resulting values will be aggregated to their sum.</p>"},{"location":"reference/Expr_rolling_std/#details","title":"Details","text":"<p>This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>groupby_rolling</code> this method can cache the window size computation.</p>"},{"location":"reference/Expr_rolling_std/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(a=1:6))$select(pl$col(\"a\")$rolling_std(window_size = 2))\n#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null     \u2502\n#&gt; \u2502 0.707107 \u2502\n#&gt; \u2502 0.707107 \u2502\n#&gt; \u2502 0.707107 \u2502\n#&gt; \u2502 0.707107 \u2502\n#&gt; \u2502 0.707107 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_rolling_sum/","title":"Rolling sum","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_rolling_sum(\nwindow_size,\nweights = NULL,\nmin_periods = NULL,\ncenter = FALSE,\nby = NULL,\nclosed = \"left\"\n)\n</code></pre>"},{"location":"reference/Expr_rolling_sum/#arguments","title":"Arguments","text":"<ul> <li> <p><code>window_size</code>: The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:</p> <ul> <li>1ns (1 nanosecond)</li> <li>1us (1 microsecond)</li> <li>1ms (1 millisecond)</li> <li>1s (1 second)</li> <li>1m (1 minute)</li> <li>1h (1 hour)</li> <li>1d (1 day)</li> <li>1w (1 week)</li> <li>1mo (1 calendar month)</li> <li>1y (1 calendar year)</li> <li>1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.</li> <li><code>weights</code>: An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.</li> <li><code>min_periods</code>: The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size.</li> <li><code>center</code>: Set the labels at the center of the window</li> <li><code>by</code>: If the <code>window_size</code> is temporal for instance <code>\"5h\"</code> or <code>\"3s</code>, you must set the column that will be used to determine the windows. This column must be of dtype <code>{Date, Datetime}</code></li> <li><code>closed</code>: : 'left', 'right', 'both', 'none'</li> </ul> <p>Define whether the temporal window interval is closed or not.</p> </li> </ul>"},{"location":"reference/Expr_rolling_sum/#returns","title":"Returns","text":"<p>Expr</p> <p>Apply a rolling sum (moving sum) over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector. The resulting values will be aggregated to their sum.</p>"},{"location":"reference/Expr_rolling_sum/#details","title":"Details","text":"<p>This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>groupby_rolling</code> this method can cache the window size computation.</p>"},{"location":"reference/Expr_rolling_sum/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(a=1:6))$select(pl$col(\"a\")$rolling_sum(window_size = 2))\n#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2502\n#&gt; \u2502 3    \u2502\n#&gt; \u2502 5    \u2502\n#&gt; \u2502 7    \u2502\n#&gt; \u2502 9    \u2502\n#&gt; \u2502 11   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_rolling_var/","title":"Rolling var","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_rolling_var(\nwindow_size,\nweights = NULL,\nmin_periods = NULL,\ncenter = FALSE,\nby = NULL,\nclosed = \"left\"\n)\n</code></pre>"},{"location":"reference/Expr_rolling_var/#arguments","title":"Arguments","text":"<ul> <li> <p><code>window_size</code>: The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language:</p> <ul> <li>1ns (1 nanosecond)</li> <li>1us (1 microsecond)</li> <li>1ms (1 millisecond)</li> <li>1s (1 second)</li> <li>1m (1 minute)</li> <li>1h (1 hour)</li> <li>1d (1 day)</li> <li>1w (1 week)</li> <li>1mo (1 calendar month)</li> <li>1y (1 calendar year)</li> <li>1i (1 index count) If the dynamic string language is used, the <code>by</code> and <code>closed</code> arguments must also be set.</li> <li><code>weights</code>: An optional slice with the same length as the window that will be multiplied elementwise with the values in the window.</li> <li><code>min_periods</code>: The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size.</li> <li><code>center</code>: Set the labels at the center of the window</li> <li><code>by</code>: If the <code>window_size</code> is temporal for instance <code>\"5h\"</code> or <code>\"3s</code>, you must set the column that will be used to determine the windows. This column must be of dtype <code>{Date, Datetime}</code></li> <li><code>closed</code>: : 'left', 'right', 'both', 'none'</li> </ul> <p>Define whether the temporal window interval is closed or not.</p> </li> </ul>"},{"location":"reference/Expr_rolling_var/#returns","title":"Returns","text":"<p>Expr</p> <p>Apply a rolling var (moving var) over the values in this array. A window of length <code>window_size</code> will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the <code>weight</code> vector. The resulting values will be aggregated to their sum.</p>"},{"location":"reference/Expr_rolling_var/#details","title":"Details","text":"<p>This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using <code>groupby_rolling</code> this method can cache the window size computation.</p>"},{"location":"reference/Expr_rolling_var/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(a=1:6))$select(pl$col(\"a\")$rolling_var(window_size = 2))\n#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2502\n#&gt; \u2502 0.5  \u2502\n#&gt; \u2502 0.5  \u2502\n#&gt; \u2502 0.5  \u2502\n#&gt; \u2502 0.5  \u2502\n#&gt; \u2502 0.5  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_round/","title":"round","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_round/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_round(decimals)\n</code></pre>"},{"location":"reference/Expr_round/#arguments","title":"Arguments","text":"<ul> <li><code>decimals</code>: integer Number of decimals to round by.</li> </ul>"},{"location":"reference/Expr_round/#returns","title":"Returns","text":"<p>Expr</p> <p>Round underlying floating point data by <code>decimals</code> digits.</p>"},{"location":"reference/Expr_round/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(\n  a = c(0.33, 0.5, 1.02, 1.5, NaN , NA, Inf, -Inf)\n))$select(\npl$col(\"a\")$round(0)\n)\n#&gt; shape: (8, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0  \u2502\n#&gt; \u2502 1.0  \u2502\n#&gt; \u2502 1.0  \u2502\n#&gt; \u2502 2.0  \u2502\n#&gt; \u2502 NaN  \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2502 inf  \u2502\n#&gt; \u2502 -inf \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_rpow/","title":"Reverse exponentiation <code>%**%</code>(in R <code>** == ^</code>)","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_rpow(base)\ne1 %**% e2\n`%**%.Expr`(e1, e2)\n</code></pre>"},{"location":"reference/Expr_rpow/#arguments","title":"Arguments","text":"<ul> <li><code>base</code>: real or Expr, the value of the base, self is the exponent</li> <li><code>e1</code>: value where ** operator is defined</li> <li><code>e2</code>: value where ** operator is defined</li> </ul>"},{"location":"reference/Expr_rpow/#returns","title":"Returns","text":"<p>Expr</p> <p>Raise a base to the power of the expression as exponent.</p>"},{"location":"reference/Expr_rpow/#details","title":"Details","text":"<p>do not use <code>**</code>, R secretly parses that just as if it was a <code>^</code></p>"},{"location":"reference/Expr_rpow/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(a = -1:3))$select(\npl$lit(2)$rpow(pl$col(\"a\"))\n)$get_column(\"a\")$to_r() ==  (-1:3)^2\n#&gt; [1] TRUE TRUE TRUE TRUE TRUE\npl$DataFrame(list(a = -1:3))$select(\npl$lit(2) %**% (pl$col(\"a\"))\n)$get_column(\"a\")$to_r() ==  (-1:3)^2\n#&gt; [1] TRUE TRUE TRUE TRUE TRUE\n </code></pre>"},{"location":"reference/Expr_sample/","title":"Sample","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_sample/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_sample(\nfrac = NULL,\nwith_replacement = TRUE,\nshuffle = FALSE,\nseed = NULL,\nn = NULL\n)\n</code></pre>"},{"location":"reference/Expr_sample/#arguments","title":"Arguments","text":"<ul> <li><code>frac</code>: Fraction of items to return. Cannot be used with <code>n</code>.</li> <li><code>with_replacement</code>: Allow values to be sampled more than once.</li> <li><code>shuffle</code>: Shuffle the order of sampled data points. (implicitly TRUE if, with_replacement = TRUE)</li> <li><code>seed</code>: Seed for the random number generator. If set to None (default), a random seed is used.</li> <li><code>n</code>: Number of items to return. Cannot be used with <code>frac</code>.</li> </ul>"},{"location":"reference/Expr_sample/#returns","title":"Returns","text":"<p>Expr</p>"},{"location":"reference/Expr_sample/#sample-from-this-expression","title":"' Sample from this expression.","text":""},{"location":"reference/Expr_sample/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(a=1:3)\ndf$select(pl$col(\"a\")$sample(frac=1,with_replacement=TRUE,seed=1L))\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$col(\"a\")$sample(frac=2,with_replacement=TRUE,seed=1L))\n#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$col(\"a\")$sample(n=2,with_replacement=FALSE,seed=1L))\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_search_sorted/","title":"Where to inject element(s) to maintain sorting","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_search_sorted/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_search_sorted(element)\n</code></pre>"},{"location":"reference/Expr_search_sorted/#arguments","title":"Arguments","text":"<ul> <li><code>element</code>: a R value into literal or an expression of an element</li> </ul>"},{"location":"reference/Expr_search_sorted/#returns","title":"Returns","text":"<p>Expr</p> <p>Find indices in self where elements should be inserted into to maintain order.</p>"},{"location":"reference/Expr_search_sorted/#details","title":"Details","text":"<p>This function look up where to insert element if to keep self column sorted. It is assumed the self column is already sorted ascending, otherwise wrongs answers. This function is a bit under documented in py-polars.</p>"},{"location":"reference/Expr_search_sorted/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(a=0:100))$select(pl$col(\"a\")$search_sorted(pl$lit(42L)))\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 42  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_set_sorted/","title":"Set_sorted","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_set_sorted(reverse = FALSE)\n</code></pre>"},{"location":"reference/Expr_set_sorted/#arguments","title":"Arguments","text":"<ul> <li><code>reverse</code>: bool if TRUE Descending else Ascending</li> </ul>"},{"location":"reference/Expr_set_sorted/#returns","title":"Returns","text":"<p>Expr</p> <p>Flags the expression as 'sorted'.</p>"},{"location":"reference/Expr_set_sorted/#examples","title":"Examples","text":"<pre><code>#correct use flag something correctly as ascendingly sorted\ns = pl$select(pl$lit(1:4)$set_sorted()$alias(\"a\"))$get_column(\"a\")\ns$flags # see flags\n#&gt; $SORTED_ASC\n#&gt; [1] TRUE\n#&gt; #&gt; $SORTED_DESC\n#&gt; [1] FALSE\n#&gt; #incorrect use, flag somthing as not sorted ascendingly\ns2 = pl$select(pl$lit(c(1,3,2,4))$set_sorted()$alias(\"a\"))$get_column(\"a\")\ns2$sort() #sorting skipped, although not actually sorted\n#&gt; polars Series: shape: (4,)\n#&gt; Series: 'a' [f64]\n#&gt; [\n#&gt;  1.0\n#&gt;  3.0\n#&gt;  2.0\n#&gt;  4.0\n#&gt; ]\n </code></pre>"},{"location":"reference/Expr_shift/","title":"Shift values","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_shift/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_shift(periods)\n</code></pre>"},{"location":"reference/Expr_shift/#arguments","title":"Arguments","text":"<ul> <li><code>periods</code>: numeric number of periods to shift, may be negative.</li> </ul>"},{"location":"reference/Expr_shift/#returns","title":"Returns","text":"<p>Expr</p> <p>Shift values</p>"},{"location":"reference/Expr_shift/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_shift/#examples","title":"Examples","text":"<pre><code>pl$select(\npl$lit(0:3)$shift(-2)$alias(\"shift-2\"),\npl$lit(0:3)$shift(2)$alias(\"shift+2\")\n)\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 shift-2 \u2506 shift+2 \u2502\n#&gt; \u2502 ---     \u2506 ---     \u2502\n#&gt; \u2502 i32     \u2506 i32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2       \u2506 null    \u2502\n#&gt; \u2502 3       \u2506 null    \u2502\n#&gt; \u2502 null    \u2506 0       \u2502\n#&gt; \u2502 null    \u2506 1       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_shift_and_fill/","title":"Shift and fill values","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_shift_and_fill/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_shift_and_fill(periods, fill_value)\n</code></pre>"},{"location":"reference/Expr_shift_and_fill/#arguments","title":"Arguments","text":"<ul> <li><code>periods</code>: numeric number of periods to shift, may be negative.</li> <li><code>fill_value</code>: Fill None values with the result of this expression.</li> </ul>"},{"location":"reference/Expr_shift_and_fill/#returns","title":"Returns","text":"<p>Expr</p> <p>Shift the values by a given period and fill the resulting null values.</p>"},{"location":"reference/Expr_shift_and_fill/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_shift_and_fill/#examples","title":"Examples","text":"<pre><code>pl$select(\npl$lit(0:3),\npl$lit(0:3)$shift_and_fill(-2, fill_value = 42)$alias(\"shift-2\"),\npl$lit(0:3)$shift_and_fill(2, fill_value = pl$lit(42)/2)$alias(\"shift+2\")\n)\n#&gt; shape: (4, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2506 shift-2 \u2506 shift+2 \u2502\n#&gt; \u2502 --- \u2506 ---     \u2506 ---     \u2502\n#&gt; \u2502 i32 \u2506 f64     \u2506 f64     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0   \u2506 2.0     \u2506 21.0    \u2502\n#&gt; \u2502 1   \u2506 3.0     \u2506 21.0    \u2502\n#&gt; \u2502 2   \u2506 42.0    \u2506 0.0     \u2502\n#&gt; \u2502 3   \u2506 42.0    \u2506 1.0     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_shrink_dtype/","title":"Expr_shrink_dtype","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_shrink_dtype/#wrap-column-in-list","title":"Wrap column in list","text":""},{"location":"reference/Expr_shrink_dtype/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_shrink_dtype\n</code></pre>"},{"location":"reference/Expr_shrink_dtype/#returns","title":"Returns","text":"<p>Expr</p> <p>Shrink numeric columns to the minimal required datatype. Shrink to the dtype needed to fit the extrema of this <code>[Series]</code>. This can be used to reduce memory pressure.</p>"},{"location":"reference/Expr_shrink_dtype/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(\n   a= c(1L, 2L, 3L),\n   b= c(1L, 2L, bitwShiftL(2L,29)),\n   c= c(-1L, 2L, bitwShiftL(1L,15)),\n   d= c(-112L, 2L, 112L),\n   e= c(-112L, 2L, 129L),\n   f= c(\"a\", \"b\", \"c\"),\n   g= c(0.1, 1.32, 0.12),\n   h= c(TRUE, NA, FALSE)\n)$with_column( pl$col(\"b\")$cast(pl$Int64) *32L\n)$select(pl$all()$shrink_dtype())\n#&gt; shape: (3, 8)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b           \u2506 c     \u2506 d    \u2506 e    \u2506 f   \u2506 g    \u2506 h     \u2502\n#&gt; \u2502 --- \u2506 ---         \u2506 ---   \u2506 ---  \u2506 ---  \u2506 --- \u2506 ---  \u2506 ---   \u2502\n#&gt; \u2502 i8  \u2506 i64         \u2506 i32   \u2506 i8   \u2506 i16  \u2506 str \u2506 f32  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 32          \u2506 -1    \u2506 -112 \u2506 -112 \u2506 a   \u2506 0.1  \u2506 true  \u2502\n#&gt; \u2502 2   \u2506 64          \u2506 2     \u2506 2    \u2506 2    \u2506 b   \u2506 1.32 \u2506 null  \u2502\n#&gt; \u2502 3   \u2506 34359738368 \u2506 32768 \u2506 112  \u2506 129  \u2506 c   \u2506 0.12 \u2506 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_shuffle/","title":"Shuffle","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_shuffle/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_shuffle(seed = NULL)\n</code></pre>"},{"location":"reference/Expr_shuffle/#arguments","title":"Arguments","text":"<ul> <li><code>seed</code>: numeric value of 0 to 2^52 Seed for the random number generator. If set to Null (default), a random seed value intergish value between 0 and 10000 is picked</li> </ul>"},{"location":"reference/Expr_shuffle/#returns","title":"Returns","text":"<p>Expr</p> <p>Shuffle the contents of this expr.</p>"},{"location":"reference/Expr_shuffle/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(a = 1:3)$select(pl$col(\"a\")$shuffle(seed=1))\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_sign/","title":"Expr_sign","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_sign/#sign","title":"Sign","text":""},{"location":"reference/Expr_sign/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_sign\n</code></pre>"},{"location":"reference/Expr_sign/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the element-wise indication of the sign.</p>"},{"location":"reference/Expr_sign/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(a=c(.9,-0,0,4,NA_real_))$select(pl$col(\"a\")$sign())\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2502\n#&gt; \u2502 0    \u2502\n#&gt; \u2502 0    \u2502\n#&gt; \u2502 1    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_sin/","title":"Expr_sin","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_sin/#sin","title":"Sin","text":""},{"location":"reference/Expr_sin/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_sin\n</code></pre>"},{"location":"reference/Expr_sin/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the element-wise value for the sine.</p>"},{"location":"reference/Expr_sin/#details","title":"Details","text":"<p>Evaluated Series has dtype Float64</p>"},{"location":"reference/Expr_sin/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(a=c(0,pi/2,pi,NA_real_))$select(pl$col(\"a\")$sin())\n#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a          \u2502\n#&gt; \u2502 ---        \u2502\n#&gt; \u2502 f64        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0        \u2502\n#&gt; \u2502 1.0        \u2502\n#&gt; \u2502 1.2246e-16 \u2502\n#&gt; \u2502 null       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_sinh/","title":"Expr_sinh","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_sinh/#sinh","title":"Sinh","text":""},{"location":"reference/Expr_sinh/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_sinh\n</code></pre>"},{"location":"reference/Expr_sinh/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the element-wise value for the hyperbolic sine.</p>"},{"location":"reference/Expr_sinh/#details","title":"Details","text":"<p>Evaluated Series has dtype Float64</p>"},{"location":"reference/Expr_sinh/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(a=c(-1,asinh(0.5),0,1,NA_real_))$select(pl$col(\"a\")$sinh())\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -1.175201 \u2502\n#&gt; \u2502 0.5       \u2502\n#&gt; \u2502 0.0       \u2502\n#&gt; \u2502 1.175201  \u2502\n#&gt; \u2502 null      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_skew/","title":"Skewness","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_skew(bias = TRUE)\n</code></pre>"},{"location":"reference/Expr_skew/#arguments","title":"Arguments","text":"<ul> <li><code>bias</code>: If False, then the calculations are corrected for statistical bias.</li> </ul>"},{"location":"reference/Expr_skew/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the sample skewness of a data set.</p>"},{"location":"reference/Expr_skew/#details","title":"Details","text":"<p>For normally distributed data, the skewness should be about zero. For unimodal continuous distributions, a skewness value greater than zero means that there is more weight in the right tail of the distribution. The function <code>skewtest</code> can be used to determine if the skewness value is close enough to zero, statistically speaking.</p> <p>See scipy.stats for more information.</p>"},{"location":"reference/Expr_skew/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list( a=c(1:3,2:1)))\ndf$select(pl$col(\"a\")$skew())\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.343622 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_slice/","title":"Get a slice of this expression.","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_slice/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_slice(offset, length = NULL)\n</code></pre>"},{"location":"reference/Expr_slice/#arguments","title":"Arguments","text":"<ul> <li><code>offset</code>: numeric or expression, zero-indexed where to start slice negative value indicate starting (one-indexed) from back</li> <li><code>length</code>: how many elements should slice contain, default NULL is max length</li> </ul>"},{"location":"reference/Expr_slice/#returns","title":"Returns","text":"<p>Expr</p> <p>Get a slice of this expression.</p>"},{"location":"reference/Expr_slice/#examples","title":"Examples","text":"<pre><code>#as head\npl$DataFrame(list(a=0:100))$select(\npl$all()$slice(0,6)\n)\n#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2502 5   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n#as tail\npl$DataFrame(list(a=0:100))$select(\npl$all()$slice(-6,6)\n)\n#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 95  \u2502\n#&gt; \u2502 96  \u2502\n#&gt; \u2502 97  \u2502\n#&gt; \u2502 98  \u2502\n#&gt; \u2502 99  \u2502\n#&gt; \u2502 100 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\npl$DataFrame(list(a=0:100))$select(\npl$all()$slice(80)\n)\n#&gt; shape: (21, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 80  \u2502\n#&gt; \u2502 81  \u2502\n#&gt; \u2502 82  \u2502\n#&gt; \u2502 83  \u2502\n#&gt; \u2502 ... \u2502\n#&gt; \u2502 97  \u2502\n#&gt; \u2502 98  \u2502\n#&gt; \u2502 99  \u2502\n#&gt; \u2502 100 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_sort/","title":"Expr_sort","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_sort/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_sort(reverse = FALSE, nulls_last = FALSE)\n</code></pre>"},{"location":"reference/Expr_sort/#arguments","title":"Arguments","text":"<ul> <li><code>reverse</code>: bool default FALSE, reverses sort</li> <li><code>nulls_last</code>: bool, default FALSE, place Nulls last</li> </ul>"},{"location":"reference/Expr_sort/#returns","title":"Returns","text":"<p>Expr</p> <p>Sort this column. In projection/ selection context the whole column is sorted. If used in a groupby context, the groups are sorted.</p>"},{"location":"reference/Expr_sort/#details","title":"Details","text":"<p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_sort/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(\n  a = c(6, 1, 0, NA, Inf, NaN)\n))$select(pl$col(\"a\")$sort())\n#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2502\n#&gt; \u2502 0.0  \u2502\n#&gt; \u2502 1.0  \u2502\n#&gt; \u2502 6.0  \u2502\n#&gt; \u2502 inf  \u2502\n#&gt; \u2502 NaN  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_sort_by/","title":"sort column by order of others","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_sort_by/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_sort_by(by, reverse = FALSE)\n</code></pre>"},{"location":"reference/Expr_sort_by/#arguments","title":"Arguments","text":"<ul> <li><code>by</code>: one expression or list expressions and/or strings(interpreted as column names)</li> <li><code>reverse</code>: single bool to boolean vector, any is_TRUE will give reverse sorting of that column</li> </ul>"},{"location":"reference/Expr_sort_by/#returns","title":"Returns","text":"<p>Expr</p> <p>Sort this column by the ordering of another column, or multiple other columns.</p>"},{"location":"reference/Expr_sort_by/#details","title":"Details","text":"<p>In projection/ selection context the whole column is sorted. If used in a groupby context, the groups are sorted.</p> <p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_sort_by/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(\n  group = c(\"a\",\"a\",\"a\",\"b\",\"b\",\"b\"),\n  value1 = c(98,1,3,2,99,100),\n  value2 = c(\"d\",\"f\",\"b\",\"e\",\"c\",\"a\")\n))\n# by one column/expression\ndf$select(\npl$col(\"group\")$sort_by(\"value1\")\n)\n#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 group \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 str   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a     \u2502\n#&gt; \u2502 b     \u2502\n#&gt; \u2502 a     \u2502\n#&gt; \u2502 a     \u2502\n#&gt; \u2502 b     \u2502\n#&gt; \u2502 b     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n# by two columns/expressions\ndf$select(\npl$col(\"group\")$sort_by(list(\"value2\",pl$col(\"value1\")), reverse =c(TRUE,FALSE))\n)\n#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 group \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 str   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a     \u2502\n#&gt; \u2502 b     \u2502\n#&gt; \u2502 a     \u2502\n#&gt; \u2502 b     \u2502\n#&gt; \u2502 a     \u2502\n#&gt; \u2502 b     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n# by some expression\ndf$select(\npl$col(\"group\")$sort_by(pl$col(\"value1\")$sort(reverse=TRUE))\n)\n#&gt; shape: (6, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 group \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 str   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 b     \u2502\n#&gt; \u2502 b     \u2502\n#&gt; \u2502 b     \u2502\n#&gt; \u2502 a     \u2502\n#&gt; \u2502 a     \u2502\n#&gt; \u2502 a     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#quite similar usecase as R function `order()`\nl = list(\n  ab = c(rep(\"a\",6),rep(\"b\",6)),\n  v4 = rep(1:4, 3),\n  v3 = rep(1:3, 4),\n  v2 = rep(1:2,6),\n  v1 = 1:12\n)\ndf = pl$DataFrame(l)\n#examples of order versus sort_by\nall.equal(\ndf$select(\npl$col(\"ab\")$sort_by(\"v4\")$alias(\"ab4\"),\npl$col(\"ab\")$sort_by(\"v3\")$alias(\"ab3\"),\npl$col(\"ab\")$sort_by(\"v2\")$alias(\"ab2\"),\npl$col(\"ab\")$sort_by(\"v1\")$alias(\"ab1\"),\npl$col(\"ab\")$sort_by(list(\"v3\",pl$col(\"v1\")),reverse=c(FALSE,TRUE))$alias(\"ab13FT\"),\npl$col(\"ab\")$sort_by(list(\"v3\",pl$col(\"v1\")),reverse=TRUE)$alias(\"ab13T\")\n)$to_list(),\nlist(\n    ab4 = l$ab[order(l$v4)],\n    ab3 = l$ab[order(l$v3)],\n    ab2 = l$ab[order(l$v2)],\n    ab1 = l$ab[order(l$v1)],\n    ab13FT= l$ab[order(l$v3,rev(l$v1))],\n    ab13T = l$ab[order(l$v3,l$v1,decreasing= TRUE)]\n)\n)\n#&gt; [1] TRUE\n </code></pre>"},{"location":"reference/Expr_sqrt/","title":"Square root","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_sqrt()\n</code></pre>"},{"location":"reference/Expr_sqrt/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the square root of the elements.</p>"},{"location":"reference/Expr_sqrt/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(a = -1:3))$select(pl$col(\"a\")$sqrt())\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a        \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 NaN      \u2502\n#&gt; \u2502 0.0      \u2502\n#&gt; \u2502 1.0      \u2502\n#&gt; \u2502 1.414214 \u2502\n#&gt; \u2502 1.732051 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_std/","title":"Get Standard Deviation","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_std/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_std(ddof = 1)\n</code></pre>"},{"location":"reference/Expr_std/#arguments","title":"Arguments","text":"<ul> <li><code>ddof</code>: integer in range <code>[0;255]</code> degrees of freedom</li> </ul>"},{"location":"reference/Expr_std/#returns","title":"Returns","text":"<p>Expr (f64 scalar)</p> <p>Get Standard Deviation</p>"},{"location":"reference/Expr_std/#examples","title":"Examples","text":"<pre><code>pl$select(pl$lit(1:5)$std())\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502          \u2502\n#&gt; \u2502 ---      \u2502\n#&gt; \u2502 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.581139 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_str/","title":"str: string related methods","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_str()\n</code></pre>"},{"location":"reference/Expr_str/#returns","title":"Returns","text":"<p>Expr</p> <p>Create an object namespace of all string related methods. See the individual method pages for full details</p>"},{"location":"reference/Expr_str/#examples","title":"Examples","text":"<pre><code>#missing\n</code></pre>"},{"location":"reference/Expr_struct/","title":"struct: related methods","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_struct()\n</code></pre>"},{"location":"reference/Expr_struct/#returns","title":"Returns","text":"<p>Expr</p> <p>Create an object namespace of all struct related methods. See the individual method pages for full details</p>"},{"location":"reference/Expr_struct/#examples","title":"Examples","text":"<pre><code>#missing\n</code></pre>"},{"location":"reference/Expr_sub/","title":"Sub","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_sub(other)\n## S3 method for class 'Expr'\ne1 - e2\n</code></pre>"},{"location":"reference/Expr_sub/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: literal or Robj which can become a literal</li> <li><code>e1</code>: lhs Expr</li> <li><code>e2</code>: rhs Expr or anything which can become a literal Expression</li> </ul>"},{"location":"reference/Expr_sub/#returns","title":"Returns","text":"<p>Exprs</p> <p>Substract</p>"},{"location":"reference/Expr_sub/#examples","title":"Examples","text":"<pre><code>#three syntaxes same result\npl$lit(5) - 10\n#&gt; polars Expr: [(5f64) - (10f64)]\npl$lit(5) - pl$lit(10)\n#&gt; polars Expr: [(5f64) - (10f64)]\npl$lit(5)$sub(pl$lit(10))\n#&gt; polars Expr: [(5f64) - (10f64)]\n-pl$lit(5)\n#&gt; polars Expr: [(0i32) - (5f64)]\n </code></pre>"},{"location":"reference/Expr_sum/","title":"Expr_sum","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_sum/#sum","title":"sum","text":""},{"location":"reference/Expr_sum/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_sum\n</code></pre>"},{"location":"reference/Expr_sum/#returns","title":"Returns","text":"<p>Expr</p> <p>Get sum value</p>"},{"location":"reference/Expr_sum/#details","title":"Details","text":"<p>Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues.</p>"},{"location":"reference/Expr_sum/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(x=c(1L,NA,2L)))$select(pl$col(\"x\")$sum())#is i32 3 (Int32 not casted)\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_tail/","title":"Tail","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_tail(n = 10)\n</code></pre>"},{"location":"reference/Expr_tail/#arguments","title":"Arguments","text":"<ul> <li><code>n</code>: numeric number of elements to select from tail</li> </ul>"},{"location":"reference/Expr_tail/#returns","title":"Returns","text":"<p>Expr</p> <p>Get the tail n elements. Similar to R tail(x)</p>"},{"location":"reference/Expr_tail/#examples","title":"Examples","text":"<pre><code>#get 3 last elements\npl$DataFrame(list(x=1:11))$select(pl$col(\"x\")$tail(3))\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 x   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 9   \u2502\n#&gt; \u2502 10  \u2502\n#&gt; \u2502 11  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_take/","title":"Take values by index.","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_take/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_take(indices)\n</code></pre>"},{"location":"reference/Expr_take/#arguments","title":"Arguments","text":"<ul> <li><code>indices</code>: R scalar/vector or Series, or Expr that leads to a UInt32 dtyped Series.</li> </ul>"},{"location":"reference/Expr_take/#returns","title":"Returns","text":"<p>Expr</p> <p>Take values by index.</p>"},{"location":"reference/Expr_take/#details","title":"Details","text":"<p>similar to R indexing syntax e.g. <code>letters[c(1,3,5)]</code>, however as an expression, not as eager computation exceeding</p>"},{"location":"reference/Expr_take/#examples","title":"Examples","text":"<pre><code>pl$select( pl$lit(0:10)$take(c(1,8,0,7)))\n#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 8   \u2502\n#&gt; \u2502 0   \u2502\n#&gt; \u2502 7   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_take_every/","title":"Take every n'th element","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_take_every/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_take_every(n)\n</code></pre>"},{"location":"reference/Expr_take_every/#arguments","title":"Arguments","text":"<ul> <li><code>n</code>: positive integerish value</li> </ul>"},{"location":"reference/Expr_take_every/#returns","title":"Returns","text":"<p>Expr</p> <p>Take every nth value in the Series and return as a new Series.</p>"},{"location":"reference/Expr_take_every/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(a=0:24))$select(pl$col(\"a\")$take_every(6))\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0   \u2502\n#&gt; \u2502 6   \u2502\n#&gt; \u2502 12  \u2502\n#&gt; \u2502 18  \u2502\n#&gt; \u2502 24  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_tan/","title":"Expr_tan","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_tan/#tan","title":"Tan","text":""},{"location":"reference/Expr_tan/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_tan\n</code></pre>"},{"location":"reference/Expr_tan/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the element-wise value for the tangent.</p>"},{"location":"reference/Expr_tan/#details","title":"Details","text":"<p>Evaluated Series has dtype Float64</p>"},{"location":"reference/Expr_tan/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(a=c(0,pi/2,pi,NA_real_))$select(pl$col(\"a\")$tan())\n#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a           \u2502\n#&gt; \u2502 ---         \u2502\n#&gt; \u2502 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0.0         \u2502\n#&gt; \u2502 1.6331e16   \u2502\n#&gt; \u2502 -1.2246e-16 \u2502\n#&gt; \u2502 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_tanh/","title":"Expr_tanh","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_tanh/#tanh","title":"Tanh","text":""},{"location":"reference/Expr_tanh/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_tanh\n</code></pre>"},{"location":"reference/Expr_tanh/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the element-wise value for the hyperbolic tangent.</p>"},{"location":"reference/Expr_tanh/#details","title":"Details","text":"<p>Evaluated Series has dtype Float64</p>"},{"location":"reference/Expr_tanh/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(a=c(-1,atanh(0.5),0,1,NA_real_))$select(pl$col(\"a\")$tanh())\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 f64       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -0.761594 \u2502\n#&gt; \u2502 0.5       \u2502\n#&gt; \u2502 0.0       \u2502\n#&gt; \u2502 0.761594  \u2502\n#&gt; \u2502 null      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_to_physical/","title":"Expr_to_physical","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_to_physical/#to-physical-representation","title":"To physical representation","text":""},{"location":"reference/Expr_to_physical/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_to_physical\n</code></pre>"},{"location":"reference/Expr_to_physical/#returns","title":"Returns","text":"<p>Expr</p> <p>expression request underlying physical base representation</p>"},{"location":"reference/Expr_to_physical/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(\nlist(vals = c(\"a\", \"x\", NA, \"a\"))\n)$with_columns(\npl$col(\"vals\")$cast(pl$Categorical),\npl$col(\"vals\")\n$cast(pl$Categorical)\n$to_physical()\n$alias(\"vals_physical\")\n)\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 vals \u2506 vals_physical \u2502\n#&gt; \u2502 ---  \u2506 ---           \u2502\n#&gt; \u2502 cat  \u2506 u32           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a    \u2506 0             \u2502\n#&gt; \u2502 x    \u2506 1             \u2502\n#&gt; \u2502 null \u2506 null          \u2502\n#&gt; \u2502 a    \u2506 0             \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_to_r/","title":"to_r: for debuging an expression","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_to_r/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_to_r(df = NULL, i = 0)\n</code></pre>"},{"location":"reference/Expr_to_r/#arguments","title":"Arguments","text":"<ul> <li><code>df</code>: otherwise a DataFrame to evaluate in, default NULL is an empty DataFrame</li> <li><code>i</code>: numeric column to extract zero index default first, expression could generate multiple columns</li> </ul>"},{"location":"reference/Expr_to_r/#returns","title":"Returns","text":"<p>R object</p> <p>debug an expression by evaluating in empty DataFrame and return first series to R</p>"},{"location":"reference/Expr_to_r/#examples","title":"Examples","text":"<pre><code>pl$lit(1:3)$to_r()\n#&gt; [1] 1 2 3\npl$expr_to_r(pl$lit(1:3))\n#&gt; [1] 1 2 3\npl$expr_to_r(1:3)\n#&gt; [1] 1 2 3\n </code></pre>"},{"location":"reference/Expr_to_struct/","title":"to_struct","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_to_struct()\n</code></pre>"},{"location":"reference/Expr_to_struct/#returns","title":"Returns","text":"<p>Expr</p> <p>pass expr to pl$struct</p>"},{"location":"reference/Expr_to_struct/#examples","title":"Examples","text":"<pre><code>e = pl$all()$to_struct()$alias(\"my_struct\")\nprint(e)\n#&gt; polars Expr: *.as_struct().alias(\"my_struct\")\npl$DataFrame(iris)$select(e)\n#&gt; shape: (150, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 my_struct                     \u2502\n#&gt; \u2502 ---                           \u2502\n#&gt; \u2502 struct[5]                     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {5.1,3.5,1.4,0.2,\"setosa\"}    \u2502\n#&gt; \u2502 {4.9,3.0,1.4,0.2,\"setosa\"}    \u2502\n#&gt; \u2502 {4.7,3.2,1.3,0.2,\"setosa\"}    \u2502\n#&gt; \u2502 {4.6,3.1,1.5,0.2,\"setosa\"}    \u2502\n#&gt; \u2502 ...                           \u2502\n#&gt; \u2502 {6.3,2.5,5.0,1.9,\"virginica\"} \u2502\n#&gt; \u2502 {6.5,3.0,5.2,2.0,\"virginica\"} \u2502\n#&gt; \u2502 {6.2,3.4,5.4,2.3,\"virginica\"} \u2502\n#&gt; \u2502 {5.9,3.0,5.1,1.8,\"virginica\"} \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_top_k/","title":"Top k values","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_top_k/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_top_k(k, reverse = FALSE)\n</code></pre>"},{"location":"reference/Expr_top_k/#arguments","title":"Arguments","text":"<ul> <li><code>k</code>: numeric k top values to get</li> <li><code>reverse</code>: bool if true then k smallest values</li> </ul>"},{"location":"reference/Expr_top_k/#returns","title":"Returns","text":"<p>Expr</p> <p>Return the <code>k</code> largest elements. If 'reverse=True` the smallest elements will be given.</p>"},{"location":"reference/Expr_top_k/#details","title":"Details","text":"<p>This has time complexity: <code>O(n + k \\\\log{}n - \\frac{k}{2})</code></p> <p>See Inf,NaN,NULL,Null/NA translations here <code>docs_translations</code></p>"},{"location":"reference/Expr_top_k/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(\n  a = c(6, 1, 0, NA, Inf, NaN)\n))$select(pl$col(\"a\")$top_k(5))\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 NaN \u2502\n#&gt; \u2502 inf \u2502\n#&gt; \u2502 6.0 \u2502\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2502 0.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_unique/","title":"get unqie values","text":"<p>Source: R/expr__expr.R</p> <pre><code>Expr_unique(maintain_order = FALSE)\n</code></pre>"},{"location":"reference/Expr_unique/#arguments","title":"Arguments","text":"<ul> <li><code>maintain_order</code>: bool, if TRUE guranteed same order, if FALSE maybe</li> </ul>"},{"location":"reference/Expr_unique/#returns","title":"Returns","text":"<p>Expr</p> <p>Get unique values of this expression. Similar to R unique()</p>"},{"location":"reference/Expr_unique/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(iris)$select(pl$col(\"Species\")$unique())\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Species    \u2502\n#&gt; \u2502 ---        \u2502\n#&gt; \u2502 cat        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 setosa     \u2502\n#&gt; \u2502 versicolor \u2502\n#&gt; \u2502 virginica  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_unique_counts/","title":"Expr_unique_counts","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_unique_counts/#value-counts","title":"Value counts","text":""},{"location":"reference/Expr_unique_counts/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_unique_counts\n</code></pre>"},{"location":"reference/Expr_unique_counts/#returns","title":"Returns","text":"<p>Expr</p> <p>Return a count of the unique values in the order of appearance. This method differs from <code>value_counts</code> in that it does not return the values, only the counts and might be faster</p>"},{"location":"reference/Expr_unique_counts/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(iris)$select(pl$col(\"Species\")$unique_counts())\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Species \u2502\n#&gt; \u2502 ---     \u2502\n#&gt; \u2502 u32     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 50      \u2502\n#&gt; \u2502 50      \u2502\n#&gt; \u2502 50      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_upper_lower_bound/","title":"Expr_upper_lower_bound","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_upper_lower_bound/#upper-bound","title":"Upper bound","text":""},{"location":"reference/Expr_upper_lower_bound/#format","title":"Format","text":"<p>Method</p> <p>Method</p> <pre><code>Expr_upper_bound\nExpr_lower_bound\n</code></pre>"},{"location":"reference/Expr_upper_lower_bound/#returns","title":"Returns","text":"<p>Expr</p> <p>Calculate the upper/lower bound. Returns a unit Series with the highest value possible for the dtype of this expression.</p>"},{"location":"reference/Expr_upper_lower_bound/#details","title":"Details","text":"<p>Notice lower bound i32 exported to R is NA_integer_ for now</p>"},{"location":"reference/Expr_upper_lower_bound/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(i32=1L,f64=1)$select(pl$all()$upper_bound())\n#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 i32        \u2506 f64 \u2502\n#&gt; \u2502 ---        \u2506 --- \u2502\n#&gt; \u2502 i32        \u2506 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2147483647 \u2506 inf \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\npl$DataFrame(i32=1L,f64=1)$select(pl$all()$lower_bound())\n#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 i32         \u2506 f64  \u2502\n#&gt; \u2502 ---         \u2506 ---  \u2502\n#&gt; \u2502 i32         \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 -2147483648 \u2506 -inf \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_value_counts/","title":"Value counts","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_value_counts/#format","title":"Format","text":"<p>Method</p> <pre><code>Expr_value_counts(multithreaded = FALSE, sort = FALSE)\n</code></pre>"},{"location":"reference/Expr_value_counts/#arguments","title":"Arguments","text":"<ul> <li><code>multithreaded</code>: Better to turn this off in the aggregation context, as it can lead to contention.</li> <li><code>sort</code>: Ensure the output is sorted from most values to least.</li> </ul>"},{"location":"reference/Expr_value_counts/#returns","title":"Returns","text":"<p>Expr</p> <p>Count all unique values and create a struct mapping value to count.</p>"},{"location":"reference/Expr_value_counts/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(iris)$select(pl$col(\"Species\")$value_counts())\ndf\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Species           \u2502\n#&gt; \u2502 ---               \u2502\n#&gt; \u2502 struct[2]         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {\"versicolor\",50} \u2502\n#&gt; \u2502 {\"virginica\",50}  \u2502\n#&gt; \u2502 {\"setosa\",50}     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$unnest()$to_data_frame() #recommended to unnest structs before converting to R\n#&gt;      Species counts\n#&gt; 1 versicolor     50\n#&gt; 2  virginica     50\n#&gt; 3     setosa     50\n </code></pre>"},{"location":"reference/Expr_var/","title":"Get Variance","text":"<p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_var/#format","title":"Format","text":"<p>a method</p> <pre><code>Expr_var(ddof = 1)\n</code></pre>"},{"location":"reference/Expr_var/#arguments","title":"Arguments","text":"<ul> <li><code>ddof</code>: integer in range <code>[0;255]</code> degrees of freedom</li> </ul>"},{"location":"reference/Expr_var/#returns","title":"Returns","text":"<p>Expr (f64 scalar)</p> <p>Get Variance</p>"},{"location":"reference/Expr_var/#examples","title":"Examples","text":"<pre><code>pl$select(pl$lit(1:5)$var())\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2.5 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Expr_xor/","title":"Expr_xor","text":"<p>data</p> <p>Source: R/expr__expr.R</p>"},{"location":"reference/Expr_xor/#xor","title":"Xor","text":""},{"location":"reference/Expr_xor/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Expr_xor(other)\n</code></pre>"},{"location":"reference/Expr_xor/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: literal or Robj which can become a literal</li> </ul>"},{"location":"reference/Expr_xor/#returns","title":"Returns","text":"<p>Expr</p> <p>combine to boolean expresions with XOR</p>"},{"location":"reference/Expr_xor/#examples","title":"Examples","text":"<pre><code>pl$lit(TRUE)$xor(pl$lit(FALSE))\n#&gt; polars Expr: [(true) ^ (false)]\n </code></pre>"},{"location":"reference/GroupBy_agg/","title":"GroupBy Aggregate","text":"<p>Source: R/groupby.R</p> <pre><code>GroupBy_agg(...)\n</code></pre>"},{"location":"reference/GroupBy_agg/#arguments","title":"Arguments","text":"<ul> <li><code>...</code>: exprs to aggregate</li> </ul>"},{"location":"reference/GroupBy_agg/#returns","title":"Returns","text":"<p>aggregated DataFrame</p> <p>Aggregatete a DataFrame over a groupby</p>"},{"location":"reference/GroupBy_agg/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(\nlist(\n    foo = c(\"one\", \"two\", \"two\", \"one\", \"two\"),\n    bar = c(5, 3, 2, 4, 1)\n)\n)$groupby(\n\"foo\"\n)$agg(\npl$col(\"bar\")$sum()$alias(\"bar_sum\"),\npl$col(\"bar\")$mean()$alias(\"bar_tail_sum\")\n)\n#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar_sum \u2506 bar_tail_sum \u2502\n#&gt; \u2502 --- \u2506 ---     \u2506 ---          \u2502\n#&gt; \u2502 str \u2506 f64     \u2506 f64          \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 two \u2506 6.0     \u2506 2.0          \u2502\n#&gt; \u2502 one \u2506 9.0     \u2506 4.5          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/GroupBy_first/","title":"GroupBy First","text":"<p>Source: R/groupby.R</p> <pre><code>GroupBy_first()\n</code></pre>"},{"location":"reference/GroupBy_first/#returns","title":"Returns","text":"<p>aggregated DataFrame</p> <p>Reduce the groups to the first value.</p>"},{"location":"reference/GroupBy_first/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n        a = c(1, 2, 2, 3, 4, 5),\n        b = c(0.5, 0.5, 4, 10, 13, 14),\n        c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n        d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$groupby(\"d\", maintain_order=TRUE)$first()\n#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a   \u2506 b    \u2506 c     \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---  \u2506 ---   \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 1.0 \u2506 0.5  \u2506 true  \u2502\n#&gt; \u2502 Orange \u2506 2.0 \u2506 0.5  \u2506 true  \u2502\n#&gt; \u2502 Banana \u2506 4.0 \u2506 13.0 \u2506 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/GroupBy_last/","title":"GroupBy Last","text":"<p>Source: R/groupby.R</p> <pre><code>GroupBy_last()\n</code></pre>"},{"location":"reference/GroupBy_last/#returns","title":"Returns","text":"<p>aggregated DataFrame</p> <p>Reduce the groups to the last value.</p>"},{"location":"reference/GroupBy_last/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n        a = c(1, 2, 2, 3, 4, 5),\n        b = c(0.5, 0.5, 4, 10, 13, 14),\n        c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n        d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$groupby(\"d\", maintain_order=TRUE)$last()\n#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a   \u2506 b    \u2506 c     \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---  \u2506 ---   \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 3.0 \u2506 10.0 \u2506 false \u2502\n#&gt; \u2502 Orange \u2506 2.0 \u2506 0.5  \u2506 true  \u2502\n#&gt; \u2502 Banana \u2506 5.0 \u2506 14.0 \u2506 true  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/GroupBy_max/","title":"GroupBy Max","text":"<p>Source: R/groupby.R</p> <pre><code>GroupBy_max()\n</code></pre>"},{"location":"reference/GroupBy_max/#returns","title":"Returns","text":"<p>aggregated DataFrame</p> <p>Reduce the groups to the maximum value.</p>"},{"location":"reference/GroupBy_max/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n        a = c(1, 2, 2, 3, 4, 5),\n        b = c(0.5, 0.5, 4, 10, 13, 14),\n        c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n        d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$groupby(\"d\", maintain_order=TRUE)$max()\n#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a   \u2506 b    \u2506 c    \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64  \u2506 bool \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 3.0 \u2506 10.0 \u2506 true \u2502\n#&gt; \u2502 Orange \u2506 2.0 \u2506 0.5  \u2506 true \u2502\n#&gt; \u2502 Banana \u2506 5.0 \u2506 14.0 \u2506 true \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/GroupBy_mean/","title":"GroupBy Mean","text":"<p>Source: R/groupby.R</p> <pre><code>GroupBy_mean()\n</code></pre>"},{"location":"reference/GroupBy_mean/#returns","title":"Returns","text":"<p>aggregated DataFrame</p> <p>Reduce the groups to the mean value.</p>"},{"location":"reference/GroupBy_mean/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n        a = c(1, 2, 2, 3, 4, 5),\n        b = c(0.5, 0.5, 4, 10, 13, 14),\n        c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n        d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$groupby(\"d\", maintain_order=TRUE)$mean()\n#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a   \u2506 b        \u2506 c        \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---      \u2506 ---      \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 2.0 \u2506 4.833333 \u2506 0.666667 \u2502\n#&gt; \u2502 Orange \u2506 2.0 \u2506 0.5      \u2506 1.0      \u2502\n#&gt; \u2502 Banana \u2506 4.5 \u2506 13.5     \u2506 0.5      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/GroupBy_median/","title":"GroupBy Median","text":"<p>Source: R/groupby.R</p> <pre><code>GroupBy_median()\n</code></pre>"},{"location":"reference/GroupBy_median/#returns","title":"Returns","text":"<p>aggregated DataFrame</p> <p>Reduce the groups to the median value.</p>"},{"location":"reference/GroupBy_median/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n        a = c(1, 2, 2, 3, 4, 5),\n        b = c(0.5, 0.5, 4, 10, 13, 14),\n        c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n        d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$groupby(\"d\", maintain_order=TRUE)$median()\n#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a   \u2506 b    \u2506 c    \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64  \u2506 bool \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 2.0 \u2506 4.0  \u2506 null \u2502\n#&gt; \u2502 Orange \u2506 2.0 \u2506 0.5  \u2506 null \u2502\n#&gt; \u2502 Banana \u2506 4.5 \u2506 13.5 \u2506 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/GroupBy_min/","title":"GroupBy Min","text":"<p>Source: R/groupby.R</p> <pre><code>GroupBy_min()\n</code></pre>"},{"location":"reference/GroupBy_min/#returns","title":"Returns","text":"<p>aggregated DataFrame</p> <p>Reduce the groups to the minimum value.</p>"},{"location":"reference/GroupBy_min/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n        a = c(1, 2, 2, 3, 4, 5),\n        b = c(0.5, 0.5, 4, 10, 13, 14),\n        c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n        d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$groupby(\"d\", maintain_order=TRUE)$min()\n#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a   \u2506 b    \u2506 c     \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---  \u2506 ---   \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64  \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 1.0 \u2506 0.5  \u2506 false \u2502\n#&gt; \u2502 Orange \u2506 2.0 \u2506 0.5  \u2506 true  \u2502\n#&gt; \u2502 Banana \u2506 4.0 \u2506 13.0 \u2506 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/GroupBy_null_count/","title":"GroupBy null count","text":"<p>Source: R/groupby.R</p> <pre><code>GroupBy_null_count()\n</code></pre>"},{"location":"reference/GroupBy_null_count/#returns","title":"Returns","text":"<p>DataFrame</p> <p>Create a new DataFrame that shows the null counts per column.</p>"},{"location":"reference/GroupBy_null_count/#examples","title":"Examples","text":"<pre><code>x = mtcars\nx[1:10, 3:5] = NA\npl$DataFrame(x)$groupby(\"cyl\")$null_count()\n#&gt; shape: (3, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 mpg \u2506 disp \u2506 hp  \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---  \u2506 --- \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64 \u2506 u32 \u2506 u32  \u2506 u32 \u2506     \u2506 u32 \u2506 u32 \u2506 u32  \u2506 u32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 4.0 \u2506 0   \u2506 3    \u2506 3   \u2506 ... \u2506 0   \u2506 0   \u2506 0    \u2506 0    \u2502\n#&gt; \u2502 6.0 \u2506 0   \u2506 5    \u2506 5   \u2506 ... \u2506 0   \u2506 0   \u2506 0    \u2506 0    \u2502\n#&gt; \u2502 8.0 \u2506 0   \u2506 2    \u2506 2   \u2506 ... \u2506 0   \u2506 0   \u2506 0    \u2506 0    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/GroupBy_quantile/","title":"Quantile","text":"<p>Source: R/groupby.R</p> <pre><code>GroupBy_quantile(quantile, interpolation = \"nearest\")\n</code></pre>"},{"location":"reference/GroupBy_quantile/#arguments","title":"Arguments","text":"<ul> <li><code>quantile</code>: numeric Quantile between 0.0 and 1.0.</li> <li><code>interpolation</code>: string Interpolation method: \"nearest\", \"higher\", \"lower\", \"midpoint\", or \"linear\".</li> </ul>"},{"location":"reference/GroupBy_quantile/#returns","title":"Returns","text":"<p>GroupBy</p> <p>Aggregate the columns in the DataFrame to their quantile value.</p>"},{"location":"reference/GroupBy_quantile/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$lazy()$quantile(.4)$collect()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 17.8 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/GroupBy_shift/","title":"Shift","text":"<p>Source: R/groupby.R</p> <pre><code>GroupBy_shift(periods = 1)\n</code></pre>"},{"location":"reference/GroupBy_shift/#arguments","title":"Arguments","text":"<ul> <li><code>periods</code>: integer Number of periods to shift (may be negative).</li> </ul>"},{"location":"reference/GroupBy_shift/#returns","title":"Returns","text":"<p>GroupBy</p> <p>Shift the values by a given period.</p>"},{"location":"reference/GroupBy_shift/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$groupby(\"cyl\")$shift(2)\n#&gt; shape: (3, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 mpg        \u2506 disp       \u2506 hp         \u2506 ... \u2506 vs        \u2506 am        \u2506 gear      \u2506 carb      \u2502\n#&gt; \u2502 --- \u2506 ---        \u2506 ---        \u2506 ---        \u2506     \u2506 ---       \u2506 ---       \u2506 ---       \u2506 ---       \u2502\n#&gt; \u2502 f64 \u2506 list[f64]  \u2506 list[f64]  \u2506 list[f64]  \u2506     \u2506 list[f64] \u2506 list[f64] \u2506 list[f64] \u2506 list[f64] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0 \u2506 [null,     \u2506 [null,     \u2506 [null,     \u2506 ... \u2506 [null,    \u2506 [null,    \u2506 [null,    \u2506 [null,    \u2502\n#&gt; \u2502     \u2506 null, ...  \u2506 null, ...  \u2506 null, ...  \u2506     \u2506 null, ... \u2506 null, ... \u2506 null, ... \u2506 null, ... \u2502\n#&gt; \u2502     \u2506 19.2]      \u2506 167.6]     \u2506 123.0]     \u2506     \u2506 1.0]      \u2506 0.0]      \u2506 4.0]      \u2506 4.0]      \u2502\n#&gt; \u2502 8.0 \u2506 [null,     \u2506 [null,     \u2506 [null,     \u2506 ... \u2506 [null,    \u2506 [null,    \u2506 [null,    \u2506 [null,    \u2502\n#&gt; \u2502     \u2506 null, ...  \u2506 null, ...  \u2506 null, ...  \u2506     \u2506 null, ... \u2506 null, ... \u2506 null, ... \u2506 null, ... \u2502\n#&gt; \u2502     \u2506 19.2]      \u2506 400.0]     \u2506 175.0]     \u2506     \u2506 0.0]      \u2506 0.0]      \u2506 3.0]      \u2506 2.0]      \u2502\n#&gt; \u2502 4.0 \u2506 [null,     \u2506 [null,     \u2506 [null,     \u2506 ... \u2506 [null,    \u2506 [null,    \u2506 [null,    \u2506 [null,    \u2502\n#&gt; \u2502     \u2506 null, ...  \u2506 null, ...  \u2506 null, ...  \u2506     \u2506 null, ... \u2506 null, ... \u2506 null, ... \u2506 null, ... \u2502\n#&gt; \u2502     \u2506 26.0]      \u2506 120.3]     \u2506 91.0]      \u2506     \u2506 0.0]      \u2506 1.0]      \u2506 5.0]      \u2506 2.0]      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/GroupBy_shift_and_fill/","title":"Shift and fill","text":"<p>Source: R/groupby.R</p> <pre><code>GroupBy_shift_and_fill(fill_value, periods = 1)\n</code></pre>"},{"location":"reference/GroupBy_shift_and_fill/#arguments","title":"Arguments","text":"<ul> <li><code>fill_value</code>: fill None values with the result of this expression.</li> <li><code>periods</code>: integer Number of periods to shift (may be negative).</li> </ul>"},{"location":"reference/GroupBy_shift_and_fill/#returns","title":"Returns","text":"<p>GroupBy</p> <p>Shift and fill the values by a given period.</p>"},{"location":"reference/GroupBy_shift_and_fill/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$groupby(\"cyl\")$shift_and_fill(99, 1)\n#&gt; shape: (3, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 cyl \u2506 mpg        \u2506 disp       \u2506 hp         \u2506 ... \u2506 vs        \u2506 am        \u2506 gear      \u2506 carb      \u2502\n#&gt; \u2502 --- \u2506 ---        \u2506 ---        \u2506 ---        \u2506     \u2506 ---       \u2506 ---       \u2506 ---       \u2506 ---       \u2502\n#&gt; \u2502 f64 \u2506 list[f64]  \u2506 list[f64]  \u2506 list[f64]  \u2506     \u2506 list[f64] \u2506 list[f64] \u2506 list[f64] \u2506 list[f64] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.0 \u2506 [99.0,     \u2506 [99.0,     \u2506 [99.0,     \u2506 ... \u2506 [99.0,    \u2506 [99.0,    \u2506 [99.0,    \u2506 [99.0,    \u2502\n#&gt; \u2502     \u2506 21.0, ...  \u2506 160.0, ... \u2506 110.0, ... \u2506     \u2506 0.0, ...  \u2506 1.0, ...  \u2506 4.0, ...  \u2506 4.0, ...  \u2502\n#&gt; \u2502     \u2506 17.8]      \u2506 167.6]     \u2506 123.0]     \u2506     \u2506 1.0]      \u2506 0.0]      \u2506 4.0]      \u2506 4.0]      \u2502\n#&gt; \u2502 8.0 \u2506 [99.0,     \u2506 [99.0,     \u2506 [99.0,     \u2506 ... \u2506 [99.0,    \u2506 [99.0,    \u2506 [99.0,    \u2506 [99.0,    \u2502\n#&gt; \u2502     \u2506 18.7, ...  \u2506 360.0, ... \u2506 175.0, ... \u2506     \u2506 0.0, ...  \u2506 0.0, ...  \u2506 3.0, ...  \u2506 2.0, ...  \u2502\n#&gt; \u2502     \u2506 15.8]      \u2506 351.0]     \u2506 264.0]     \u2506     \u2506 0.0]      \u2506 1.0]      \u2506 5.0]      \u2506 4.0]      \u2502\n#&gt; \u2502 4.0 \u2506 [99.0,     \u2506 [99.0,     \u2506 [99.0,     \u2506 ... \u2506 [99.0,    \u2506 [99.0,    \u2506 [99.0,    \u2506 [99.0,    \u2502\n#&gt; \u2502     \u2506 22.8, ...  \u2506 108.0, ... \u2506 93.0, ...  \u2506     \u2506 1.0, ...  \u2506 1.0, ...  \u2506 4.0, ...  \u2506 1.0, ...  \u2502\n#&gt; \u2502     \u2506 30.4]      \u2506 95.1]      \u2506 113.0]     \u2506     \u2506 1.0]      \u2506 1.0]      \u2506 5.0]      \u2506 2.0]      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/GroupBy_std/","title":"GroupBy Std","text":"<p>Source: R/groupby.R</p> <pre><code>GroupBy_std()\n</code></pre>"},{"location":"reference/GroupBy_std/#returns","title":"Returns","text":"<p>aggregated DataFrame</p> <p>Reduce the groups to the standard deviation value.</p>"},{"location":"reference/GroupBy_std/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n        a = c(1, 2, 2, 3, 4, 5),\n        b = c(0.5, 0.5, 4, 10, 13, 14),\n        c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n        d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$groupby(\"d\", maintain_order=TRUE)$std()\n#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a        \u2506 b        \u2506 c        \u2502\n#&gt; \u2502 ---    \u2506 ---      \u2506 ---      \u2506 ---      \u2502\n#&gt; \u2502 str    \u2506 f64      \u2506 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 1.0      \u2506 4.804512 \u2506 0.57735  \u2502\n#&gt; \u2502 Orange \u2506 0.0      \u2506 0.0      \u2506 0.0      \u2502\n#&gt; \u2502 Banana \u2506 0.707107 \u2506 0.707107 \u2506 0.707107 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/GroupBy_sum/","title":"GroupBy Sum","text":"<p>Source: R/groupby.R</p> <pre><code>GroupBy_sum()\n</code></pre>"},{"location":"reference/GroupBy_sum/#returns","title":"Returns","text":"<p>aggregated DataFrame</p> <p>Reduce the groups to the sum value.</p>"},{"location":"reference/GroupBy_sum/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n        a = c(1, 2, 2, 3, 4, 5),\n        b = c(0.5, 0.5, 4, 10, 13, 14),\n        c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n        d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$groupby(\"d\", maintain_order=TRUE)$sum()\n#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a   \u2506 b    \u2506 c   \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---  \u2506 --- \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64  \u2506 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 6.0 \u2506 14.5 \u2506 2   \u2502\n#&gt; \u2502 Orange \u2506 2.0 \u2506 0.5  \u2506 1   \u2502\n#&gt; \u2502 Banana \u2506 9.0 \u2506 27.0 \u2506 1   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/GroupBy_to_data_frame/","title":"convert to data.frame","text":"<p>Source: R/groupby.R</p> <pre><code>GroupBy_to_data_frame(...)\n</code></pre>"},{"location":"reference/GroupBy_to_data_frame/#arguments","title":"Arguments","text":"<ul> <li><code>...</code>: any opt param passed to R as.data.frame</li> </ul>"},{"location":"reference/GroupBy_to_data_frame/#returns","title":"Returns","text":"<p>R data.frame</p> <p>convert to data.frame</p>"},{"location":"reference/GroupBy_to_data_frame/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(iris)$to_data_frame() #R-polars back and forth\n#&gt;     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species\n#&gt; 1            5.1         3.5          1.4         0.2     setosa\n#&gt; 2            4.9         3.0          1.4         0.2     setosa\n#&gt; 3            4.7         3.2          1.3         0.2     setosa\n#&gt; 4            4.6         3.1          1.5         0.2     setosa\n#&gt; 5            5.0         3.6          1.4         0.2     setosa\n#&gt; 6            5.4         3.9          1.7         0.4     setosa\n#&gt; 7            4.6         3.4          1.4         0.3     setosa\n#&gt; 8            5.0         3.4          1.5         0.2     setosa\n#&gt; 9            4.4         2.9          1.4         0.2     setosa\n#&gt; 10           4.9         3.1          1.5         0.1     setosa\n#&gt; 11           5.4         3.7          1.5         0.2     setosa\n#&gt; 12           4.8         3.4          1.6         0.2     setosa\n#&gt; 13           4.8         3.0          1.4         0.1     setosa\n#&gt; 14           4.3         3.0          1.1         0.1     setosa\n#&gt; 15           5.8         4.0          1.2         0.2     setosa\n#&gt; 16           5.7         4.4          1.5         0.4     setosa\n#&gt; 17           5.4         3.9          1.3         0.4     setosa\n#&gt; 18           5.1         3.5          1.4         0.3     setosa\n#&gt; 19           5.7         3.8          1.7         0.3     setosa\n#&gt; 20           5.1         3.8          1.5         0.3     setosa\n#&gt; 21           5.4         3.4          1.7         0.2     setosa\n#&gt; 22           5.1         3.7          1.5         0.4     setosa\n#&gt; 23           4.6         3.6          1.0         0.2     setosa\n#&gt; 24           5.1         3.3          1.7         0.5     setosa\n#&gt; 25           4.8         3.4          1.9         0.2     setosa\n#&gt; 26           5.0         3.0          1.6         0.2     setosa\n#&gt; 27           5.0         3.4          1.6         0.4     setosa\n#&gt; 28           5.2         3.5          1.5         0.2     setosa\n#&gt; 29           5.2         3.4          1.4         0.2     setosa\n#&gt; 30           4.7         3.2          1.6         0.2     setosa\n#&gt; 31           4.8         3.1          1.6         0.2     setosa\n#&gt; 32           5.4         3.4          1.5         0.4     setosa\n#&gt; 33           5.2         4.1          1.5         0.1     setosa\n#&gt; 34           5.5         4.2          1.4         0.2     setosa\n#&gt; 35           4.9         3.1          1.5         0.2     setosa\n#&gt; 36           5.0         3.2          1.2         0.2     setosa\n#&gt; 37           5.5         3.5          1.3         0.2     setosa\n#&gt; 38           4.9         3.6          1.4         0.1     setosa\n#&gt; 39           4.4         3.0          1.3         0.2     setosa\n#&gt; 40           5.1         3.4          1.5         0.2     setosa\n#&gt; 41           5.0         3.5          1.3         0.3     setosa\n#&gt; 42           4.5         2.3          1.3         0.3     setosa\n#&gt; 43           4.4         3.2          1.3         0.2     setosa\n#&gt; 44           5.0         3.5          1.6         0.6     setosa\n#&gt; 45           5.1         3.8          1.9         0.4     setosa\n#&gt; 46           4.8         3.0          1.4         0.3     setosa\n#&gt; 47           5.1         3.8          1.6         0.2     setosa\n#&gt; 48           4.6         3.2          1.4         0.2     setosa\n#&gt; 49           5.3         3.7          1.5         0.2     setosa\n#&gt; 50           5.0         3.3          1.4         0.2     setosa\n#&gt; 51           7.0         3.2          4.7         1.4 versicolor\n#&gt; 52           6.4         3.2          4.5         1.5 versicolor\n#&gt; 53           6.9         3.1          4.9         1.5 versicolor\n#&gt; 54           5.5         2.3          4.0         1.3 versicolor\n#&gt; 55           6.5         2.8          4.6         1.5 versicolor\n#&gt; 56           5.7         2.8          4.5         1.3 versicolor\n#&gt; 57           6.3         3.3          4.7         1.6 versicolor\n#&gt; 58           4.9         2.4          3.3         1.0 versicolor\n#&gt; 59           6.6         2.9          4.6         1.3 versicolor\n#&gt; 60           5.2         2.7          3.9         1.4 versicolor\n#&gt; 61           5.0         2.0          3.5         1.0 versicolor\n#&gt; 62           5.9         3.0          4.2         1.5 versicolor\n#&gt; 63           6.0         2.2          4.0         1.0 versicolor\n#&gt; 64           6.1         2.9          4.7         1.4 versicolor\n#&gt; 65           5.6         2.9          3.6         1.3 versicolor\n#&gt; 66           6.7         3.1          4.4         1.4 versicolor\n#&gt; 67           5.6         3.0          4.5         1.5 versicolor\n#&gt; 68           5.8         2.7          4.1         1.0 versicolor\n#&gt; 69           6.2         2.2          4.5         1.5 versicolor\n#&gt; 70           5.6         2.5          3.9         1.1 versicolor\n#&gt; 71           5.9         3.2          4.8         1.8 versicolor\n#&gt; 72           6.1         2.8          4.0         1.3 versicolor\n#&gt; 73           6.3         2.5          4.9         1.5 versicolor\n#&gt; 74           6.1         2.8          4.7         1.2 versicolor\n#&gt; 75           6.4         2.9          4.3         1.3 versicolor\n#&gt; 76           6.6         3.0          4.4         1.4 versicolor\n#&gt; 77           6.8         2.8          4.8         1.4 versicolor\n#&gt; 78           6.7         3.0          5.0         1.7 versicolor\n#&gt; 79           6.0         2.9          4.5         1.5 versicolor\n#&gt; 80           5.7         2.6          3.5         1.0 versicolor\n#&gt; 81           5.5         2.4          3.8         1.1 versicolor\n#&gt; 82           5.5         2.4          3.7         1.0 versicolor\n#&gt; 83           5.8         2.7          3.9         1.2 versicolor\n#&gt; 84           6.0         2.7          5.1         1.6 versicolor\n#&gt; 85           5.4         3.0          4.5         1.5 versicolor\n#&gt; 86           6.0         3.4          4.5         1.6 versicolor\n#&gt; 87           6.7         3.1          4.7         1.5 versicolor\n#&gt; 88           6.3         2.3          4.4         1.3 versicolor\n#&gt; 89           5.6         3.0          4.1         1.3 versicolor\n#&gt; 90           5.5         2.5          4.0         1.3 versicolor\n#&gt; 91           5.5         2.6          4.4         1.2 versicolor\n#&gt; 92           6.1         3.0          4.6         1.4 versicolor\n#&gt; 93           5.8         2.6          4.0         1.2 versicolor\n#&gt; 94           5.0         2.3          3.3         1.0 versicolor\n#&gt; 95           5.6         2.7          4.2         1.3 versicolor\n#&gt; 96           5.7         3.0          4.2         1.2 versicolor\n#&gt; 97           5.7         2.9          4.2         1.3 versicolor\n#&gt; 98           6.2         2.9          4.3         1.3 versicolor\n#&gt; 99           5.1         2.5          3.0         1.1 versicolor\n#&gt; 100          5.7         2.8          4.1         1.3 versicolor\n#&gt; 101          6.3         3.3          6.0         2.5  virginica\n#&gt; 102          5.8         2.7          5.1         1.9  virginica\n#&gt; 103          7.1         3.0          5.9         2.1  virginica\n#&gt; 104          6.3         2.9          5.6         1.8  virginica\n#&gt; 105          6.5         3.0          5.8         2.2  virginica\n#&gt; 106          7.6         3.0          6.6         2.1  virginica\n#&gt; 107          4.9         2.5          4.5         1.7  virginica\n#&gt; 108          7.3         2.9          6.3         1.8  virginica\n#&gt; 109          6.7         2.5          5.8         1.8  virginica\n#&gt; 110          7.2         3.6          6.1         2.5  virginica\n#&gt; 111          6.5         3.2          5.1         2.0  virginica\n#&gt; 112          6.4         2.7          5.3         1.9  virginica\n#&gt; 113          6.8         3.0          5.5         2.1  virginica\n#&gt; 114          5.7         2.5          5.0         2.0  virginica\n#&gt; 115          5.8         2.8          5.1         2.4  virginica\n#&gt; 116          6.4         3.2          5.3         2.3  virginica\n#&gt; 117          6.5         3.0          5.5         1.8  virginica\n#&gt; 118          7.7         3.8          6.7         2.2  virginica\n#&gt; 119          7.7         2.6          6.9         2.3  virginica\n#&gt; 120          6.0         2.2          5.0         1.5  virginica\n#&gt; 121          6.9         3.2          5.7         2.3  virginica\n#&gt; 122          5.6         2.8          4.9         2.0  virginica\n#&gt; 123          7.7         2.8          6.7         2.0  virginica\n#&gt; 124          6.3         2.7          4.9         1.8  virginica\n#&gt; 125          6.7         3.3          5.7         2.1  virginica\n#&gt; 126          7.2         3.2          6.0         1.8  virginica\n#&gt; 127          6.2         2.8          4.8         1.8  virginica\n#&gt; 128          6.1         3.0          4.9         1.8  virginica\n#&gt; 129          6.4         2.8          5.6         2.1  virginica\n#&gt; 130          7.2         3.0          5.8         1.6  virginica\n#&gt; 131          7.4         2.8          6.1         1.9  virginica\n#&gt; 132          7.9         3.8          6.4         2.0  virginica\n#&gt; 133          6.4         2.8          5.6         2.2  virginica\n#&gt; 134          6.3         2.8          5.1         1.5  virginica\n#&gt; 135          6.1         2.6          5.6         1.4  virginica\n#&gt; 136          7.7         3.0          6.1         2.3  virginica\n#&gt; 137          6.3         3.4          5.6         2.4  virginica\n#&gt; 138          6.4         3.1          5.5         1.8  virginica\n#&gt; 139          6.0         3.0          4.8         1.8  virginica\n#&gt; 140          6.9         3.1          5.4         2.1  virginica\n#&gt; 141          6.7         3.1          5.6         2.4  virginica\n#&gt; 142          6.9         3.1          5.1         2.3  virginica\n#&gt; 143          5.8         2.7          5.1         1.9  virginica\n#&gt; 144          6.8         3.2          5.9         2.3  virginica\n#&gt; 145          6.7         3.3          5.7         2.5  virginica\n#&gt; 146          6.7         3.0          5.2         2.3  virginica\n#&gt; 147          6.3         2.5          5.0         1.9  virginica\n#&gt; 148          6.5         3.0          5.2         2.0  virginica\n#&gt; 149          6.2         3.4          5.4         2.3  virginica\n#&gt; 150          5.9         3.0          5.1         1.8  virginica\n </code></pre>"},{"location":"reference/GroupBy_var/","title":"GroupBy Var","text":"<p>Source: R/groupby.R</p> <pre><code>GroupBy_var()\n</code></pre>"},{"location":"reference/GroupBy_var/#returns","title":"Returns","text":"<p>aggregated DataFrame</p> <p>Reduce the groups to the variance value.</p>"},{"location":"reference/GroupBy_var/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n        a = c(1, 2, 2, 3, 4, 5),\n        b = c(0.5, 0.5, 4, 10, 13, 14),\n        c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE),\n        d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\")\n)\ndf$groupby(\"d\", maintain_order=TRUE)$var()\n#&gt; shape: (3, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 d      \u2506 a   \u2506 b         \u2506 c        \u2502\n#&gt; \u2502 ---    \u2506 --- \u2506 ---       \u2506 ---      \u2502\n#&gt; \u2502 str    \u2506 f64 \u2506 f64       \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 Apple  \u2506 1.0 \u2506 23.083333 \u2506 0.333333 \u2502\n#&gt; \u2502 Orange \u2506 0.0 \u2506 0.0       \u2506 0.0      \u2502\n#&gt; \u2502 Banana \u2506 0.5 \u2506 0.5       \u2506 0.5      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/LazyFrame_class/","title":"Inner workings of the LazyFrame-class","text":"<p>Source: R/lazyframe__lazy.R</p> <p>The <code>LazyFrame</code>-class is simply two environments of respectively the public and private methods/function calls to the polars rust side. The instanciated <code>LazyFrame</code>-object is an <code>externalptr</code> to a lowlevel rust polars LazyFrame object. The pointer address is the only statefullness of the LazyFrame object on the R side. Any other state resides on the rust side. The S3 method <code>.DollarNames.LazyFrame</code> exposes all public <code>$foobar()</code>-methods which are callable onto the object. Most methods return another <code>LazyFrame</code>-class instance or similar which allows for method chaining. This class system in lack of a better name could be called \"environment classes\" and is the same class system extendr provides, except here there is both a public and private set of methods. For implementation reasons, the private methods are external and must be called from polars:::.pr.$LazyFrame$methodname(), also all private methods must take any self as an argument, thus they are pure functions. Having the private methods as pure functions solved/simplified self-referential complications.</p> <p><code>DataFrame</code> and <code>LazyFrame</code> can both be said to be a <code>Frame</code>. To convert use <code>DataFrame_object$lazy() -&gt; LazyFrame_object</code> and <code>LazyFrame_object$collect() -&gt; DataFrame_object</code>. This is quite similar to the lazy-collect syntax of the dplyrpackage to interact with database connections such as SQL variants. Most SQL databases would be able to perform the same otimizations as polars such Predicate Pushdown and Projection. However polars can intertact and optimize queries with both SQL DBs and other data sources such parquet files simultanously. (#TODO implement r-polars SQL ;)</p>"},{"location":"reference/LazyFrame_class/#details","title":"Details","text":"<p>Check out the source code in R/LazyFrame__lazy.R how public methods are derived from private methods. Check out extendr-wrappers.R to see the extendr-auto-generated methods. These are moved to .pr and converted into pure external functions in after-wrappers.R. In zzz.R (named zzz to be last file sourced) the extendr-methods are removed and replaced by any function prefixed <code>LazyFrame_</code>.</p>"},{"location":"reference/LazyFrame_class/#examples","title":"Examples","text":"<pre><code>#see all exported methods\nls(polars:::LazyFrame)\n#&gt;  [1] \"collect\"                 \"collect_background\"      \"describe_optimized_plan\"\n#&gt;  [4] \"describe_plan\"           \"drop\"                    \"drop_nulls\"             \n#&gt;  [7] \"fill_nan\"                \"fill_null\"               \"filter\"                 \n#&gt; [10] \"first\"                   \"groupby\"                 \"join\"                   \n#&gt; [13] \"last\"                    \"limit\"                   \"max\"                    \n#&gt; [16] \"mean\"                    \"median\"                  \"min\"                    \n#&gt; [19] \"print\"                   \"quantile\"                \"reverse\"                \n#&gt; [22] \"select\"                  \"shift\"                   \"shift_and_fill\"         \n#&gt; [25] \"slice\"                   \"sort\"                    \"std\"                    \n#&gt; [28] \"sum\"                     \"tail\"                    \"unique\"                 \n#&gt; [31] \"var\"                     \"with_column\"             \"with_columns\"           \n#see all private methods (not intended for regular use)\nls(polars:::.pr$LazyFrame)\n#&gt;  [1] \"collect\"                 \"collect_background\"      \"describe_optimized_plan\"\n#&gt;  [4] \"describe_plan\"           \"drop\"                    \"drop_nulls\"             \n#&gt;  [7] \"fill_nan\"                \"fill_null\"               \"filter\"                 \n#&gt; [10] \"first\"                   \"groupby\"                 \"join\"                   \n#&gt; [13] \"last\"                    \"limit\"                   \"max\"                    \n#&gt; [16] \"mean\"                    \"median\"                  \"min\"                    \n#&gt; [19] \"print\"                   \"quantile\"                \"reverse\"                \n#&gt; [22] \"select\"                  \"shift\"                   \"shift_and_fill\"         \n#&gt; [25] \"slice\"                   \"sort_by_exprs\"           \"std\"                    \n#&gt; [28] \"sum\"                     \"tail\"                    \"unique\"                 \n#&gt; [31] \"var\"                     \"with_column\"             \"with_columns\"           \n## Practical example ##\n# First writing R iris dataset to disk, to illustrte a difference\ntemp_filepath = tempfile()\nwrite.csv(iris, temp_filepath,row.names = FALSE)\n# Following example illustrates 2 ways to obtain a LazyFrame\n# The-Okay-way: convert an in-memory DataFrame to LazyFrame\n#eager in-mem R data.frame\nRdf = read.csv(temp_filepath)\n#eager in-mem polars DataFrame\nPdf = pl$DataFrame(Rdf)\n#lazy frame starting from in-mem DataFrame\nLdf_okay = Pdf$lazy()\n#The-Best-Way:  LazyFrame created directly from a data source is best...\nLdf_best = pl$lazy_csv_reader(temp_filepath)\n# ... as if to e.g. filter the LazyFrame, that filtering also caleld predicate will be\n# pushed down in the executation stack to the csv_reader, and thereby only bringing into\n# memory the rows matching to filter.\n# apply filter:\nfilter_expr = pl$col(\"Species\") == \"setosa\" #get only rows where Species is setosa\nLdf_okay = Ldf_okay$filter(filter_expr) #overwrite LazyFrame with new\nLdf_best = Ldf_best$filter(filter_expr)\n# the non optimized plans are similar, on entire in-mem csv, apply filter\nLdf_okay$describe_plan()\n#&gt;   FILTER [(col(\"Species\")) == (Utf8(setosa))] FROM\n#&gt;     DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n#&gt; Ldf_best$describe_plan()\n#&gt;   FILTER [(col(\"Species\")) == (Utf8(setosa))] FROM\n#&gt;     CSV SCAN /tmp/RtmpvLvapT/file17352f6a307f\n#&gt;     PROJECT */5 COLUMNS\n#&gt; # NOTE For Ldf_okay, the full time to load csv alrady paid when creating Rdf and Pdf\n#The optimized plan are quite different, Ldf_best will read csv and perform filter simultanously\nLdf_okay$describe_optimized_plan()\n#&gt;   DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"[(col(\\\"Species\\\")) == (Utf8(setosa))]\"\n#&gt; Ldf_best$describe_optimized_plan()\n#&gt;   CSV SCAN /tmp/RtmpvLvapT/file17352f6a307f\n#&gt;   PROJECT */5 COLUMNS\n#&gt;   SELECTION: [(col(\"Species\")) == (Utf8(setosa))]\n#&gt; #To acquire result in-mem use $colelct()\nPdf_okay = Ldf_okay$collect()\nPdf_best = Ldf_best$collect()\n#verify tables would be the same\nall.equal(\nPdf_okay$to_data_frame(),\nPdf_best$to_data_frame()\n)\n#&gt; [1] TRUE\n#a user might write it as a one-liner like so:\nPdf_best2 = pl$lazy_csv_reader(temp_filepath)$filter(pl$col(\"Species\") == \"setosa\")\n </code></pre>"},{"location":"reference/LazyFrame_collect/","title":"New DataFrame from LazyFrame_object$collect()","text":"<p>Source: R/lazyframe__lazy.R</p> <pre><code>LazyFrame_collect()\n</code></pre>"},{"location":"reference/LazyFrame_collect/#returns","title":"Returns","text":"<p>collected <code>DataFrame</code></p> <p>collect DataFrame by lazy query</p>"},{"location":"reference/LazyFrame_collect/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(iris)$lazy()$filter(pl$col(\"Species\")==\"setosa\")$collect()\n#&gt; shape: (50, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---     \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 ...          \u2506 ...         \u2506 ...          \u2506 ...         \u2506 ...     \u2502\n#&gt; \u2502 5.1          \u2506 3.8         \u2506 1.6          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.6          \u2506 3.2         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.3          \u2506 3.7         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.0          \u2506 3.3         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/LazyFrame_collect_background/","title":"New DataFrame from LazyFrame_object$collect()","text":"<p>Source: R/lazyframe__lazy.R</p> <pre><code>LazyFrame_collect_background()\n</code></pre>"},{"location":"reference/LazyFrame_collect_background/#returns","title":"Returns","text":"<p>collected <code>DataFrame</code></p> <p>collect DataFrame by lazy query</p>"},{"location":"reference/LazyFrame_collect_background/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(iris)$lazy()$filter(pl$col(\"Species\")==\"setosa\")$collect()\n#&gt; shape: (50, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---     \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 ...          \u2506 ...         \u2506 ...          \u2506 ...         \u2506 ...     \u2502\n#&gt; \u2502 5.1          \u2506 3.8         \u2506 1.6          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.6          \u2506 3.2         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.3          \u2506 3.7         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.0          \u2506 3.3         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/LazyFrame_describe_optimized_plan/","title":"Print the optmized plan of LazyFrame","text":"<p>Source: R/lazyframe__lazy.R</p> <pre><code>LazyFrame_describe_optimized_plan()\n</code></pre> <p>select on a LazyFrame</p>"},{"location":"reference/LazyFrame_describe_plan/","title":"describe_plan","text":"<p>data</p> <p>Source: R/lazyframe__lazy.R</p>"},{"location":"reference/LazyFrame_describe_plan/#print-the-non-optimized-plan-plan-of-lazyframe","title":"Print the non-optimized plan plan of LazyFrame","text":""},{"location":"reference/LazyFrame_describe_plan/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>LazyFrame_describe_plan\n</code></pre> <p>select on a LazyFrame</p>"},{"location":"reference/LazyFrame_drop/","title":"Drop","text":"<p>Source: R/lazyframe__lazy.R</p> <pre><code>LazyFrame_drop(columns)\n</code></pre>"},{"location":"reference/LazyFrame_drop/#arguments","title":"Arguments","text":"<ul> <li><code>columns</code>: character vector Name of the column(s) that should be removed from the dataframe.</li> </ul>"},{"location":"reference/LazyFrame_drop/#returns","title":"Returns","text":"<p>LazyFrame</p> <p>Remove columns from the dataframe.</p>"},{"location":"reference/LazyFrame_drop/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$lazy()$drop(c(\"mpg\", \"hp\"))\n#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt;   DROP\n#&gt;     DF [\"mpg\", \"cyl\", \"disp\", \"hp\"]; PROJECT */11 COLUMNS; SELECTION: \"None\"\n#&gt; </code></pre>"},{"location":"reference/LazyFrame_drop_nulls/","title":"Lazy_drop_nulls","text":"<p>Source: R/lazyframe__lazy.R</p> <pre><code>LazyFrame_drop_nulls(subset = NULL)\n</code></pre>"},{"location":"reference/LazyFrame_drop_nulls/#arguments","title":"Arguments","text":"<ul> <li><code>subset</code>: string or vector of strings. Column name(s) for which null values are considered. If set to NULL (default), use all columns.</li> </ul>"},{"location":"reference/LazyFrame_drop_nulls/#returns","title":"Returns","text":"<p>LazyFrame</p> <p>Drop all rows that contain null values.</p>"},{"location":"reference/LazyFrame_drop_nulls/#examples","title":"Examples","text":"<pre><code>tmp = mtcars\ntmp[1:3, \"mpg\"] = NA\ntmp[4, \"hp\"] = NA\npl$DataFrame(tmp)$lazy()$drop_nulls()$collect()$height\n#&gt; [1] 28\npl$DataFrame(tmp)$lazy()$drop_nulls(\"mpg\")$collect()$height\n#&gt; [1] 29\npl$DataFrame(tmp)$lazy()$drop_nulls(c(\"mpg\", \"hp\"))$collect()$height\n#&gt; [1] 28\n </code></pre>"},{"location":"reference/LazyFrame_fill_nan/","title":"Fill NaN","text":"<p>Source: R/lazyframe__lazy.R</p> <pre><code>LazyFrame_fill_nan(fill_value)\n</code></pre>"},{"location":"reference/LazyFrame_fill_nan/#arguments","title":"Arguments","text":"<ul> <li><code>fill_value</code>: Value to fill NaN with.</li> </ul>"},{"location":"reference/LazyFrame_fill_nan/#returns","title":"Returns","text":"<p>LazyFrame</p> <p>Fill floating point NaN values by an Expression evaluation.</p>"},{"location":"reference/LazyFrame_fill_nan/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n        a = c(1.5, 2, NaN, 4),\n        b = c(1.5, NaN, NaN, 4)\n)$lazy()\ndf$fill_nan(99)$collect()\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.5  \u2506 1.5  \u2502\n#&gt; \u2502 2.0  \u2506 99.0 \u2502\n#&gt; \u2502 99.0 \u2506 99.0 \u2502\n#&gt; \u2502 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/LazyFrame_fill_null/","title":"Fill null","text":"<p>Source: R/lazyframe__lazy.R</p> <pre><code>LazyFrame_fill_null(fill_value)\n</code></pre>"},{"location":"reference/LazyFrame_fill_null/#arguments","title":"Arguments","text":"<ul> <li><code>fill_value</code>: Value to fill <code>NA</code> with.</li> </ul>"},{"location":"reference/LazyFrame_fill_null/#returns","title":"Returns","text":"<p>LazyFrame</p> <p>Fill null values using the specified value or strategy.</p>"},{"location":"reference/LazyFrame_fill_null/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n        a = c(1.5, 2, NA, 4),\n        b = c(1.5, NA, NA, 4)\n)$lazy()\ndf$fill_null(99)$collect()\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.5  \u2506 1.5  \u2502\n#&gt; \u2502 2.0  \u2506 99.0 \u2502\n#&gt; \u2502 99.0 \u2506 99.0 \u2502\n#&gt; \u2502 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/LazyFrame_filter/","title":"filter","text":"<p>data</p> <p>Source: R/lazyframe__lazy.R</p>"},{"location":"reference/LazyFrame_filter/#apply-filter-to-lazyframe","title":"Apply filter to LazyFrame","text":""},{"location":"reference/LazyFrame_filter/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>LazyFrame_filter(expr)\n</code></pre>"},{"location":"reference/LazyFrame_filter/#arguments","title":"Arguments","text":"<ul> <li><code>expr</code>: one Expr or string naming a column</li> </ul>"},{"location":"reference/LazyFrame_filter/#returns","title":"Returns","text":"<p>A new <code>LazyFrame</code> object with add/modified column.</p> <p>Filter rows with an Expression definining a boolean column</p>"},{"location":"reference/LazyFrame_filter/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(iris)$lazy()$filter(pl$col(\"Species\")==\"setosa\")$collect()\n#&gt; shape: (50, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---     \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 ...          \u2506 ...         \u2506 ...          \u2506 ...         \u2506 ...     \u2502\n#&gt; \u2502 5.1          \u2506 3.8         \u2506 1.6          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 4.6          \u2506 3.2         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.3          \u2506 3.7         \u2506 1.5          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2502 5.0          \u2506 3.3         \u2506 1.4          \u2506 0.2         \u2506 setosa  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/LazyFrame_first/","title":"First","text":"<p>Source: R/lazyframe__lazy.R</p>"},{"location":"reference/LazyFrame_first/#format","title":"Format","text":"<p>function</p> <pre><code>LazyFrame_first\n</code></pre>"},{"location":"reference/LazyFrame_first/#returns","title":"Returns","text":"<p>A new <code>DataFrame</code> object with applied filter.</p> <p>Get the first row of the DataFrame.</p>"},{"location":"reference/LazyFrame_first/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$lazy()$first()$collect()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/LazyFrame_groupby/","title":"Lazy_groupby","text":"<p>Source: R/lazyframe__lazy.R</p> <pre><code>LazyFrame_groupby(..., maintain_order = FALSE)\n</code></pre>"},{"location":"reference/LazyFrame_groupby/#arguments","title":"Arguments","text":"<ul> <li><code>...</code>: any single Expr or string naming a column</li> <li><code>maintain_order</code>: bool should an aggregate of groupby retain order of groups or FALSE = random, slightly faster?</li> </ul>"},{"location":"reference/LazyFrame_groupby/#returns","title":"Returns","text":"<p>A new <code>LazyGroupBy</code> object with applied groups.</p> <p>apply groupby on LazyFrame, return LazyGroupBy</p>"},{"location":"reference/LazyFrame_join/","title":"LazyFrame join","text":"<p>Source: R/lazyframe__lazy.R</p> <pre><code>LazyFrame_join(\nother,\nleft_on = NULL,\nright_on = NULL,\non = NULL,\nhow = c(\"inner\", \"left\", \"outer\", \"semi\", \"anti\", \"cross\"),\nsuffix = \"_right\",\nallow_parallel = TRUE,\nforce_parallel = FALSE\n)\n</code></pre>"},{"location":"reference/LazyFrame_join/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: LazyFrame</li> <li><code>left_on</code>: names of columns in self LazyFrame, order should match. Type, see on param.</li> <li><code>right_on</code>: names of columns in other LazyFrame, order should match. Type, see on param.</li> <li><code>on</code>: named columns as char vector of named columns, or list of expressions and/or strings.</li> <li><code>how</code>: a string selecting one of the following methods: inner, left, outer, semi, anti, cross</li> <li><code>suffix</code>: name to added right table</li> <li><code>allow_parallel</code>: bool</li> <li><code>force_parallel</code>: bool</li> </ul>"},{"location":"reference/LazyFrame_join/#returns","title":"Returns","text":"<p>A new <code>LazyFrame</code> object with applied join.</p> <p>join a LazyFrame</p>"},{"location":"reference/LazyFrame_last/","title":"Last","text":"<p>Source: R/lazyframe__lazy.R</p>"},{"location":"reference/LazyFrame_last/#format","title":"Format","text":"<p>function</p> <pre><code>LazyFrame_last\n</code></pre>"},{"location":"reference/LazyFrame_last/#returns","title":"Returns","text":"<p>A new <code>LazyFrame</code> object with applied aggregation.</p> <p>Aggregate the columns in the DataFrame to their maximum value.</p>"},{"location":"reference/LazyFrame_last/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$lazy()$last()$collect()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/LazyFrame_limit/","title":"Limits","text":"<p>Source: R/lazyframe__lazy.R</p> <pre><code>LazyFrame_limit(n)\n</code></pre>"},{"location":"reference/LazyFrame_limit/#arguments","title":"Arguments","text":"<ul> <li><code>n</code>: positive numeric or integer number not larger than 2^32</li> </ul>"},{"location":"reference/LazyFrame_limit/#returns","title":"Returns","text":"<p>A new <code>LazyFrame</code> object with applied filter.</p> <p>take limit of n rows of query</p>"},{"location":"reference/LazyFrame_limit/#details","title":"Details","text":"<p>any number will converted to u32. Negative raises error</p>"},{"location":"reference/LazyFrame_limit/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$lazy()$limit(4)$collect()\n#&gt; shape: (4, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/LazyFrame_max/","title":"Max","text":"<p>Source: R/lazyframe__lazy.R</p>"},{"location":"reference/LazyFrame_max/#format","title":"Format","text":"<p>function</p> <pre><code>LazyFrame_max\n</code></pre>"},{"location":"reference/LazyFrame_max/#returns","title":"Returns","text":"<p>A new <code>LazyFrame</code> object with applied aggregation.</p> <p>Aggregate the columns in the DataFrame to their maximum value.</p>"},{"location":"reference/LazyFrame_max/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$lazy()$max()$collect()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 33.9 \u2506 8.0 \u2506 472.0 \u2506 335.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/LazyFrame_mean/","title":"Mean","text":"<p>Source: R/lazyframe__lazy.R</p>"},{"location":"reference/LazyFrame_mean/#format","title":"Format","text":"<p>function</p> <pre><code>LazyFrame_mean\n</code></pre>"},{"location":"reference/LazyFrame_mean/#returns","title":"Returns","text":"<p>A new <code>LazyFrame</code> object with applied aggregation.</p> <p>Aggregate the columns in the DataFrame to their mean value.</p>"},{"location":"reference/LazyFrame_mean/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$lazy()$mean()$collect()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg       \u2506 cyl    \u2506 disp       \u2506 hp       \u2506 ... \u2506 vs     \u2506 am      \u2506 gear   \u2506 carb   \u2502\n#&gt; \u2502 ---       \u2506 ---    \u2506 ---        \u2506 ---      \u2506     \u2506 ---    \u2506 ---     \u2506 ---    \u2506 ---    \u2502\n#&gt; \u2502 f64       \u2506 f64    \u2506 f64        \u2506 f64      \u2506     \u2506 f64    \u2506 f64     \u2506 f64    \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 20.090625 \u2506 6.1875 \u2506 230.721875 \u2506 146.6875 \u2506 ... \u2506 0.4375 \u2506 0.40625 \u2506 3.6875 \u2506 2.8125 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/LazyFrame_median/","title":"Median","text":"<p>Source: R/lazyframe__lazy.R</p>"},{"location":"reference/LazyFrame_median/#format","title":"Format","text":"<p>function</p> <pre><code>LazyFrame_median\n</code></pre>"},{"location":"reference/LazyFrame_median/#returns","title":"Returns","text":"<p>A new <code>LazyFrame</code> object with applied aggregation.</p> <p>Aggregate the columns in the DataFrame to their median value.</p>"},{"location":"reference/LazyFrame_median/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$lazy()$median()$collect()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 19.2 \u2506 6.0 \u2506 196.3 \u2506 123.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/LazyFrame_min/","title":"Min","text":"<p>Source: R/lazyframe__lazy.R</p>"},{"location":"reference/LazyFrame_min/#format","title":"Format","text":"<p>function</p> <pre><code>LazyFrame_min\n</code></pre>"},{"location":"reference/LazyFrame_min/#returns","title":"Returns","text":"<p>A new <code>LazyFrame</code> object with applied aggregation.</p> <p>Aggregate the columns in the DataFrame to their minimum value.</p>"},{"location":"reference/LazyFrame_min/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$lazy()$min()$collect()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp \u2506 hp   \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---  \u2506 ---  \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64  \u2506 f64  \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 10.4 \u2506 4.0 \u2506 71.1 \u2506 52.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/LazyFrame_print/","title":"print","text":"<p>data</p> <p>Source: R/lazyframe__lazy.R</p>"},{"location":"reference/LazyFrame_print/#print-lazyframe-internal-method","title":"print LazyFrame internal method","text":""},{"location":"reference/LazyFrame_print/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>LazyFrame_print(x)\n</code></pre>"},{"location":"reference/LazyFrame_print/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: LazyFrame</li> </ul>"},{"location":"reference/LazyFrame_print/#returns","title":"Returns","text":"<p>self</p> <p>can be used i the middle of a method chain</p>"},{"location":"reference/LazyFrame_print/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(iris)$lazy()$print()\n#&gt;   DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n#&gt; #&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt;   DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n#&gt; </code></pre>"},{"location":"reference/LazyFrame_quantile/","title":"Quantile","text":"<p>Source: R/lazyframe__lazy.R</p> <pre><code>LazyFrame_quantile(quantile, interpolation = \"nearest\")\n</code></pre>"},{"location":"reference/LazyFrame_quantile/#arguments","title":"Arguments","text":"<ul> <li><code>quantile</code>: numeric Quantile between 0.0 and 1.0.</li> <li><code>interpolation</code>: string Interpolation method: \"nearest\", \"higher\", \"lower\", \"midpoint\", or \"linear\".</li> </ul>"},{"location":"reference/LazyFrame_quantile/#returns","title":"Returns","text":"<p>LazyFrame</p> <p>Aggregate the columns in the DataFrame to their quantile value.</p>"},{"location":"reference/LazyFrame_quantile/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$lazy()$quantile(.4)$collect()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 17.8 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/LazyFrame_reverse/","title":"reverse","text":"<p>data</p> <p>Source: R/lazyframe__lazy.R</p>"},{"location":"reference/LazyFrame_reverse/#reverse","title":"Reverse","text":""},{"location":"reference/LazyFrame_reverse/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>LazyFrame_reverse\n</code></pre>"},{"location":"reference/LazyFrame_reverse/#returns","title":"Returns","text":"<p>LazyFrame</p> <p>Reverse the DataFrame.</p>"},{"location":"reference/LazyFrame_reverse/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$lazy()$reverse()$collect()\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 ...  \u2506 ... \u2506 ...   \u2506 ...   \u2506 ... \u2506 ... \u2506 ... \u2506 ...  \u2506 ...  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/LazyFrame_select/","title":"Lazy_select","text":"<p>Source: R/lazyframe__lazy.R</p> <pre><code>LazyFrame_select(...)\n</code></pre>"},{"location":"reference/LazyFrame_select/#arguments","title":"Arguments","text":"<ul> <li><code>...</code>: any single Expr or string naming a column</li> </ul>"},{"location":"reference/LazyFrame_select/#returns","title":"Returns","text":"<p>A new <code>LazyFrame</code> object with applied filter.</p> <p>select on a LazyFrame</p>"},{"location":"reference/LazyFrame_shift/","title":"Shift","text":"<p>Source: R/lazyframe__lazy.R</p> <pre><code>LazyFrame_shift(periods = 1)\n</code></pre>"},{"location":"reference/LazyFrame_shift/#arguments","title":"Arguments","text":"<ul> <li><code>periods</code>: integer Number of periods to shift (may be negative).</li> </ul>"},{"location":"reference/LazyFrame_shift/#returns","title":"Returns","text":"<p>LazyFrame</p> <p>Shift the values by a given period.</p>"},{"location":"reference/LazyFrame_shift/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$lazy()$shift(2)$collect()\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl  \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs   \u2506 am   \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---   \u2506 ---   \u2506     \u2506 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2506 f64   \u2506 f64   \u2506     \u2506 f64  \u2506 f64  \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 null \u2506 null  \u2506 null  \u2506 ... \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 null \u2506 null \u2506 null  \u2506 null  \u2506 ... \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 21.0 \u2506 6.0  \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0  \u2506 1.0  \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 21.0 \u2506 6.0  \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0  \u2506 1.0  \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 ...  \u2506 ...  \u2506 ...   \u2506 ...   \u2506 ... \u2506 ...  \u2506 ...  \u2506 ...  \u2506 ...  \u2502\n#&gt; \u2502 26.0 \u2506 4.0  \u2506 120.3 \u2506 91.0  \u2506 ... \u2506 0.0  \u2506 1.0  \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0  \u2506 95.1  \u2506 113.0 \u2506 ... \u2506 1.0  \u2506 1.0  \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 15.8 \u2506 8.0  \u2506 351.0 \u2506 264.0 \u2506 ... \u2506 0.0  \u2506 1.0  \u2506 5.0  \u2506 4.0  \u2502\n#&gt; \u2502 19.7 \u2506 6.0  \u2506 145.0 \u2506 175.0 \u2506 ... \u2506 0.0  \u2506 1.0  \u2506 5.0  \u2506 6.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/LazyFrame_shift_and_fill/","title":"Shift and fill","text":"<p>Source: R/lazyframe__lazy.R</p> <pre><code>LazyFrame_shift_and_fill(fill_value, periods = 1)\n</code></pre>"},{"location":"reference/LazyFrame_shift_and_fill/#arguments","title":"Arguments","text":"<ul> <li><code>fill_value</code>: fill None values with the result of this expression.</li> <li><code>periods</code>: integer Number of periods to shift (may be negative).</li> </ul>"},{"location":"reference/LazyFrame_shift_and_fill/#returns","title":"Returns","text":"<p>LazyFrame</p> <p>Shift the values by a given period and fill the resulting null values.</p>"},{"location":"reference/LazyFrame_shift_and_fill/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$lazy()$shift_and_fill(0., 2.)$collect()$as_data_frame()\n#&gt;     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n#&gt; 1   0.0   0   0.0   0 0.00 0.000  0.00  0  0    0    0\n#&gt; 2   0.0   0   0.0   0 0.00 0.000  0.00  0  0    0    0\n#&gt; 3  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n#&gt; 4  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n#&gt; 5  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n#&gt; 6  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n#&gt; 7  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n#&gt; 8  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\n#&gt; 9  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\n#&gt; 10 24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\n#&gt; 11 22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n#&gt; 12 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n#&gt; 13 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\n#&gt; 14 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\n#&gt; 15 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\n#&gt; 16 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\n#&gt; 17 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\n#&gt; 18 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\n#&gt; 19 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\n#&gt; 20 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\n#&gt; 21 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\n#&gt; 22 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\n#&gt; 23 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\n#&gt; 24 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\n#&gt; 25 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\n#&gt; 26 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\n#&gt; 27 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\n#&gt; 28 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\n#&gt; 29 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\n#&gt; 30 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\n#&gt; 31 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\n#&gt; 32 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\n </code></pre>"},{"location":"reference/LazyFrame_slice/","title":"Slice","text":"<p>Source: R/lazyframe__lazy.R</p> <pre><code>LazyFrame_slice(offset, length = NULL)\n</code></pre>"},{"location":"reference/LazyFrame_slice/#arguments","title":"Arguments","text":"<ul> <li><code>offset</code>: integer</li> <li><code>length</code>: integer or NULL</li> </ul>"},{"location":"reference/LazyFrame_slice/#returns","title":"Returns","text":"<p>DataFrame</p> <p>Get a slice of this DataFrame.</p>"},{"location":"reference/LazyFrame_slice/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$lazy()$slice(2, 4)$collect()\n#&gt; shape: (4, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 18.1 \u2506 6.0 \u2506 225.0 \u2506 105.0 \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\npl$DataFrame(mtcars)$lazy()$slice(30)$collect()\n#&gt; shape: (2, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nmtcars[2:6,]\n#&gt;                    mpg cyl disp  hp drat    wt  qsec vs am gear carb\n#&gt; Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\n#&gt; Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n#&gt; Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1\n#&gt; Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2\n#&gt; Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1\n </code></pre>"},{"location":"reference/LazyFrame_sort/","title":"LazyFrame Sort","text":"<p>Source: R/lazyframe__lazy.R</p> <pre><code>LazyFrame_sort(by, ..., descending = FALSE, nulls_last = FALSE)\n</code></pre>"},{"location":"reference/LazyFrame_sort/#arguments","title":"Arguments","text":"<ul> <li><code>by</code>: Column(s) to sort by. Column name strings, character vector of column names, or Iterable Into  (e.g. one Expr, or list mixed Expr and column name strings).</li> <li><code>...</code>: more columns to sort by as above but provided one Expr per argument.</li> <li><code>descending</code>: Sort descending? Default = FALSE logical vector of length 1 or same length as number of Expr's from above by + ....</li> <li><code>nulls_last</code>: Bool default FALSE, place all nulls_last?</li> </ul>"},{"location":"reference/LazyFrame_sort/#returns","title":"Returns","text":"<p>LazyFrame</p> <p>sort a LazyFrame by on or more Expr</p>"},{"location":"reference/LazyFrame_sort/#details","title":"Details","text":"<p>by and ... args allow to either provide e.g. a list of Expr or something which can be converted into an Expr e.g. <code>$sort(list(e1,e2,e3))</code>, or provide each Expr as an individual argument <code>$sort(e1,e2,e3)</code>\u00b4 ... or both.</p>"},{"location":"reference/LazyFrame_sort/#examples","title":"Examples","text":"<pre><code>df = mtcars\ndf$mpg[1] = NA\ndf = pl$DataFrame(df)\ndf$lazy()$sort(\"mpg\")$collect()\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 472.0 \u2506 205.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 460.0 \u2506 215.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 13.3 \u2506 8.0 \u2506 350.0 \u2506 245.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 ...  \u2506 ... \u2506 ...   \u2506 ...   \u2506 ... \u2506 ... \u2506 ... \u2506 ...  \u2506 ...  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 75.7  \u2506 52.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 32.4 \u2506 4.0 \u2506 78.7  \u2506 66.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 33.9 \u2506 4.0 \u2506 71.1  \u2506 65.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$lazy()$sort(\"mpg\", nulls_last = TRUE)$collect()\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 472.0 \u2506 205.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 460.0 \u2506 215.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 13.3 \u2506 8.0 \u2506 350.0 \u2506 245.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 14.3 \u2506 8.0 \u2506 360.0 \u2506 245.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 ...  \u2506 ... \u2506 ...   \u2506 ...   \u2506 ... \u2506 ... \u2506 ... \u2506 ...  \u2506 ...  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 32.4 \u2506 4.0 \u2506 78.7  \u2506 66.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 33.9 \u2506 4.0 \u2506 71.1  \u2506 65.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 null \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$lazy()$sort(\"cyl\", \"mpg\")$collect()\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 ...  \u2506 ... \u2506 ...   \u2506 ...   \u2506 ... \u2506 ... \u2506 ... \u2506 ...  \u2506 ...  \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$lazy()$sort(c(\"cyl\", \"mpg\"))$collect()\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 ...  \u2506 ... \u2506 ...   \u2506 ...   \u2506 ... \u2506 ... \u2506 ... \u2506 ...  \u2506 ...  \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$lazy()$sort(c(\"cyl\", \"mpg\"), descending = TRUE)$collect()\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 ...  \u2506 ... \u2506 ...   \u2506 ...   \u2506 ... \u2506 ... \u2506 ... \u2506 ...  \u2506 ...  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$lazy()$sort(c(\"cyl\", \"mpg\"), descending = c(TRUE, FALSE))$collect()\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 472.0 \u2506 205.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 10.4 \u2506 8.0 \u2506 460.0 \u2506 215.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 13.3 \u2506 8.0 \u2506 350.0 \u2506 245.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 14.3 \u2506 8.0 \u2506 360.0 \u2506 245.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 4.0  \u2502\n#&gt; \u2502 ...  \u2506 ... \u2506 ...   \u2506 ...   \u2506 ... \u2506 ... \u2506 ... \u2506 ...  \u2506 ...  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 75.7  \u2506 52.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 30.4 \u2506 4.0 \u2506 95.1  \u2506 113.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 5.0  \u2506 2.0  \u2502\n#&gt; \u2502 32.4 \u2506 4.0 \u2506 78.7  \u2506 66.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 33.9 \u2506 4.0 \u2506 71.1  \u2506 65.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$lazy()$sort(pl$col(\"cyl\"), pl$col(\"mpg\"))$collect()\n#&gt; shape: (32, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 21.5 \u2506 4.0 \u2506 120.1 \u2506 97.0  \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 140.8 \u2506 95.0  \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2502 ...  \u2506 ... \u2506 ...   \u2506 ...   \u2506 ... \u2506 ... \u2506 ... \u2506 ...  \u2506 ...  \u2502\n#&gt; \u2502 16.4 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 17.3 \u2506 8.0 \u2506 275.8 \u2506 180.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 18.7 \u2506 8.0 \u2506 360.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2502 19.2 \u2506 8.0 \u2506 400.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 0.0 \u2506 3.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/LazyFrame_std/","title":"Std","text":"<p>Source: R/lazyframe__lazy.R</p> <pre><code>LazyFrame_std(ddof = 1)\n</code></pre>"},{"location":"reference/LazyFrame_std/#arguments","title":"Arguments","text":"<ul> <li><code>ddof</code>: integer Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1.</li> </ul>"},{"location":"reference/LazyFrame_std/#returns","title":"Returns","text":"<p>A new <code>LazyFrame</code> object with applied aggregation.</p> <p>Aggregate the columns of this LazyFrame to their standard deviation values.</p>"},{"location":"reference/LazyFrame_std/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$lazy()$std()$collect()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg      \u2506 cyl      \u2506 disp       \u2506 hp        \u2506 ... \u2506 vs       \u2506 am       \u2506 gear     \u2506 carb   \u2502\n#&gt; \u2502 ---      \u2506 ---      \u2506 ---        \u2506 ---       \u2506     \u2506 ---      \u2506 ---      \u2506 ---      \u2506 ---    \u2502\n#&gt; \u2502 f64      \u2506 f64      \u2506 f64        \u2506 f64       \u2506     \u2506 f64      \u2506 f64      \u2506 f64      \u2506 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 6.026948 \u2506 1.785922 \u2506 123.938694 \u2506 68.562868 \u2506 ... \u2506 0.504016 \u2506 0.498991 \u2506 0.737804 \u2506 1.6152 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/LazyFrame_sum/","title":"Sum","text":"<p>Source: R/lazyframe__lazy.R</p>"},{"location":"reference/LazyFrame_sum/#format","title":"Format","text":"<p>function</p> <pre><code>LazyFrame_sum\n</code></pre>"},{"location":"reference/LazyFrame_sum/#returns","title":"Returns","text":"<p>LazyFrame</p> <p>Aggregate the columns of this DataFrame to their sum values.</p>"},{"location":"reference/LazyFrame_sum/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$lazy()$sum()$collect()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg   \u2506 cyl   \u2506 disp   \u2506 hp     \u2506 ... \u2506 vs   \u2506 am   \u2506 gear  \u2506 carb \u2502\n#&gt; \u2502 ---   \u2506 ---   \u2506 ---    \u2506 ---    \u2506     \u2506 ---  \u2506 ---  \u2506 ---   \u2506 ---  \u2502\n#&gt; \u2502 f64   \u2506 f64   \u2506 f64    \u2506 f64    \u2506     \u2506 f64  \u2506 f64  \u2506 f64   \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 642.9 \u2506 198.0 \u2506 7383.1 \u2506 4694.0 \u2506 ... \u2506 14.0 \u2506 13.0 \u2506 118.0 \u2506 90.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/LazyFrame_tail/","title":"Tail","text":"<p>Source: R/lazyframe__lazy.R</p> <pre><code>LazyFrame_tail(n)\n</code></pre>"},{"location":"reference/LazyFrame_tail/#arguments","title":"Arguments","text":"<ul> <li><code>n</code>: positive numeric or integer number not larger than 2^32</li> </ul>"},{"location":"reference/LazyFrame_tail/#returns","title":"Returns","text":"<p>A new <code>LazyFrame</code> object with applied filter.</p> <p>take last n rows of query</p>"},{"location":"reference/LazyFrame_tail/#details","title":"Details","text":"<p>any number will converted to u32. Negative raises error</p>"},{"location":"reference/LazyFrame_tail/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$lazy()$tail(2)$collect()\n#&gt; shape: (2, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 vs  \u2506 am  \u2506 gear \u2506 carb \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 --- \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64 \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/LazyFrame_unique/","title":"Lazy_unique","text":"<p>Source: R/lazyframe__lazy.R</p> <pre><code>LazyFrame_unique(subset = NULL, keep = \"first\")\n</code></pre>"},{"location":"reference/LazyFrame_unique/#arguments","title":"Arguments","text":"<ul> <li><code>subset</code>: string or vector of strings. Column name(s) to consider when identifying duplicates. If set to NULL (default), use all columns.</li> <li> <p><code>keep</code>: string. Which of the duplicate rows to keep:</p> <ul> <li>\"first\": Keep first unique row.</li> <li>\"last\": Keep last unique row.</li> <li>\"none\": Don\u2019t keep duplicate rows.</li> </ul> </li> </ul>"},{"location":"reference/LazyFrame_unique/#returns","title":"Returns","text":"<p>LazyFrame</p> <p>Drop duplicate rows from this dataframe.</p>"},{"location":"reference/LazyFrame_unique/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  x = as.numeric(c(1, 1:5)),\n  y = as.numeric(c(1, 1:5)),\n  z = as.numeric(c(1, 1, 1:4)))\ndf$lazy()$unique()$collect()$height\n#&gt; [1] 5\ndf$lazy()$unique(subset = c(\"x\", \"z\"), keep = \"last\")$collect()$height\n#&gt; [1] 5\n </code></pre>"},{"location":"reference/LazyFrame_var/","title":"Var","text":"<p>Source: R/lazyframe__lazy.R</p> <pre><code>LazyFrame_var(ddof = 1)\n</code></pre>"},{"location":"reference/LazyFrame_var/#arguments","title":"Arguments","text":"<ul> <li><code>ddof</code>: integer Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1.</li> </ul>"},{"location":"reference/LazyFrame_var/#returns","title":"Returns","text":"<p>A new <code>LazyFrame</code> object with applied aggregation.</p> <p>Aggregate the columns of this LazyFrame to their variance values.</p>"},{"location":"reference/LazyFrame_var/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(mtcars)$lazy()$var()$collect()\n#&gt; shape: (1, 11)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg       \u2506 cyl      \u2506 disp       \u2506 hp         \u2506 ... \u2506 vs       \u2506 am       \u2506 gear     \u2506 carb     \u2502\n#&gt; \u2502 ---       \u2506 ---      \u2506 ---        \u2506 ---        \u2506     \u2506 ---      \u2506 ---      \u2506 ---      \u2506 ---      \u2502\n#&gt; \u2502 f64       \u2506 f64      \u2506 f64        \u2506 f64        \u2506     \u2506 f64      \u2506 f64      \u2506 f64      \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 36.324103 \u2506 3.189516 \u2506 15360.7998 \u2506 4700.86693 \u2506 ... \u2506 0.254032 \u2506 0.248992 \u2506 0.544355 \u2506 2.608871 \u2502\n#&gt; \u2502           \u2506          \u2506 29         \u2506 5          \u2506     \u2506          \u2506          \u2506          \u2506          \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/LazyFrame_with_column/","title":"with_column","text":"<p>data</p> <p>Source: R/lazyframe__lazy.R</p>"},{"location":"reference/LazyFrame_with_column/#lazy-with-column","title":"Lazy with column","text":""},{"location":"reference/LazyFrame_with_column/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>LazyFrame_with_column(expr)\n</code></pre>"},{"location":"reference/LazyFrame_with_column/#arguments","title":"Arguments","text":"<ul> <li><code>expr</code>: one Expr or string naming a column</li> </ul>"},{"location":"reference/LazyFrame_with_column/#returns","title":"Returns","text":"<p>A new <code>LazyFrame</code> object with add/modified column.</p> <p>add or replace columns of LazyFrame</p>"},{"location":"reference/LazyFrame_with_columns/","title":"Lazy with columns","text":"<p>Source: R/lazyframe__lazy.R</p> <pre><code>LazyFrame_with_columns(...)\n</code></pre>"},{"location":"reference/LazyFrame_with_columns/#arguments","title":"Arguments","text":"<ul> <li><code>...</code>: any single Expr or string naming a column</li> </ul>"},{"location":"reference/LazyFrame_with_columns/#returns","title":"Returns","text":"<p>A new <code>LazyFrame</code> object with added/modified columns.</p> <p>add or replace columns of LazyFrame</p>"},{"location":"reference/LazyGroupBy_agg/","title":"LazyGroupBy_agg","text":"<p>Source: R/lazyframe__groupby.R</p> <pre><code>LazyGroupBy_agg(...)\n</code></pre>"},{"location":"reference/LazyGroupBy_agg/#arguments","title":"Arguments","text":"<ul> <li><code>...</code>: any Expr or string</li> </ul>"},{"location":"reference/LazyGroupBy_agg/#returns","title":"Returns","text":"<p>A new <code>LazyFrame</code> object.</p> <p>aggregate a polar_lazy_groupby</p>"},{"location":"reference/LazyGroupBy_apply/","title":"LazyGroupBy_apply","text":"<p>Source: R/lazyframe__groupby.R</p> <pre><code>LazyGroupBy_apply(f)\n</code></pre>"},{"location":"reference/LazyGroupBy_apply/#arguments","title":"Arguments","text":"<ul> <li><code>f</code>: R function to apply</li> </ul>"},{"location":"reference/LazyGroupBy_apply/#returns","title":"Returns","text":"<p>A new <code>LazyFrame</code> object.</p> <p>one day this will apply</p>"},{"location":"reference/LazyGroupBy_head/","title":"LazyGroupBy_head","text":"<p>Source: R/lazyframe__groupby.R</p> <pre><code>LazyGroupBy_head(n = 1L)\n</code></pre>"},{"location":"reference/LazyGroupBy_head/#arguments","title":"Arguments","text":"<ul> <li><code>n</code>: integer number of rows to get</li> </ul>"},{"location":"reference/LazyGroupBy_head/#returns","title":"Returns","text":"<p>A new <code>LazyFrame</code> object.</p> <p>get n rows of head of group</p>"},{"location":"reference/LazyGroupBy_print/","title":"LazyGroupBy_print","text":"<p>Source: R/lazyframe__groupby.R</p> <pre><code>LazyGroupBy_print()\n</code></pre> <p>prints opague groupby, not much to show</p>"},{"location":"reference/LazyGroupBy_tail/","title":"LazyGroupBy_tail","text":"<p>Source: R/lazyframe__groupby.R</p> <pre><code>LazyGroupBy_tail(n = 1L)\n</code></pre>"},{"location":"reference/LazyGroupBy_tail/#arguments","title":"Arguments","text":"<ul> <li><code>n</code>: integer number of rows to get</li> </ul>"},{"location":"reference/LazyGroupBy_tail/#returns","title":"Returns","text":"<p>A new <code>LazyFrame</code> object.</p> <p>get n tail rows of group</p>"},{"location":"reference/Ok/","title":"Wrap in Ok","text":"<p>Source: R/rust_result.R</p> <pre><code>Ok(x)\n</code></pre>"},{"location":"reference/Ok/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: any R object</li> </ul>"},{"location":"reference/Ok/#returns","title":"Returns","text":"<p>same R object wrapped in a Ok-result</p> <p>Wrap in Ok</p>"},{"location":"reference/PolarsBackgroundHandle_is_exhausted/","title":"PolarsBackgroundHandle","text":"<p>Source: R/lazyframe__background.R</p> <pre><code>PolarsBackgroundHandle_is_exhausted()\n</code></pre>"},{"location":"reference/PolarsBackgroundHandle_is_exhausted/#returns","title":"Returns","text":"<p>Bool</p> <p>PolarsBackgroundHandle</p>"},{"location":"reference/PolarsBackgroundHandle_is_exhausted/#examples","title":"Examples","text":"<pre><code>lazy_df = pl$DataFrame(iris[,1:3])$lazy()$select(pl$all()$first())\nhandle = lazy_df$collect_background()\nhandle$is_exhausted()\n#&gt; [1] FALSE\ndf = handle$join()\nhandle$is_exhausted()\n#&gt; [1] TRUE\n </code></pre>"},{"location":"reference/PolarsBackgroundHandle_join/","title":"PolarsBackgroundHandle","text":"<p>Source: R/lazyframe__background.R</p> <pre><code>PolarsBackgroundHandle_join()\n</code></pre>"},{"location":"reference/PolarsBackgroundHandle_join/#returns","title":"Returns","text":"<p>DataFrame</p> <p>PolarsBackgroundHandle</p>"},{"location":"reference/PolarsBackgroundHandle_join/#examples","title":"Examples","text":"<pre><code>lazy_df = pl$DataFrame(iris[,1:3])$lazy()$select(pl$all()$first())\nhandle = lazy_df$collect_background()\ndf = handle$join()\n </code></pre>"},{"location":"reference/RField_name/","title":"get/set Field name","text":"<p>Source: R/Field.R</p> <pre><code>RField_name()\n</code></pre>"},{"location":"reference/RField_name/#returns","title":"Returns","text":"<p>name</p> <p>get/set Field name</p>"},{"location":"reference/RField_name/#examples","title":"Examples","text":"<pre><code>field = pl$Field(\"Cities\",pl$Utf8)\n#get name / datatype\nfield$name\n#&gt; [1] \"Cities\"\nfield$datatype\n#&gt; DataType: Utf8\n#set + get values\nfield$name = \"CityPoPulations\" #&lt;- is fine too\nfield$datatype = pl$UInt32\nprint(field)\n#&gt; Field {\n#&gt;     name: \"CityPoPulations\",\n#&gt;     dtype: UInt32,\n#&gt; }\n </code></pre>"},{"location":"reference/RField_print/","title":"Print a polars Field","text":"<p>Source: R/Field.R</p> <pre><code>RField_print()\n</code></pre>"},{"location":"reference/RField_print/#returns","title":"Returns","text":"<p>self</p> <p>Print a polars Field</p>"},{"location":"reference/RField_print/#examples","title":"Examples","text":"<pre><code>print(pl$Field(\"foo\",pl$List(pl$UInt64)))\n#&gt; Field {\n#&gt;     name: \"foo\",\n#&gt;     dtype: List(\n#&gt;         UInt64,\n#&gt;     ),\n#&gt; }\n </code></pre>"},{"location":"reference/Series/","title":"Create new Series","text":"<p>Source: R/series__series.R</p>"},{"location":"reference/Series/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: any vector</li> <li><code>name</code>: string</li> </ul>"},{"location":"reference/Series/#returns","title":"Returns","text":"<p>Series</p> <p>found in api as pl$Series named Series_constructor internally</p>"},{"location":"reference/Series/#examples","title":"Examples","text":"<pre><code>{\npl$Series(1:4)\n}\n#&gt; polars Series: shape: (4,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt; ]\n </code></pre>"},{"location":"reference/Series_abs/","title":"Take absolute value of Series","text":"<p>Source: R/series__series.R</p> <pre><code>Series_abs()\n</code></pre>"},{"location":"reference/Series_abs/#returns","title":"Returns","text":"<p>Series</p> <p>Take absolute value of Series</p>"},{"location":"reference/Series_abs/#examples","title":"Examples","text":"<pre><code>pl$Series(-2:2)$abs()\n#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  2\n#&gt;  1\n#&gt;  0\n#&gt;  1\n#&gt;  2\n#&gt; ]\n </code></pre>"},{"location":"reference/Series_add/","title":"add Series","text":"<p>Source: R/series__series.R</p> <pre><code>Series_add(other)\n## S3 method for class 'Series'\ns1 + s2\n</code></pre>"},{"location":"reference/Series_add/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: Series or into Series</li> <li><code>s1</code>: lhs Series</li> <li><code>s2</code>: rhs Series or any into Series</li> </ul>"},{"location":"reference/Series_add/#returns","title":"Returns","text":"<p>Series</p> <p>Series arithmetics</p>"},{"location":"reference/Series_add/#examples","title":"Examples","text":"<pre><code>pl$Series(1:3)$add(11:13)\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  12\n#&gt;  14\n#&gt;  16\n#&gt; ]\npl$Series(1:3)$add(pl$Series(11:13))\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  12\n#&gt;  14\n#&gt;  16\n#&gt; ]\npl$Series(1:3)$add(1L)\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt; ]\n1L + pl$Series(1:3)\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt; ]\npl$Series(1:3) + 1L\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt; ]\n </code></pre>"},{"location":"reference/Series_alias/","title":"alias","text":"<p>data</p> <p>Source: R/series__series.R</p>"},{"location":"reference/Series_alias/#alias","title":"Alias","text":""},{"location":"reference/Series_alias/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Series_alias(name)\n</code></pre>"},{"location":"reference/Series_alias/#arguments","title":"Arguments","text":"<ul> <li><code>name</code>: a String as the new name</li> </ul>"},{"location":"reference/Series_alias/#returns","title":"Returns","text":"<p>Series</p> <p>Change name of Series</p>"},{"location":"reference/Series_alias/#examples","title":"Examples","text":"<pre><code>pl$Series(1:3,name = \"alice\")$alias(\"bob\")\n#&gt; polars Series: shape: (3,)\n#&gt; Series: 'bob' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\n </code></pre>"},{"location":"reference/Series_all/","title":"Reduce Boolean Series with ALL","text":"<p>Source: R/series__series.R</p> <pre><code>Series_all()\n</code></pre>"},{"location":"reference/Series_all/#returns","title":"Returns","text":"<p>bool</p> <p>Reduce Boolean Series with ALL</p>"},{"location":"reference/Series_all/#examples","title":"Examples","text":"<pre><code>pl$Series(c(TRUE,TRUE,NA))$all()\n#&gt; [1] FALSE\n </code></pre>"},{"location":"reference/Series_any/","title":"Reduce Boolean Series with ANY","text":"<p>Source: R/series__series.R</p> <pre><code>Series_any()\n</code></pre>"},{"location":"reference/Series_any/#returns","title":"Returns","text":"<p>bool</p> <p>Reduce Boolean Series with ANY</p>"},{"location":"reference/Series_any/#examples","title":"Examples","text":"<pre><code>pl$Series(c(TRUE,FALSE,NA))$any()\n#&gt; [1] TRUE\n </code></pre>"},{"location":"reference/Series_append/","title":"append (default immutable)","text":"<p>Source: R/series__series.R</p> <pre><code>Series_append(other, immutable = TRUE)\n</code></pre>"},{"location":"reference/Series_append/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: Series to append</li> <li><code>immutable</code>: bool should append be immutable, default TRUE as mutable operations should be avoided in plain R API's.</li> </ul>"},{"location":"reference/Series_append/#returns","title":"Returns","text":"<p>Series</p> <p>append two Series, see details for mutability</p>"},{"location":"reference/Series_append/#details","title":"Details","text":"<p>if immutable = FLASE, the Series object will not behave as immutable. This mean appending to this Series will affect any variable pointing to this memory location. This will break normal scoping rules of R. Polars-clones are cheap. Mutable operations are likely never needed in any sense.</p>"},{"location":"reference/Series_append/#examples","title":"Examples","text":"<pre><code>#default immutable behaviour, s_imut and s_imut_copy stay the same\ns_imut = pl$Series(1:3)\ns_imut_copy = s_imut\ns_new = s_imut$append(pl$Series(1:3))\nidentical(s_imut$to_vector(),s_imut_copy$to_vector())\n#&gt; [1] TRUE\n#pypolars-like mutable behaviour,s_mut_copy become the same as s_new\ns_mut = pl$Series(1:3)\ns_mut_copy = s_mut\n#must deactivate this to allow to use immutable=FALSE\npl$set_polars_options(strictly_immutable = FALSE)\n#&gt; $strictly_immutable\n#&gt; [1] TRUE\n#&gt; s_new = s_mut$append(pl$Series(1:3),immutable= FALSE)\nidentical(s_new$to_vector(),s_mut_copy$to_vector())\n#&gt; [1] TRUE\n </code></pre>"},{"location":"reference/Series_apply/","title":"Apply every value with an R fun","text":"<p>Source: R/series__series.R</p> <pre><code>Series_apply(\nfun,\ndatatype = NULL,\nstrict_return_type = TRUE,\nallow_fail_eval = FALSE\n)\n</code></pre>"},{"location":"reference/Series_apply/#arguments","title":"Arguments","text":"<ul> <li><code>fun</code>: r function, should take a scalar value as input and return one.</li> <li><code>datatype</code>: DataType of return value. Default NULL means same as input.</li> <li><code>strict_return_type</code>: bool, default TRUE: fail on wrong return type, FALSE: convert to polars Null</li> <li><code>allow_fail_eval</code>: bool, default FALSE: raise R fun error, TRUE: convert to polars Null</li> </ul>"},{"location":"reference/Series_apply/#returns","title":"Returns","text":"<p>Series</p> <p>About as slow as regular non-vectorized R. Similar to using R sapply on a vector.</p>"},{"location":"reference/Series_apply/#examples","title":"Examples","text":"<pre><code>s = pl$Series(letters[1:5],\"ltrs\")\nf = \\(x) paste(x,\":\",as.integer(charToRaw(x)))\ns$apply(f,pl$Utf8)\n#&gt; polars Series: shape: (5,)\n#&gt; Series: 'ltrs_apply' [str]\n#&gt; [\n#&gt;  \"a : 97\"\n#&gt;  \"b : 98\"\n#&gt;  \"c : 99\"\n#&gt;  \"d : 100\"\n#&gt;  \"e : 101\"\n#&gt; ]\n#same as\npl$Series(sapply(s$to_r(),f),s$name)\n#&gt; polars Series: shape: (5,)\n#&gt; Series: 'ltrs' [str]\n#&gt; [\n#&gt;  \"a : 97\"\n#&gt;  \"b : 98\"\n#&gt;  \"c : 99\"\n#&gt;  \"d : 100\"\n#&gt;  \"e : 101\"\n#&gt; ]\n </code></pre>"},{"location":"reference/Series_arg_max/","title":"arg_max","text":"<p>data</p> <p>Source: R/series__series.R</p>"},{"location":"reference/Series_arg_max/#idx-to-max-value","title":"idx to max value","text":""},{"location":"reference/Series_arg_max/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Series_arg_max\n</code></pre>"},{"location":"reference/Series_arg_max/#returns","title":"Returns","text":"<p>bool</p> <p>idx to max value</p>"},{"location":"reference/Series_arg_max/#examples","title":"Examples","text":"<pre><code>pl$Series(c(5,1))$arg_max()\n#&gt; [1] 0\n </code></pre>"},{"location":"reference/Series_arg_min/","title":"arg_min","text":"<p>data</p> <p>Source: R/series__series.R</p>"},{"location":"reference/Series_arg_min/#idx-to-min-value","title":"idx to min value","text":""},{"location":"reference/Series_arg_min/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Series_arg_min\n</code></pre>"},{"location":"reference/Series_arg_min/#returns","title":"Returns","text":"<p>bool</p> <p>idx to min value</p>"},{"location":"reference/Series_arg_min/#examples","title":"Examples","text":"<pre><code>pl$Series(c(5,1))$arg_min()\n#&gt; [1] 1\n </code></pre>"},{"location":"reference/Series_arr/","title":"arr: list related methods on Series of dtype List","text":"<p>Source: R/series__series.R</p> <pre><code>Series_arr()\n</code></pre>"},{"location":"reference/Series_arr/#returns","title":"Returns","text":"<p>Expr</p> <p>Create an object namespace of all list related methods. See the individual method pages for full details</p>"},{"location":"reference/Series_arr/#examples","title":"Examples","text":"<pre><code>s = pl$Series(list(1:3,1:2,NULL))\ns\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [list[i32]]\n#&gt; [\n#&gt;  [1, 2, 3]\n#&gt;  [1, 2]\n#&gt;  []\n#&gt; ]\ns$arr$first()\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502      \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2502\n#&gt; \u2502 1    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Series_ceil/","title":"Series_ceil","text":"<p>Source: R/series__series.R</p> <pre><code>Series_ceil()\n</code></pre>"},{"location":"reference/Series_ceil/#returns","title":"Returns","text":"<p>bool</p> <p>Ceil of this Series</p>"},{"location":"reference/Series_ceil/#examples","title":"Examples","text":"<pre><code>pl$Series(c(.5,1.999))$ceil()\n#&gt; polars Series: shape: (2,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  1.0\n#&gt;  2.0\n#&gt; ]\n </code></pre>"},{"location":"reference/Series_chunk_lengths/","title":"chunk_lengths","text":"<p>data</p> <p>Source: R/series__series.R</p>"},{"location":"reference/Series_chunk_lengths/#lengths-of-series-memory-chunks","title":"Lengths of Series memory chunks","text":""},{"location":"reference/Series_chunk_lengths/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Series_chunk_lengths\n</code></pre>"},{"location":"reference/Series_chunk_lengths/#returns","title":"Returns","text":"<p>numeric vector. Length is number of chunks. Sum of lengths is equal to size of Series.</p> <p>Get the Lengths of Series memory chunks as vector.</p>"},{"location":"reference/Series_chunk_lengths/#examples","title":"Examples","text":"<pre><code>chunked_series = c(pl$Series(1:3),pl$Series(1:10))\nchunked_series$chunk_lengths()\n#&gt; [1]  3 10\n </code></pre>"},{"location":"reference/Series_class/","title":"Inner workings of the Series-class","text":"<p>Source: R/series__series.R</p> <p>The <code>Series</code>-class is simply two environments of respectively the public and private methods/function calls to the polars rust side. The instanciated <code>Series</code>-object is an <code>externalptr</code> to a lowlevel rust polars Series object. The pointer address is the only statefullness of the Series object on the R side. Any other state resides on the rust side. The S3 method <code>.DollarNames.Series</code> exposes all public <code>$foobar()</code>-methods which are callable onto the object. Most methods return another <code>Series</code>-class instance or similar which allows for method chaining. This class system in lack of a better name could be called \"environment classes\" and is the same class system extendr provides, except here there is both a public and private set of methods. For implementation reasons, the private methods are external and must be called from polars:::.pr.$Series$methodname(), also all private methods must take any self as an argument, thus they are pure functions. Having the private methods as pure functions solved/simplified self-referential complications.</p>"},{"location":"reference/Series_class/#details","title":"Details","text":"<p>Check out the source code in R/Series_frame.R how public methods are derived from private methods. Check out extendr-wrappers.R to see the extendr-auto-generated methods. These are moved to .pr and converted into pure external functions in after-wrappers.R. In zzz.R (named zzz to be last file sourced) the extendr-methods are removed and replaced by any function prefixed <code>Series_</code>.</p>"},{"location":"reference/Series_class/#examples","title":"Examples","text":"<pre><code>#see all exported methods\nls(polars:::Series)\n#&gt;  [1] \"abs\"           \"add\"           \"alias\"         \"all\"           \"any\"          \n#&gt;  [6] \"append\"        \"apply\"         \"arg_max\"       \"arg_min\"       \"arr\"          \n#&gt; [11] \"ceil\"          \"chunk_lengths\" \"clone\"         \"compare\"       \"cumsum\"       \n#&gt; [16] \"div\"           \"dtype\"         \"expr\"          \"flags\"         \"floor\"        \n#&gt; [21] \"is_numeric\"    \"is_sorted\"     \"len\"           \"max\"           \"min\"          \n#&gt; [26] \"mul\"           \"name\"          \"print\"         \"rem\"           \"rename\"       \n#&gt; [31] \"rep\"           \"series_equal\"  \"set_sorted\"    \"shape\"         \"sort\"         \n#&gt; [36] \"std\"           \"sub\"           \"sum\"           \"to_frame\"      \"to_lit\"       \n#&gt; [41] \"to_r\"          \"to_r_list\"     \"to_r_vector\"   \"to_vector\"     \"value_counts\" \n#&gt; [46] \"var\"          \n#see all private methods (not intended for regular use)\nls(polars:::.pr$Series)\n#&gt;  [1] \"abs\"                    \"add\"                    \"alias\"                 \n#&gt;  [4] \"all\"                    \"any\"                    \"append_mut\"            \n#&gt;  [7] \"apply\"                  \"arg_max\"                \"arg_min\"               \n#&gt; [10] \"ceil\"                   \"chunk_lengths\"          \"clone\"                 \n#&gt; [13] \"compare\"                \"cumsum\"                 \"div\"                   \n#&gt; [16] \"dtype\"                  \"floor\"                  \"from_arrow\"            \n#&gt; [19] \"get_fmt\"                \"is_sorted\"              \"is_sorted_flag\"        \n#&gt; [22] \"is_sorted_reverse_flag\" \"len\"                    \"max\"                   \n#&gt; [25] \"min\"                    \"mul\"                    \"name\"                  \n#&gt; [28] \"new\"                    \"panic\"                  \"print\"                 \n#&gt; [31] \"rem\"                    \"rename_mut\"             \"rep\"                   \n#&gt; [34] \"series_equal\"           \"set_sorted_mut\"         \"shape\"                 \n#&gt; [37] \"sleep\"                  \"sort_mut\"               \"sub\"                   \n#&gt; [40] \"sum\"                    \"to_frame\"               \"to_r\"                  \n#&gt; [43] \"value_counts\"          \n#make an object\ns = pl$Series(1:3)\n#use a public method/property\ns$shape\n#&gt; [1] 3 1\n#use a private method (mutable append not allowed in public api)\ns_copy = s\n.pr$Series$append_mut(s, pl$Series(5:1))\n#&gt; $ok\n#&gt; NULL\n#&gt; #&gt; $err\n#&gt; NULL\n#&gt; #&gt; attr(,\"class\")\n#&gt; [1] \"extendr_result\"\nidentical(s_copy$to_r(), s$to_r()) # s_copy was modified when s was modified\n#&gt; [1] TRUE\n </code></pre>"},{"location":"reference/Series_clone/","title":"clone","text":"<p>data</p> <p>Source: R/series__series.R</p>"},{"location":"reference/Series_clone/#clone-a-series","title":"Clone a Series","text":""},{"location":"reference/Series_clone/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Series_clone\n</code></pre>"},{"location":"reference/Series_clone/#returns","title":"Returns","text":"<p>Series</p> <p>Rarely useful as Series are nearly 100% immutable Any modification of a Series should lead to a clone anyways.</p>"},{"location":"reference/Series_clone/#examples","title":"Examples","text":"<pre><code>s1 = pl$Series(1:3);\ns2 =  s1$clone();\ns3 = s1\npl$mem_address(s1) != pl$mem_address(s2)\n#&gt; [1] TRUE\npl$mem_address(s1) == pl$mem_address(s3)\n#&gt; [1] TRUE\n </code></pre>"},{"location":"reference/Series_compare/","title":"Compare Series","text":"<p>Source: R/series__series.R</p> <pre><code>Series_compare(other, op)\n## S3 method for class 'Series'\ns1 == s2\n## S3 method for class 'Series'\ns1 != s2\n## S3 method for class 'Series'\ns1 &lt; s2\n## S3 method for class 'Series'\ns1 &gt; s2\n## S3 method for class 'Series'\ns1 &lt;= s2\n## S3 method for class 'Series'\ns1 &gt;= s2\n</code></pre>"},{"location":"reference/Series_compare/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: A Series or something a Series can be created from</li> <li><code>op</code>: the chosen operator a String either: 'equal', 'not_equal', 'lt', 'gt', 'lt_eq' or 'gt_eq'</li> <li><code>s1</code>: lhs Series</li> <li><code>s2</code>: rhs Series or any into Series</li> </ul>"},{"location":"reference/Series_compare/#returns","title":"Returns","text":"<p>Series</p> <p>compare two Series</p>"},{"location":"reference/Series_compare/#examples","title":"Examples","text":"<pre><code>pl$Series(1:5) == pl$Series(c(1:3,NA_integer_,10L))\n#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [bool]\n#&gt; [\n#&gt;  true\n#&gt;  true\n#&gt;  true\n#&gt;  false\n#&gt;  false\n#&gt; ]\n </code></pre>"},{"location":"reference/Series_cumsum/","title":"Cumulative sum","text":"<p>Source: R/series__series.R</p> <pre><code>Series_cumsum(reverse = FALSE)\n</code></pre>"},{"location":"reference/Series_cumsum/#arguments","title":"Arguments","text":"<ul> <li><code>reverse</code>: bool, default FALSE, if true roll over vector from back to forth</li> </ul>"},{"location":"reference/Series_cumsum/#returns","title":"Returns","text":"<p>Series</p> <p>Get an array with the cumulative sum computed at every element.</p>"},{"location":"reference/Series_cumsum/#details","title":"Details","text":"<p>Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues.</p>"},{"location":"reference/Series_cumsum/#examples","title":"Examples","text":"<pre><code>pl$Series(c(1:2,NA,3,NaN,4,Inf))$cumsum()\n#&gt; polars Series: shape: (7,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  1.0\n#&gt;  3.0\n#&gt;  null\n#&gt;  6.0\n#&gt;  NaN\n#&gt;  NaN\n#&gt;  NaN\n#&gt; ]\npl$Series(c(1:2,NA,3,Inf,4,-Inf,5))$cumsum()\n#&gt; polars Series: shape: (8,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  1.0\n#&gt;  3.0\n#&gt;  null\n#&gt;  6.0\n#&gt;  inf\n#&gt;  inf\n#&gt;  NaN\n#&gt;  NaN\n#&gt; ]\n </code></pre>"},{"location":"reference/Series_div/","title":"div Series","text":"<p>Source: R/series__series.R</p> <pre><code>Series_div(other)\n## S3 method for class 'Series'\ns1 / s2\n</code></pre>"},{"location":"reference/Series_div/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: Series or into Series</li> <li><code>s1</code>: lhs Series</li> <li><code>s2</code>: rhs Series or any into Series</li> </ul>"},{"location":"reference/Series_div/#returns","title":"Returns","text":"<p>Series</p> <p>Series arithmetics</p>"},{"location":"reference/Series_div/#examples","title":"Examples","text":"<pre><code>pl$Series(1:3)$div(11:13)\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  0\n#&gt;  0\n#&gt;  0\n#&gt; ]\npl$Series(1:3)$div(pl$Series(11:13))\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  0\n#&gt;  0\n#&gt;  0\n#&gt; ]\npl$Series(1:3)$div(1L)\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\n2L / pl$Series(1:3)\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  2\n#&gt;  1\n#&gt;  0\n#&gt; ]\npl$Series(1:3) / 2L\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  0\n#&gt;  1\n#&gt;  1\n#&gt; ]\n </code></pre>"},{"location":"reference/Series_dtype/","title":"Get data type of Series","text":"<p>Source: R/series__series.R</p> <pre><code>Series_dtype()\nSeries_flags()\n</code></pre>"},{"location":"reference/Series_dtype/#returns","title":"Returns","text":"<p>DataType</p> <p>DataType</p> <p>Get data type of Series</p> <p>Get data type of Series</p>"},{"location":"reference/Series_dtype/#details","title":"Details","text":"<p>property sorted flags are not settable, use set_sorted</p>"},{"location":"reference/Series_dtype/#examples","title":"Examples","text":"<pre><code>pl$Series(1:4)$dtype\n#&gt; DataType: Int32\npl$Series(c(1,2))$dtype\n#&gt; DataType: Float64\npl$Series(letters)$dtype\n#&gt; DataType: Utf8\npl$Series(1:4)$sort()$flags\n#&gt; $SORTED_ASC\n#&gt; [1] TRUE\n#&gt; #&gt; $SORTED_DESC\n#&gt; [1] FALSE\n#&gt; </code></pre>"},{"location":"reference/Series_expr/","title":"Any expr method on a Series","text":"<p>Source: R/series__series.R</p> <pre><code>Series_expr()\n</code></pre>"},{"location":"reference/Series_expr/#returns","title":"Returns","text":"<p>Expr</p> <p>Call an expression on a Series See the individual Expr method pages for full details</p>"},{"location":"reference/Series_expr/#details","title":"Details","text":"<p>This is a shorthand of writing something like <code>pl$DataFrame(s)$select(pl$col(\"sname\")$expr)$to_series(0)</code></p> <p>This subnamespace is experimental. Submit an issue if anything unexpected happend.</p>"},{"location":"reference/Series_expr/#examples","title":"Examples","text":"<pre><code>s = pl$Series(list(1:3,1:2,NULL))\ns$expr$first()\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [list[i32]]\n#&gt; [\n#&gt;  [1, 2, 3]\n#&gt; ]\ns$expr$alias(\"alice\")\n#&gt; polars Series: shape: (3,)\n#&gt; Series: 'alice' [list[i32]]\n#&gt; [\n#&gt;  [1, 2, 3]\n#&gt;  [1, 2]\n#&gt;  []\n#&gt; ]\n </code></pre>"},{"location":"reference/Series_floor/","title":"Series_floor","text":"<p>Source: R/series__series.R</p> <pre><code>Series_floor()\n</code></pre>"},{"location":"reference/Series_floor/#returns","title":"Returns","text":"<p>numeric</p> <p>Floor of this Series</p>"},{"location":"reference/Series_floor/#examples","title":"Examples","text":"<pre><code>pl$Series(c(.5,1.999))$floor()\n#&gt; polars Series: shape: (2,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  0.0\n#&gt;  1.0\n#&gt; ]\n </code></pre>"},{"location":"reference/Series_is_numeric/","title":"is_numeric","text":"<p>Source: R/series__series.R</p>"},{"location":"reference/Series_is_numeric/#format","title":"Format","text":"<p>method</p> <pre><code>Series_is_numeric()\n</code></pre>"},{"location":"reference/Series_is_numeric/#returns","title":"Returns","text":"<p>bool</p> <p>return bool whether series is numeric</p>"},{"location":"reference/Series_is_numeric/#details","title":"Details","text":"<p>true of series dtype is member of pl$numeric_dtypes</p>"},{"location":"reference/Series_is_numeric/#examples","title":"Examples","text":"<pre><code>pl$Series(1:4)$is_numeric()\n#&gt; [1] TRUE\npl$Series(c(\"a\",\"b\",\"c\"))$is_numeric()\n#&gt; [1] FALSE\npl$numeric_dtypes\n#&gt; $Int8\n#&gt; DataType: Int8\n#&gt; #&gt; $Int16\n#&gt; DataType: Int16\n#&gt; #&gt; $Int32\n#&gt; DataType: Int32\n#&gt; #&gt; $Int64\n#&gt; DataType: Int64\n#&gt; #&gt; $Float32\n#&gt; DataType: Float32\n#&gt; #&gt; $Float64\n#&gt; DataType: Float64\n#&gt; </code></pre>"},{"location":"reference/Series_is_sorted/","title":"is_sorted","text":"<p>Source: R/series__series.R</p> <pre><code>Series_is_sorted(reverse = FALSE, nulls_last = NULL)\n</code></pre>"},{"location":"reference/Series_is_sorted/#arguments","title":"Arguments","text":"<ul> <li><code>reverse</code>: order sorted</li> <li><code>nulls_last</code>: bool where to keep nulls, default same as reverse</li> </ul>"},{"location":"reference/Series_is_sorted/#returns","title":"Returns","text":"<p>DataType</p> <p>is_sorted</p>"},{"location":"reference/Series_is_sorted/#details","title":"Details","text":"<p>property sorted flags are not settable, use set_sorted</p>"},{"location":"reference/Series_is_sorted/#examples","title":"Examples","text":"<pre><code>pl$Series(1:4)$sort()$is_sorted()\n#&gt; [1] TRUE\n </code></pre>"},{"location":"reference/Series_len/","title":"len","text":"<p>data</p> <p>Source: R/series__series.R</p>"},{"location":"reference/Series_len/#series_len","title":"Series_len","text":""},{"location":"reference/Series_len/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Series_len\n</code></pre>"},{"location":"reference/Series_len/#returns","title":"Returns","text":"<p>numeric</p> <p>Length of this Series.</p>"},{"location":"reference/Series_len/#examples","title":"Examples","text":"<pre><code>pl$Series(1:10)$len()\n#&gt; [1] 10\n </code></pre>"},{"location":"reference/Series_max/","title":"max","text":"<p>data</p> <p>Source: R/series__series.R</p>"},{"location":"reference/Series_max/#max","title":"max","text":""},{"location":"reference/Series_max/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Series_max\n</code></pre>"},{"location":"reference/Series_max/#returns","title":"Returns","text":"<p>Series</p> <p>Reduce Series with max</p>"},{"location":"reference/Series_max/#details","title":"Details","text":"<p>Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before maxming to prevent overflow issues.</p>"},{"location":"reference/Series_max/#examples","title":"Examples","text":"<pre><code>pl$Series(c(1:2,NA,3,5))$max() # a NA is dropped always\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  5.0\n#&gt; ]\npl$Series(c(1:2,NA,3,NaN,4,Inf))$max() # NaN carries / poisons\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  inf\n#&gt; ]\npl$Series(c(1:2,3,Inf,4,-Inf,5))$max() # Inf-Inf is NaN\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  inf\n#&gt; ]\n </code></pre>"},{"location":"reference/Series_min/","title":"min","text":"<p>data</p> <p>Source: R/series__series.R</p>"},{"location":"reference/Series_min/#min","title":"min","text":""},{"location":"reference/Series_min/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Series_min\n</code></pre>"},{"location":"reference/Series_min/#returns","title":"Returns","text":"<p>Series</p> <p>Reduce Series with min</p>"},{"location":"reference/Series_min/#details","title":"Details","text":"<p>Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before minming to prevent overflow issues.</p>"},{"location":"reference/Series_min/#examples","title":"Examples","text":"<pre><code>pl$Series(c(1:2,NA,3,5))$min() # a NA is dropped always\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  1.0\n#&gt; ]\npl$Series(c(1:2,NA,3,NaN,4,Inf))$min() # NaN carries / poisons\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  1.0\n#&gt; ]\npl$Series(c(1:2,3,Inf,4,-Inf,5))$min() # Inf-Inf is NaN\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  -inf\n#&gt; ]\n </code></pre>"},{"location":"reference/Series_mul/","title":"mul Series","text":"<p>Source: R/series__series.R</p> <pre><code>Series_mul(other)\n## S3 method for class 'Series'\ns1 * s2\n</code></pre>"},{"location":"reference/Series_mul/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: Series or into Series</li> <li><code>s1</code>: lhs Series</li> <li><code>s2</code>: rhs Series or any into Series</li> </ul>"},{"location":"reference/Series_mul/#returns","title":"Returns","text":"<p>Series</p> <p>Series arithmetics</p>"},{"location":"reference/Series_mul/#examples","title":"Examples","text":"<pre><code>pl$Series(1:3)$mul(11:13)\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  11\n#&gt;  24\n#&gt;  39\n#&gt; ]\npl$Series(1:3)$mul(pl$Series(11:13))\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  11\n#&gt;  24\n#&gt;  39\n#&gt; ]\npl$Series(1:3)$mul(1L)\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\n2L * pl$Series(1:3)\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  2\n#&gt;  4\n#&gt;  6\n#&gt; ]\npl$Series(1:3) * 2L\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  2\n#&gt;  4\n#&gt;  6\n#&gt; ]\n </code></pre>"},{"location":"reference/Series_name/","title":"Property: Name","text":"<p>Source: R/series__series.R</p> <pre><code>Series_name()\n</code></pre>"},{"location":"reference/Series_name/#returns","title":"Returns","text":"<p>String the name</p> <p>Get name of Series</p>"},{"location":"reference/Series_name/#examples","title":"Examples","text":"<pre><code>pl$Series(1:3,name = \"alice\")$name\n#&gt; [1] \"alice\"\n </code></pre>"},{"location":"reference/Series_print/","title":"Print Series","text":"<p>Source: R/series__series.R</p> <pre><code>## S3 method for class 'Series'\nprint(x, ...)\nSeries_print()\n</code></pre>"},{"location":"reference/Series_print/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: Series</li> <li><code>...</code>: not used</li> </ul>"},{"location":"reference/Series_print/#returns","title":"Returns","text":"<p>invisible(self)</p> <p>self</p> <p>Print Series</p> <p>Print Series</p>"},{"location":"reference/Series_print/#examples","title":"Examples","text":"<pre><code>print(pl$Series(1:3))\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\npl$Series(1:3)\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\n </code></pre>"},{"location":"reference/Series_rem/","title":"rem Series","text":"<p>Source: R/series__series.R</p> <pre><code>Series_rem(other)\n</code></pre>"},{"location":"reference/Series_rem/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: Series or into Series</li> </ul>"},{"location":"reference/Series_rem/#returns","title":"Returns","text":"<p>Series</p> <p>Series arithmetics, remainder</p>"},{"location":"reference/Series_rem/#examples","title":"Examples","text":"<pre><code>pl$Series(1:4)$rem(2L)\n#&gt; polars Series: shape: (4,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  0\n#&gt;  1\n#&gt;  0\n#&gt; ]\npl$Series(1:3)$rem(pl$Series(11:13))\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt; ]\npl$Series(1:3)$rem(1L)\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  0\n#&gt;  0\n#&gt;  0\n#&gt; ]\n </code></pre>"},{"location":"reference/Series_rename/","title":"Rename a series","text":"<p>Source: R/series__series.R</p>"},{"location":"reference/Series_rename/#format","title":"Format","text":"<p>method</p> <pre><code>Series_rename(name, in_place = FALSE)\n</code></pre>"},{"location":"reference/Series_rename/#arguments","title":"Arguments","text":"<ul> <li><code>name</code>: string the new name</li> <li><code>in_place</code>: bool rename in-place, breaks immutability If true will throw an error unless this option has been set: <code>pl$set_polars_options(strictly_immutable = FALSE)</code></li> </ul>"},{"location":"reference/Series_rename/#returns","title":"Returns","text":"<p>bool</p> <p>Rename a series</p>"},{"location":"reference/Series_rename/#examples","title":"Examples","text":"<pre><code>pl$Series(1:4,\"bob\")$rename(\"alice\")\n#&gt; polars Series: shape: (4,)\n#&gt; Series: 'alice' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  3\n#&gt;  4\n#&gt; ]\n </code></pre>"},{"location":"reference/Series_rep/","title":"duplicate and concatenate a series","text":"<p>Source: R/series__series.R</p>"},{"location":"reference/Series_rep/#format","title":"Format","text":"<p>method</p> <pre><code>Series_rep(n, rechunk = TRUE)\n</code></pre>"},{"location":"reference/Series_rep/#arguments","title":"Arguments","text":"<ul> <li><code>n</code>: number of times to repeat</li> <li><code>rechunk</code>: bool default true, reallocate object in memory. If FALSE the Series will take up less space, If TRUE calculations might be faster.</li> </ul>"},{"location":"reference/Series_rep/#returns","title":"Returns","text":"<p>bool</p> <p>duplicate and concatenate a series</p>"},{"location":"reference/Series_rep/#details","title":"Details","text":"<p>This function in not implemented in pypolars</p>"},{"location":"reference/Series_rep/#examples","title":"Examples","text":"<pre><code>pl$Series(1:2,\"bob\")$rep(3)\n#&gt; polars Series: shape: (6,)\n#&gt; Series: 'bob' [i32]\n#&gt; [\n#&gt;  1\n#&gt;  2\n#&gt;  1\n#&gt;  2\n#&gt;  1\n#&gt;  2\n#&gt; ]\n </code></pre>"},{"location":"reference/Series_series_equal/","title":"Are Series's equal?","text":"<p>Source: R/series__series.R</p>"},{"location":"reference/Series_series_equal/#format","title":"Format","text":"<p>method</p> <pre><code>Series_series_equal(other, null_equal = FALSE, strict = FALSE)\n</code></pre>"},{"location":"reference/Series_series_equal/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: Series to compare with</li> <li><code>null_equal</code>: bool if TRUE, (Null==Null) is true and not Null/NA. Overridden by strict.</li> <li><code>strict</code>: bool if TRUE, do not allow similar DataType comparison. Overrides null_equal.</li> </ul>"},{"location":"reference/Series_series_equal/#returns","title":"Returns","text":"<p>bool</p> <p>Check if series is equal with another Series.</p>"},{"location":"reference/Series_series_equal/#examples","title":"Examples","text":"<pre><code>pl$Series(1:4,\"bob\")$series_equal(pl$Series(1:4))\n#&gt; [1] FALSE\n </code></pre>"},{"location":"reference/Series_set_sorted/","title":"Set sorted","text":"<p>Source: R/series__series.R</p> <pre><code>Series_set_sorted(reverse = FALSE, in_place = FALSE)\n</code></pre>"},{"location":"reference/Series_set_sorted/#arguments","title":"Arguments","text":"<ul> <li><code>reverse</code>: bool if TRUE, signals series is Descendingly sorted, otherwise Ascendingly.</li> <li><code>in_place</code>: if TRUE, will set flag mutably and return NULL. Remember to use pl$set_polars_options(strictly_immutable = FALSE) otherwise an error will be thrown. If FALSE will return a cloned Series with set_flag which in the very most cases should be just fine.</li> </ul>"},{"location":"reference/Series_set_sorted/#returns","title":"Returns","text":"<p>Series invisible</p> <p>Set sorted</p>"},{"location":"reference/Series_set_sorted/#examples","title":"Examples","text":"<pre><code>s = pl$Series(1:4)$set_sorted()\ns$flags\n#&gt; $SORTED_ASC\n#&gt; [1] TRUE\n#&gt; #&gt; $SORTED_DESC\n#&gt; [1] FALSE\n#&gt; </code></pre>"},{"location":"reference/Series_shape/","title":"Shape of series","text":"<p>Source: R/series__series.R</p> <pre><code>Series_shape()\n</code></pre>"},{"location":"reference/Series_shape/#returns","title":"Returns","text":"<p>dimension vector of Series</p> <p>Shape of series</p>"},{"location":"reference/Series_shape/#examples","title":"Examples","text":"<pre><code>identical(pl$Series(1:2)$shape, 2:1)\n#&gt; [1] FALSE\n </code></pre>"},{"location":"reference/Series_sort/","title":"Sort this Series","text":"<p>Source: R/series__series.R</p> <pre><code>Series_sort(reverse = FALSE, in_place = FALSE)\n</code></pre>"},{"location":"reference/Series_sort/#arguments","title":"Arguments","text":"<ul> <li><code>reverse</code>: bool reverse(descending) sort</li> <li><code>in_place</code>: bool sort mutable in-place, breaks immutability If true will throw an error unless this option has been set: <code>pl$set_polars_options(strictly_immutable = FALSE)</code></li> </ul>"},{"location":"reference/Series_sort/#returns","title":"Returns","text":"<p>Series</p> <p>Sort this Series</p>"},{"location":"reference/Series_sort/#examples","title":"Examples","text":"<pre><code>pl$Series(c(1,NA,NaN,Inf,-Inf))$sort()\n#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  null\n#&gt;  -inf\n#&gt;  1.0\n#&gt;  inf\n#&gt;  NaN\n#&gt; ]\n </code></pre>"},{"location":"reference/Series_std/","title":"Get the standard deviation of this Series.","text":"<p>Source: R/series__series.R</p>"},{"location":"reference/Series_std/#format","title":"Format","text":"<p>method</p> <pre><code>Series_std(ddof = 1)\n</code></pre>"},{"location":"reference/Series_std/#arguments","title":"Arguments","text":"<ul> <li><code>ddof</code>: \u201cDelta Degrees of Freedom\u201d: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1.</li> </ul>"},{"location":"reference/Series_std/#returns","title":"Returns","text":"<p>bool</p> <p>Get the standard deviation of this Series.</p>"},{"location":"reference/Series_std/#examples","title":"Examples","text":"<pre><code>pl$Series(1:4,\"bob\")$std()\n#&gt; [1] 1.290994\n </code></pre>"},{"location":"reference/Series_sub/","title":"sub Series","text":"<p>Source: R/series__series.R</p> <pre><code>Series_sub(other)\n## S3 method for class 'Series'\ns1 - s2\n</code></pre>"},{"location":"reference/Series_sub/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: Series or into Series</li> <li><code>s1</code>: lhs Series</li> <li><code>s2</code>: rhs Series or any into Series</li> </ul>"},{"location":"reference/Series_sub/#returns","title":"Returns","text":"<p>Series</p> <p>Series arithmetics</p>"},{"location":"reference/Series_sub/#examples","title":"Examples","text":"<pre><code>pl$Series(1:3)$sub(11:13)\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  -10\n#&gt;  -10\n#&gt;  -10\n#&gt; ]\npl$Series(1:3)$sub(pl$Series(11:13))\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  -10\n#&gt;  -10\n#&gt;  -10\n#&gt; ]\npl$Series(1:3)$sub(1L)\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  0\n#&gt;  1\n#&gt;  2\n#&gt; ]\n1L - pl$Series(1:3)\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  0\n#&gt;  -1\n#&gt;  -2\n#&gt; ]\npl$Series(1:3) - 1L\n#&gt; polars Series: shape: (3,)\n#&gt; Series: '' [i32]\n#&gt; [\n#&gt;  0\n#&gt;  1\n#&gt;  2\n#&gt; ]\n </code></pre>"},{"location":"reference/Series_sum/","title":"sum","text":"<p>data</p> <p>Source: R/series__series.R</p>"},{"location":"reference/Series_sum/#sum","title":"Sum","text":""},{"location":"reference/Series_sum/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>Series_sum\n</code></pre>"},{"location":"reference/Series_sum/#returns","title":"Returns","text":"<p>Series</p> <p>Reduce Series with sum</p>"},{"location":"reference/Series_sum/#details","title":"Details","text":"<p>Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues.</p>"},{"location":"reference/Series_sum/#examples","title":"Examples","text":"<pre><code>pl$Series(c(1:2,NA,3,5))$sum() # a NA is dropped always\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  11.0\n#&gt; ]\npl$Series(c(1:2,NA,3,NaN,4,Inf))$sum() # NaN carries / poisons\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  NaN\n#&gt; ]\npl$Series(c(1:2,3,Inf,4,-Inf,5))$sum() # Inf-Inf is NaN\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [f64]\n#&gt; [\n#&gt;  NaN\n#&gt; ]\n </code></pre>"},{"location":"reference/Series_to_frames/","title":"Series to DataFrame","text":"<p>Source: R/series__series.R</p>"},{"location":"reference/Series_to_frames/#format","title":"Format","text":"<p>method</p> <pre><code>Series_to_frame()\n</code></pre>"},{"location":"reference/Series_to_frames/#returns","title":"Returns","text":"<p>Series</p> <p>Series to DataFrame</p>"},{"location":"reference/Series_to_frames/#examples","title":"Examples","text":"<pre><code>pl$Series(1:4,\"bob\")$to_frame()\n#&gt; shape: (4, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 bob \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 2   \u2502\n#&gt; \u2502 3   \u2502\n#&gt; \u2502 4   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Series_to_lit/","title":"Series to Literal","text":"<p>Source: R/series__series.R</p> <pre><code>Series_to_lit()\n</code></pre>"},{"location":"reference/Series_to_lit/#returns","title":"Returns","text":"<p>Expr</p> <p>convert Series to literal to perform modification and return</p>"},{"location":"reference/Series_to_lit/#examples","title":"Examples","text":"<pre><code>(\npl$Series(list(1:1, 1:2, 1:3, 1:4))\n$print()\n$to_lit()\n$arr$lengths()\n$sum()\n$cast(pl$dtypes$Int8)\n$lit_to_s()\n)\n#&gt; shape: (4,)\n#&gt; Series: '' [list[i32]]\n#&gt; [\n#&gt;  [1]\n#&gt;  [1, 2]\n#&gt;  [1, 2, 3]\n#&gt;  [1, 2, ... 4]\n#&gt; ]\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [i8]\n#&gt; [\n#&gt;  10\n#&gt; ]\n </code></pre>"},{"location":"reference/Series_to_r/","title":"Get r vector/list","text":"<p>Source: R/series__series.R</p> <pre><code>Series_to_r()\nSeries_to_vector()\nSeries_to_r_list()\n</code></pre>"},{"location":"reference/Series_to_r/#returns","title":"Returns","text":"<p>R list or vector</p> <p>R vector</p> <p>R list</p> <p>return R list (if polars Series is list) or vector (any other polars Series type)</p> <p>return R vector (implicit unlist)</p> <p>return R list (implicit as.list)</p>"},{"location":"reference/Series_to_r/#details","title":"Details","text":"<p>Fun fact: Nested polars Series list must have same inner type, e.g. List(List(Int32)) Thus every leaf(non list type) will be placed on the same depth of the tree, and be the same type.</p>"},{"location":"reference/Series_to_r/#examples","title":"Examples","text":"<pre><code>#make polars Series_Utf8\nseries_vec = pl$Series(letters[1:3])\n#Series_non_list\nseries_vec$to_r() #as vector because Series DataType is not list (is Utf8)\n#&gt; [1] \"a\" \"b\" \"c\"\nseries_vec$to_r_list() #implicit call as.list(), convert to list\n#&gt; [[1]]\n#&gt; [1] \"a\"\n#&gt; #&gt; [[2]]\n#&gt; [1] \"b\"\n#&gt; #&gt; [[3]]\n#&gt; [1] \"c\"\n#&gt; series_vec$to_vector() #implicit call unlist(), same as to_r() as already vector\n#&gt; [1] \"a\" \"b\" \"c\"\n#make nested Series_list of Series_list of Series_Int32\n#using Expr syntax because currently more complete translated\nseries_list = pl$DataFrame(list(a=c(1:5,NA_integer_)))$select(\npl$col(\"a\")$list()$list()$append(\n(\npl$col(\"a\")$head(2)$list()$append(\npl$col(\"a\")$tail(1)$list()\n)\n)$list()\n)\n)$get_column(\"a\") # get series from DataFrame\n#Series_list\nseries_list$to_r() #as list because Series DataType is list\n#&gt; [[1]]\n#&gt; [[1]][[1]]\n#&gt; [1]  1  2  3  4  5 NA\n#&gt; #&gt; #&gt; [[2]]\n#&gt; [[2]][[1]]\n#&gt; [1] 1 2\n#&gt; #&gt; [[2]][[2]]\n#&gt; [1] NA\n#&gt; #&gt; series_list$to_r_list() #implicit call as.list(), same as to_r() as already list\n#&gt; [[1]]\n#&gt; [[1]][[1]]\n#&gt; [1]  1  2  3  4  5 NA\n#&gt; #&gt; #&gt; [[2]]\n#&gt; [[2]][[1]]\n#&gt; [1] 1 2\n#&gt; #&gt; [[2]][[2]]\n#&gt; [1] NA\n#&gt; #&gt; series_list$to_vector() #implicit call unlist(), append into a vector\n#&gt; [1]  1  2  3  4  5 NA  1  2 NA\n#\n#\n </code></pre>"},{"location":"reference/Series_value_count/","title":"Value Counts as DataFrame","text":"<p>Source: R/series__series.R</p> <pre><code>Series_value_counts(sorted = TRUE, multithreaded = FALSE)\n</code></pre>"},{"location":"reference/Series_value_count/#arguments","title":"Arguments","text":"<ul> <li><code>sorted</code>: bool, default TRUE: sort table by value; FALSE: random</li> <li><code>multithreaded</code>: bool, default FALSE, process multithreaded. Likely faster to have TRUE for a big Series. If called within an already multithreaded context such calling apply on a GroupBy with many groups, then likely slightly faster to leave FALSE.</li> </ul>"},{"location":"reference/Series_value_count/#returns","title":"Returns","text":"<p>DataFrame</p> <p>Value Counts as DataFrame</p>"},{"location":"reference/Series_value_count/#examples","title":"Examples","text":"<pre><code>pl$Series(iris$Species,\"flower species\")$value_counts()\n#&gt; shape: (3, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 flower species \u2506 counts \u2502\n#&gt; \u2502 ---            \u2506 ---    \u2502\n#&gt; \u2502 cat            \u2506 u32    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 setosa         \u2506 50     \u2502\n#&gt; \u2502 versicolor     \u2506 50     \u2502\n#&gt; \u2502 virginica      \u2506 50     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/Series_var/","title":"Get the standard deviation of this Series.","text":"<p>Source: R/series__series.R</p>"},{"location":"reference/Series_var/#format","title":"Format","text":"<p>method</p> <pre><code>Series_var(ddof = 1)\n</code></pre>"},{"location":"reference/Series_var/#arguments","title":"Arguments","text":"<ul> <li><code>ddof</code>: \u201cDelta Degrees of Freedom\u201d: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1.</li> </ul>"},{"location":"reference/Series_var/#returns","title":"Returns","text":"<p>bool</p> <p>Get the standard deviation of this Series.</p>"},{"location":"reference/Series_var/#examples","title":"Examples","text":"<pre><code>pl$Series(1:4,\"bob\")$var()\n#&gt; [1] 1.666667\n </code></pre>"},{"location":"reference/all/","title":"New Expr referring to all columns","text":"<p>Source: R/lazy_functions.R</p>"},{"location":"reference/all/#returns","title":"Returns","text":"<p>Boolean literal</p> <p>Not to mix up with <code>Expr_object$all()</code> which is a 'reduce Boolean columns by AND' method.</p>"},{"location":"reference/all/#details","title":"Details","text":"<p>last <code>all()</code> in example is this Expr method, the first <code>pl$all()</code> refers to \"all-columns\" and is an expression constructor</p>"},{"location":"reference/all/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(list(all=c(TRUE,TRUE),some=c(TRUE,FALSE)))$select(pl$all()$all())\n#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 all  \u2506 some  \u2502\n#&gt; \u2502 ---  \u2506 ---   \u2502\n#&gt; \u2502 bool \u2506 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true \u2506 false \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/and_then/","title":"map an ok-value or pass on an err-value","text":"<p>Source: R/rust_result.R</p> <pre><code>and_then(x, f)\n</code></pre>"},{"location":"reference/and_then/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: any R object</li> <li><code>f</code>: a closure that takes the ok part as input</li> </ul>"},{"location":"reference/and_then/#returns","title":"Returns","text":"<p>same R object wrapped in a Err-result</p> <p>map an ok-value or pass on an err-value</p>"},{"location":"reference/arr_arg_max/","title":"Arg max sublists","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_arg_max/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/arr_arg_max/#returns","title":"Returns","text":"<p>Expr</p> <p>Retrieve the index of the maximum value in every sublist.</p>"},{"location":"reference/arr_arg_max/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(s = list(1:2,2:1)))\ndf$select(pl$col(\"s\")$arr$arg_max())\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2502\n#&gt; \u2502 0   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/arr_arg_min/","title":"Arg min sublists","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_arg_min/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/arr_arg_min/#returns","title":"Returns","text":"<p>Expr</p> <p>Retrieve the index of the minimal value in every sublist.</p>"},{"location":"reference/arr_arg_min/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(s = list(1:2,2:1)))\ndf$select(pl$col(\"s\")$arr$arg_min())\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s   \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 u32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 0   \u2502\n#&gt; \u2502 1   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/arr_concat/","title":"concat another list","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_concat/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/arr_concat/#arguments","title":"Arguments","text":"<ul> <li><code>other</code>: Rlist, Expr or column of same tyoe as self.</li> </ul>"},{"location":"reference/arr_concat/#returns","title":"Returns","text":"<p>Expr</p> <p>Concat the arrays in a Series dtype List in linear time.</p>"},{"location":"reference/arr_concat/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  a = list(\"a\",\"x\"),\n  b = list(c(\"b\",\"c\"),c(\"y\",\"z\"))\n)\ndf$select(pl$col(\"a\")$arr$concat(pl$col(\"b\")))\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a               \u2502\n#&gt; \u2502 ---             \u2502\n#&gt; \u2502 list[str]       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [\"a\", \"b\", \"c\"] \u2502\n#&gt; \u2502 [\"x\", \"y\", \"z\"] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$col(\"a\")$arr$concat(\"hello from R\"))\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a                     \u2502\n#&gt; \u2502 ---                   \u2502\n#&gt; \u2502 list[str]             \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [\"a\", \"hello from R\"] \u2502\n#&gt; \u2502 [\"x\", \"hello from R\"] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$col(\"a\")$arr$concat(list(\"hello\",c(\"hello\",\"world\"))))\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a                       \u2502\n#&gt; \u2502 ---                     \u2502\n#&gt; \u2502 list[str]               \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [\"a\", \"hello\"]          \u2502\n#&gt; \u2502 [\"x\", \"hello\", \"world\"] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/arr_contains/","title":"Sublists contains","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_contains/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/arr_contains/#arguments","title":"Arguments","text":"<ul> <li><code>item</code>: any into Expr/literal</li> </ul>"},{"location":"reference/arr_contains/#returns","title":"Returns","text":"<p>Expr of a boolean mask</p> <p>Check if sublists contain the given item.</p>"},{"location":"reference/arr_contains/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) #NULL or integer() or list()\ndf$select(pl$col(\"a\")$arr$contains(1L))\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a     \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 bool  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 true  \u2502\n#&gt; \u2502 false \u2502\n#&gt; \u2502 true  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/arr_diff/","title":"Diff sublists","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_diff/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/arr_diff/#arguments","title":"Arguments","text":"<ul> <li><code>n</code>: Number of slots to shift</li> <li><code>null_behavior</code>: choice \"ignore\"(default) \"drop\"</li> </ul>"},{"location":"reference/arr_diff/#returns","title":"Returns","text":"<p>Expr</p> <p>Calculate the n-th discrete difference of every sublist.</p>"},{"location":"reference/arr_diff/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(s = list(1:4,c(10L,2L,1L))))\ndf$select(pl$col(\"s\")$arr$diff())\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s                \u2502\n#&gt; \u2502 ---              \u2502\n#&gt; \u2502 list[i32]        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [null, 1, ... 1] \u2502\n#&gt; \u2502 [null, -8, -1]   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/arr_eval/","title":"eval sublists (kinda like lapply)","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_eval/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/arr_eval/#arguments","title":"Arguments","text":"<ul> <li><code>Expr</code>: Expression to run. Note that you can select an element with <code>pl$first()</code>, or <code>pl$col()</code></li> <li><code>parallel</code>: bool Run all expression parallel. Don't activate this blindly. Parallelism is worth it if there is enough work to do per thread. This likely should not be use in the groupby context, because we already parallel execution per group</li> </ul>"},{"location":"reference/arr_eval/#returns","title":"Returns","text":"<p>Expr</p> <p>Run any polars expression against the lists' elements.</p>"},{"location":"reference/arr_eval/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(a = list(c(1,8,3), b = c(4,5,2)))\ndf$select(pl$all()$cast(pl$dtypes$Int64))$with_column(\npl$concat_list(c(\"a\",\"b\"))$arr$eval(pl$element()$rank())$alias(\"rank\")\n)\n#&gt; shape: (3, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 new_column \u2506 b   \u2506 rank       \u2502\n#&gt; \u2502 ---        \u2506 --- \u2506 ---        \u2502\n#&gt; \u2502 i64        \u2506 i64 \u2506 list[f32]  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1          \u2506 4   \u2506 [1.0, 2.0] \u2502\n#&gt; \u2502 8          \u2506 5   \u2506 [1.0, 2.0] \u2502\n#&gt; \u2502 3          \u2506 2   \u2506 [1.0, 2.0] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/arr_first/","title":"First in sublists","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_first/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/arr_first/#returns","title":"Returns","text":"<p>Expr</p> <p>Get the first value of the sublists.</p>"},{"location":"reference/arr_first/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) #NULL or integer() or list()\ndf$select(pl$col(\"a\")$arr$first())\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2502 1    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/arr_get/","title":"Get list","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_get/#format","title":"Format","text":"<p>function</p> <pre><code>## S3 method for class 'ExprArrNameSpace'\nx[index]\n</code></pre>"},{"location":"reference/arr_get/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: ExprArrNameSpace</li> <li><code>index</code>: value to get</li> </ul>"},{"location":"reference/arr_get/#returns","title":"Returns","text":"<p>Expr</p> <p>Get the value by index in the sublists.</p>"},{"location":"reference/arr_get/#details","title":"Details","text":"<p><code>[.ExprArrNameSpace</code> used as e.g. <code>pl$col(\"a\")$arr[0]</code> same as <code>pl$col(\"a\")$get(0)</code></p>"},{"location":"reference/arr_get/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) #NULL or integer() or list()\ndf$select(pl$col(\"a\")$arr$get(0))\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2502 1    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$col(\"a\")$arr$get(c(2,0,-1)))\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2502 2    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) #NULL or integer() or list()\ndf$select(pl$col(\"a\")$arr[0])\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2502 1    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$col(\"a\")$arr[c(2,0,-1)])\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2502 2    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/arr_head/","title":"Heads of sublists","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_head/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/arr_head/#arguments","title":"Arguments","text":"<ul> <li><code>n</code>: Numeric or Expr, number of values to return for each sublist.</li> </ul>"},{"location":"reference/arr_head/#returns","title":"Returns","text":"<p>Expr</p> <p>head the first <code>n</code> values of every sublist.</p>"},{"location":"reference/arr_head/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(a = list(1:4, c(10L, 2L, 1L))))\ndf$select(pl$col(\"a\")$arr$head(2))\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2]    \u2502\n#&gt; \u2502 [10, 2]   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/arr_join/","title":"Join sublists","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_join/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/arr_join/#arguments","title":"Arguments","text":"<ul> <li><code>separator</code>: string to separate the items with</li> </ul>"},{"location":"reference/arr_join/#returns","title":"Returns","text":"<p>Series of dtype Utf8</p> <p>Join all string items in a sublist and place a separator between them. This errors if inner type of list <code>!= Utf8</code>.</p>"},{"location":"reference/arr_join/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(s = list(c(\"a\",\"b\",\"c\"), c(\"x\",\"y\"))))\ndf$select(pl$col(\"s\")$arr$join(\" \"))\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s     \u2502\n#&gt; \u2502 ---   \u2502\n#&gt; \u2502 str   \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 a b c \u2502\n#&gt; \u2502 x y   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/arr_last/","title":"Last in sublists","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_last/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/arr_last/#returns","title":"Returns","text":"<p>Expr</p> <p>Get the last value of the sublists.</p>"},{"location":"reference/arr_last/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) #NULL or integer() or list()\ndf$select(pl$col(\"a\")$arr$last())\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2502 2    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/arr_lengths/","title":"Lengths arrays in list","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_lengths/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/arr_lengths/#returns","title":"Returns","text":"<p>Expr</p> <p>Get the length of the arrays as UInt32</p>"},{"location":"reference/arr_lengths/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list_of_strs = pl$Series(list(c(\"a\",\"b\"),\"c\")))\ndf$with_column(pl$col(\"list_of_strs\")$arr$lengths()$alias(\"list_of_strs_lengths\"))\n#&gt; shape: (2, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 list_of_strs \u2506 list_of_strs_lengths \u2502\n#&gt; \u2502 ---          \u2506 ---                  \u2502\n#&gt; \u2502 list[str]    \u2506 u32                  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [\"a\", \"b\"]   \u2506 2                    \u2502\n#&gt; \u2502 [\"c\"]        \u2506 1                    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/arr_max/","title":"Max lists","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_max/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/arr_max/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the max value of the lists in the array.</p>"},{"location":"reference/arr_max/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(values = pl$Series(list(1L,2:3)))\ndf$select(pl$col(\"values\")$arr$max())\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values \u2502\n#&gt; \u2502 ---    \u2502\n#&gt; \u2502 i32    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1      \u2502\n#&gt; \u2502 3      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/arr_mean/","title":"Mean of lists","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_mean/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/arr_mean/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the mean value of the lists in the array.</p>"},{"location":"reference/arr_mean/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(values = pl$Series(list(1L,2:3)))\ndf$select(pl$col(\"values\")$arr$mean())\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values \u2502\n#&gt; \u2502 ---    \u2502\n#&gt; \u2502 f64    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0    \u2502\n#&gt; \u2502 2.5    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/arr_min/","title":"#' Min lists","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_min/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/arr_min/#returns","title":"Returns","text":"<p>Expr</p> <p>Compute the min value of the lists in the array.</p>"},{"location":"reference/arr_min/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(values = pl$Series(list(1L,2:3)))\ndf$select(pl$col(\"values\")$arr$min())\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values \u2502\n#&gt; \u2502 ---    \u2502\n#&gt; \u2502 i32    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1      \u2502\n#&gt; \u2502 2      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/arr_reverse/","title":"Reverse list","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_reverse/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/arr_reverse/#returns","title":"Returns","text":"<p>Expr</p> <p>Reverse the arrays in the list.</p>"},{"location":"reference/arr_reverse/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(\n  values = list(3:1, c(9L, 1:2))\n))\ndf$select(pl$col(\"values\")$arr$reverse())\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values    \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1, 2, 3] \u2502\n#&gt; \u2502 [2, 1, 9] \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/arr_shift/","title":"Shift sublists","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_shift/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/arr_shift/#arguments","title":"Arguments","text":"<ul> <li><code>periods</code>: Value. Number of places to shift (may be negative).</li> </ul>"},{"location":"reference/arr_shift/#returns","title":"Returns","text":"<p>Expr</p> <p>Shift values by the given period.</p>"},{"location":"reference/arr_shift/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(s = list(1:4,c(10L,2L,1L))))\ndf$select(pl$col(\"s\")$arr$shift())\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s                \u2502\n#&gt; \u2502 ---              \u2502\n#&gt; \u2502 list[i32]        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [null, 1, ... 3] \u2502\n#&gt; \u2502 [null, 10, 2]    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/arr_slice/","title":"Slice sublists","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_slice/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/arr_slice/#arguments","title":"Arguments","text":"<ul> <li><code>offset</code>: value or Expr. Start index. Negative indexing is supported.</li> <li><code>length</code>: value or Expr. Length of the slice. If set to <code>None</code> (default), the slice is taken to the end of the list.</li> </ul>"},{"location":"reference/arr_slice/#returns","title":"Returns","text":"<p>Expr</p> <p>Slice every sublist.</p>"},{"location":"reference/arr_slice/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(s = list(1:4,c(10L,2L,1L))))\ndf$select(pl$col(\"s\")$arr$slice(2))\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 s         \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [3, 4]    \u2502\n#&gt; \u2502 [1]       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/arr_sort/","title":"Get list","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_sort/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/arr_sort/#arguments","title":"Arguments","text":"<ul> <li> <p><code>index</code>: numeric vector or Expr of length 1 or same length of Series. if length 1 pick same value from each sublist, if length as Series/column, pick by individual index across sublists.</p> <p>So index <code>0</code> would return the first item of every sublist and index <code>-1</code> would return the last item of every sublist if an index is out of bounds, it will return a <code>None</code>.</p> </li> </ul>"},{"location":"reference/arr_sort/#returns","title":"Returns","text":"<p>Expr</p> <p>Get the value by index in the sublists.</p>"},{"location":"reference/arr_sort/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) #NULL or integer() or list()\ndf$select(pl$col(\"a\")$arr$get(0))\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 3    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2502 1    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$col(\"a\")$arr$get(c(2,0,-1)))\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2502\n#&gt; \u2502 ---  \u2502\n#&gt; \u2502 i32  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2502\n#&gt; \u2502 null \u2502\n#&gt; \u2502 2    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/arr_sum/","title":"Sum lists","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_sum/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/arr_sum/#returns","title":"Returns","text":"<p>Expr</p> <p>Sum all the lists in the array.</p>"},{"location":"reference/arr_sum/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(values = pl$Series(list(1L,2:3)))\ndf$select(pl$col(\"values\")$arr$sum())\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 values \u2502\n#&gt; \u2502 ---    \u2502\n#&gt; \u2502 i32    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1      \u2502\n#&gt; \u2502 5      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/arr_tail/","title":"Tails of sublists","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_tail/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/arr_tail/#arguments","title":"Arguments","text":"<ul> <li><code>n</code>: Numeric or Expr, number of values to return for each sublist.</li> </ul>"},{"location":"reference/arr_tail/#returns","title":"Returns","text":"<p>Expr</p> <p>tail the first <code>n</code> values of every sublist.</p>"},{"location":"reference/arr_tail/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(a = list(1:4, c(10L, 2L, 1L))))\ndf$select(pl$col(\"a\")$arr$tail(2))\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [3, 4]    \u2502\n#&gt; \u2502 [2, 1]    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/arr_take/","title":"take in sublists","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_take/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/arr_take/#returns","title":"Returns","text":"<p>Expr</p> <p>Get the take value of the sublists.</p>"},{"location":"reference/arr_take/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) #NULL or integer() or list()\nidx = pl$Series(list(0:1,1L,1L))\ndf$select(pl$col(\"a\")$arr$take(99))\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 list[i32] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [null]    \u2502\n#&gt; \u2502 [null]    \u2502\n#&gt; \u2502 [null]    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/arr_to_struct/","title":"List to Struct","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_to_struct/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/arr_to_struct/#arguments","title":"Arguments","text":"<ul> <li><code>n_field_strategy</code>: Strategy to determine the number of fields of the struct. default = 'first_non_null' else 'max_width'</li> <li><code>name_generator</code>: an R function that takes a scalar column number and outputs a string value. The default NULL is equivalent to the R function <code>\\(idx) paste0(\"field_\",idx)</code></li> <li><code>upper_bound</code>: upper_bound numeric A polars <code>LazyFrame</code> needs to know the schema at all time. The caller therefore must provide an <code>upper_bound</code> of struct fields that will be set. If this is incorrectly downstream operation may fail. For instance an <code>all().sum()</code> expression will look in the current schema to determine which columns to select. It is adviced to set this value in a lazy query.</li> </ul>"},{"location":"reference/arr_to_struct/#returns","title":"Returns","text":"<p>Expr</p> <p>List to Struct</p>"},{"location":"reference/arr_to_struct/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(a = list(1:3, 1:2)))\ndf2 = df$select(pl$col(\"a\")$arr$to_struct(\n  name_generator =  \\(idx) paste0(\"hello_you_\",idx))\n)\ndf2$unnest()\n#&gt; shape: (2, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 hello_you_0 \u2506 hello_you_1 \u2506 hello_you_2 \u2502\n#&gt; \u2502 ---         \u2506 ---         \u2506 ---         \u2502\n#&gt; \u2502 i32         \u2506 i32         \u2506 i32         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1           \u2506 2           \u2506 3           \u2502\n#&gt; \u2502 1           \u2506 2           \u2506 null        \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf2$to_list()\n#&gt; $a\n#&gt; $a$hello_you_0\n#&gt; [1] 1 1\n#&gt; #&gt; $a$hello_you_1\n#&gt; [1] 2 2\n#&gt; #&gt; $a$hello_you_2\n#&gt; [1]  3 NA\n#&gt; #&gt; </code></pre>"},{"location":"reference/arr_unique/","title":"Unique list","text":"<p>Source: R/expr__list.R</p>"},{"location":"reference/arr_unique/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/arr_unique/#returns","title":"Returns","text":"<p>Expr</p> <p>Get the unique/distinct values in the list.</p>"},{"location":"reference/arr_unique/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(a = list(1, 1, 2)))\ndf$select(pl$col(\"a\")$arr$unique())\n#&gt; shape: (3, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a         \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 list[f64] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [1.0]     \u2502\n#&gt; \u2502 [1.0]     \u2502\n#&gt; \u2502 [2.0]     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/as.list.Expr/","title":"as.list Expr","text":"<p>Source: R/expr__expr.R</p> <pre><code>## S3 method for class 'Expr'\nas.list(x, ...)\n</code></pre>"},{"location":"reference/as.list.Expr/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: Expr</li> <li><code>...</code>: not used</li> </ul> <p>wraps an Expr in a list</p>"},{"location":"reference/c.Series/","title":"Immutable combine series","text":"<p>Source: R/series__series.R</p> <pre><code>## S3 method for class 'Series'\nc(x, ...)\n</code></pre>"},{"location":"reference/c.Series/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: a Series</li> <li><code>...</code>: Series(s) or any object into Series meaning <code>pl$Series(object)</code> returns a series</li> </ul>"},{"location":"reference/c.Series/#returns","title":"Returns","text":"<p>a combined Series</p> <p>Immutable combine series</p>"},{"location":"reference/c.Series/#details","title":"Details","text":"<p>append datatypes has to match. Combine does not rechunk. Read more about R vectors, Series and chunks in <code>docs_translations</code>:</p>"},{"location":"reference/c.Series/#examples","title":"Examples","text":"<pre><code>s = c(pl$Series(1:5),3:1,NA_integer_)\ns$chunk_lengths() #the series contain three unmerged chunks\n#&gt; [1] 5 3 1\n </code></pre>"},{"location":"reference/cash-set-.DataFrame/","title":"generic setter method","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>## S3 replacement method for class 'DataFrame'\nself$name &lt;- value\n</code></pre>"},{"location":"reference/cash-set-.DataFrame/#arguments","title":"Arguments","text":"<ul> <li><code>self</code>: DataFrame</li> <li><code>name</code>: name method/property to set</li> <li><code>value</code>: value to insert</li> </ul>"},{"location":"reference/cash-set-.DataFrame/#returns","title":"Returns","text":"<p>value</p> <p>set value of properties of DataFrames</p>"},{"location":"reference/cash-set-.DataFrame/#details","title":"Details","text":"<p>settable polars object properties may appear to be R objects, but they are not. See <code>[[method_name]]</code> example</p>"},{"location":"reference/cash-set-.DataFrame/#examples","title":"Examples","text":"<pre><code>#For internal use\n#is only activated for following methods of DataFrame\nls(polars:::DataFrame.property_setters)\n#&gt; [1] \"columns\"\n#specific use case for one object property 'columns' (names)\ndf = pl$DataFrame(iris)\n#get values\ndf$columns\n#&gt; [1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n#set + get values\ndf$columns = letters[1:5] #&lt;- is fine too\ndf$columns\n#&gt; [1] \"a\" \"b\" \"c\" \"d\" \"e\"\n# Rstudio is not using the standard R code completion tool\n# and it will backtick any special characters. It is possible\n# to completely customize the R / Rstudio code completion except\n# it will trigger Rstudio to backtick any completion! Also R does\n# not support package isolated customization.\n#Concrete example if tabbing on 'df$' the raw R suggestion is df$columns&lt;-\n#however Rstudio backticks it into df$`columns&lt;-`\n#to make life simple, this is valid polars syntax also, and can be used in fast scripting\ndf$`columns&lt;-` = letters[5:1]\n#for stable code prefer e.g.  df$columns = letters[5:1]\n#to see inside code of a property use the [[]] syntax instead\ndf[[\"columns\"]] # to see property code, .pr is the internal polars api into rust polars\n#&gt; function() {\n#&gt;   .pr$DataFrame$columns(self)\n#&gt; }\n#&gt; &lt;environment: 0x5644b5eb38d0&gt;\n#&gt; attr(,\"class\")\n#&gt; [1] \"setter\"   \"property\" \"function\"\npolars:::DataFrame.property_setters$columns #and even more obscure to see setter code\n#&gt; function(self, names) unwrap(.pr$DataFrame$set_column_names_mut(self,names))\n#&gt; &lt;environment: namespace:polars&gt;\n </code></pre>"},{"location":"reference/coalesce/","title":"Coalesce","text":"<p>Source: R/lazy_functions.R</p>"},{"location":"reference/coalesce/#arguments","title":"Arguments","text":"<ul> <li> <p><code>...</code>: is a: If one arg:</p> <ul> <li>Series or Expr, same as <code>column$sum()</code></li> <li>string, same as <code>pl$col(column)$sum()</code></li> <li>numeric, same as <code>pl$lit(column)$sum()</code></li> <li>list of strings(column names) or exprressions to add up as expr1 + expr2 + expr3 + ...</li> </ul> <p>If several args, then wrapped in a list and handled as above. - <code>exprs</code>: list of Expr or Series or strings or a mix, or a char vector</p> </li> </ul>"},{"location":"reference/coalesce/#returns","title":"Returns","text":"<p>Expr</p> <p>Expr</p> <p>Folds the expressions from left to right, keeping the first non-null value.</p> <p>Folds the expressions from left to right, keeping the first non-null value.</p>"},{"location":"reference/coalesce/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  a = NA_real_,\n  b = c(1:2,NA_real_,NA_real_),\n  c = c(1:3,NA_real_)\n)\n#use coalesce to get first non Null value for each row, otherwise insert 99.9\ndf$with_column(\npl$coalesce(\"a\", \"b\", \"c\", 99.9)$alias(\"d\")\n)\n#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2506 c    \u2506 d    \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 1.0  \u2506 1.0  \u2506 1.0  \u2502\n#&gt; \u2502 null \u2506 2.0  \u2506 2.0  \u2506 2.0  \u2502\n#&gt; \u2502 null \u2506 null \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 99.9 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#Create lagged columns and collect them into a list. This mimics a rolling window.\ndf = pl$DataFrame(A = c(1,2,9,2,13))\ndf$with_columns(lapply(\n0:2,\n  \\(i) pl$col(\"A\")$shift(i)$alias(paste0(\"A_lag_\",i))\n))$select(\npl$concat_list(lapply(2:0,\\(i) pl$col(paste0(\"A_lag_\",i))))$alias(\n\"A_rolling\"\n)\n)\n#&gt; shape: (5, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 A_rolling         \u2502\n#&gt; \u2502 ---               \u2502\n#&gt; \u2502 list[f64]         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 [null, null, 1.0] \u2502\n#&gt; \u2502 [null, 1.0, 2.0]  \u2502\n#&gt; \u2502 [1.0, 2.0, 9.0]   \u2502\n#&gt; \u2502 [2.0, 9.0, 2.0]   \u2502\n#&gt; \u2502 [9.0, 2.0, 13.0]  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#concat Expr a Series and an R obejct\npl$concat_list(list(\npl$lit(1:5),\npl$Series(5:1),\nrep(0L,5)\n))$alias(\"alice\")$lit_to_s()\n#&gt; polars Series: shape: (5,)\n#&gt; Series: 'alice' [list[i32]]\n#&gt; [\n#&gt;  [1, 5, 0]\n#&gt;  [2, 4, 0]\n#&gt;  [3, 3, 0]\n#&gt;  [4, 2, 0]\n#&gt;  [5, 1, 0]\n#&gt; ]\n </code></pre>"},{"location":"reference/col/","title":"Start Expression with a column","text":"<p>Source: R/lazy_functions.R</p>"},{"location":"reference/col/#arguments","title":"Arguments","text":"<ul> <li> <p><code>name</code>:  * a single column by a string</p> <ul> <li>all columns by using a wildcard <code>\"*\"</code></li> <li>multiple columns as vector of strings</li> <li>column by regular expression if the regex starts with <code>^</code> and ends with <code>$</code></li> </ul> <p>e.g. pl$DataFrame(iris)$select(pl$col(c(\"^Sepal.*$\")))  * a single DataType or an R list of DataTypes, select any column of any such DataType  * Series of utf8 strings abiding to above options</p> </li> </ul>"},{"location":"reference/col/#returns","title":"Returns","text":"<p>Column Exprression</p> <p>Return an expression representing a column in a DataFrame.</p>"},{"location":"reference/col/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(list(foo=1, bar=2L,foobar=\"3\"))\n#a single column by a string\ndf$select(pl$col(\"foo\"))\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n#all columns by wildcard\ndf$select(pl$col(\"*\"))\n#&gt; shape: (1, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 foobar \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---    \u2502\n#&gt; \u2502 f64 \u2506 i32 \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 2   \u2506 3      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(pl$all())\n#&gt; shape: (1, 3)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2506 foobar \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 ---    \u2502\n#&gt; \u2502 f64 \u2506 i32 \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 2   \u2506 3      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#multiple columns as vector of strings\ndf$select(pl$col(c(\"foo\",\"bar\")))\n#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 bar \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 f64 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 2   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n#column by regular expression if the regex starts with `^` and ends with `$`\ndf$select(pl$col(\"^foo.*$\"))\n#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 foobar \u2502\n#&gt; \u2502 --- \u2506 ---    \u2502\n#&gt; \u2502 f64 \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 3      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#a single DataType\ndf$select(pl$col(pl$dtypes$Float64))\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 f64 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n# ... or an R list of DataTypes, select any column of any such DataType\ndf$select(pl$col(list(pl$dtypes$Float64, pl$dtypes$Utf8)))\n#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 foo \u2506 foobar \u2502\n#&gt; \u2502 --- \u2506 ---    \u2502\n#&gt; \u2502 f64 \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1.0 \u2506 3      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n# from Series of names\ndf$select(pl$col(pl$Series(c(\"bar\",\"foobar\"))))\n#&gt; shape: (1, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 bar \u2506 foobar \u2502\n#&gt; \u2502 --- \u2506 ---    \u2502\n#&gt; \u2502 i32 \u2506 str    \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 2   \u2506 3      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/docs_translations/","title":"Translation definitions across python, R and polars.","text":"<p>Source: R/docs.R</p>"},{"location":"reference/docs_translations/#format","title":"Format","text":"<p>info</p>"},{"location":"reference/docs_translations/#comments-for-how-the-r-and-python-world-translates-into-polars","title":"Comments for how the R and python world translates into polars:","text":"<p>R and python are both high-level glue languages great for Data Science. Rust is a pedantic low-level language with similar use cases as C and C++. Polars is written in ~100k lines of rust and has a rust API. Py-polars the python API for polars, is implemented as an interface with the rust API. r-polars is very parallel to py-polars except it interfaces with R. The performance and behavior are unexpectedly quite similar as the 'engine' is the exact same rust code and data structures.</p>"},{"location":"reference/docs_translations/#translation-details","title":"Translation details","text":""},{"location":"reference/dot-pr/","title":"dot-pr","text":"<p>data</p> <p>Source: R/after-wrappers.R</p>"},{"location":"reference/dot-pr/#polars-api-private-calls-to-rust-polars","title":"polars-API: private calls to rust-polars","text":""},{"location":"reference/dot-pr/#format","title":"Format","text":"<p>An object of class <code>environment</code> of length 16.</p> <pre><code>.pr\n</code></pre> <p><code>.pr</code></p> <p>Original extendr bindings converted into pure functions</p>"},{"location":"reference/dot-pr/#examples","title":"Examples","text":"<pre><code>#.pr$DataFrame$print() is an external function where self is passed as arg\npolars:::.pr$DataFrame$print(self = pl$DataFrame(iris))\n#&gt; shape: (150, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 ...          \u2506 ...         \u2506 ...          \u2506 ...         \u2506 ...       \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; shape: (150, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 ...          \u2506 ...         \u2506 ...          \u2506 ...         \u2506 ...       \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\npolars:::print_env(.pr,\".pr the collection of private method calls to rust-polars\")\n#&gt; #&gt; #&gt;     .pr the collection of private method calls to rust-polars ( environment ):\n#&gt; #&gt;        DataFrame ( environment ):\n#&gt;           [ by_agg ; function ]\n#&gt;           [ clone_see_me_macro ; function ]\n#&gt;           [ columns ; function ]\n#&gt;           [ drop_in_place ; function ]\n#&gt;           [ dtype_strings ; function ]\n#&gt;           [ dtypes ; function ]\n#&gt;           [ estimated_size ; function ]\n#&gt;           [ export_stream ; function ]\n#&gt;           [ frame_equal ; function ]\n#&gt;           [ from_arrow_record_batches ; function ]\n#&gt;           [ get_column ; function ]\n#&gt;           [ get_columns ; function ]\n#&gt;           [ lazy ; function ]\n#&gt;           [ new ; function ]\n#&gt;           [ new_par_from_list ; function ]\n#&gt;           [ new_with_capacity ; function ]\n#&gt;           [ null_count ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ schema ; function ]\n#&gt;           [ select ; function ]\n#&gt;           [ select_at_idx ; function ]\n#&gt;           [ set_column_from_robj ; function ]\n#&gt;           [ set_column_from_series ; function ]\n#&gt;           [ set_column_names_mut ; function ]\n#&gt;           [ shape ; function ]\n#&gt;           [ to_list ; function ]\n#&gt;           [ to_list_tag_structs ; function ]\n#&gt;           [ to_list_unwind ; function ]\n#&gt;           [ to_struct ; function ]\n#&gt;           [ unnest ; function ]\n#&gt; #&gt; #&gt;        DataType ( environment ):\n#&gt;           [ eq ; function ]\n#&gt;           [ get_all_simple_type_names ; function ]\n#&gt;           [ get_insides ; function ]\n#&gt;           [ is_temporal ; function ]\n#&gt;           [ ne ; function ]\n#&gt;           [ new ; function ]\n#&gt;           [ new_datetime ; function ]\n#&gt;           [ new_duration ; function ]\n#&gt;           [ new_list ; function ]\n#&gt;           [ new_object ; function ]\n#&gt;           [ new_struct ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ same_outer_datatype ; function ]\n#&gt; #&gt; #&gt;        DataTypeVector ( environment ):\n#&gt;           [ from_rlist ; function ]\n#&gt;           [ new ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ push ; function ]\n#&gt; #&gt; #&gt;        Expr ( environment ):\n#&gt;           [ abs ; function ]\n#&gt;           [ add ; function ]\n#&gt;           [ agg_groups ; function ]\n#&gt;           [ alias ; function ]\n#&gt;           [ all ; function ]\n#&gt;           [ and ; function ]\n#&gt;           [ any ; function ]\n#&gt;           [ append ; function ]\n#&gt;           [ arccos ; function ]\n#&gt;           [ arccosh ; function ]\n#&gt;           [ arcsin ; function ]\n#&gt;           [ arcsinh ; function ]\n#&gt;           [ arctan ; function ]\n#&gt;           [ arctanh ; function ]\n#&gt;           [ arg_max ; function ]\n#&gt;           [ arg_min ; function ]\n#&gt;           [ arg_sort ; function ]\n#&gt;           [ arg_unique ; function ]\n#&gt;           [ arr_contains ; function ]\n#&gt;           [ arr_lengths ; function ]\n#&gt;           [ backward_fill ; function ]\n#&gt;           [ bin_contains ; function ]\n#&gt;           [ bin_decode_base64 ; function ]\n#&gt;           [ bin_decode_hex ; function ]\n#&gt;           [ bin_encode_base64 ; function ]\n#&gt;           [ bin_encode_hex ; function ]\n#&gt;           [ bin_ends_with ; function ]\n#&gt;           [ bin_starts_with ; function ]\n#&gt;           [ cast ; function ]\n#&gt;           [ cat_set_ordering ; function ]\n#&gt;           [ ceil ; function ]\n#&gt;           [ clip ; function ]\n#&gt;           [ clip_max ; function ]\n#&gt;           [ clip_min ; function ]\n#&gt;           [ col ; function ]\n#&gt;           [ cols ; function ]\n#&gt;           [ cos ; function ]\n#&gt;           [ cosh ; function ]\n#&gt;           [ count ; function ]\n#&gt;           [ cumcount ; function ]\n#&gt;           [ cummax ; function ]\n#&gt;           [ cummin ; function ]\n#&gt;           [ cumprod ; function ]\n#&gt;           [ cumsum ; function ]\n#&gt;           [ cumulative_eval ; function ]\n#&gt;           [ diff ; function ]\n#&gt;           [ div ; function ]\n#&gt;           [ dot ; function ]\n#&gt;           [ drop_nans ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ dt_cast_time_unit ; function ]\n#&gt;           [ dt_combine ; function ]\n#&gt;           [ dt_convert_time_zone ; function ]\n#&gt;           [ dt_day ; function ]\n#&gt;           [ dt_epoch_seconds ; function ]\n#&gt;           [ dt_hour ; function ]\n#&gt;           [ dt_iso_year ; function ]\n#&gt;           [ dt_microsecond ; function ]\n#&gt;           [ dt_millisecond ; function ]\n#&gt;           [ dt_minute ; function ]\n#&gt;           [ dt_month ; function ]\n#&gt;           [ dt_nanosecond ; function ]\n#&gt;           [ dt_offset_by ; function ]\n#&gt;           [ dt_ordinal_day ; function ]\n#&gt;           [ dt_quarter ; function ]\n#&gt;           [ dt_replace_time_zone ; function ]\n#&gt;           [ dt_round ; function ]\n#&gt;           [ dt_second ; function ]\n#&gt;           [ dt_strftime ; function ]\n#&gt;           [ dt_truncate ; function ]\n#&gt;           [ dt_tz_localize ; function ]\n#&gt;           [ dt_week ; function ]\n#&gt;           [ dt_weekday ; function ]\n#&gt;           [ dt_with_time_unit ; function ]\n#&gt;           [ dt_year ; function ]\n#&gt;           [ dtype_cols ; function ]\n#&gt;           [ duration_days ; function ]\n#&gt;           [ duration_hours ; function ]\n#&gt;           [ duration_microseconds ; function ]\n#&gt;           [ duration_milliseconds ; function ]\n#&gt;           [ duration_minutes ; function ]\n#&gt;           [ duration_nanoseconds ; function ]\n#&gt;           [ duration_seconds ; function ]\n#&gt;           [ entropy ; function ]\n#&gt;           [ eq ; function ]\n#&gt;           [ ewm_mean ; function ]\n#&gt;           [ ewm_std ; function ]\n#&gt;           [ ewm_var ; function ]\n#&gt;           [ exclude ; function ]\n#&gt;           [ exclude_dtype ; function ]\n#&gt;           [ exp ; function ]\n#&gt;           [ explode ; function ]\n#&gt;           [ extend_constant ; function ]\n#&gt;           [ extend_expr ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ fill_null_with_strategy ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ flatten ; function ]\n#&gt;           [ floor ; function ]\n#&gt;           [ forward_fill ; function ]\n#&gt;           [ gt ; function ]\n#&gt;           [ gt_eq ; function ]\n#&gt;           [ hash ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ interpolate ; function ]\n#&gt;           [ is_duplicated ; function ]\n#&gt;           [ is_finite ; function ]\n#&gt;           [ is_first ; function ]\n#&gt;           [ is_in ; function ]\n#&gt;           [ is_infinite ; function ]\n#&gt;           [ is_nan ; function ]\n#&gt;           [ is_not ; function ]\n#&gt;           [ is_not_nan ; function ]\n#&gt;           [ is_not_null ; function ]\n#&gt;           [ is_null ; function ]\n#&gt;           [ is_unique ; function ]\n#&gt;           [ keep_name ; function ]\n#&gt;           [ kurtosis ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ len ; function ]\n#&gt;           [ list ; function ]\n#&gt;           [ lit ; function ]\n#&gt;           [ log ; function ]\n#&gt;           [ log10 ; function ]\n#&gt;           [ lower_bound ; function ]\n#&gt;           [ lst_arg_max ; function ]\n#&gt;           [ lst_arg_min ; function ]\n#&gt;           [ lst_diff ; function ]\n#&gt;           [ lst_eval ; function ]\n#&gt;           [ lst_get ; function ]\n#&gt;           [ lst_join ; function ]\n#&gt;           [ lst_max ; function ]\n#&gt;           [ lst_mean ; function ]\n#&gt;           [ lst_min ; function ]\n#&gt;           [ lst_reverse ; function ]\n#&gt;           [ lst_shift ; function ]\n#&gt;           [ lst_slice ; function ]\n#&gt;           [ lst_sort ; function ]\n#&gt;           [ lst_sum ; function ]\n#&gt;           [ lst_take ; function ]\n#&gt;           [ lst_to_struct ; function ]\n#&gt;           [ lst_unique ; function ]\n#&gt;           [ lt ; function ]\n#&gt;           [ lt_eq ; function ]\n#&gt;           [ map ; function ]\n#&gt;           [ map_alias ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ meta_eq ; function ]\n#&gt;           [ meta_has_multiple_outputs ; function ]\n#&gt;           [ meta_is_regex_projection ; function ]\n#&gt;           [ meta_output_name ; function ]\n#&gt;           [ meta_pop ; function ]\n#&gt;           [ meta_roots ; function ]\n#&gt;           [ meta_undo_aliases ; function ]\n#&gt;           [ min ; function ]\n#&gt;           [ mode ; function ]\n#&gt;           [ mul ; function ]\n#&gt;           [ n_unique ; function ]\n#&gt;           [ nan_max ; function ]\n#&gt;           [ nan_min ; function ]\n#&gt;           [ neq ; function ]\n#&gt;           [ null_count ; function ]\n#&gt;           [ or ; function ]\n#&gt;           [ over ; function ]\n#&gt;           [ pct_change ; function ]\n#&gt;           [ pow ; function ]\n#&gt;           [ prefix ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ product ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ rank ; function ]\n#&gt;           [ rechunk ; function ]\n#&gt;           [ reinterpret ; function ]\n#&gt;           [ rep ; function ]\n#&gt;           [ repeat_by ; function ]\n#&gt;           [ reshape ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ rolling_max ; function ]\n#&gt;           [ rolling_mean ; function ]\n#&gt;           [ rolling_median ; function ]\n#&gt;           [ rolling_min ; function ]\n#&gt;           [ rolling_quantile ; function ]\n#&gt;           [ rolling_skew ; function ]\n#&gt;           [ rolling_std ; function ]\n#&gt;           [ rolling_sum ; function ]\n#&gt;           [ rolling_var ; function ]\n#&gt;           [ round ; function ]\n#&gt;           [ sample_frac ; function ]\n#&gt;           [ sample_n ; function ]\n#&gt;           [ search_sorted ; function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ shrink_dtype ; function ]\n#&gt;           [ shuffle ; function ]\n#&gt;           [ sign ; function ]\n#&gt;           [ sin ; function ]\n#&gt;           [ sinh ; function ]\n#&gt;           [ skew ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ sort_by ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ str_base64_decode ; function ]\n#&gt;           [ str_base64_encode ; function ]\n#&gt;           [ str_concat ; function ]\n#&gt;           [ str_contains ; function ]\n#&gt;           [ str_count_match ; function ]\n#&gt;           [ str_ends_with ; function ]\n#&gt;           [ str_extract ; function ]\n#&gt;           [ str_extract_all ; function ]\n#&gt;           [ str_hex_decode ; function ]\n#&gt;           [ str_hex_encode ; function ]\n#&gt;           [ str_json_extract ; function ]\n#&gt;           [ str_json_path_match ; function ]\n#&gt;           [ str_lengths ; function ]\n#&gt;           [ str_ljust ; function ]\n#&gt;           [ str_lstrip ; function ]\n#&gt;           [ str_n_chars ; function ]\n#&gt;           [ str_parse_date ; function ]\n#&gt;           [ str_parse_datetime ; function ]\n#&gt;           [ str_parse_int ; function ]\n#&gt;           [ str_parse_time ; function ]\n#&gt;           [ str_replace ; function ]\n#&gt;           [ str_replace_all ; function ]\n#&gt;           [ str_rjust ; function ]\n#&gt;           [ str_rstrip ; function ]\n#&gt;           [ str_slice ; function ]\n#&gt;           [ str_split ; function ]\n#&gt;           [ str_split_exact ; function ]\n#&gt;           [ str_splitn ; function ]\n#&gt;           [ str_starts_with ; function ]\n#&gt;           [ str_strip ; function ]\n#&gt;           [ str_to_lowercase ; function ]\n#&gt;           [ str_to_uppercase ; function ]\n#&gt;           [ str_zfill ; function ]\n#&gt;           [ struct_field_by_name ; function ]\n#&gt;           [ struct_rename_fields ; function ]\n#&gt;           [ sub ; function ]\n#&gt;           [ suffix ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ take ; function ]\n#&gt;           [ take_every ; function ]\n#&gt;           [ tan ; function ]\n#&gt;           [ tanh ; function ]\n#&gt;           [ timestamp ; function ]\n#&gt;           [ to_physical ; function ]\n#&gt;           [ top_k ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ unique_counts ; function ]\n#&gt;           [ unique_stable ; function ]\n#&gt;           [ upper_bound ; function ]\n#&gt;           [ value_counts ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ xor ; function ]\n#&gt; #&gt;        [ GroupBy ; NULL ]\n#&gt; #&gt;        LazyFrame ( environment ):\n#&gt;           [ collect ; function ]\n#&gt;           [ collect_background ; function ]\n#&gt;           [ describe_optimized_plan ; function ]\n#&gt;           [ describe_plan ; function ]\n#&gt;           [ drop ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ groupby ; function ]\n#&gt;           [ join ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ limit ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ min ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ select ; function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort_by_exprs ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ with_column ; function ]\n#&gt;           [ with_columns ; function ]\n#&gt; #&gt; #&gt;        LazyGroupBy ( environment ):\n#&gt;           [ agg ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ tail ; function ]\n#&gt; #&gt; #&gt;        PolarsBackgroundHandle ( environment ):\n#&gt;           [ is_exhausted ; function ]\n#&gt;           [ join ; function ]\n#&gt;           [ new ; function ]\n#&gt; #&gt; #&gt;        ProtoExprArray ( environment ):\n#&gt;           [ new ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ push_back_rexpr ; function ]\n#&gt;           [ push_back_str ; function ]\n#&gt; #&gt; #&gt;        RField ( environment ):\n#&gt;           [ clone ; function ]\n#&gt;           [ get_datatype ; function ]\n#&gt;           [ get_name ; function ]\n#&gt;           [ new ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ set_datatype_mut ; function ]\n#&gt;           [ set_name_mut ; function ]\n#&gt; #&gt; #&gt;        RNullValues ( environment ):\n#&gt;           [ new_all_columns ; function ]\n#&gt;           [ new_columns ; function ]\n#&gt;           [ new_named ; function ]\n#&gt; #&gt; #&gt;        Series ( environment ):\n#&gt;           [ abs ; function ]\n#&gt;           [ add ; function ]\n#&gt;           [ alias ; function ]\n#&gt;           [ all ; function ]\n#&gt;           [ any ; function ]\n#&gt;           [ append_mut ; function ]\n#&gt;           [ apply ; function ]\n#&gt;           [ arg_max ; function ]\n#&gt;           [ arg_min ; function ]\n#&gt;           [ ceil ; function ]\n#&gt;           [ chunk_lengths ; function ]\n#&gt;           [ clone ; function ]\n#&gt;           [ compare ; function ]\n#&gt;           [ cumsum ; function ]\n#&gt;           [ div ; function ]\n#&gt;           [ dtype ; function ]\n#&gt;           [ floor ; function ]\n#&gt;           [ from_arrow ; function ]\n#&gt;           [ get_fmt ; function ]\n#&gt;           [ is_sorted ; function ]\n#&gt;           [ is_sorted_flag ; function ]\n#&gt;           [ is_sorted_reverse_flag ; function ]\n#&gt;           [ len ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ min ; function ]\n#&gt;           [ mul ; function ]\n#&gt;           [ name ; function ]\n#&gt;           [ new ; function ]\n#&gt;           [ panic ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ rem ; function ]\n#&gt;           [ rename_mut ; function ]\n#&gt;           [ rep ; function ]\n#&gt;           [ series_equal ; function ]\n#&gt;           [ set_sorted_mut ; function ]\n#&gt;           [ shape ; function ]\n#&gt;           [ sleep ; function ]\n#&gt;           [ sort_mut ; function ]\n#&gt;           [ sub ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ to_frame ; function ]\n#&gt;           [ to_r ; function ]\n#&gt;           [ value_counts ; function ]\n#&gt; #&gt; #&gt;        VecDataFrame ( environment ):\n#&gt;           [ new ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ push ; function ]\n#&gt;           [ with_capacity ; function ]\n#&gt; #&gt; #&gt;        When ( environment ):\n#&gt;           [ print ; function ]\n#&gt;           [ then ; function ]\n#&gt;           [ when ; function ]\n#&gt; #&gt; #&gt;        WhenThen ( environment ):\n#&gt;           [ otherwise ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ when ; function ]\n#&gt; #&gt; #&gt;        WhenThenThen ( environment ):\n#&gt;           [ otherwise ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ then ; function ]\n#&gt;           [ when ; function ]\n#&gt; </code></pre>"},{"location":"reference/element/","title":"an element in 'eval'-expr","text":"<p>Source: R/lazy_functions.R</p>"},{"location":"reference/element/#returns","title":"Returns","text":"<p>Expr</p> <p>Alias for an element in evaluated in an <code>eval</code> expression.</p>"},{"location":"reference/element/#examples","title":"Examples","text":"<pre><code>pl$lit(1:5)$cumulative_eval(pl$element()$first()-pl$element()$last() ** 2)$to_r()\n#&gt; [1]   0  -3  -8 -15 -24\n </code></pre>"},{"location":"reference/extendr_method_to_pure_functions/","title":"extendr methods into pure functions","text":"<p>Source: R/after-wrappers.R</p> <pre><code>extendr_method_to_pure_functions(env)\n</code></pre>"},{"location":"reference/extendr_method_to_pure_functions/#arguments","title":"Arguments","text":"<ul> <li><code>env</code>: environment object output from extendr-wrappers.R classes</li> </ul>"},{"location":"reference/extendr_method_to_pure_functions/#returns","title":"Returns","text":"<p>env of pure function calls to rust</p> <p>self is a global of extendr wrapper methods this function copies the function into a new environment and modify formals to have a self argument</p>"},{"location":"reference/extra_auto_completion/","title":"Extra polars auto completion","text":"<p>Source: R/autocompletion.R</p>"},{"location":"reference/extra_auto_completion/#arguments","title":"Arguments","text":"<ul> <li><code>activate</code>: bool default TRUE, enable chained auto-completion</li> </ul> <p>Extra polars auto completion</p>"},{"location":"reference/extra_auto_completion/#details","title":"Details","text":"<p>polars always supports auto completetion via .DollarNames. However chained methods like x$a()$b()$? are not supported vi .DollarNames.</p> <p>This feature experimental and not perfect. Any feedback is appreciated. Currently does not play that nice with Rstudio, as Rstudio backtick quotes any custom suggestions.</p>"},{"location":"reference/extra_auto_completion/#examples","title":"Examples","text":"<pre><code>#auto completion via .DollarNames method\ne = pl$lit(42) # to autocomplete pl$lit(42) save to variable\n# then write `e$`  and press tab to see available methods\n# polars has experimental auto completetion for chain of methods if all on the same line\npl$extra_auto_completion() #first activate feature (this will 'annoy' the Rstudio auto-completer)\npl$lit(42)$lit_to_s() # add a $ and press tab 1-3 times\n#&gt; polars Series: shape: (1,)\n#&gt; Series: 'literal' [f64]\n#&gt; [\n#&gt;  42.0\n#&gt; ]\npl$extra_auto_completion(activate = FALSE) #deactivate\n </code></pre>"},{"location":"reference/filter-open-paren-close-paren/","title":"filter DataFrame","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_filter(bool_expr)\n</code></pre>"},{"location":"reference/filter-open-paren-close-paren/#arguments","title":"Arguments","text":"<ul> <li><code>bool_expr</code>: Polars expression which will evaluate to a bool pl$Series</li> </ul>"},{"location":"reference/filter-open-paren-close-paren/#returns","title":"Returns","text":"<p>filtered DataFrame</p> <p>DataFrame$filter(bool_expr)</p>"},{"location":"reference/filter-open-paren-close-paren/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(iris)$lazy()$filter(pl$col(\"Sepal.Length\") &gt; 5)$collect()\n#&gt; shape: (118, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 5.4          \u2506 3.9         \u2506 1.7          \u2506 0.4         \u2506 setosa    \u2502\n#&gt; \u2502 5.4          \u2506 3.7         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 5.8          \u2506 4.0         \u2506 1.2          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 ...          \u2506 ...         \u2506 ...          \u2506 ...         \u2506 ...       \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/is_DataFrame_data_input/","title":"Validate data input for create Dataframe with pl$DataFrame","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>is_DataFrame_data_input(x)\n</code></pre>"},{"location":"reference/is_DataFrame_data_input/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: any R object to test if suitable as input to DataFrame</li> </ul>"},{"location":"reference/is_DataFrame_data_input/#returns","title":"Returns","text":"<p>bool</p> <p>The Dataframe constructors accepts data.frame inheritors or list of vectors and/or Series.</p>"},{"location":"reference/is_DataFrame_data_input/#examples","title":"Examples","text":"<pre><code>polars:::is_DataFrame_data_input(iris)\n#&gt; [1] TRUE\npolars:::is_DataFrame_data_input(list(1:5,pl$Series(1:5),letters[1:5]))\n#&gt; [1] TRUE\n </code></pre>"},{"location":"reference/is_err/","title":"check if x ss a result and an err","text":"<p>Source: R/rust_result.R</p> <pre><code>is_err(x)\n</code></pre>"},{"location":"reference/is_err/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: R object which could be a rust-like result of a list with two elements, ok and err</li> </ul>"},{"location":"reference/is_err/#returns","title":"Returns","text":"<p>bool if is a result object which is an err</p> <p>check if x ss a result and an err</p>"},{"location":"reference/is_ok/","title":"check if x ss a result and an ok","text":"<p>Source: R/rust_result.R</p> <pre><code>is_ok(x)\n</code></pre>"},{"location":"reference/is_ok/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: R object which could be a rust-like result of a list with two elements, ok and err</li> </ul>"},{"location":"reference/is_ok/#returns","title":"Returns","text":"<p>bool if is a result object which is an ok</p> <p>check if x ss a result and an ok</p>"},{"location":"reference/is_result/","title":"check if z is a result","text":"<p>Source: R/rust_result.R</p> <pre><code>is_result(x)\n</code></pre>"},{"location":"reference/is_result/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: R object which could be a rust-like result of a list with two elements, ok and err</li> </ul>"},{"location":"reference/is_result/#returns","title":"Returns","text":"<p>bool if is a result object</p> <p>check if z is a result</p>"},{"location":"reference/is_result/#details","title":"Details","text":"<p>both ok and err being NULL encodes ok-value NULL. No way to encode an err-value NULL If both ok and err has value then this is an invalid result</p>"},{"location":"reference/is_schema/","title":"check if schema","text":"<p>Source: R/datatype.R</p>"},{"location":"reference/is_schema/#format","title":"Format","text":"<p>function</p> <pre><code>is_schema(x)\n</code></pre>"},{"location":"reference/is_schema/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: objet to test if schema</li> </ul>"},{"location":"reference/is_schema/#returns","title":"Returns","text":"<p>bool</p> <p>check if schema</p>"},{"location":"reference/is_schema/#examples","title":"Examples","text":"<pre><code>polars:::is_schema(pl$DataFrame(iris)$schema)\n#&gt; [1] TRUE\npl$is_schema(pl$DataFrame(iris)$schema)\n#&gt; [1] TRUE\npolars:::is_schema(list(\"alice\",\"bob\"))\n#&gt; [1] FALSE\n </code></pre>"},{"location":"reference/lazy_csv_reader/","title":"new LazyFrame from csv","text":"<p>Source: R/csv.R</p> <pre><code>lazy_csv_reader(\npath,\nsep = \",\",\nhas_header = TRUE,\nignore_errors = FALSE,\nskip_rows = 0,\nn_rows = NULL,\ncache = FALSE,\noverwrite_dtype = NULL,\nlow_memory = FALSE,\ncomment_char = NULL,\nquote_char = \"\\\"\",\nnull_values = NULL,\ninfer_schema_length = 100,\nskip_rows_after_header = 0,\nencoding = \"utf8\",\nrow_count_name = NULL,\nrow_count_offset = 0,\nparse_dates = FALSE\n)\ncsv_reader(...)\n</code></pre>"},{"location":"reference/lazy_csv_reader/#arguments","title":"Arguments","text":"<ul> <li><code>path</code>: string, Path to a file</li> <li><code>sep</code>: Single char to use as delimiter in the file.</li> <li><code>has_header</code>: bool, indicate if the first row of dataset is a header or not. If set to False, column names will be autogenerated in the following format: column_x, with x being an enumeration over every column in the dataset starting at 1.</li> <li><code>ignore_errors</code>: bool, try to keep reading lines if some lines yield errors. First try infer_schema_length=0 to read all columns as pl.Utf8 to check which values might cause an issue.</li> <li><code>skip_rows</code>: integer, Start reading after skip_rows lines. The header will be parsed at this offset.</li> <li><code>n_rows</code>: int (NULL is disable),Stop reading from CSV file after reading n_rows.</li> <li><code>cache</code>: bool, cache the result after reading.</li> <li><code>overwrite_dtype</code>: (NULL is disable) named list of dtypes OR dtype-names, where name points to a column. Can overwrite dtypes during inference. Supported types so far are: name | alias | polars side dtype \"Boolean\" | \"logical\" =&gt; DataType::Boolean, \"Float32\" | \"double\" =&gt; DataType::Float32, \"Float64\" | \"float64\" =&gt; DataType::Float64, \"Int32\" | \"integer\" =&gt; DataType::Int32, \"Int64\" | \"integer64\" =&gt; DataType::Int64, \"Utf8\" | \"character\" =&gt; DataType::Utf8,</li> <li><code>low_memory</code>: bool, reduce memory usage in expense of performance</li> <li><code>comment_char</code>: (NULL is disable) Single byte character that indicates the start of a comment line, for instance #.</li> <li><code>quote_char</code>: (NULL is disable) Single byte character used for csv quoting, default = \". Set to None to turn off special handling and escaping of quotes.</li> <li><code>null_values</code>: (NULL is disable) Values to interpret as null values. You can provide a String : All values equal to this string will be null. Unnamed char vector: A null value per column. Named char vector. A mapping from (names)column to a null value string(values).</li> <li><code>infer_schema_length</code>: Maximum number of rows to read to infer the column types. If set to 0, all columns will be read as UTF-8. If <code>NULL</code>, a full table scan will be done (slow).</li> <li><code>skip_rows_after_header</code>: bool Skip this number of rows when the header is parsed.</li> <li><code>encoding</code>: either \"utf8\" or \"utf8-lossy\". Lossy means that invalid utf8 values are replaced with \"?\" characters.</li> <li><code>row_count_name</code>: String(NULL is disable), name of a added row count column</li> <li><code>row_count_offset</code>: integer, Offset to start the row_count column (only used if the name is set).</li> <li><code>parse_dates</code>: bool Try to automatically parse dates. If this does not succeed, the column remains of data type pl.Utf8.</li> <li><code>...</code>: any argument passed to lazy_csv_reader</li> </ul>"},{"location":"reference/lazy_csv_reader/#returns","title":"Returns","text":"<p>lazyframe</p> <p>DataFrame</p> <p>will scan the csv when collect(), not now</p>"},{"location":"reference/lazy_csv_reader/#details","title":"Details","text":"<p>Read a file from path into a polars lazy frame. Not yet supporting eol_char and with_column_names</p>"},{"location":"reference/lazy_csv_reader/#examples","title":"Examples","text":"<pre><code>my_file = tempfile()\nwrite.csv(iris,my_file)\nlazy_frame = polars:::lazy_csv_reader(path=my_file)\nlazy_frame$collect()\n#&gt; shape: (150, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2506 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 --- \u2506 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 i64 \u2506 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 str       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 2   \u2506 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 3   \u2506 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4   \u2506 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 ... \u2506 ...          \u2506 ...         \u2506 ...          \u2506 ...         \u2506 ...       \u2502\n#&gt; \u2502 147 \u2506 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 148 \u2506 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 149 \u2506 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 150 \u2506 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nunlink(my_file)\n </code></pre>"},{"location":"reference/length.Series/","title":"Length of series","text":"<p>Source: R/series__series.R</p> <pre><code>## S3 method for class 'Series'\nlength(x)\n</code></pre>"},{"location":"reference/length.Series/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: a Series</li> </ul>"},{"location":"reference/length.Series/#returns","title":"Returns","text":"<p>the length as a double</p> <p>Length of series</p>"},{"location":"reference/macro_add_syntax_check_to_class/","title":"add syntax verification to class","text":"<p>Source: R/after-wrappers.R</p> <pre><code>macro_add_syntax_check_to_class(Class_name)\n</code></pre>"},{"location":"reference/macro_add_syntax_check_to_class/#arguments","title":"Arguments","text":"<ul> <li><code>Class_name</code>: string name of env class</li> </ul>"},{"location":"reference/macro_add_syntax_check_to_class/#returns","title":"Returns","text":"<p>dollarsign method with syntax verification</p> <p>add syntax verification to class</p>"},{"location":"reference/macro_add_syntax_check_to_class/#details","title":"Details","text":"<p>this function overrides dollarclass method of a extendr env_class to run first verify_method_call() to check for syntax error and return more user friendly error if issues</p> <p>All R functions coined 'macro'-functions use eval(parse()) but only at package build time to solve some tricky self-referential problem. If possible to deprecate a macro in a clean way , go ahead.</p> <p>see zzz.R for usage examples</p>"},{"location":"reference/macro_add_syntax_check_to_class/#see-also","title":"See Also","text":"<p>verify_method_call</p>"},{"location":"reference/map/","title":"map an Err part of Result","text":"<p>Source: R/rust_result.R</p> <pre><code>map(x, f)\n</code></pre>"},{"location":"reference/map/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: any R object</li> <li><code>f</code>: a closure that takes the ok part as input</li> </ul>"},{"location":"reference/map/#returns","title":"Returns","text":"<p>same R object wrapped in a Err-result</p> <p>map an Err part of Result</p>"},{"location":"reference/map_err/","title":"map an Err part of Result","text":"<p>Source: R/rust_result.R</p> <pre><code>map_err(x, f)\n</code></pre>"},{"location":"reference/map_err/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: any R object</li> <li><code>f</code>: a closure that takes the err part as input</li> </ul>"},{"location":"reference/map_err/#returns","title":"Returns","text":"<p>same R object wrapped in a Err-result</p> <p>map an Err part of Result</p>"},{"location":"reference/max/","title":"max across expressions / literals / Series","text":"<p>Source: R/lazy_functions.R</p>"},{"location":"reference/max/#arguments","title":"Arguments","text":"<ul> <li> <p><code>...</code>: is a: If one arg:</p> <ul> <li>Series or Expr, same as <code>column$sum()</code></li> <li>string, same as <code>pl$col(column)$sum()</code></li> <li>numeric, same as <code>pl$lit(column)$sum()</code></li> <li>list of strings(column names) or exprressions to add up as expr1 + expr2 + expr3 + ...</li> </ul> <p>If several args, then wrapped in a list and handled as above.</p> </li> </ul>"},{"location":"reference/max/#returns","title":"Returns","text":"<p>Expr</p> <p>Folds the expressions from left to right, keeping the first non-null value.</p>"},{"location":"reference/max/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  a = NA_real_,\n  b = c(1:2,NA_real_,NA_real_),\n  c = c(1:3,NA_real_)\n)\n#use coalesce to get first non Null value for each row, otherwise insert 99.9\ndf$with_column(\npl$coalesce(\"a\", \"b\", \"c\", 99.9)$alias(\"d\")\n)\n#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2506 c    \u2506 d    \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 1.0  \u2506 1.0  \u2506 1.0  \u2502\n#&gt; \u2502 null \u2506 2.0  \u2506 2.0  \u2506 2.0  \u2502\n#&gt; \u2502 null \u2506 null \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 99.9 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/mem_address/","title":"Get Memory Address","text":"<p>Source: R/zzz.R</p>"},{"location":"reference/mem_address/#arguments","title":"Arguments","text":"<ul> <li><code>robj</code>: an R object</li> </ul>"},{"location":"reference/mem_address/#returns","title":"Returns","text":"<p>String of mem address</p> <p>mimics pl$mem_address</p>"},{"location":"reference/mem_address/#examples","title":"Examples","text":"<pre><code>pl$mem_address(pl$Series(1:3))\n#&gt; [1] \"0x7f9a0721e3d0\"\n </code></pre>"},{"location":"reference/method_as_property/","title":"Give a class method property behavior","text":"<p>Source: R/after-wrappers.R</p> <pre><code>method_as_property(f, setter = FALSE)\n</code></pre>"},{"location":"reference/method_as_property/#arguments","title":"Arguments","text":"<ul> <li><code>f</code>: a function</li> <li><code>setter</code>: bool, if true a property method can be modified by user</li> </ul>"},{"location":"reference/method_as_property/#returns","title":"Returns","text":"<p>function subclassed into c(\"property\",\"function\") or c(\"setter\",\"property\",\"function\")</p> <p>Internal function, see use in source</p>"},{"location":"reference/min/","title":"min across expressions / literals / Series","text":"<p>Source: R/lazy_functions.R</p>"},{"location":"reference/min/#arguments","title":"Arguments","text":"<ul> <li> <p><code>...</code>: is a: If one arg:</p> <ul> <li>Series or Expr, same as <code>column$sum()</code></li> <li>string, same as <code>pl$col(column)$sum()</code></li> <li>numeric, same as <code>pl$lit(column)$sum()</code></li> <li>list of strings(column names) or exprressions to add up as expr1 + expr2 + expr3 + ...</li> </ul> <p>If several args, then wrapped in a list and handled as above.</p> </li> </ul>"},{"location":"reference/min/#returns","title":"Returns","text":"<p>Expr</p> <p>Folds the expressions from left to right, keeping the first non-null value.</p>"},{"location":"reference/min/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(\n  a = NA_real_,\n  b = c(2:1,NA_real_,NA_real_),\n  c = c(1:3,NA_real_),\n  d = c(1:2,NA_real_,-Inf)\n)\n#use min to get first non Null value for each row, otherwise insert 99.9\ndf$with_column(\npl$min(\"a\", \"b\", \"c\", 99.9)$alias(\"d\")\n)\n#&gt; shape: (4, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a    \u2506 b    \u2506 c    \u2506 d    \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 f64  \u2506 f64  \u2506 f64  \u2506 f64  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 null \u2506 2.0  \u2506 1.0  \u2506 1.0  \u2502\n#&gt; \u2502 null \u2506 1.0  \u2506 2.0  \u2506 1.0  \u2502\n#&gt; \u2502 null \u2506 null \u2506 3.0  \u2506 3.0  \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 99.9 \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/nanoarrow/","title":"polars to nanoarrow and arrow","text":"<p>Source: R/pkg-nanoarrow.R</p> <pre><code>as_nanoarrow_array_stream.DataFrame(x, ..., schema = NULL)\ninfer_nanoarrow_schema.DataFrame(x, ...)\nas_arrow_table.DataFrame(x, ...)\nas_record_batch_reader.DataFrame(x, ..., schema = NULL)\n</code></pre>"},{"location":"reference/nanoarrow/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: a polars DataFrame</li> <li><code>...</code>: not used right now</li> <li><code>schema</code>: must stay at default value NULL</li> </ul>"},{"location":"reference/nanoarrow/#returns","title":"Returns","text":"<ul> <li> <p>a nanoarrow array stream</p> </li> <li> <p>a nanoarrow array schema</p> </li> <li> <p>an arrow table</p> </li> <li> <p>an arrow record batch reader</p> </li> </ul> <p>Conversion via native apache arrow array stream (fast), THIS REQUIRES \u00b4nanoarrow\u00b4</p>"},{"location":"reference/nanoarrow/#details","title":"Details","text":"<p>The following functions enable conversion to <code>nanoarrow</code> and <code>arrow</code>. Conversion kindly provided by \"paleolimbot / Dewey Dunnington\" Author of <code>nanoarrow</code>. Currently these conversions are the fastest way to convert from polars to R.</p>"},{"location":"reference/nanoarrow/#examples","title":"Examples","text":"<pre><code>library(nanoarrow)\n#&gt; Error in library(nanoarrow): aucun package nomm\u00e9 \u2018nanoarrow\u2019 n'est trouv\u00e9\ndf = pl$DataFrame(mtcars)\nnanoarrow_array_stream = as_nanoarrow_array_stream(df)\n#&gt; Error in as_nanoarrow_array_stream(df): impossible de trouver la fonction \"as_nanoarrow_array_stream\"\nrdf = as.data.frame(nanoarrow_array_stream)\n#&gt; Error in as.data.frame(nanoarrow_array_stream): objet 'nanoarrow_array_stream' introuvable\nprint(head(rdf))\n#&gt; Error in head(rdf): objet 'rdf' introuvable\nnanoarrow_array_schema = infer_nanoarrow_schema(df)\n#&gt; Error in infer_nanoarrow_schema(df): impossible de trouver la fonction \"infer_nanoarrow_schema\"\nprint(nanoarrow_array_schema)\n#&gt; Error in print(nanoarrow_array_schema): objet 'nanoarrow_array_schema' introuvable\nlibrary(arrow)\n#&gt; #&gt; Attachement du package : \u2018arrow\u2019\n#&gt; L'objet suivant est masqu\u00e9 depuis \u2018package:testthat\u2019:\n#&gt; #&gt;     matches\n#&gt; L'objet suivant est masqu\u00e9 depuis \u2018package:magrittr\u2019:\n#&gt; #&gt;     is_in\n#&gt; L'objet suivant est masqu\u00e9 depuis \u2018package:utils\u2019:\n#&gt; #&gt;     timestamp\narrow_table = as_arrow_table(df)\n#&gt; Error in loadNamespace(x): aucun package nomm\u00e9 \u2018nanoarrow\u2019 n'est trouv\u00e9\nprint(arrow_table)\n#&gt; function (..., schema = NULL) \n#&gt; {\n#&gt;     dots &lt;- list2(...)\n#&gt;     if (is.null(names(dots))) {\n#&gt;         names(dots) &lt;- rep_len(\"\", length(dots))\n#&gt;     }\n#&gt;     if (length(dots) == 0 &amp;&amp; inherits(schema, \"Schema\")) {\n#&gt;         return(Table__from_schema(schema))\n#&gt;     }\n#&gt;     stopifnot(length(dots) &gt; 0)\n#&gt;     if (all_record_batches(dots)) {\n#&gt;         return(Table__from_record_batches(dots, schema))\n#&gt;     }\n#&gt;     if (length(dots) == 1 &amp;&amp; inherits(dots[[1]], c(\"RecordBatchReader\", \n#&gt;         \"RecordBatchFileReader\"))) {\n#&gt;         tab &lt;- dots[[1]]$read_table()\n#&gt;         if (!is.null(schema)) {\n#&gt;             tab &lt;- tab$cast(schema)\n#&gt;         }\n#&gt;         return(tab)\n#&gt;     }\n#&gt;     dots &lt;- recycle_scalars(dots)\n#&gt;     Table__from_dots(dots, schema, option_use_threads())\n#&gt; }\n#&gt; &lt;bytecode: 0x5644b1a04388&gt;\n#&gt; &lt;environment: namespace:arrow&gt;\narrow_record_batch_reader = as_record_batch_reader(df) #requires arrow\n#&gt; Error in loadNamespace(x): aucun package nomm\u00e9 \u2018nanoarrow\u2019 n'est trouv\u00e9\nprint(arrow_record_batch_reader)\n#&gt; Error in print(arrow_record_batch_reader): objet 'arrow_record_batch_reader' introuvable\n </code></pre>"},{"location":"reference/ncol.DataFrame/","title":"The Number of Columns of a DataFrame","text":"<p>Source: R/s3_methods.R</p> <pre><code>ncol.DataFrame(x)\n</code></pre>"},{"location":"reference/ncol.DataFrame/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: DataFrame</li> </ul>"},{"location":"reference/ncol.DataFrame/#returns","title":"Returns","text":"<p>Integer</p> <p>The Number of Columns of a DataFrame</p>"},{"location":"reference/ncol.LazyFrame/","title":"The Number of Columns of a LazyFrame","text":"<p>Source: R/s3_methods.R</p> <pre><code>ncol.LazyFrame(x)\n</code></pre>"},{"location":"reference/ncol.LazyFrame/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: LazyFrame</li> </ul>"},{"location":"reference/ncol.LazyFrame/#returns","title":"Returns","text":"<p>Integer</p> <p>The Number of Columns of a LazyFrame</p>"},{"location":"reference/nrow.DataFrame/","title":"The Number of Rows of a DataFrame","text":"<p>Source: R/s3_methods.R</p> <pre><code>nrow.DataFrame(x)\n</code></pre>"},{"location":"reference/nrow.DataFrame/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: DataFrame</li> </ul>"},{"location":"reference/nrow.DataFrame/#returns","title":"Returns","text":"<p>Integer</p> <p>The Number of Rows of a DataFrame</p>"},{"location":"reference/object/","title":"object","text":"<p>data</p> <p>Source: R/after-wrappers.R</p>"},{"location":"reference/object/#any-polars-class-object-is-made-of-this","title":"Any polars class object is made of this","text":""},{"location":"reference/object/#format","title":"Format","text":"<p>An object of class <code>character</code> of length 1.</p> <pre><code>object\n</code></pre> <p>One SEXP of Rtype: \"externalptr\" + a class attribute</p>"},{"location":"reference/object/#details","title":"Details","text":"<ul> <li><code>object$method()</code> calls are facilitated by a <code>$.ClassName</code>- s3method see 'R/after-wrappers.R'</li> <li>Code completion is facilitted by <code>.DollarNames.ClassName</code>-s3method see e.g. 'R/dataframe__frame.R'</li> <li>Implementation of property-methods as DataFrame_columns() and syntax checking is an extension to <code>$.ClassName</code></li> </ul> <p>See function macro_add_syntax_check_to_class().</p>"},{"location":"reference/object/#examples","title":"Examples","text":"<pre><code>#all a polars object is made of:\nsome_polars_object = pl$DataFrame(iris)\nstr(some_polars_object) #External Pointer tagged with a class attribute.\n#&gt; Class 'DataFrame' &lt;externalptr&gt; \n </code></pre>"},{"location":"reference/or_else/","title":"map an Err part of Result","text":"<p>Source: R/rust_result.R</p> <pre><code>or_else(x, f)\n</code></pre>"},{"location":"reference/or_else/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: any R object</li> <li><code>f</code>: a closure that takes the ok part as input, must return a result itself</li> </ul>"},{"location":"reference/or_else/#returns","title":"Returns","text":"<p>same R object wrapped in a Err-result</p> <p>map an Err part of Result</p>"},{"location":"reference/pl-cash-from_arrow/","title":"pl$from_arrow","text":"<p>Source: R/convert.R</p>"},{"location":"reference/pl-cash-from_arrow/#arguments","title":"Arguments","text":"<ul> <li><code>data</code>: arrow Table or Array or ChunkedArray</li> <li><code>rechunk</code>: bool rewrite in one array per column, Implemented for ChunkedArray Array is already contiguous. Not implemented for Table. C</li> <li><code>schema</code>: named list of DataTypes or char vec of names. Same length as arrow table. If schema names or types do not match arrow table, the columns will be renamed/recasted. NULL default is to import columns as is. Takes no effect for Array or ChunkedArray</li> <li><code>schema_overrides</code>: named list of DataTypes. Name some columns to recast by the DataType. Takes not effect for Array or ChunkedArray</li> </ul>"},{"location":"reference/pl-cash-from_arrow/#returns","title":"Returns","text":"<p>DataFrame or Series</p> <p>import Arrow Table or Array</p>"},{"location":"reference/pl-cash-from_arrow/#examples","title":"Examples","text":"<pre><code>pl$from_arrow(\n  data = arrow::arrow_table(iris),\n  schema_overrides = list(Sepal.Length=pl$Float32, Species = pl$Utf8)\n)\n#&gt; shape: (150, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f32          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 str       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 ...          \u2506 ...         \u2506 ...          \u2506 ...         \u2506 ...       \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nchar_schema = names(iris)\nchar_schema[1] = \"Alice\"\npl$from_arrow(\n  data = arrow::arrow_table(iris),\n  schema = char_schema\n)\n#&gt; shape: (150, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Alice \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---   \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f64   \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1   \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.9   \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.7   \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.6   \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 ...   \u2506 ...         \u2506 ...          \u2506 ...         \u2506 ...       \u2502\n#&gt; \u2502 6.3   \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 6.5   \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 6.2   \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9   \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/pl/","title":"pl","text":"<p>data</p> <p>Source: R/after-wrappers.R</p>"},{"location":"reference/pl/#the-complete-polars-public-api","title":"The complete polars public API.","text":""},{"location":"reference/pl/#format","title":"Format","text":"<p>An object of class <code>environment</code> of length 57.</p> <pre><code>pl\n</code></pre> <p><code>pl</code>-object is a environment of all public functions and class constructors. Public functions are not exported as a normal package as it would be huge namespace collision with base:: and other functions. All object-methods are accessed with object$method() via the new class functions.</p> <p>Having all functions in an namespace is similar to the rust- and python- polars api.</p>"},{"location":"reference/pl/#details","title":"Details","text":"<p>If someone do not particularly like the letter combination <code>pl</code>, they are free to bind the environment to another variable name as <code>simon_says = pl</code> or even do <code>attach(pl)</code></p>"},{"location":"reference/pl/#examples","title":"Examples","text":"<pre><code>#how to use polars via `pl`\npl$col(\"colname\")$sum() / pl$lit(42L)  #expression ~ chain-method / literal-expression\n#&gt; polars Expr: [(col(\"colname\").sum()) / (42i32)]\n#pl inventory\npolars:::print_env(pl,\"polars public functions\")\n#&gt; #&gt; #&gt;     polars public functions ( environment ):\n#&gt;        [ all ; function ]\n#&gt;        [ Binary ; RPolarsDataType ]\n#&gt;        [ Boolean ; RPolarsDataType ]\n#&gt;        [ Categorical ; RPolarsDataType ]\n#&gt;        [ coalesce ; function ]\n#&gt;        [ col ; function ]\n#&gt;        [ concat ; function ]\n#&gt;        [ concat_list ; function ]\n#&gt;        [ csv_reader ; function ]\n#&gt;        [ DataFrame ; function ]\n#&gt;        [ Date ; RPolarsDataType ]\n#&gt;        [ date_range ; function ]\n#&gt;        [ Datetime ; function ]\n#&gt; #&gt;        dtypes ( list ):\n#&gt;           [ Binary ; RPolarsDataType ]\n#&gt;           [ Boolean ; RPolarsDataType ]\n#&gt;           [ Categorical ; RPolarsDataType ]\n#&gt;           [ Date ; RPolarsDataType ]\n#&gt;           [ Datetime ; function ]\n#&gt;           [ Float32 ; RPolarsDataType ]\n#&gt;           [ Float64 ; RPolarsDataType ]\n#&gt;           [ Int16 ; RPolarsDataType ]\n#&gt;           [ Int32 ; RPolarsDataType ]\n#&gt;           [ Int64 ; RPolarsDataType ]\n#&gt;           [ Int8 ; RPolarsDataType ]\n#&gt;           [ List ; function ]\n#&gt;           [ Null ; RPolarsDataType ]\n#&gt;           [ Struct ; function ]\n#&gt;           [ Time ; RPolarsDataType ]\n#&gt;           [ UInt16 ; RPolarsDataType ]\n#&gt;           [ UInt32 ; RPolarsDataType ]\n#&gt;           [ UInt64 ; RPolarsDataType ]\n#&gt;           [ UInt8 ; RPolarsDataType ]\n#&gt;           [ Unknown ; RPolarsDataType ]\n#&gt;           [ Utf8 ; RPolarsDataType ]\n#&gt; #&gt;        [ element ; function ]\n#&gt;        [ expr_to_r ; function ]\n#&gt;        [ extra_auto_completion ; function ]\n#&gt;        [ Field ; function ]\n#&gt;        [ Float32 ; RPolarsDataType ]\n#&gt;        [ Float64 ; RPolarsDataType ]\n#&gt;        [ from_arrow ; function ]\n#&gt;        [ get_polars_opt_requirements ; function ]\n#&gt;        [ get_polars_options ; function ]\n#&gt;        [ Int16 ; RPolarsDataType ]\n#&gt;        [ Int32 ; RPolarsDataType ]\n#&gt;        [ Int64 ; RPolarsDataType ]\n#&gt;        [ Int8 ; RPolarsDataType ]\n#&gt;        [ is_schema ; function ]\n#&gt;        [ lazy_csv_reader ; function ]\n#&gt;        [ List ; function ]\n#&gt;        [ lit ; function ]\n#&gt;        [ max ; function ]\n#&gt;        [ mem_address ; function ]\n#&gt;        [ min ; function ]\n#&gt;        [ Null ; RPolarsDataType ]\n#&gt; #&gt;        numeric_dtypes ( list ):\n#&gt;           [ Float32 ; RPolarsDataType ]\n#&gt;           [ Float64 ; RPolarsDataType ]\n#&gt;           [ Int16 ; RPolarsDataType ]\n#&gt;           [ Int32 ; RPolarsDataType ]\n#&gt;           [ Int64 ; RPolarsDataType ]\n#&gt;           [ Int8 ; RPolarsDataType ]\n#&gt; #&gt;        [ PTime ; function ]\n#&gt;        [ read_csv ; function ]\n#&gt;        [ reset_polars_options ; function ]\n#&gt;        [ same_outer_dt ; function ]\n#&gt;        [ scan_arrow_ipc ; function ]\n#&gt;        [ select ; function ]\n#&gt;        [ Series ; function ]\n#&gt;        [ set_polars_options ; function ]\n#&gt;        [ std ; function ]\n#&gt;        [ struct ; function ]\n#&gt;        [ Struct ; function ]\n#&gt;        [ sum ; function ]\n#&gt;        [ Time ; RPolarsDataType ]\n#&gt;        [ UInt16 ; RPolarsDataType ]\n#&gt;        [ UInt32 ; RPolarsDataType ]\n#&gt;        [ UInt64 ; RPolarsDataType ]\n#&gt;        [ UInt8 ; RPolarsDataType ]\n#&gt;        [ Unknown ; RPolarsDataType ]\n#&gt;        [ Utf8 ; RPolarsDataType ]\n#&gt;        [ var ; function ]\n#&gt;        [ when ; function ]\n#all accessible classes and their public methods\npolars:::print_env(\npolars:::pl_pub_class_env,\n\"polars public class methods, access via object$method()\"\n)\n#&gt; #&gt; #&gt;     polars public class methods, access via object$method() ( environment ):\n#&gt; #&gt;        DataFrame ( environment ):\n#&gt;           [ as_data_frame ; function ]\n#&gt;           [ clone ; function ]\n#&gt;           [ columns ; setter property function ]\n#&gt;           [ drop ; function ]\n#&gt;           [ drop_in_place ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ dtype_strings ; function ]\n#&gt;           [ dtypes ; property function ]\n#&gt;           [ estimated_size ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ frame_equal ; function ]\n#&gt;           [ get_column ; function ]\n#&gt;           [ get_columns ; function ]\n#&gt;           [ groupby ; function ]\n#&gt;           [ height ; property function ]\n#&gt;           [ join ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ lazy ; function ]\n#&gt;           [ limit ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ min ; function ]\n#&gt;           [ null_count ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ schema ; property function ]\n#&gt;           [ select ; function ]\n#&gt;           [ shape ; property function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ to_data_frame ; function ]\n#&gt;           [ to_list ; function ]\n#&gt;           [ to_series ; function ]\n#&gt;           [ to_struct ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ unnest ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ width ; property function ]\n#&gt;           [ with_column ; function ]\n#&gt;           [ with_columns ; function ]\n#&gt; #&gt; #&gt;        DataType ( environment ):\n#&gt;           [ eq ; function ]\n#&gt;           [ get_all_simple_type_names ; function ]\n#&gt;           [ get_insides ; function ]\n#&gt;           [ is_temporal ; function ]\n#&gt;           [ ne ; function ]\n#&gt;           [ new ; function ]\n#&gt;           [ new_datetime ; function ]\n#&gt;           [ new_duration ; function ]\n#&gt;           [ new_list ; function ]\n#&gt;           [ new_object ; function ]\n#&gt;           [ new_struct ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ same_outer_datatype ; function ]\n#&gt; #&gt; #&gt;        Expr ( environment ):\n#&gt;           [ abs ; function ]\n#&gt;           [ add ; function ]\n#&gt;           [ agg_groups ; function ]\n#&gt;           [ alias ; function ]\n#&gt;           [ all ; function ]\n#&gt;           [ and ; function ]\n#&gt;           [ any ; function ]\n#&gt;           [ append ; function ]\n#&gt;           [ apply ; function ]\n#&gt;           [ arccos ; function ]\n#&gt;           [ arccosh ; function ]\n#&gt;           [ arcsin ; function ]\n#&gt;           [ arcsinh ; function ]\n#&gt;           [ arctan ; function ]\n#&gt;           [ arctanh ; function ]\n#&gt;           [ arg_max ; function ]\n#&gt;           [ arg_min ; function ]\n#&gt;           [ arg_sort ; function ]\n#&gt;           [ arg_unique ; function ]\n#&gt;           [ argsort ; function ]\n#&gt;           [ arr ; property function ]\n#&gt;           [ backward_fill ; function ]\n#&gt;           [ bin ; property function ]\n#&gt;           [ cast ; function ]\n#&gt;           [ cat ; property function ]\n#&gt;           [ ceil ; function ]\n#&gt;           [ clip ; function ]\n#&gt;           [ clip_max ; function ]\n#&gt;           [ clip_min ; function ]\n#&gt;           [ cos ; function ]\n#&gt;           [ cosh ; function ]\n#&gt;           [ count ; function ]\n#&gt;           [ cumcount ; function ]\n#&gt;           [ cummax ; function ]\n#&gt;           [ cummin ; function ]\n#&gt;           [ cumprod ; function ]\n#&gt;           [ cumsum ; function ]\n#&gt;           [ cumulative_eval ; function ]\n#&gt;           [ diff ; function ]\n#&gt;           [ div ; function ]\n#&gt;           [ dot ; function ]\n#&gt;           [ drop_nans ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ dt ; property function ]\n#&gt;           [ entropy ; function ]\n#&gt;           [ eq ; function ]\n#&gt;           [ ewm_mean ; function ]\n#&gt;           [ ewm_std ; function ]\n#&gt;           [ ewm_var ; function ]\n#&gt;           [ exclude ; function ]\n#&gt;           [ exp ; function ]\n#&gt;           [ explode ; function ]\n#&gt;           [ extend_constant ; function ]\n#&gt;           [ extend_expr ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ flatten ; function ]\n#&gt;           [ floor ; function ]\n#&gt;           [ forward_fill ; function ]\n#&gt;           [ gt ; function ]\n#&gt;           [ gt_eq ; function ]\n#&gt;           [ hash ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ inspect ; function ]\n#&gt;           [ interpolate ; function ]\n#&gt;           [ is_between ; function ]\n#&gt;           [ is_duplicated ; function ]\n#&gt;           [ is_finite ; function ]\n#&gt;           [ is_first ; function ]\n#&gt;           [ is_in ; function ]\n#&gt;           [ is_infinite ; function ]\n#&gt;           [ is_nan ; function ]\n#&gt;           [ is_not ; function ]\n#&gt;           [ is_not_nan ; function ]\n#&gt;           [ is_not_null ; function ]\n#&gt;           [ is_null ; function ]\n#&gt;           [ is_unique ; function ]\n#&gt;           [ keep_name ; function ]\n#&gt;           [ kurtosis ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ len ; function ]\n#&gt;           [ limit ; function ]\n#&gt;           [ list ; function ]\n#&gt;           [ lit ; function ]\n#&gt;           [ lit_to_df ; function ]\n#&gt;           [ lit_to_s ; function ]\n#&gt;           [ log ; function ]\n#&gt;           [ log10 ; function ]\n#&gt;           [ lower_bound ; function ]\n#&gt;           [ lt ; function ]\n#&gt;           [ lt_eq ; function ]\n#&gt;           [ map ; function ]\n#&gt;           [ map_alias ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ meta ; property function ]\n#&gt;           [ min ; function ]\n#&gt;           [ mode ; function ]\n#&gt;           [ mul ; function ]\n#&gt;           [ n_unique ; function ]\n#&gt;           [ nan_max ; function ]\n#&gt;           [ nan_min ; function ]\n#&gt;           [ neq ; function ]\n#&gt;           [ null_count ; function ]\n#&gt;           [ or ; function ]\n#&gt;           [ over ; function ]\n#&gt;           [ pct_change ; function ]\n#&gt;           [ pow ; function ]\n#&gt;           [ prefix ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ product ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ rank ; function ]\n#&gt;           [ rechunk ; function ]\n#&gt;           [ reinterpret ; function ]\n#&gt;           [ rep ; function ]\n#&gt;           [ rep_extend ; function ]\n#&gt;           [ repeat_by ; function ]\n#&gt;           [ reshape ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ rolling_max ; function ]\n#&gt;           [ rolling_mean ; function ]\n#&gt;           [ rolling_median ; function ]\n#&gt;           [ rolling_min ; function ]\n#&gt;           [ rolling_quantile ; function ]\n#&gt;           [ rolling_skew ; function ]\n#&gt;           [ rolling_std ; function ]\n#&gt;           [ rolling_sum ; function ]\n#&gt;           [ rolling_var ; function ]\n#&gt;           [ round ; function ]\n#&gt;           [ rpow ; function ]\n#&gt;           [ sample ; function ]\n#&gt;           [ search_sorted ; function ]\n#&gt;           [ set_sorted ; function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ shrink_dtype ; function ]\n#&gt;           [ shuffle ; function ]\n#&gt;           [ sign ; function ]\n#&gt;           [ sin ; function ]\n#&gt;           [ sinh ; function ]\n#&gt;           [ skew ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ sort_by ; function ]\n#&gt;           [ sqrt ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ str ; property function ]\n#&gt;           [ struct ; property function ]\n#&gt;           [ sub ; function ]\n#&gt;           [ suffix ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ take ; function ]\n#&gt;           [ take_every ; function ]\n#&gt;           [ tan ; function ]\n#&gt;           [ tanh ; function ]\n#&gt;           [ to_physical ; function ]\n#&gt;           [ to_r ; function ]\n#&gt;           [ to_struct ; function ]\n#&gt;           [ top_k ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ unique_counts ; function ]\n#&gt;           [ upper_bound ; function ]\n#&gt;           [ value_counts ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ where ; function ]\n#&gt;           [ xor ; function ]\n#&gt; #&gt; #&gt;        LazyFrame ( environment ):\n#&gt;           [ collect ; function ]\n#&gt;           [ collect_background ; function ]\n#&gt;           [ describe_optimized_plan ; function ]\n#&gt;           [ describe_plan ; function ]\n#&gt;           [ drop ; function ]\n#&gt;           [ drop_nulls ; function ]\n#&gt;           [ fill_nan ; function ]\n#&gt;           [ fill_null ; function ]\n#&gt;           [ filter ; function ]\n#&gt;           [ first ; function ]\n#&gt;           [ groupby ; function ]\n#&gt;           [ join ; function ]\n#&gt;           [ last ; function ]\n#&gt;           [ limit ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ mean ; function ]\n#&gt;           [ median ; function ]\n#&gt;           [ min ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ quantile ; function ]\n#&gt;           [ reverse ; function ]\n#&gt;           [ select ; function ]\n#&gt;           [ shift ; function ]\n#&gt;           [ shift_and_fill ; function ]\n#&gt;           [ slice ; function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ tail ; function ]\n#&gt;           [ unique ; function ]\n#&gt;           [ var ; function ]\n#&gt;           [ with_column ; function ]\n#&gt;           [ with_columns ; function ]\n#&gt; #&gt; #&gt;        LazyGroupBy ( environment ):\n#&gt;           [ agg ; function ]\n#&gt;           [ apply ; function ]\n#&gt;           [ head ; function ]\n#&gt;           [ print ; function ]\n#&gt;           [ tail ; function ]\n#&gt; #&gt; #&gt;        PolarsBackgroundHandle ( environment ):\n#&gt;           [ is_exhausted ; function ]\n#&gt;           [ join ; function ]\n#&gt; #&gt; #&gt;        Series ( environment ):\n#&gt;           [ abs ; function ]\n#&gt;           [ add ; function ]\n#&gt;           [ alias ; function ]\n#&gt;           [ all ; function ]\n#&gt;           [ any ; function ]\n#&gt;           [ append ; function ]\n#&gt;           [ apply ; function ]\n#&gt;           [ arg_max ; function ]\n#&gt;           [ arg_min ; function ]\n#&gt;           [ arr ; property function ]\n#&gt;           [ ceil ; function ]\n#&gt;           [ chunk_lengths ; function ]\n#&gt;           [ clone ; function ]\n#&gt;           [ compare ; function ]\n#&gt;           [ cumsum ; function ]\n#&gt;           [ div ; function ]\n#&gt;           [ dtype ; property function ]\n#&gt;           [ expr ; property function ]\n#&gt;           [ flags ; property function ]\n#&gt;           [ floor ; function ]\n#&gt;           [ is_numeric ; function ]\n#&gt;           [ is_sorted ; function ]\n#&gt;           [ len ; function ]\n#&gt;           [ max ; function ]\n#&gt;           [ min ; function ]\n#&gt;           [ mul ; function ]\n#&gt;           [ name ; property function ]\n#&gt;           [ print ; function ]\n#&gt;           [ rem ; function ]\n#&gt;           [ rename ; function ]\n#&gt;           [ rep ; function ]\n#&gt;           [ series_equal ; function ]\n#&gt;           [ set_sorted ; function ]\n#&gt;           [ shape ; property function ]\n#&gt;           [ sort ; function ]\n#&gt;           [ std ; function ]\n#&gt;           [ sub ; function ]\n#&gt;           [ sum ; function ]\n#&gt;           [ to_frame ; function ]\n#&gt;           [ to_lit ; function ]\n#&gt;           [ to_r ; function ]\n#&gt;           [ to_r_list ; function ]\n#&gt;           [ to_r_vector ; function ]\n#&gt;           [ to_vector ; function ]\n#&gt;           [ value_counts ; function ]\n#&gt;           [ var ; function ]\n#&gt; #&gt; #&gt;        When ( environment ):\n#&gt;           [ then ; function ]\n#&gt; #&gt; #&gt;        WhenThen ( environment ):\n#&gt;           [ otherwise ; function ]\n#&gt;           [ when ; function ]\n#&gt; #&gt; #&gt;        WhenThenThen ( environment ):\n#&gt;           [ otherwise ; function ]\n#&gt;           [ peak_inside ; function ]\n#&gt;           [ then ; function ]\n#&gt;           [ when ; function ]\n#&gt; </code></pre>"},{"location":"reference/pl_Datetime/","title":"Create Datetime DataType","text":"<p>Source: R/datatype.R</p>"},{"location":"reference/pl_Datetime/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/pl_Datetime/#arguments","title":"Arguments","text":"<ul> <li><code>tu</code>: string option either \"ms\", \"us\" or \"ns\"</li> <li><code>tz</code>: string the Time Zone, see details</li> </ul>"},{"location":"reference/pl_Datetime/#returns","title":"Returns","text":"<p>Datetime DataType</p> <p>Datetime DataType constructor</p>"},{"location":"reference/pl_Datetime/#details","title":"Details","text":"<p>all allowed TimeZone designations can be found in <code>base::OlsonNames()</code></p>"},{"location":"reference/pl_Datetime/#examples","title":"Examples","text":"<pre><code>pl$Datetime(\"ns\",\"Pacific/Samoa\")\n#&gt; DataType: Datetime(\n#&gt;     Nanoseconds,\n#&gt;     Some(\n#&gt;         \"Pacific/Samoa\",\n#&gt;     ),\n#&gt; )\n </code></pre>"},{"location":"reference/pl_Field/","title":"Create Field","text":"<p>Source: R/Field.R</p>"},{"location":"reference/pl_Field/#arguments","title":"Arguments","text":"<ul> <li><code>name</code>: string name</li> <li><code>datatype</code>: DataType</li> </ul>"},{"location":"reference/pl_Field/#returns","title":"Returns","text":"<p>a list DataType with an inner DataType</p> <p>Create Field</p>"},{"location":"reference/pl_Field/#details","title":"Details","text":"<p>A Field is not a DataType but a name + DataType Fields are used in Structs-datatypes and Schemas to represent everything of the Series/Column except the raw values.</p>"},{"location":"reference/pl_Field/#examples","title":"Examples","text":"<pre><code>#make a struct\npl$Field(\"city_names\",pl$Utf8)\n#&gt; Field {\n#&gt;     name: \"city_names\",\n#&gt;     dtype: Utf8,\n#&gt; }\n# find any DataType bundled pl$dtypes\nprint(pl$dtypes)\n#&gt; $Boolean\n#&gt; DataType: Boolean\n#&gt; #&gt; $UInt8\n#&gt; DataType: UInt8\n#&gt; #&gt; $UInt16\n#&gt; DataType: UInt16\n#&gt; #&gt; $UInt32\n#&gt; DataType: UInt32\n#&gt; #&gt; $UInt64\n#&gt; DataType: UInt64\n#&gt; #&gt; $Int8\n#&gt; DataType: Int8\n#&gt; #&gt; $Int16\n#&gt; DataType: Int16\n#&gt; #&gt; $Int32\n#&gt; DataType: Int32\n#&gt; #&gt; $Int64\n#&gt; DataType: Int64\n#&gt; #&gt; $Float32\n#&gt; DataType: Float32\n#&gt; #&gt; $Float64\n#&gt; DataType: Float64\n#&gt; #&gt; $Utf8\n#&gt; DataType: Utf8\n#&gt; #&gt; $Binary\n#&gt; DataType: Binary\n#&gt; #&gt; $Date\n#&gt; DataType: Date\n#&gt; #&gt; $Time\n#&gt; DataType: Time\n#&gt; #&gt; $Null\n#&gt; DataType: Null\n#&gt; #&gt; $Categorical\n#&gt; DataType: Categorical(\n#&gt;     None,\n#&gt; )\n#&gt; #&gt; $Unknown\n#&gt; DataType: Unknown\n#&gt; #&gt; $Datetime\n#&gt; function(tu=\"us\", tz = NULL) {\n#&gt;     if (!is.null(tz) &amp;&amp; (!is_string(tz) || !tz %in% base::OlsonNames())) {\n#&gt;       stopf(\"Datetime: the tz '%s' is not a valid timezone string, see base::OlsonNames()\",tz)\n#&gt;     }\n#&gt;     unwrap(.pr$DataType$new_datetime(tu,tz))\n#&gt;   }\n#&gt; &lt;environment: namespace:polars&gt;\n#&gt; #&gt; $List\n#&gt; function(datatype) {\n#&gt;     if(is.character(datatype) &amp;&amp; length(datatype)==1 ) {\n#&gt;       datatype = .pr$DataType$new(datatype)\n#&gt;     }\n#&gt;     if(!inherits(datatype,\"RPolarsDataType\")) {\n#&gt;       stopf(paste(\n#&gt;         \"input for generating a list DataType must be another DataType\",\n#&gt;         \"or an interpretable name thereof.\"\n#&gt;       ))\n#&gt;     }\n#&gt;     .pr$DataType$new_list(datatype)\n#&gt;   }\n#&gt; &lt;environment: namespace:polars&gt;\n#&gt; #&gt; $Struct\n#&gt; function(...) {\n#&gt;     result({\n#&gt;       largs = list2(...)\n#&gt;       if (is.list(largs[[1]])) {\n#&gt;         largs = largs[[1]]\n#&gt;         element_name = \"list element\"\n#&gt;       } else {\n#&gt;         element_name = \"positional argument\"\n#&gt;       }\n#&gt;       mapply(\n#&gt;         names(largs) %||% character(length(largs)),\n#&gt;         largs,\n#&gt;         seq_along(largs),\n#&gt;         FUN = \\(name, arg, i) {\n#&gt;           if(inherits(arg,\"RPolarsDataType\")) return(pl$Field(name, arg))\n#&gt;           if(inherits(arg,\"RField\")) return(arg)\n#&gt;           stopf(\n#&gt;             \"%s [%s] {name:'%s', value:%s} must either be a Field (pl$Field) or a named %s\",\n#&gt;             element_name, i, name, arg,\"DataType see (pl$dtypes), see examples for pl$Struct()\"\n#&gt;           )\n#&gt;         },SIMPLIFY = FALSE\n#&gt;       )\n#&gt;     }) |&gt;\n#&gt;       and_then(DataType$new_struct) |&gt;\n#&gt;       unwrap(\"in pl$Struct:\")\n#&gt;   }\n#&gt; &lt;bytecode: 0x5644bfb4a7a0&gt;\n#&gt; &lt;environment: namespace:polars&gt;\n#&gt; </code></pre>"},{"location":"reference/pl_List/","title":"Create List DataType","text":"<p>Source: R/datatype.R</p>"},{"location":"reference/pl_List/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/pl_List/#arguments","title":"Arguments","text":"<ul> <li><code>datatype</code>: an inner DataType</li> </ul>"},{"location":"reference/pl_List/#returns","title":"Returns","text":"<p>a list DataType with an inner DataType</p> <p>Create List DataType</p>"},{"location":"reference/pl_List/#examples","title":"Examples","text":"<pre><code>pl$List(pl$List(pl$Boolean))\n#&gt; DataType: List(\n#&gt;     List(\n#&gt;         Boolean,\n#&gt;     ),\n#&gt; )\n </code></pre>"},{"location":"reference/pl_PTime/","title":"Store Time in R","text":"<p>Source: R/PTime.R</p>"},{"location":"reference/pl_PTime/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: an integer or double vector of n epochs since midnight OR a char vector of char times passed to as.POSIXct converted to seconds.</li> <li><code>tu</code>: timeunit either \"s\",\"ms\",\"us\",\"ns\"</li> <li><code>fmt</code>: a format string passed to as.POSIXct format via ...</li> </ul>"},{"location":"reference/pl_PTime/#returns","title":"Returns","text":"<p>a PTime vector either double or integer, with class \"PTime\" and attribute \"tu\" being either \"s\",\"ms\",\"us\" or \"ns\"</p> <p>Store Time in R</p>"},{"location":"reference/pl_PTime/#details","title":"Details","text":"<p>PTime should probably be replaced with package nanotime or similar.</p> <p>base R is missing encoding of Time since midnight \"s\" \"ms\", \"us\" and \"ns\". The latter \"ns\" is the standard for the polars Time type.</p> <p>Use PTime to convert R doubles and integers and use as input to polars functions which needs a time.</p> <p>Loosely inspired by data.table::ITime which is i32 only. PTime must support polars native timeunit is nanoseconds. The R double(float64) can imitate a i64 ns with full precision within the full range of 24 hours.</p> <p>PTime does not have a time zone and always prints the time as is no matter local machine time zone.</p> <p>An essential difference between R and polars is R prints POSIXct/lt without a timezone in local time. Polars prints Datetime without a timezone label as is (GMT). For POSIXct/lt taged with a timexone(tzone) and Datetime with a timezone(tz) the behavior is the same conversion is intuitive.</p> <p>It appears behavior of R timezones is subject to change a bit in R 4.3.0, see polars unit test test-expr_datetime.R/\"pl$date_range Date lazy/eager\".</p>"},{"location":"reference/pl_PTime/#examples","title":"Examples","text":"<pre><code>#make PTime in all time units\npl$PTime(runif(5)*3600*24*1E0, tu = \"s\")\n#&gt; PTime [ double ]: number of epochs [ s ] since midnight\n#&gt; [1] \"15:33:05 val: 55985\" \"00:01:10 val: 70\"    \"20:05:31 val: 72331\"\n#&gt; [4] \"04:48:10 val: 17290\" \"04:54:24 val: 17664\"\npl$PTime(runif(5)*3600*24*1E3, tu = \"ms\")\n#&gt; PTime [ double ]: number of epochs [ ms ] since midnight\n#&gt; [1] \"02:05:17:738ms val: 7517738\"  \"11:28:33:197ms val: 41313197\"\n#&gt; [3] \"10:25:47:991ms val: 37547991\" \"17:49:40:318ms val: 64180318\"\n#&gt; [5] \"17:25:24:491ms val: 62724491\"\npl$PTime(runif(5)*3600*24*1E6, tu = \"us\")\n#&gt; PTime [ double ]: number of epochs [ us ] since midnight\n#&gt; [1] \"17:33:31:997_227us val: 63211997227\" \"18:47:28:183_022us val: 67648183022\"\n#&gt; [3] \"11:43:51:610_804us val: 42231610804\" \"20:24:44:574_399us val: 73484574399\"\n#&gt; [5] \"01:39:31:990_983us val: 5971990983\" \npl$PTime(runif(5)*3600*24*1E9, tu = \"ns\")\n#&gt; PTime [ double ]: number of epochs [ ns ] since midnight\n#&gt; [1] \"19:39:54:338_377_565ns val: 70794338377565\"\n#&gt; [2] \"21:04:11:798_473_298ns val: 75851798473298\"\n#&gt; [3] \"16:14:51:179_843_991ns val: 58491179843991\"\n#&gt; [4] \"18:35:02:355_766_296ns val: 66902355766296\"\n#&gt; [5] \"12:48:53:771_131_932ns val: 46133771131932\"\npl$PTime(\"23:59:59\")\n#&gt; PTime [ double ]: number of epochs [ s ] since midnight\n#&gt; [1] \"23:59:59 val: 86399\"\npl$Series(pl$PTime(runif(5)*3600*24*1E0, tu = \"s\"))\n#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [time]\n#&gt; [\n#&gt;  18:11:19\n#&gt;  08:16:05\n#&gt;  23:30:04\n#&gt;  13:07:38\n#&gt;  09:21:58\n#&gt; ]\npl$lit(pl$PTime(\"23:59:59\"))$lit_to_s()\n#&gt; polars Series: shape: (1,)\n#&gt; Series: '' [time]\n#&gt; [\n#&gt;  23:59:59\n#&gt; ]\npl$lit(pl$PTime(\"23:59:59\"))$to_r()\n#&gt; PTime [ double ]: number of epochs [ ns ] since midnight\n#&gt; [1] \"23:59:59:000_000_000ns val: 8.6399e+13\"\n </code></pre>"},{"location":"reference/pl_Struct/","title":"Create Struct DataType","text":"<p>Source: R/datatype.R</p>"},{"location":"reference/pl_Struct/#format","title":"Format","text":"<p>function</p>"},{"location":"reference/pl_Struct/#arguments","title":"Arguments","text":"<ul> <li><code>datatype</code>: an inner DataType</li> </ul>"},{"location":"reference/pl_Struct/#returns","title":"Returns","text":"<p>a list DataType with an inner DataType</p> <p>Struct DataType Constructor</p>"},{"location":"reference/pl_Struct/#examples","title":"Examples","text":"<pre><code># create a Struct-DataType\npl$List(pl$List(pl$Boolean))\n#&gt; DataType: List(\n#&gt;     List(\n#&gt;         Boolean,\n#&gt;     ),\n#&gt; )\n# Find any DataType via pl$dtypes\nprint(pl$dtypes)\n#&gt; $Boolean\n#&gt; DataType: Boolean\n#&gt; #&gt; $UInt8\n#&gt; DataType: UInt8\n#&gt; #&gt; $UInt16\n#&gt; DataType: UInt16\n#&gt; #&gt; $UInt32\n#&gt; DataType: UInt32\n#&gt; #&gt; $UInt64\n#&gt; DataType: UInt64\n#&gt; #&gt; $Int8\n#&gt; DataType: Int8\n#&gt; #&gt; $Int16\n#&gt; DataType: Int16\n#&gt; #&gt; $Int32\n#&gt; DataType: Int32\n#&gt; #&gt; $Int64\n#&gt; DataType: Int64\n#&gt; #&gt; $Float32\n#&gt; DataType: Float32\n#&gt; #&gt; $Float64\n#&gt; DataType: Float64\n#&gt; #&gt; $Utf8\n#&gt; DataType: Utf8\n#&gt; #&gt; $Binary\n#&gt; DataType: Binary\n#&gt; #&gt; $Date\n#&gt; DataType: Date\n#&gt; #&gt; $Time\n#&gt; DataType: Time\n#&gt; #&gt; $Null\n#&gt; DataType: Null\n#&gt; #&gt; $Categorical\n#&gt; DataType: Categorical(\n#&gt;     None,\n#&gt; )\n#&gt; #&gt; $Unknown\n#&gt; DataType: Unknown\n#&gt; #&gt; $Datetime\n#&gt; function(tu=\"us\", tz = NULL) {\n#&gt;     if (!is.null(tz) &amp;&amp; (!is_string(tz) || !tz %in% base::OlsonNames())) {\n#&gt;       stopf(\"Datetime: the tz '%s' is not a valid timezone string, see base::OlsonNames()\",tz)\n#&gt;     }\n#&gt;     unwrap(.pr$DataType$new_datetime(tu,tz))\n#&gt;   }\n#&gt; &lt;environment: namespace:polars&gt;\n#&gt; #&gt; $List\n#&gt; function(datatype) {\n#&gt;     if(is.character(datatype) &amp;&amp; length(datatype)==1 ) {\n#&gt;       datatype = .pr$DataType$new(datatype)\n#&gt;     }\n#&gt;     if(!inherits(datatype,\"RPolarsDataType\")) {\n#&gt;       stopf(paste(\n#&gt;         \"input for generating a list DataType must be another DataType\",\n#&gt;         \"or an interpretable name thereof.\"\n#&gt;       ))\n#&gt;     }\n#&gt;     .pr$DataType$new_list(datatype)\n#&gt;   }\n#&gt; &lt;environment: namespace:polars&gt;\n#&gt; #&gt; $Struct\n#&gt; function(...) {\n#&gt;     result({\n#&gt;       largs = list2(...)\n#&gt;       if (is.list(largs[[1]])) {\n#&gt;         largs = largs[[1]]\n#&gt;         element_name = \"list element\"\n#&gt;       } else {\n#&gt;         element_name = \"positional argument\"\n#&gt;       }\n#&gt;       mapply(\n#&gt;         names(largs) %||% character(length(largs)),\n#&gt;         largs,\n#&gt;         seq_along(largs),\n#&gt;         FUN = \\(name, arg, i) {\n#&gt;           if(inherits(arg,\"RPolarsDataType\")) return(pl$Field(name, arg))\n#&gt;           if(inherits(arg,\"RField\")) return(arg)\n#&gt;           stopf(\n#&gt;             \"%s [%s] {name:'%s', value:%s} must either be a Field (pl$Field) or a named %s\",\n#&gt;             element_name, i, name, arg,\"DataType see (pl$dtypes), see examples for pl$Struct()\"\n#&gt;           )\n#&gt;         },SIMPLIFY = FALSE\n#&gt;       )\n#&gt;     }) |&gt;\n#&gt;       and_then(DataType$new_struct) |&gt;\n#&gt;       unwrap(\"in pl$Struct:\")\n#&gt;   }\n#&gt; &lt;bytecode: 0x5644bfb4a7a0&gt;\n#&gt; &lt;environment: namespace:polars&gt;\n#&gt; </code></pre>"},{"location":"reference/pl_concat/","title":"Concat polars objects","text":"<p>Source: R/functions.R</p>"},{"location":"reference/pl_concat/#arguments","title":"Arguments","text":"<ul> <li><code>l</code>: list of DataFrame, or Series, LazyFrame or Expr</li> <li><code>rechunk</code>: perform a rechunk at last</li> <li><code>how</code>: choice of bind direction \"vertical\"(rbind) \"horizontal\"(cbind) \"diagnoal\" diagonally</li> <li><code>parallel</code>: BOOL default TRUE, only used for LazyFrames</li> </ul>"},{"location":"reference/pl_concat/#returns","title":"Returns","text":"<p>DataFrame, or Series, LazyFrame or Expr</p> <p>Concat polars objects</p>"},{"location":"reference/pl_concat/#examples","title":"Examples","text":"<pre><code>#vertical\nl_ver = lapply(1:10, function(i) {\nl_internal = list(\n    a = 1:5,\n    b = letters[1:5]\n)\npl$DataFrame(l_internal)\n})\npl$concat(l_ver, how=\"vertical\")\n#&gt; shape: (50, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2502\n#&gt; \u2502 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 a   \u2502\n#&gt; \u2502 2   \u2506 b   \u2502\n#&gt; \u2502 3   \u2506 c   \u2502\n#&gt; \u2502 4   \u2506 d   \u2502\n#&gt; \u2502 ... \u2506 ... \u2502\n#&gt; \u2502 2   \u2506 b   \u2502\n#&gt; \u2502 3   \u2506 c   \u2502\n#&gt; \u2502 4   \u2506 d   \u2502\n#&gt; \u2502 5   \u2506 e   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n#horizontal\nl_hor = lapply(1:10, function(i) {\nl_internal = list(\n1:5,\nletters[1:5]\n)\nnames(l_internal) = paste0(c(\"a\",\"b\"),i)\npl$DataFrame(l_internal)\n})\npl$concat(l_hor, how = \"horizontal\")\n#&gt; shape: (5, 20)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a1  \u2506 b1  \u2506 a2  \u2506 b2  \u2506 ... \u2506 a9  \u2506 b9  \u2506 a10 \u2506 b10 \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506     \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 str \u2506 i32 \u2506 str \u2506     \u2506 i32 \u2506 str \u2506 i32 \u2506 str \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 a   \u2506 1   \u2506 a   \u2506 ... \u2506 1   \u2506 a   \u2506 1   \u2506 a   \u2502\n#&gt; \u2502 2   \u2506 b   \u2506 2   \u2506 b   \u2506 ... \u2506 2   \u2506 b   \u2506 2   \u2506 b   \u2502\n#&gt; \u2502 3   \u2506 c   \u2506 3   \u2506 c   \u2506 ... \u2506 3   \u2506 c   \u2506 3   \u2506 c   \u2502\n#&gt; \u2502 4   \u2506 d   \u2506 4   \u2506 d   \u2506 ... \u2506 4   \u2506 d   \u2506 4   \u2506 d   \u2502\n#&gt; \u2502 5   \u2506 e   \u2506 5   \u2506 e   \u2506 ... \u2506 5   \u2506 e   \u2506 5   \u2506 e   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n#diagonal\npl$concat(l_hor, how = \"diagonal\")\n#&gt; shape: (50, 20)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a1   \u2506 b1   \u2506 a2   \u2506 b2   \u2506 ... \u2506 a9   \u2506 b9   \u2506 a10  \u2506 b10  \u2502\n#&gt; \u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2506     \u2506 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n#&gt; \u2502 i32  \u2506 str  \u2506 i32  \u2506 str  \u2506     \u2506 i32  \u2506 str  \u2506 i32  \u2506 str  \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2506 a    \u2506 null \u2506 null \u2506 ... \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 2    \u2506 b    \u2506 null \u2506 null \u2506 ... \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 3    \u2506 c    \u2506 null \u2506 null \u2506 ... \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 4    \u2506 d    \u2506 null \u2506 null \u2506 ... \u2506 null \u2506 null \u2506 null \u2506 null \u2502\n#&gt; \u2502 ...  \u2506 ...  \u2506 ...  \u2506 ...  \u2506 ... \u2506 ...  \u2506 ...  \u2506 ...  \u2506 ...  \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 null \u2506 ... \u2506 null \u2506 null \u2506 2    \u2506 b    \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 null \u2506 ... \u2506 null \u2506 null \u2506 3    \u2506 c    \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 null \u2506 ... \u2506 null \u2506 null \u2506 4    \u2506 d    \u2502\n#&gt; \u2502 null \u2506 null \u2506 null \u2506 null \u2506 ... \u2506 null \u2506 null \u2506 5    \u2506 e    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/pl_date_range/","title":"new date_range","text":"<p>Source: R/functions.R</p>"},{"location":"reference/pl_date_range/#arguments","title":"Arguments","text":"<ul> <li><code>low</code>: POSIXt or Date preferably with time_zone or double or integer</li> <li><code>high</code>: POSIXt or Date preferably with time_zone or double or integer. If high is and interval are missing, then single datetime is constructed.</li> <li><code>interval</code>: string pl_duration or R difftime. Can be missing if high is missing also.</li> <li><code>lazy</code>: bool, if TRUE return expression</li> <li><code>closed</code>: option one of 'both'(default), 'left', 'none' or 'right'</li> <li><code>name</code>: name of series</li> <li><code>time_unit</code>: option string (\"ns\" \"us\" \"ms\") duration of one int64 value on polars side</li> <li><code>time_zone</code>: optional string describing a timezone.</li> </ul>"},{"location":"reference/pl_date_range/#returns","title":"Returns","text":"<p>a datetime</p> <p>new date_range</p>"},{"location":"reference/pl_date_range/#details","title":"Details","text":"<p>If param time_zone is not defined the Series will have no time zone.</p> <p>NOTICE: R POSIXt without defined timezones(tzone/tz), so called naive datetimes, are counter intuitive in R. It is recommended to always set the timezone of low and high. If not output will vary between local machine timezone, R and polars.</p> <p>In R/r-polars it is perfectly fine to mix timezones of params time_zone, low and high.</p>"},{"location":"reference/pl_date_range/#examples","title":"Examples","text":"<pre><code># All in GMT, straight forward, no mental confusion\ns_gmt = pl$date_range(\nas.POSIXct(\"2022-01-01\",tz = \"GMT\"),\nas.POSIXct(\"2022-01-02\",tz = \"GMT\"),\n  interval = \"6h\", time_unit = \"ms\", time_zone = \"GMT\"\n)\ns_gmt\n#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [datetime[ms, GMT]]\n#&gt; [\n#&gt;  2022-01-01 00:00:00 GMT\n#&gt;  2022-01-01 06:00:00 GMT\n#&gt;  2022-01-01 12:00:00 GMT\n#&gt;  2022-01-01 18:00:00 GMT\n#&gt;  2022-01-02 00:00:00 GMT\n#&gt; ]\ns_gmt$to_r() #printed same way in R and polars becuase tagged with a time_zone/tzone\n#&gt; [1] \"2022-01-01 00:00:00 GMT\" \"2022-01-01 06:00:00 GMT\" \"2022-01-01 12:00:00 GMT\"\n#&gt; [4] \"2022-01-01 18:00:00 GMT\" \"2022-01-02 00:00:00 GMT\"\n# polars assumes any input in GMT if time_zone = NULL, set GMT on low high to see same print\ns_null = pl$date_range(\nas.POSIXct(\"2022-01-01\",tz = \"GMT\"),\nas.POSIXct(\"2022-01-02\",tz = \"GMT\"),\n  interval = \"6h\", time_unit = \"ms\", time_zone = NULL\n)\ns_null$to_r() #back to R POSIXct. R prints non tzone tagged POSIXct in local timezone.\n#&gt; [1] \"2022-01-01 01:00:00 CET\" \"2022-01-01 07:00:00 CET\" \"2022-01-01 13:00:00 CET\"\n#&gt; [4] \"2022-01-01 19:00:00 CET\" \"2022-01-02 01:00:00 CET\"\n#Any mixing of timezones is fine, just set them all, and it works as expected.\nt1 = as.POSIXct(\"2022-01-01\", tz = \"Etc/GMT+2\")\nt2 = as.POSIXct(\"2022-01-01 08:00:00\", tz = \"Etc/GMT-2\")\ns_mix = pl$date_range(low = t1, high = t2, interval = \"1h\", time_unit = \"ms\", time_zone = \"CET\")\ns_mix\n#&gt; polars Series: shape: (5,)\n#&gt; Series: '' [datetime[ms, CET]]\n#&gt; [\n#&gt;  2022-01-01 03:00:00 CET\n#&gt;  2022-01-01 04:00:00 CET\n#&gt;  2022-01-01 05:00:00 CET\n#&gt;  2022-01-01 06:00:00 CET\n#&gt;  2022-01-01 07:00:00 CET\n#&gt; ]\ns_mix$to_r()\n#&gt; [1] \"2022-01-01 03:00:00 CET\" \"2022-01-01 04:00:00 CET\" \"2022-01-01 05:00:00 CET\"\n#&gt; [4] \"2022-01-01 06:00:00 CET\" \"2022-01-01 07:00:00 CET\"\n#use of ISOdate\nt1 = ISOdate(2022,1,1,0) #preset GMT\nt2 = ISOdate(2022,1,2,0) #preset GMT\npl$date_range(t1,t2,interval = \"4h\", time_unit = \"ms\", time_zone = \"GMT\")\n#&gt; polars Series: shape: (7,)\n#&gt; Series: '' [datetime[ms, GMT]]\n#&gt; [\n#&gt;  2022-01-01 00:00:00 GMT\n#&gt;  2022-01-01 04:00:00 GMT\n#&gt;  2022-01-01 08:00:00 GMT\n#&gt;  2022-01-01 12:00:00 GMT\n#&gt;  2022-01-01 16:00:00 GMT\n#&gt;  2022-01-01 20:00:00 GMT\n#&gt;  2022-01-02 00:00:00 GMT\n#&gt; ]\n </code></pre>"},{"location":"reference/pl_select/","title":"Select from an empty DataFrame","text":"<p>Source: R/zzz.R</p>"},{"location":"reference/pl_select/#format","title":"Format","text":"<p>method</p>"},{"location":"reference/pl_select/#returns","title":"Returns","text":"<p>DataFrame</p> <p>Select from an empty DataFrame</p>"},{"location":"reference/pl_select/#details","title":"Details","text":"<p>param ... expressions passed to select <code>pl$select</code> is a shorthand for <code>pl$DataFrame(list())$select</code></p> <p>NB param of this function</p>"},{"location":"reference/pl_select/#examples","title":"Examples","text":"<pre><code>pl$select(\npl$lit(1:4)$alias(\"ints\"),\npl$lit(letters[1:4])$alias(\"letters\")\n)\n#&gt; shape: (4, 2)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 ints \u2506 letters \u2502\n#&gt; \u2502 ---  \u2506 ---     \u2502\n#&gt; \u2502 i32  \u2506 str     \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1    \u2506 a       \u2502\n#&gt; \u2502 2    \u2506 b       \u2502\n#&gt; \u2502 3    \u2506 c       \u2502\n#&gt; \u2502 4    \u2506 d       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/polars_options/","title":"polars options","text":"<p>Source: R/options.R</p>"},{"location":"reference/polars_options/#arguments","title":"Arguments","text":"<ul> <li><code>strictly_immutable</code>: bool, default = TRUE, keep polars strictly immutable. Polars/arrow is in general pro \"immutable objects\". However pypolars API has some minor exceptions. All settable property elements of classes are mutable. Why?, I guess python just do not have strong stance on immutability. R strongly suggests immutable objects, so why not make polars strictly immutable where little performance costs? However, if to mimic pypolars as much as possible, set this to FALSE.</li> <li><code>named_exprs</code>: bool, default = FALSE, allow named exprs in e.g. select, with_columns, groupby, join. a named expresion will be extended with $alias(name) wildcards or expression producing multiple are problematic due to name collision the related option in py-polars is currently called 'pl.Config.with_columns_kwargs' and only allow named exprs in with_columns (or potentially any method derived there of)</li> <li><code>no_messages</code>: bool, default = FALSE, turn of messages</li> <li><code>do_not_repeat_call</code>: bool, default = FALSE, turn of messages</li> <li><code>...</code>: any options to modify</li> <li><code>return_replaced_options</code>: return previous state of modified options Convenient for temporarily swapping of options during testing.</li> </ul>"},{"location":"reference/polars_options/#returns","title":"Returns","text":"<p>current settings as list</p> <p>current settings as list</p> <p>list named by options of requirement function input must satisfy</p> <p>get, set, reset polars options</p>"},{"location":"reference/polars_options/#details","title":"Details","text":"<p>who likes polars package messages? use this option to turn them off.</p> <p>do not print the call causing the error in error messages</p> <p>modifing list takes no effect, pass it to pl$set_polars_options get/set/resest interact with internal env <code>polars:::polars_optenv</code></p> <p>setting an options may be rejected if not passing opt_requirements</p>"},{"location":"reference/polars_options/#examples","title":"Examples","text":"<pre><code>#rename columns by naming expression, experimental requires option named_exprs = TRUE\npl$set_polars_options(named_exprs = TRUE)\n#&gt; $named_exprs\n#&gt; [1] TRUE\n#&gt; pl$DataFrame(iris)$with_columns(\npl$col(\"Sepal.Length\")$abs(), #not named expr will keep name \"Sepal.Length\"\n  SW_add_2 = (pl$col(\"Sepal.Width\")+2)\n)\n#&gt; shape: (150, 6)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2506 SW_add_2 \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2506 ---      \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2506 f64      \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2506 5.5      \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2506 5.0      \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2506 5.2      \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2506 5.1      \u2502\n#&gt; \u2502 ...          \u2506 ...         \u2506 ...          \u2506 ...         \u2506 ...       \u2506 ...      \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2506 4.5      \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2506 5.0      \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2506 5.4      \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2506 5.0      \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\npl$get_polars_options()\n#&gt; $do_not_repeat_call\n#&gt; [1] FALSE\n#&gt; #&gt; $strictly_immutable\n#&gt; [1] TRUE\n#&gt; #&gt; $named_exprs\n#&gt; [1] TRUE\n#&gt; #&gt; $no_messages\n#&gt; [1] FALSE\n#&gt; pl$set_polars_options(strictly_immutable = FALSE)\n#&gt; $strictly_immutable\n#&gt; [1] TRUE\n#&gt; pl$get_polars_options()\n#&gt; $do_not_repeat_call\n#&gt; [1] FALSE\n#&gt; #&gt; $strictly_immutable\n#&gt; [1] FALSE\n#&gt; #&gt; $named_exprs\n#&gt; [1] TRUE\n#&gt; #&gt; $no_messages\n#&gt; [1] FALSE\n#&gt; #setting strictly_immutable = 42 will be rejected as\ntryCatch(\npl$set_polars_options(strictly_immutable = 42),\n  error= function(e) print(e)\n)\n#&gt; &lt;simpleError: option: strictly_immutable  must satisfy requirement named is_bool with function\n#&gt;  function (x) {\n#&gt;     is.logical(x) &amp;&amp; length(x)==1 &amp;&amp; !is.na(x)\n#&gt;   }\n#&gt; &lt;environment: namespace:polars&gt;&gt;\n#reset options like this\npl$reset_polars_options()\n#use get_polars_opt_requirements() to requirements\npl$get_polars_opt_requirements()\n#&gt; $strictly_immutable\n#&gt; $strictly_immutable$is_bool\n#&gt; function (x) {\n#&gt;     is.logical(x) &amp;&amp; length(x)==1 &amp;&amp; !is.na(x)\n#&gt;   }\n#&gt; &lt;environment: namespace:polars&gt;\n#&gt; #&gt; #&gt; $named_exprs\n#&gt; $named_exprs$is_bool\n#&gt; function (x) {\n#&gt;     is.logical(x) &amp;&amp; length(x)==1 &amp;&amp; !is.na(x)\n#&gt;   }\n#&gt; &lt;environment: namespace:polars&gt;\n#&gt; #&gt; #&gt; $no_messages\n#&gt; $no_messages$is_bool\n#&gt; function (x) {\n#&gt;     is.logical(x) &amp;&amp; length(x)==1 &amp;&amp; !is.na(x)\n#&gt;   }\n#&gt; &lt;environment: namespace:polars&gt;\n#&gt; #&gt; #&gt; $do_not_repeat_call\n#&gt; $do_not_repeat_call$is_bool\n#&gt; function (x) {\n#&gt;     is.logical(x) &amp;&amp; length(x)==1 &amp;&amp; !is.na(x)\n#&gt;   }\n#&gt; &lt;environment: namespace:polars&gt;\n#&gt; #&gt; </code></pre>"},{"location":"reference/polars_runtime_flags/","title":"polars_runtime_flags","text":"<p>data</p> <p>Source: R/options.R</p>"},{"location":"reference/polars_runtime_flags/#internal-keeping-of-state-at-runtime","title":"internal keeping of state at runtime","text":""},{"location":"reference/polars_runtime_flags/#format","title":"Format","text":"<p>An object of class <code>environment</code> of length 0.</p> <pre><code>runtime_state\n</code></pre> <p>This environment is used internally for the package to remember what has been going on. Currently only used to throw one-time warnings()</p>"},{"location":"reference/print-open-paren-close-paren/","title":"s3 method print DataFrame","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>## S3 method for class 'DataFrame'\nprint(x, ...)\n</code></pre>"},{"location":"reference/print-open-paren-close-paren/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: DataFrame</li> <li><code>...</code>: not used</li> </ul>"},{"location":"reference/print-open-paren-close-paren/#returns","title":"Returns","text":"<p>self</p> <p>s3 method print DataFrame</p>"},{"location":"reference/print-open-paren-close-paren/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(iris)\n#&gt; shape: (150, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 ...          \u2506 ...         \u2506 ...          \u2506 ...         \u2506 ...       \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/print.Expr/","title":"Print expr","text":"<p>Source: R/expr__expr.R</p> <pre><code>## S3 method for class 'Expr'\nprint(x, ...)\n</code></pre>"},{"location":"reference/print.Expr/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: Expr</li> <li><code>...</code>: not used</li> </ul>"},{"location":"reference/print.Expr/#returns","title":"Returns","text":"<p>self</p> <p>Print expr</p>"},{"location":"reference/print.Expr/#examples","title":"Examples","text":"<pre><code>pl$col(\"some_column\")$sum()$over(\"some_other_column\")\n#&gt; polars Expr: col(\"some_column\").sum().over([col(\"some_other_column\")])\n </code></pre>"},{"location":"reference/print.GroupBy/","title":"print GroupBy","text":"<p>Source: R/groupby.R</p> <pre><code>## S3 method for class 'GroupBy'\nprint(x, ...)\n</code></pre>"},{"location":"reference/print.GroupBy/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: DataFrame</li> <li><code>...</code>: not used</li> </ul>"},{"location":"reference/print.GroupBy/#returns","title":"Returns","text":"<p>self</p> <p>print GroupBy</p>"},{"location":"reference/print.GroupBy/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(iris)$groupby(\"Species\")\n#&gt; shape: (150, 5)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Sepal.Length \u2506 Sepal.Width \u2506 Petal.Length \u2506 Petal.Width \u2506 Species   \u2502\n#&gt; \u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n#&gt; \u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 cat       \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 setosa    \u2502\n#&gt; \u2502 ...          \u2506 ...         \u2506 ...          \u2506 ...         \u2506 ...       \u2502\n#&gt; \u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 virginica \u2502\n#&gt; \u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 virginica \u2502\n#&gt; \u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 virginica \u2502\n#&gt; \u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 virginica \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#&gt; groups: ProtoExprArray(\n#&gt;     [\n#&gt;         Expr(\n#&gt;             Expr(\n#&gt;                 col(\"Species\"),\n#&gt;             ),\n#&gt;         ),\n#&gt;     ],\n#&gt; )\n#&gt; maintain order:  FALSE\n </code></pre>"},{"location":"reference/print.LazyFrame/","title":"print LazyFrame s3 method","text":"<p>Source: R/lazyframe__lazy.R</p> <pre><code>## S3 method for class 'LazyFrame'\nprint(x, ...)\n</code></pre>"},{"location":"reference/print.LazyFrame/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: DataFrame</li> <li><code>...</code>: not used</li> </ul>"},{"location":"reference/print.LazyFrame/#returns","title":"Returns","text":"<p>self</p> <p>print LazyFrame s3 method</p>"},{"location":"reference/print.LazyFrame/#examples","title":"Examples","text":"<pre><code>print(pl$DataFrame(iris)$lazy())\n#&gt; [1] \"polars LazyFrame naive plan: (run ldf$describe_optimized_plan() to see the optimized plan)\"\n#&gt;   DF [\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\"]; PROJECT */5 COLUMNS; SELECTION: \"None\"\n#&gt; </code></pre>"},{"location":"reference/print.LazyGroupBy/","title":"print LazyGroupBy","text":"<p>Source: R/lazyframe__groupby.R</p> <pre><code>## S3 method for class 'LazyGroupBy'\nprint(x, ...)\n</code></pre>"},{"location":"reference/print.LazyGroupBy/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: LazyGroupBy</li> <li><code>...</code>: not used</li> </ul>"},{"location":"reference/print.LazyGroupBy/#returns","title":"Returns","text":"<p>self</p> <p>print LazyGroupBy</p>"},{"location":"reference/print.PTime/","title":"print PTime","text":"<p>Source: R/PTime.R</p> <pre><code>## S3 method for class 'PTime'\nprint(x, ...)\n</code></pre>"},{"location":"reference/print.PTime/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: a PTime vector</li> <li><code>...</code>: not used</li> </ul>"},{"location":"reference/print.PTime/#returns","title":"Returns","text":"<p>invisible x</p> <p>print PTime</p>"},{"location":"reference/print.PolarsBackgroundHandle/","title":"print LazyFrame s3 method","text":"<p>Source: R/lazyframe__background.R</p> <pre><code>## S3 method for class 'PolarsBackgroundHandle'\nprint(x, ...)\n</code></pre>"},{"location":"reference/print.PolarsBackgroundHandle/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: DataFrame</li> <li><code>...</code>: not used</li> </ul>"},{"location":"reference/print.PolarsBackgroundHandle/#returns","title":"Returns","text":"<p>self</p> <p>print LazyFrame s3 method</p>"},{"location":"reference/print.PolarsBackgroundHandle/#examples","title":"Examples","text":"<pre><code>lazy_df = pl$DataFrame(iris[,1:3])$lazy()$select(pl$all()$first())\nhandle = lazy_df$collect_background()\nhandle$is_exhausted()\n#&gt; [1] FALSE\ndf = handle$join()\nhandle$is_exhausted()\n#&gt; [1] TRUE\n </code></pre>"},{"location":"reference/print.RField/","title":"Print a polars Field","text":"<p>Source: R/Field.R</p> <pre><code>## S3 method for class 'RField'\nprint(x, ...)\n</code></pre>"},{"location":"reference/print.RField/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: DataType</li> <li><code>...</code>: not used</li> </ul>"},{"location":"reference/print.RField/#returns","title":"Returns","text":"<p>self</p> <p>Print a polars Field</p>"},{"location":"reference/print.RField/#examples","title":"Examples","text":"<pre><code>print(pl$Field(\"foo\",pl$List(pl$UInt64)))\n#&gt; Field {\n#&gt;     name: \"foo\",\n#&gt;     dtype: List(\n#&gt;         UInt64,\n#&gt;     ),\n#&gt; }\n </code></pre>"},{"location":"reference/print.RPolarsDataType/","title":"print a polars datatype","text":"<p>Source: R/datatype.R</p> <pre><code>## S3 method for class 'RPolarsDataType'\nprint(x, ...)\n</code></pre>"},{"location":"reference/print.RPolarsDataType/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: DataType</li> <li><code>...</code>: not used</li> </ul>"},{"location":"reference/print.RPolarsDataType/#returns","title":"Returns","text":"<p>self</p> <p>print a polars datatype</p>"},{"location":"reference/print.RPolarsDataType/#examples","title":"Examples","text":"<pre><code>pl$dtypes$Boolean #implicit print\n#&gt; DataType: Boolean\n </code></pre>"},{"location":"reference/print.When/","title":"print When","text":"<p>Source: R/whenthen.R</p> <pre><code>## S3 method for class 'When'\nprint(x, ...)\n</code></pre>"},{"location":"reference/print.When/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: When object</li> <li><code>...</code>: not used</li> </ul>"},{"location":"reference/print.When/#returns","title":"Returns","text":"<p>self</p> <p>print When</p>"},{"location":"reference/print.When/#examples","title":"Examples","text":"<pre><code>print(pl$when(pl$col(\"a\")&gt;2))\n#&gt; polars When { predicate: Expr([(col(\"a\")) &gt; (2f64)]) }\n </code></pre>"},{"location":"reference/print.WhenThen/","title":"print When","text":"<p>Source: R/whenthen.R</p> <pre><code>## S3 method for class 'WhenThen'\nprint(x, ...)\n</code></pre>"},{"location":"reference/print.WhenThen/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: When object</li> <li><code>...</code>: not used</li> </ul>"},{"location":"reference/print.WhenThen/#returns","title":"Returns","text":"<p>self</p> <p>print When</p>"},{"location":"reference/print.WhenThen/#examples","title":"Examples","text":"<pre><code>print(pl$when(pl$col(\"a\")&gt;2)$then(pl$lit(\"more than two\")))\n#&gt; polars WhenThen { predicate: Expr([(col(\"a\")) &gt; (2f64)]), then: Expr(Utf8(more than two)) }\n </code></pre>"},{"location":"reference/print.WhenThenThen/","title":"print When","text":"<p>Source: R/whenthen.R</p> <pre><code>## S3 method for class 'WhenThenThen'\nprint(x, ...)\n</code></pre>"},{"location":"reference/print.WhenThenThen/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: When object</li> <li><code>...</code>: not used</li> </ul>"},{"location":"reference/print.WhenThenThen/#returns","title":"Returns","text":"<p>self</p> <p>print When</p>"},{"location":"reference/print.WhenThenThen/#examples","title":"Examples","text":"<pre><code>#\nprint(pl$when(pl$col(\"a\")&gt;2)$then(pl$lit(\"more than two\"))$when(pl$col(\"b\")&lt;5))\n#&gt; polars Polars WhenThenThen\n </code></pre>"},{"location":"reference/pstop/","title":"Internal preferred function to throw errors","text":"<p>Source: R/rust_result.R</p> <pre><code>pstop(err, call = sys.call(1L))\n</code></pre>"},{"location":"reference/pstop/#arguments","title":"Arguments","text":"<ul> <li><code>err</code>: error msg string</li> <li><code>call</code>: calling context</li> </ul>"},{"location":"reference/pstop/#returns","title":"Returns","text":"<p>throws an error</p> <p>DEPRECATED USE stopf instead</p>"},{"location":"reference/pstop/#examples","title":"Examples","text":"<pre><code>f = function() polars:::pstop(\"this aint right!!\")\ntryCatch(f(), error = \\(e) as.character(e))\n#&gt; [1] \"Error: Internal error: cannot unwrap non result\\n\"\n </code></pre>"},{"location":"reference/read_csv_/","title":"high level csv_reader, will download if path is url","text":"<p>Source: R/csv.R</p> <pre><code>read_csv_(path, lazy = FALSE, reuse_downloaded = TRUE, ...)\n</code></pre>"},{"location":"reference/read_csv_/#arguments","title":"Arguments","text":"<ul> <li><code>path</code>: file or url</li> <li><code>lazy</code>: bool default FALSE, read csv lazy</li> <li><code>reuse_downloaded</code>: bool default TRUE, cache url downloaded files in session an reuse</li> <li><code>...</code>: arguments forwarded to csv_reader or lazy_csv_reader</li> </ul>"},{"location":"reference/read_csv_/#returns","title":"Returns","text":"<p>polars_DataFrame or polars_lazy_DataFrame</p> <p>high level csv_reader, will download if path is url</p>"},{"location":"reference/read_csv_/#examples","title":"Examples","text":"<pre><code>df = pl$read_csv(\"https://j.mp/iriscsv\")\n </code></pre>"},{"location":"reference/scan_arrow_ipc/","title":"Import data in Apache Arrow IPC format","text":"<p>Source: R/ipc.R</p> <pre><code>scan_arrow_ipc(\npath,\nn_rows = NULL,\ncache = TRUE,\nrechunk = TRUE,\nrow_count_name = NULL,\nrow_count_offset = 0L,\nmemmap = TRUE\n)\n</code></pre>"},{"location":"reference/scan_arrow_ipc/#arguments","title":"Arguments","text":"<ul> <li><code>path</code>: string, path</li> <li><code>n_rows</code>: integer, limit rows to scan</li> <li><code>cache</code>: bool, use cache</li> <li><code>rechunk</code>: bool, rechunk reorganize memory layout, potentially make future operations faster, however perform reallocation now.</li> <li><code>row_count_name</code>: NULL or string, if a string add a rowcount column named by this string</li> <li><code>row_count_offset</code>: integer, the rowcount column can be offst by this value</li> <li><code>memmap</code>: bool, mapped memory</li> </ul>"},{"location":"reference/scan_arrow_ipc/#returns","title":"Returns","text":"<p>LazyFrame</p> <p>Import data in Apache Arrow IPC format</p>"},{"location":"reference/scan_arrow_ipc/#details","title":"Details","text":"<p>Create new LazyFrame from Apache Arrow IPC file or stream</p>"},{"location":"reference/scan_parquet/","title":"new LazyFrame from parquet file","text":"<p>Source: R/parquet.R</p> <pre><code>scan_parquet(\nfile,\nn_rows = NULL,\ncache = TRUE,\nparallel = c(\"Auto\", \"None\", \"Columns\", \"RowGroups\"),\nrechunk = TRUE,\nrow_count_name = NULL,\nrow_count_offset = 0L,\nlow_memory = FALSE\n)\n</code></pre>"},{"location":"reference/scan_parquet/#arguments","title":"Arguments","text":"<ul> <li><code>file</code>: string filepath</li> <li><code>n_rows</code>: limit rows to scan</li> <li><code>cache</code>: bool use cache</li> <li><code>parallel</code>: String either Auto, None, Columns or RowGroups. The way to parralize the scan.</li> <li><code>rechunk</code>: bool rechunk reorganize memory layout, potentially make future operations faster , however perform reallocation now.</li> <li><code>row_count_name</code>: NULL or string, if a string add a rowcount column named by this string</li> <li><code>row_count_offset</code>: integer, the rowcount column can be offst by this value</li> <li><code>low_memory</code>: bool, try reduce memory footprint</li> </ul>"},{"location":"reference/scan_parquet/#returns","title":"Returns","text":"<p>LazyFrame</p> <p>new LazyFrame from parquet file</p>"},{"location":"reference/scan_parquet/#examples","title":"Examples","text":"<pre><code>#TODO write parquet example\n</code></pre>"},{"location":"reference/struct/","title":"struct","text":"<p>Source: R/lazy_functions.R</p>"},{"location":"reference/struct/#arguments","title":"Arguments","text":"<ul> <li><code>exprs</code>: Columns/Expressions to collect into a Struct.</li> <li><code>eager</code>: Evaluate immediately.</li> <li><code>schema</code>: Optional schema named list that explicitly defines the struct field dtypes. Each name must match a column name wrapped in the struct. Can only be used to cast some or all dtypes, not to change the names. NULL means to include keep columns into the struct by their current DataType. If a column is not included in the schema it is removed from the final struct.</li> </ul>"},{"location":"reference/struct/#returns","title":"Returns","text":"<p>Eager=FALSE: Expr of Series with dtype Struct | Eager=TRUE: Series with dtype Struct</p> <p>Collect several columns into a Series of dtype Struct.</p>"},{"location":"reference/struct/#details","title":"Details","text":"<p>pl$struct creates Expr or Series of DataType Struct() pl$Struct creates the DataType Struct() In polars a schema is a named list of DataTypes. #' A schema describes e.g. a DataFrame. More formally schemas consist of Fields. A Field is an object describing the name and DataType of a column/Series, but same same. A struct is a DataFrame wrapped into a Series, the DataType is Struct, and each sub-datatype within are Fields. In a dynamic language schema and a Struct (the DataType) are quite the same, except schemas describe DataFrame and Struct's describe some Series.</p>"},{"location":"reference/struct/#examples","title":"Examples","text":"<pre><code>#isolated expression to wrap all columns in a struct aliased 'my_struct'\npl$struct(pl$all())$alias(\"my_struct\")\n#&gt; polars Expr: *.as_struct().alias(\"my_struct\")\n#wrap all column into on column/Series\ndf = pl$DataFrame(\n  int = 1:2,\n  str = c(\"a\", \"b\"),\n  bool = c(TRUE, NA),\n  list = list(1:2, 3L)\n)$select(\npl$struct(pl$all())$alias(\"my_struct\")\n)\nprint(df)\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 my_struct           \u2502\n#&gt; \u2502 ---                 \u2502\n#&gt; \u2502 struct[4]           \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {1,\"a\",true,[1, 2]} \u2502\n#&gt; \u2502 {2,\"b\",null,[3]}    \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nprint(df$schema) #returns a schema, a named list containing one element a Struct named my_struct\n#&gt; $my_struct\n#&gt; DataType: Struct(\n#&gt;     [\n#&gt;         Field {\n#&gt;             name: \"int\",\n#&gt;             dtype: Int32,\n#&gt;         },\n#&gt;         Field {\n#&gt;             name: \"str\",\n#&gt;             dtype: Utf8,\n#&gt;         },\n#&gt;         Field {\n#&gt;             name: \"bool\",\n#&gt;             dtype: Boolean,\n#&gt;         },\n#&gt;         Field {\n#&gt;             name: \"list\",\n#&gt;             dtype: List(\n#&gt;                 Int32,\n#&gt;             ),\n#&gt;         },\n#&gt;     ],\n#&gt; )\n#&gt; # wrap two columns in a struct and provide a schema to set all or some DataTypes by name\ne1 = pl$struct(\npl$col(c(\"int\",\"str\")),\n  schema = list(int=pl$Int64, str=pl$Utf8)\n)$alias(\"my_struct\")\n# same result as e.g. wrapping the columns in a struct and casting afterwards\ne2 = pl$struct(\nlist(pl$col(\"int\"),pl$col(\"str\"))\n)$cast(\npl$Struct(int=pl$Int64,str=pl$Utf8)\n)$alias(\"my_struct\")\ndf = pl$DataFrame(\n  int = 1:2,\n  str = c(\"a\", \"b\"),\n  bool = c(TRUE, NA),\n  list = list(1:2, 3L)\n)\n#verify equality in R\nidentical(df$select(e1)$to_list(),df$select(e2)$to_list())\n#&gt; [1] TRUE\ndf$select(e2)\n#&gt; shape: (2, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 my_struct \u2502\n#&gt; \u2502 ---       \u2502\n#&gt; \u2502 struct[2] \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 {1,\"a\"}   \u2502\n#&gt; \u2502 {2,\"b\"}   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndf$select(e2)$to_data_frame()\n#&gt;                  my_struct\n#&gt; 1 4.94065645841247e-324, a\n#&gt; 2 9.88131291682493e-324, b\n </code></pre>"},{"location":"reference/sum/","title":"sum across expressions / literals / Series","text":"<p>Source: R/lazy_functions.R</p>"},{"location":"reference/sum/#arguments","title":"Arguments","text":"<ul> <li> <p><code>...</code>: is a: If one arg:</p> <ul> <li>Series or Expr, same as <code>column$sum()</code></li> <li>string, same as <code>pl$col(column)$sum()</code></li> <li>numeric, same as <code>pl$lit(column)$sum()</code></li> <li>list of strings(column names) or exprressions to add up as expr1 + expr2 + expr3 + ...</li> </ul> <p>If several args, then wrapped in a list and handled as above.</p> </li> </ul>"},{"location":"reference/sum/#returns","title":"Returns","text":"<p>Expr</p> <p>syntactic sugar for starting a expression with sum</p>"},{"location":"reference/sum/#examples","title":"Examples","text":"<pre><code>#column as string\npl$DataFrame(iris)$select(pl$sum(\"Petal.Width\"))\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Petal.Width \u2502\n#&gt; \u2502 ---         \u2502\n#&gt; \u2502 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 179.9       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#column as Expr (prefer pl$col(\"Petal.Width\")$sum())\npl$DataFrame(iris)$select(pl$sum(pl$col(\"Petal.Width\")))\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 Petal.Width \u2502\n#&gt; \u2502 ---         \u2502\n#&gt; \u2502 f64         \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 179.9       \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n#column as numeric\npl$DataFrame()$select(pl$sum(1:5))\n#&gt; shape: (1, 1)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502     \u2502\n#&gt; \u2502 --- \u2502\n#&gt; \u2502 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 15  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n#column as list\npl$DataFrame(a=1:2,b=3:4,c=5:6)$with_column(pl$sum(list(\"a\",\"c\")))\n#&gt; shape: (2, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2506 sum \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2506 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 3   \u2506 5   \u2506 6   \u2502\n#&gt; \u2502 2   \u2506 4   \u2506 6   \u2506 8   \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\npl$DataFrame(a=1:2,b=3:4,c=5:6)$with_column(pl$sum(list(\"a\",\"c\", 42L)))\n#&gt; shape: (2, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2506 sum \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2506 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 3   \u2506 5   \u2506 48  \u2502\n#&gt; \u2502 2   \u2506 4   \u2506 6   \u2506 50  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n#three eqivalent lines\npl$DataFrame(a=1:2,b=3:4,c=5:6)$with_column(pl$sum(list(\"a\",\"c\", pl$sum(list(\"a\",\"b\",\"c\")))))\n#&gt; shape: (2, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2506 sum \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2506 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 3   \u2506 5   \u2506 15  \u2502\n#&gt; \u2502 2   \u2506 4   \u2506 6   \u2506 20  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\npl$DataFrame(a=1:2,b=3:4,c=5:6)$with_column(pl$sum(list(pl$col(\"a\")+pl$col(\"b\"),\"c\")))\n#&gt; shape: (2, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2506 sum \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2506 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 3   \u2506 5   \u2506 9   \u2502\n#&gt; \u2502 2   \u2506 4   \u2506 6   \u2506 12  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\npl$DataFrame(a=1:2,b=3:4,c=5:6)$with_column(pl$sum(list(\"*\")))\n#&gt; shape: (2, 4)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 a   \u2506 b   \u2506 c   \u2506 sum \u2502\n#&gt; \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2502\n#&gt; \u2502 i32 \u2506 i32 \u2506 i32 \u2506 i32 \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 1   \u2506 3   \u2506 5   \u2506 9   \u2502\n#&gt; \u2502 2   \u2506 4   \u2506 6   \u2506 12  \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/to_list/","title":"return polars DataFrame as R lit of vectors","text":"<p>Source: R/dataframe__frame.R</p> <pre><code>DataFrame_to_list(unnest_structs = TRUE)\n</code></pre>"},{"location":"reference/to_list/#arguments","title":"Arguments","text":"<ul> <li><code>unnest_structs</code>: bool default true, as calling $unnest() on any struct column</li> </ul>"},{"location":"reference/to_list/#returns","title":"Returns","text":"<p>R list of vectors</p> <p>return polars DataFrame as R lit of vectors</p>"},{"location":"reference/to_list/#details","title":"Details","text":"<p>This implementation for simplicity reasons relies on unnesting all structs before exporting to R. unnest_structs = FALSE, the previous struct columns will be re- nested. A struct in a R is a lists of lists, where each row is a list of values. Such a structure is not very typical or efficient in R.</p>"},{"location":"reference/to_list/#examples","title":"Examples","text":"<pre><code>pl$DataFrame(iris)$to_list()\n#&gt; $Sepal.Length\n#&gt;   [1] 5.1 4.9 4.7 4.6 5.0 5.4 4.6 5.0 4.4 4.9 5.4 4.8 4.8 4.3 5.8 5.7 5.4 5.1 5.7 5.1\n#&gt;  [21] 5.4 5.1 4.6 5.1 4.8 5.0 5.0 5.2 5.2 4.7 4.8 5.4 5.2 5.5 4.9 5.0 5.5 4.9 4.4 5.1\n#&gt;  [41] 5.0 4.5 4.4 5.0 5.1 4.8 5.1 4.6 5.3 5.0 7.0 6.4 6.9 5.5 6.5 5.7 6.3 4.9 6.6 5.2\n#&gt;  [61] 5.0 5.9 6.0 6.1 5.6 6.7 5.6 5.8 6.2 5.6 5.9 6.1 6.3 6.1 6.4 6.6 6.8 6.7 6.0 5.7\n#&gt;  [81] 5.5 5.5 5.8 6.0 5.4 6.0 6.7 6.3 5.6 5.5 5.5 6.1 5.8 5.0 5.6 5.7 5.7 6.2 5.1 5.7\n#&gt; [101] 6.3 5.8 7.1 6.3 6.5 7.6 4.9 7.3 6.7 7.2 6.5 6.4 6.8 5.7 5.8 6.4 6.5 7.7 7.7 6.0\n#&gt; [121] 6.9 5.6 7.7 6.3 6.7 7.2 6.2 6.1 6.4 7.2 7.4 7.9 6.4 6.3 6.1 7.7 6.3 6.4 6.0 6.9\n#&gt; [141] 6.7 6.9 5.8 6.8 6.7 6.7 6.3 6.5 6.2 5.9\n#&gt; #&gt; $Sepal.Width\n#&gt;   [1] 3.5 3.0 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 3.7 3.4 3.0 3.0 4.0 4.4 3.9 3.5 3.8 3.8\n#&gt;  [21] 3.4 3.7 3.6 3.3 3.4 3.0 3.4 3.5 3.4 3.2 3.1 3.4 4.1 4.2 3.1 3.2 3.5 3.6 3.0 3.4\n#&gt;  [41] 3.5 2.3 3.2 3.5 3.8 3.0 3.8 3.2 3.7 3.3 3.2 3.2 3.1 2.3 2.8 2.8 3.3 2.4 2.9 2.7\n#&gt;  [61] 2.0 3.0 2.2 2.9 2.9 3.1 3.0 2.7 2.2 2.5 3.2 2.8 2.5 2.8 2.9 3.0 2.8 3.0 2.9 2.6\n#&gt;  [81] 2.4 2.4 2.7 2.7 3.0 3.4 3.1 2.3 3.0 2.5 2.6 3.0 2.6 2.3 2.7 3.0 2.9 2.9 2.5 2.8\n#&gt; [101] 3.3 2.7 3.0 2.9 3.0 3.0 2.5 2.9 2.5 3.6 3.2 2.7 3.0 2.5 2.8 3.2 3.0 3.8 2.6 2.2\n#&gt; [121] 3.2 2.8 2.8 2.7 3.3 3.2 2.8 3.0 2.8 3.0 2.8 3.8 2.8 2.8 2.6 3.0 3.4 3.1 3.0 3.1\n#&gt; [141] 3.1 3.1 2.7 3.2 3.3 3.0 2.5 3.0 3.4 3.0\n#&gt; #&gt; $Petal.Length\n#&gt;   [1] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 1.5 1.6 1.4 1.1 1.2 1.5 1.3 1.4 1.7 1.5\n#&gt;  [21] 1.7 1.5 1.0 1.7 1.9 1.6 1.6 1.5 1.4 1.6 1.6 1.5 1.5 1.4 1.5 1.2 1.3 1.4 1.3 1.5\n#&gt;  [41] 1.3 1.3 1.3 1.6 1.9 1.4 1.6 1.4 1.5 1.4 4.7 4.5 4.9 4.0 4.6 4.5 4.7 3.3 4.6 3.9\n#&gt;  [61] 3.5 4.2 4.0 4.7 3.6 4.4 4.5 4.1 4.5 3.9 4.8 4.0 4.9 4.7 4.3 4.4 4.8 5.0 4.5 3.5\n#&gt;  [81] 3.8 3.7 3.9 5.1 4.5 4.5 4.7 4.4 4.1 4.0 4.4 4.6 4.0 3.3 4.2 4.2 4.2 4.3 3.0 4.1\n#&gt; [101] 6.0 5.1 5.9 5.6 5.8 6.6 4.5 6.3 5.8 6.1 5.1 5.3 5.5 5.0 5.1 5.3 5.5 6.7 6.9 5.0\n#&gt; [121] 5.7 4.9 6.7 4.9 5.7 6.0 4.8 4.9 5.6 5.8 6.1 6.4 5.6 5.1 5.6 6.1 5.6 5.5 4.8 5.4\n#&gt; [141] 5.6 5.1 5.1 5.9 5.7 5.2 5.0 5.2 5.4 5.1\n#&gt; #&gt; $Petal.Width\n#&gt;   [1] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 0.2 0.2 0.1 0.1 0.2 0.4 0.4 0.3 0.3 0.3\n#&gt;  [21] 0.2 0.4 0.2 0.5 0.2 0.2 0.4 0.2 0.2 0.2 0.2 0.4 0.1 0.2 0.2 0.2 0.2 0.1 0.2 0.2\n#&gt;  [41] 0.3 0.3 0.2 0.6 0.4 0.3 0.2 0.2 0.2 0.2 1.4 1.5 1.5 1.3 1.5 1.3 1.6 1.0 1.3 1.4\n#&gt;  [61] 1.0 1.5 1.0 1.4 1.3 1.4 1.5 1.0 1.5 1.1 1.8 1.3 1.5 1.2 1.3 1.4 1.4 1.7 1.5 1.0\n#&gt;  [81] 1.1 1.0 1.2 1.6 1.5 1.6 1.5 1.3 1.3 1.3 1.2 1.4 1.2 1.0 1.3 1.2 1.3 1.3 1.1 1.3\n#&gt; [101] 2.5 1.9 2.1 1.8 2.2 2.1 1.7 1.8 1.8 2.5 2.0 1.9 2.1 2.0 2.4 2.3 1.8 2.2 2.3 1.5\n#&gt; [121] 2.3 2.0 2.0 1.8 2.1 1.8 1.8 1.8 2.1 1.6 1.9 2.0 2.2 1.5 1.4 2.3 2.4 1.8 1.8 2.1\n#&gt; [141] 2.4 2.3 1.9 2.3 2.5 2.3 1.9 2.0 2.3 1.8\n#&gt; #&gt; $Species\n#&gt;   [1] setosa     setosa     setosa     setosa     setosa     setosa     setosa    \n#&gt;   [8] setosa     setosa     setosa     setosa     setosa     setosa     setosa    \n#&gt;  [15] setosa     setosa     setosa     setosa     setosa     setosa     setosa    \n#&gt;  [22] setosa     setosa     setosa     setosa     setosa     setosa     setosa    \n#&gt;  [29] setosa     setosa     setosa     setosa     setosa     setosa     setosa    \n#&gt;  [36] setosa     setosa     setosa     setosa     setosa     setosa     setosa    \n#&gt;  [43] setosa     setosa     setosa     setosa     setosa     setosa     setosa    \n#&gt;  [50] setosa     versicolor versicolor versicolor versicolor versicolor versicolor\n#&gt;  [57] versicolor versicolor versicolor versicolor versicolor versicolor versicolor\n#&gt;  [64] versicolor versicolor versicolor versicolor versicolor versicolor versicolor\n#&gt;  [71] versicolor versicolor versicolor versicolor versicolor versicolor versicolor\n#&gt;  [78] versicolor versicolor versicolor versicolor versicolor versicolor versicolor\n#&gt;  [85] versicolor versicolor versicolor versicolor versicolor versicolor versicolor\n#&gt;  [92] versicolor versicolor versicolor versicolor versicolor versicolor versicolor\n#&gt;  [99] versicolor versicolor virginica  virginica  virginica  virginica  virginica \n#&gt; [106] virginica  virginica  virginica  virginica  virginica  virginica  virginica \n#&gt; [113] virginica  virginica  virginica  virginica  virginica  virginica  virginica \n#&gt; [120] virginica  virginica  virginica  virginica  virginica  virginica  virginica \n#&gt; [127] virginica  virginica  virginica  virginica  virginica  virginica  virginica \n#&gt; [134] virginica  virginica  virginica  virginica  virginica  virginica  virginica \n#&gt; [141] virginica  virginica  virginica  virginica  virginica  virginica  virginica \n#&gt; [148] virginica  virginica  virginica \n#&gt; Levels: setosa versicolor virginica\n#&gt; </code></pre>"},{"location":"reference/unwrap/","title":"rust-like unwrapping of result. Useful to keep error handling on the R side.","text":"<p>Source: R/rust_result.R</p> <pre><code>unwrap(result, context = NULL, call = sys.call(1L))\n</code></pre>"},{"location":"reference/unwrap/#arguments","title":"Arguments","text":"<ul> <li><code>result</code>: a list here either element ok or err is NULL, or both if ok is litteral NULL</li> <li><code>context</code>: a msg to prefix a raised error with</li> <li><code>call</code>: context of error or string</li> </ul>"},{"location":"reference/unwrap/#returns","title":"Returns","text":"<p>the ok-element of list , or a error will be thrown</p> <p>rust-like unwrapping of result. Useful to keep error handling on the R side.</p>"},{"location":"reference/unwrap/#examples","title":"Examples","text":"<pre><code>structure(list(ok = \"foo\", err = NULL), class = \"extendr_result\")\n#&gt; $ok\n#&gt; [1] \"foo\"\n#&gt; #&gt; $err\n#&gt; NULL\n#&gt; #&gt; attr(,\"class\")\n#&gt; [1] \"extendr_result\"\ntryCatch(\nunwrap(\nstructure(\nlist(ok = NULL, err = \"something happen on the rust side\"),\n      class = \"extendr_result\"\n)\n),\n  error = function(err) as.character(err)\n)\n#&gt; [1] \"Error: something happen on the rust side \\n when calling :\\n source(\\\"~/Bureau/Git/not_my_packages/r-polars/make-docs.R\\\", echo = TRUE)\\n\"\n </code></pre>"},{"location":"reference/when_then_otherwise/","title":"when-then-otherwise Expr","text":"<p>Source: R/whenthen.R</p>"},{"location":"reference/when_then_otherwise/#arguments","title":"Arguments","text":"<ul> <li><code>predicate</code>: Into Expr into a boolean mask to branch by</li> <li><code>expr</code>: Into Expr value to insert in when() or otherwise()</li> </ul>"},{"location":"reference/when_then_otherwise/#returns","title":"Returns","text":"<p>Expr</p> <p>Start a \u201cwhen, then, otherwise\u201d expression.</p>"},{"location":"reference/when_then_otherwise/#details","title":"Details","text":"<p>For the impl nerds: pl$when returns a whenthen object and whenthen returns whenthenthen, except for otherwise(), which will terminate and return an Expr. Otherwise may fail to return an Expr if e.g. two consecutive <code>when(x)$when(y)</code></p>"},{"location":"reference/when_then_otherwise/#examples","title":"Examples","text":"<pre><code>df = pl$DataFrame(mtcars)\nwtt =\npl$when(pl$col(\"cyl\")&lt;=4)$then(\"&lt;=4cyl\")$\nwhen(pl$col(\"cyl\")&lt;=6)$then(\"&lt;=6cyl\")$\notherwise(\"&gt;6cyl\")$alias(\"cyl_groups\")\nprint(wtt)\n#&gt; polars Expr: \n#&gt; WHEN [(col(\"cyl\")) &lt;= (4f64)]\n#&gt; THEN\n#&gt;  Utf8(&lt;=4cyl)\n#&gt; OTHERWISE\n#&gt;  #&gt; WHEN [(col(\"cyl\")) &lt;= (6f64)]\n#&gt; THEN\n#&gt;  Utf8(&lt;=6cyl)\n#&gt; OTHERWISE\n#&gt;  Utf8(&gt;6cyl).alias(\"cyl_groups\")\ndf$with_columns(wtt)\n#&gt; shape: (32, 12)\n#&gt; \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n#&gt; \u2502 mpg  \u2506 cyl \u2506 disp  \u2506 hp    \u2506 ... \u2506 am  \u2506 gear \u2506 carb \u2506 cyl_groups \u2502\n#&gt; \u2502 ---  \u2506 --- \u2506 ---   \u2506 ---   \u2506     \u2506 --- \u2506 ---  \u2506 ---  \u2506 ---        \u2502\n#&gt; \u2502 f64  \u2506 f64 \u2506 f64   \u2506 f64   \u2506     \u2506 f64 \u2506 f64  \u2506 f64  \u2506 str        \u2502\n#&gt; \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2506 &lt;=6cyl     \u2502\n#&gt; \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 1.0 \u2506 4.0  \u2506 4.0  \u2506 &lt;=6cyl     \u2502\n#&gt; \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0  \u2506 ... \u2506 1.0 \u2506 4.0  \u2506 1.0  \u2506 &lt;=4cyl     \u2502\n#&gt; \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 3.0  \u2506 1.0  \u2506 &lt;=6cyl     \u2502\n#&gt; \u2502 ...  \u2506 ... \u2506 ...   \u2506 ...   \u2506 ... \u2506 ... \u2506 ...  \u2506 ...  \u2506 ...        \u2502\n#&gt; \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 ... \u2506 1.0 \u2506 5.0  \u2506 4.0  \u2506 &gt;6cyl      \u2502\n#&gt; \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 ... \u2506 1.0 \u2506 5.0  \u2506 6.0  \u2506 &lt;=6cyl     \u2502\n#&gt; \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 ... \u2506 1.0 \u2506 5.0  \u2506 8.0  \u2506 &gt;6cyl      \u2502\n#&gt; \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 ... \u2506 1.0 \u2506 4.0  \u2506 2.0  \u2506 &lt;=4cyl     \u2502\n#&gt; \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n </code></pre>"},{"location":"reference/wrap_proto_schema/","title":"wrap proto schema","text":"<p>Source: R/datatype.R</p>"},{"location":"reference/wrap_proto_schema/#format","title":"Format","text":"<p>function</p> <pre><code>wrap_proto_schema(x)\n</code></pre>"},{"location":"reference/wrap_proto_schema/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: either schema, or incomplete schema where dataType can be NULL or schema is just char vec, implicitly the same as if all DataType are NULL, mean undefinesd.</li> </ul>"},{"location":"reference/wrap_proto_schema/#returns","title":"Returns","text":"<p>bool</p> <p>wrap proto schema</p>"},{"location":"reference/wrap_proto_schema/#examples","title":"Examples","text":"<pre><code>polars:::wrap_proto_schema(c(\"alice\",\"bob\"))\n#&gt; $alice\n#&gt; NULL\n#&gt; #&gt; $bob\n#&gt; NULL\n#&gt; polars:::wrap_proto_schema(list(\"alice\"=pl$Int64,\"bob\"=NULL))\n#&gt; $alice\n#&gt; DataType: Int64\n#&gt; #&gt; $bob\n#&gt; NULL\n#&gt; </code></pre>"},{"location":"reference/wrap_s/","title":"Wrap as Series","text":"<p>Source: R/series__series.R</p> <pre><code>wrap_s(x)\n</code></pre>"},{"location":"reference/wrap_s/#arguments","title":"Arguments","text":"<ul> <li><code>x</code>: a Series or something-turned-into-Series</li> </ul>"},{"location":"reference/wrap_s/#returns","title":"Returns","text":"<p>Series</p> <p>input is either already a Series of will be passed to the Series constructor</p>"}]}