{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"polars The goal of this project is to bring the blazingly fast Polars data manipulation library to R. The underlying computation engine is written in Rust and this R implementation has no other dependencies than R itself (\u2265 4.1.0). Documentation can be found on the r-polars homepage . The primary developer of the upstream Polars project is Ritchie Vink ( @ritchie46 ). This R port is maintained by S\u00f8ren Welling ( @sorhawell ), together with other contributors . Consider joining our Discord (subchannel) for additional help and discussion. Update: As of March 2023, polars has now reached nearly 100% coverage of the underlying \u201clazy\u201d Expr syntax. While translation of the \u201ceager\u201d syntax is still a little further behind, you should be able to do just about everything using $select() + $with_columns() . Install The package is not yet available on CRAN. But we provide convenient installation options for a variety of operating systems: R-universe R-universe provides pre-compiled polars binaries for Windows and MacOS (x86_64), with source builds for other platforms. Please see the GitHub release option below for binary install options on Linux. install.packages(\"polars\", repos = \"https://rpolars.r-universe.dev\") Special thanks to Jeroen Ooms ( @jeroen ) for the excellent R-universe support. GitHub releases We also provide pre-compiled binaries for various operating systems, as well as source installs, on our GitHub releases page. You can download and install these files manually, or install directly from R. Simply match the URL for your operating system and the desired release. For example, to install the latest release of polars on Linux (x86_64) one would use: install.packages( \"https://github.com/pola-rs/r-polars/releases/latest/download/polars__x86_64-pc-linux-gnu.gz\", repos = NULL ) Similarly for Windows ( URL and MacOS (x86_64, URL ). Just remember to invoke the repos = NULL argument if you are installing these binary builds directly from within R. One exception worth noting is MacOS (arm64), i.e. systems based on the new M1/M2 \u201cSilicon\u201d chips. To install polars on one of these machines, we need to build the package from source and this requires Xcode ( xcode-select --install ). Once Xcode is installed, you can run the below code chunk to build polars . The corresponding Makevars script will download a \\~200MB cross-compiled object file, while your machine links and builds the final R package. # install.packages(\"remotes\") remotes::install_github( \"https://github.com/pola-rs/r-polars\", ref = \"long_arms64\", force =TRUE ) Please file an issue if you require a different target or operating system build. Finally, see the bottom of this README for details on how to install rust to build from source (only relevant for developers, or users of unsupported operating systems). Quickstart example The introductory vignette ( vignette(\"polars\") ) contains a series of detailed examples. But here is a quick illustration of polars in action. Start by loading the package and creating a Polars DataFrame object. Similar to the Python implementation, note that we use the pl$ prefix to specify a Polars constructor. library(polars) dat = pl$DataFrame(mtcars) dat #> polars DataFrame: shape: (32, 11) #> \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 #> \u2502 mpg \u2506 cyl \u2506 disp \u2506 hp \u2506 ... \u2506 vs \u2506 am \u2506 gear \u2506 carb \u2502 #> \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502 #> \u2502 f64 \u2506 f64 \u2506 f64 \u2506 f64 \u2506 \u2506 f64 \u2506 f64 \u2506 f64 \u2506 f64 \u2502 #> \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561 #> \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0 \u2506 4.0 \u2502 #> \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0 \u2506 4.0 \u2502 #> \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0 \u2506 1.0 \u2502 #> \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 3.0 \u2506 1.0 \u2502 #> \u2502 ... \u2506 ... \u2506 ... \u2506 ... \u2506 ... \u2506 ... \u2506 ... \u2506 ... \u2506 ... \u2502 #> \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0 \u2506 4.0 \u2502 #> \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0 \u2506 6.0 \u2502 #> \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0 \u2506 8.0 \u2502 #> \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0 \u2506 2.0 \u2502 #> \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Once our Polars DataFrame has been created, we can chain together a series of data manipulations as part of the same query. For example: dat$filter( pl$col(\"cyl\")>=6 )$groupby( \"cyl\", \"am\" )$agg( pl$col(\"mpg\")$mean()$alias(\"mean_mpg\"), pl$col(\"hp\")$median()$alias(\"med_hp\") ) #> polars DataFrame: shape: (4, 4) #> \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 #> \u2502 cyl \u2506 am \u2506 mean_mpg \u2506 med_hp \u2502 #> \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2502 #> \u2502 f64 \u2506 f64 \u2506 f64 \u2506 f64 \u2502 #> \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 #> \u2502 6.0 \u2506 1.0 \u2506 20.566667 \u2506 110.0 \u2502 #> \u2502 6.0 \u2506 0.0 \u2506 19.125 \u2506 116.5 \u2502 #> \u2502 8.0 \u2506 0.0 \u2506 15.05 \u2506 180.0 \u2502 #> \u2502 8.0 \u2506 1.0 \u2506 15.4 \u2506 299.5 \u2502 #> \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 The above is an example of Polars\u2019 eager execution engine. But for maximum performance, it is preferable to use Polars\u2019 lazy execution mode, which allows the package to apply additional query optimizations. ldat = dat$lazy() ldat$filter( pl$col(\"cyl\")>=6 )$groupby( \"cyl\", \"am\" )$agg( pl$col(\"mpg\")$mean()$alias(\"mean_mpg\"), pl$col(\"hp\")$median()$alias(\"med_hp\") )$collect() #> polars DataFrame: shape: (4, 4) #> \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 #> \u2502 cyl \u2506 am \u2506 mean_mpg \u2506 med_hp \u2502 #> \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2502 #> \u2502 f64 \u2506 f64 \u2506 f64 \u2506 f64 \u2502 #> \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 #> \u2502 6.0 \u2506 1.0 \u2506 20.566667 \u2506 110.0 \u2502 #> \u2502 6.0 \u2506 0.0 \u2506 19.125 \u2506 116.5 \u2502 #> \u2502 8.0 \u2506 0.0 \u2506 15.05 \u2506 180.0 \u2502 #> \u2502 8.0 \u2506 1.0 \u2506 15.4 \u2506 299.5 \u2502 #> \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Contribute Contributions are very welcome! Here are the steps required for an example contribution, where we are implementing the cosine expression : Look up the polars.Expr.cos method in py-polars documentation . Press the [source] button to see the Python impl Find the cos py-polars rust implementation (likely just a simple call to the Rust-Polars API) Adapt the Rust part and place it here . Adapt the Python frontend syntax to R and place it here . Add the roxygen docs + examples above. Notice we use Expr_cos = \"use_extendr_wrapper\" , it means we\u2019re just using unmodified the extendr auto-generated wrapper Write a test here . Run renv::restore() and resolve all R packages Run rextendr::document() to recompile and confirm the added method functions as intended, e.g. pl$DataFrame(a=c(0,pi/2,pi,NA_real_))$select(pl$col(\"a\")$cos()) Run devtools::test() . See below for how to set up your development environment correctly. Note that PRs to polars will be automatically be built and tested on all platforms as part of our GitHub Actions workflow. A more detailed description of the development environment and workflow for local builds is provided below. Development environment and workflow System dependencies Rust toolchain Install rustup , the cross-platform Rust installer. Then: sh rustup toolchain install nightly rustup default nightly Windows: Make sure the latest version of Rtools is installed and on your PATH. MacOS: Make sure Xcode is installed. Install CMake and added it to your PATH. Development workflow Assuming the system dependencies have been met (above), the typical polars development workflow is as follows: Step 1: Fork the polars repo on GitHub and then clone it locally. git clone git@github.com:<YOUR-GITHUB-ACCOUNT>/r-polars.git cd r-polars Step 2: Build the package and install the suggested package dependencies. Option A: Using devtools . r Rscript -e 'devtools::install(pkg = \".\", dependencies = TRUE)' Option B: Using renv . r # Rscript -e 'install.packages(\"renv\")' Rscript -e 'renv::activate(); renv::restore()' Step 3: Make your proposed changes to the R and/or Rust code. Don\u2019t forget to run: rextendr::document() # compile Rust code + update wrappers & docs devtools::test() # run all unit tests Step 4 (optional): Build the package locally. R CMD INSTALL --no-multiarch --with-keep.source polars Step 5: Commit your changes and submit a PR to the main polars repo. As aside, notice that ./renv.lock sets all R packages during the server build. Tip: To speed up the local R CMD check, run the following: devtools::check( env_vars = list(RPOLARS_RUST_SOURCE=\"/YOUR/OWN/ABSOLUTE/PATH/r-polars/src/rust\"), check_dir = \"./check/\" ) source(\"./inst/misc/filter_rcmdcheck.R\") Sys.sleep(5) unlink(\"check\",recursive = TRUE, force =TRUE) The RPOLARS_RUST_SOURCE environment variable allows polars to recover the Cargo cache even if source files have been moved. Replace with your own absolute path to your local clone! filter_rcmdcheck.R removes known warnings from final check report. unlink(\"check\") cleans up.","title":"Home"},{"location":"#polars","text":"The goal of this project is to bring the blazingly fast Polars data manipulation library to R. The underlying computation engine is written in Rust and this R implementation has no other dependencies than R itself (\u2265 4.1.0). Documentation can be found on the r-polars homepage . The primary developer of the upstream Polars project is Ritchie Vink ( @ritchie46 ). This R port is maintained by S\u00f8ren Welling ( @sorhawell ), together with other contributors . Consider joining our Discord (subchannel) for additional help and discussion. Update: As of March 2023, polars has now reached nearly 100% coverage of the underlying \u201clazy\u201d Expr syntax. While translation of the \u201ceager\u201d syntax is still a little further behind, you should be able to do just about everything using $select() + $with_columns() .","title":"polars"},{"location":"#install","text":"The package is not yet available on CRAN. But we provide convenient installation options for a variety of operating systems:","title":"Install"},{"location":"#r-universe","text":"R-universe provides pre-compiled polars binaries for Windows and MacOS (x86_64), with source builds for other platforms. Please see the GitHub release option below for binary install options on Linux. install.packages(\"polars\", repos = \"https://rpolars.r-universe.dev\") Special thanks to Jeroen Ooms ( @jeroen ) for the excellent R-universe support.","title":"R-universe"},{"location":"#github-releases","text":"We also provide pre-compiled binaries for various operating systems, as well as source installs, on our GitHub releases page. You can download and install these files manually, or install directly from R. Simply match the URL for your operating system and the desired release. For example, to install the latest release of polars on Linux (x86_64) one would use: install.packages( \"https://github.com/pola-rs/r-polars/releases/latest/download/polars__x86_64-pc-linux-gnu.gz\", repos = NULL ) Similarly for Windows ( URL and MacOS (x86_64, URL ). Just remember to invoke the repos = NULL argument if you are installing these binary builds directly from within R. One exception worth noting is MacOS (arm64), i.e. systems based on the new M1/M2 \u201cSilicon\u201d chips. To install polars on one of these machines, we need to build the package from source and this requires Xcode ( xcode-select --install ). Once Xcode is installed, you can run the below code chunk to build polars . The corresponding Makevars script will download a \\~200MB cross-compiled object file, while your machine links and builds the final R package. # install.packages(\"remotes\") remotes::install_github( \"https://github.com/pola-rs/r-polars\", ref = \"long_arms64\", force =TRUE ) Please file an issue if you require a different target or operating system build. Finally, see the bottom of this README for details on how to install rust to build from source (only relevant for developers, or users of unsupported operating systems).","title":"GitHub releases"},{"location":"#quickstart-example","text":"The introductory vignette ( vignette(\"polars\") ) contains a series of detailed examples. But here is a quick illustration of polars in action. Start by loading the package and creating a Polars DataFrame object. Similar to the Python implementation, note that we use the pl$ prefix to specify a Polars constructor. library(polars) dat = pl$DataFrame(mtcars) dat #> polars DataFrame: shape: (32, 11) #> \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510 #> \u2502 mpg \u2506 cyl \u2506 disp \u2506 hp \u2506 ... \u2506 vs \u2506 am \u2506 gear \u2506 carb \u2502 #> \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502 #> \u2502 f64 \u2506 f64 \u2506 f64 \u2506 f64 \u2506 \u2506 f64 \u2506 f64 \u2506 f64 \u2506 f64 \u2502 #> \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561 #> \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0 \u2506 4.0 \u2502 #> \u2502 21.0 \u2506 6.0 \u2506 160.0 \u2506 110.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 4.0 \u2506 4.0 \u2502 #> \u2502 22.8 \u2506 4.0 \u2506 108.0 \u2506 93.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0 \u2506 1.0 \u2502 #> \u2502 21.4 \u2506 6.0 \u2506 258.0 \u2506 110.0 \u2506 ... \u2506 1.0 \u2506 0.0 \u2506 3.0 \u2506 1.0 \u2502 #> \u2502 ... \u2506 ... \u2506 ... \u2506 ... \u2506 ... \u2506 ... \u2506 ... \u2506 ... \u2506 ... \u2502 #> \u2502 15.8 \u2506 8.0 \u2506 351.0 \u2506 264.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0 \u2506 4.0 \u2502 #> \u2502 19.7 \u2506 6.0 \u2506 145.0 \u2506 175.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0 \u2506 6.0 \u2502 #> \u2502 15.0 \u2506 8.0 \u2506 301.0 \u2506 335.0 \u2506 ... \u2506 0.0 \u2506 1.0 \u2506 5.0 \u2506 8.0 \u2502 #> \u2502 21.4 \u2506 4.0 \u2506 121.0 \u2506 109.0 \u2506 ... \u2506 1.0 \u2506 1.0 \u2506 4.0 \u2506 2.0 \u2502 #> \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Once our Polars DataFrame has been created, we can chain together a series of data manipulations as part of the same query. For example: dat$filter( pl$col(\"cyl\")>=6 )$groupby( \"cyl\", \"am\" )$agg( pl$col(\"mpg\")$mean()$alias(\"mean_mpg\"), pl$col(\"hp\")$median()$alias(\"med_hp\") ) #> polars DataFrame: shape: (4, 4) #> \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 #> \u2502 cyl \u2506 am \u2506 mean_mpg \u2506 med_hp \u2502 #> \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2502 #> \u2502 f64 \u2506 f64 \u2506 f64 \u2506 f64 \u2502 #> \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 #> \u2502 6.0 \u2506 1.0 \u2506 20.566667 \u2506 110.0 \u2502 #> \u2502 6.0 \u2506 0.0 \u2506 19.125 \u2506 116.5 \u2502 #> \u2502 8.0 \u2506 0.0 \u2506 15.05 \u2506 180.0 \u2502 #> \u2502 8.0 \u2506 1.0 \u2506 15.4 \u2506 299.5 \u2502 #> \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 The above is an example of Polars\u2019 eager execution engine. But for maximum performance, it is preferable to use Polars\u2019 lazy execution mode, which allows the package to apply additional query optimizations. ldat = dat$lazy() ldat$filter( pl$col(\"cyl\")>=6 )$groupby( \"cyl\", \"am\" )$agg( pl$col(\"mpg\")$mean()$alias(\"mean_mpg\"), pl$col(\"hp\")$median()$alias(\"med_hp\") )$collect() #> polars DataFrame: shape: (4, 4) #> \u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 #> \u2502 cyl \u2506 am \u2506 mean_mpg \u2506 med_hp \u2502 #> \u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2502 #> \u2502 f64 \u2506 f64 \u2506 f64 \u2506 f64 \u2502 #> \u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561 #> \u2502 6.0 \u2506 1.0 \u2506 20.566667 \u2506 110.0 \u2502 #> \u2502 6.0 \u2506 0.0 \u2506 19.125 \u2506 116.5 \u2502 #> \u2502 8.0 \u2506 0.0 \u2506 15.05 \u2506 180.0 \u2502 #> \u2502 8.0 \u2506 1.0 \u2506 15.4 \u2506 299.5 \u2502 #> \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Quickstart example"},{"location":"#contribute","text":"Contributions are very welcome! Here are the steps required for an example contribution, where we are implementing the cosine expression : Look up the polars.Expr.cos method in py-polars documentation . Press the [source] button to see the Python impl Find the cos py-polars rust implementation (likely just a simple call to the Rust-Polars API) Adapt the Rust part and place it here . Adapt the Python frontend syntax to R and place it here . Add the roxygen docs + examples above. Notice we use Expr_cos = \"use_extendr_wrapper\" , it means we\u2019re just using unmodified the extendr auto-generated wrapper Write a test here . Run renv::restore() and resolve all R packages Run rextendr::document() to recompile and confirm the added method functions as intended, e.g. pl$DataFrame(a=c(0,pi/2,pi,NA_real_))$select(pl$col(\"a\")$cos()) Run devtools::test() . See below for how to set up your development environment correctly. Note that PRs to polars will be automatically be built and tested on all platforms as part of our GitHub Actions workflow. A more detailed description of the development environment and workflow for local builds is provided below.","title":"Contribute"},{"location":"#development-environment-and-workflow","text":"","title":"Development environment and workflow"},{"location":"#system-dependencies","text":"Rust toolchain Install rustup , the cross-platform Rust installer. Then: sh rustup toolchain install nightly rustup default nightly Windows: Make sure the latest version of Rtools is installed and on your PATH. MacOS: Make sure Xcode is installed. Install CMake and added it to your PATH.","title":"System dependencies"},{"location":"#development-workflow","text":"Assuming the system dependencies have been met (above), the typical polars development workflow is as follows: Step 1: Fork the polars repo on GitHub and then clone it locally. git clone git@github.com:<YOUR-GITHUB-ACCOUNT>/r-polars.git cd r-polars Step 2: Build the package and install the suggested package dependencies. Option A: Using devtools . r Rscript -e 'devtools::install(pkg = \".\", dependencies = TRUE)' Option B: Using renv . r # Rscript -e 'install.packages(\"renv\")' Rscript -e 'renv::activate(); renv::restore()' Step 3: Make your proposed changes to the R and/or Rust code. Don\u2019t forget to run: rextendr::document() # compile Rust code + update wrappers & docs devtools::test() # run all unit tests Step 4 (optional): Build the package locally. R CMD INSTALL --no-multiarch --with-keep.source polars Step 5: Commit your changes and submit a PR to the main polars repo. As aside, notice that ./renv.lock sets all R packages during the server build. Tip: To speed up the local R CMD check, run the following: devtools::check( env_vars = list(RPOLARS_RUST_SOURCE=\"/YOUR/OWN/ABSOLUTE/PATH/r-polars/src/rust\"), check_dir = \"./check/\" ) source(\"./inst/misc/filter_rcmdcheck.R\") Sys.sleep(5) unlink(\"check\",recursive = TRUE, force =TRUE) The RPOLARS_RUST_SOURCE environment variable allows polars to recover the Cargo cache even if source files have been moved. Replace with your own absolute path to your local clone! filter_rcmdcheck.R removes known warnings from final check report. unlink(\"check\") cleans up.","title":"Development workflow"},{"location":"LICENSE/","text":"MIT License Copyright (c) 2023 rpolars authors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"LICENSE/#mit-license","text":"Copyright (c) 2023 rpolars authors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"reference/DataFrame/","text":"DataFrame Create new DataFrame Description Create new DataFrame Arguments Argument Description ... one data.frame or something that inherits data.frame or DataFrame one list of mixed vectors and Series of equal length mixed vectors and/or Series of equal length Columns will be named as of named arguments or alternatively by names of Series or given a placeholder name. make_names_unique | default TRUE, any duplicated names will be prefixed a running number parallel | bool default FALSE, experimental multithreaded interpretation of R vectors into a polars DataFrame. This is experimental as multiple threads read from R mem simultaneously. So far no issues parallel read from R has been found. Value DataFrame Examples pl$DataFrame( a = list(c(1,2,3,4,5)), #NB if first column should be a list, wrap it in a Series b = 1:5, c = letters[1:5], d = list(1:1,1:2,1:3,1:4,1:5) ) #directly from vectors #from a list of vectors or data.frame pl$DataFrame(list( a= c(1,2,3,4,5), b=1:5, c = letters[1:5], d = list(1L,1:2,1:3,1:4,1:5) ))","title":"`DataFrame`"},{"location":"reference/DataFrame/#dataframe","text":"Create new DataFrame","title":"DataFrame"},{"location":"reference/DataFrame/#description","text":"Create new DataFrame","title":"Description"},{"location":"reference/DataFrame/#arguments","text":"Argument Description ... one data.frame or something that inherits data.frame or DataFrame one list of mixed vectors and Series of equal length mixed vectors and/or Series of equal length Columns will be named as of named arguments or alternatively by names of Series or given a placeholder name. make_names_unique | default TRUE, any duplicated names will be prefixed a running number parallel | bool default FALSE, experimental multithreaded interpretation of R vectors into a polars DataFrame. This is experimental as multiple threads read from R mem simultaneously. So far no issues parallel read from R has been found.","title":"Arguments"},{"location":"reference/DataFrame/#value","text":"DataFrame","title":"Value"},{"location":"reference/DataFrame/#examples","text":"pl$DataFrame( a = list(c(1,2,3,4,5)), #NB if first column should be a list, wrap it in a Series b = 1:5, c = letters[1:5], d = list(1:1,1:2,1:3,1:4,1:5) ) #directly from vectors #from a list of vectors or data.frame pl$DataFrame(list( a= c(1,2,3,4,5), b=1:5, c = letters[1:5], d = list(1L,1:2,1:3,1:4,1:5) ))","title":"Examples"},{"location":"reference/DataFrame_as_data_frame/","text":"as_data_frame return polars DataFrame as R data.frame Description return polars DataFrame as R data.frame Usage DataFrame_as_data_frame(...) list(list(\"as.data.frame\"), list(\"DataFrame\"))(x, ...) Arguments Argument Description ... any params passed to as.data.frame x DataFrame Value data.frame data.frame Examples df = pl$DataFrame(iris[1:3,]) df$as_data_frame()","title":"`as_data_frame`"},{"location":"reference/DataFrame_as_data_frame/#as_data_frame","text":"return polars DataFrame as R data.frame","title":"as_data_frame"},{"location":"reference/DataFrame_as_data_frame/#description","text":"return polars DataFrame as R data.frame","title":"Description"},{"location":"reference/DataFrame_as_data_frame/#usage","text":"DataFrame_as_data_frame(...) list(list(\"as.data.frame\"), list(\"DataFrame\"))(x, ...)","title":"Usage"},{"location":"reference/DataFrame_as_data_frame/#arguments","text":"Argument Description ... any params passed to as.data.frame x DataFrame","title":"Arguments"},{"location":"reference/DataFrame_as_data_frame/#value","text":"data.frame data.frame","title":"Value"},{"location":"reference/DataFrame_as_data_frame/#examples","text":"df = pl$DataFrame(iris[1:3,]) df$as_data_frame()","title":"Examples"},{"location":"reference/DataFrame_class/","text":"class Inner workings of the DataFrame-class Description The DataFrame -class is simply two environments of respectively the public and private methods/function calls to the polars rust side. The instanciated DataFrame -object is an externalptr to a lowlevel rust polars DataFrame object. The pointer address is the only statefullness of the DataFrame object on the R side. Any other state resides on the rust side. The S3 method .DollarNames.DataFrame exposes all public $foobar() -methods which are callable onto the object. Most methods return another DataFrame -class instance or similar which allows for method chaining. This class system in lack of a better name could be called \"environment classes\" and is the same class system extendr provides, except here there is both a public and private set of methods. For implementation reasons, the private methods are external and must be called from polars:::.pr.$DataFrame$methodname(), also all private methods must take any self as an argument, thus they are pure functions. Having the private methods as pure functions solved/simplified self-referential complications. Details Check out the source code in R/dataframe_frame.R how public methods are derived from private methods. Check out extendr-wrappers.R to see the extendr-auto-generated methods. These are moved to .pr and converted into pure external functions in after-wrappers.R. In zzz.R (named zzz to be last file sourced) the extendr-methods are removed and replaced by any function prefixed DataFrame_ . Examples #see all exported methods ls(polars:::DataFrame) #see all private methods (not intended for regular use) ls(polars:::.pr$DataFrame) #make an object df = pl$DataFrame(iris) #use a public method/property df$shape df2 = df #use a private method, which has mutability result = polars:::.pr$DataFrame$set_column_from_robj(df,150:1,\"some_ints\") #column exists in both dataframes-objects now, as they are just pointers to the same object # there are no public methods with mutability df$columns df2$columns # set_column_from_robj-method is fallible and returned a result which could be ok or an err. # No public method or function will ever return a result. # The `result` is very close to the same as output from functions decorated with purrr::safely. # To use results on R side, these must be unwrapped first such that # potentially errors can be thrown. unwrap(result) is a way to # bridge rust not throwing errors with R. Extendr default behaviour is to use panic!(s) which # would case some unneccesary confusing and some very verbose error messages on the inner # workings of rust. unwrap(result) #in this case no error, just a NULL because this mutable # method does not return any ok-value. #try unwrapping an error from polars due to unmatching column lengths err_result = polars:::.pr$DataFrame$set_column_from_robj(df,1:10000,\"wrong_length\") tryCatch(unwrap(err_result,call=NULL),error=\\(e) cat(as.character(e)))","title":"`class`"},{"location":"reference/DataFrame_class/#class","text":"Inner workings of the DataFrame-class","title":"class"},{"location":"reference/DataFrame_class/#description","text":"The DataFrame -class is simply two environments of respectively the public and private methods/function calls to the polars rust side. The instanciated DataFrame -object is an externalptr to a lowlevel rust polars DataFrame object. The pointer address is the only statefullness of the DataFrame object on the R side. Any other state resides on the rust side. The S3 method .DollarNames.DataFrame exposes all public $foobar() -methods which are callable onto the object. Most methods return another DataFrame -class instance or similar which allows for method chaining. This class system in lack of a better name could be called \"environment classes\" and is the same class system extendr provides, except here there is both a public and private set of methods. For implementation reasons, the private methods are external and must be called from polars:::.pr.$DataFrame$methodname(), also all private methods must take any self as an argument, thus they are pure functions. Having the private methods as pure functions solved/simplified self-referential complications.","title":"Description"},{"location":"reference/DataFrame_class/#details","text":"Check out the source code in R/dataframe_frame.R how public methods are derived from private methods. Check out extendr-wrappers.R to see the extendr-auto-generated methods. These are moved to .pr and converted into pure external functions in after-wrappers.R. In zzz.R (named zzz to be last file sourced) the extendr-methods are removed and replaced by any function prefixed DataFrame_ .","title":"Details"},{"location":"reference/DataFrame_class/#examples","text":"#see all exported methods ls(polars:::DataFrame) #see all private methods (not intended for regular use) ls(polars:::.pr$DataFrame) #make an object df = pl$DataFrame(iris) #use a public method/property df$shape df2 = df #use a private method, which has mutability result = polars:::.pr$DataFrame$set_column_from_robj(df,150:1,\"some_ints\") #column exists in both dataframes-objects now, as they are just pointers to the same object # there are no public methods with mutability df$columns df2$columns # set_column_from_robj-method is fallible and returned a result which could be ok or an err. # No public method or function will ever return a result. # The `result` is very close to the same as output from functions decorated with purrr::safely. # To use results on R side, these must be unwrapped first such that # potentially errors can be thrown. unwrap(result) is a way to # bridge rust not throwing errors with R. Extendr default behaviour is to use panic!(s) which # would case some unneccesary confusing and some very verbose error messages on the inner # workings of rust. unwrap(result) #in this case no error, just a NULL because this mutable # method does not return any ok-value. #try unwrapping an error from polars due to unmatching column lengths err_result = polars:::.pr$DataFrame$set_column_from_robj(df,1:10000,\"wrong_length\") tryCatch(unwrap(err_result,call=NULL),error=\\(e) cat(as.character(e)))","title":"Examples"},{"location":"reference/DataFrame_clone/","text":"clone Clone a DataFrame Description Rarely useful as DataFrame is nearly 100% immutable Any modification of a DataFrame would lead to a clone anyways. Usage DataFrame_clone() Value DataFrame Examples df1 = pl$DataFrame(iris); df2 = df1$clone(); df3 = df1 pl$mem_address(df1) != pl$mem_address(df2) pl$mem_address(df1) == pl$mem_address(df3)","title":"`clone`"},{"location":"reference/DataFrame_clone/#clone","text":"Clone a DataFrame","title":"clone"},{"location":"reference/DataFrame_clone/#description","text":"Rarely useful as DataFrame is nearly 100% immutable Any modification of a DataFrame would lead to a clone anyways.","title":"Description"},{"location":"reference/DataFrame_clone/#usage","text":"DataFrame_clone()","title":"Usage"},{"location":"reference/DataFrame_clone/#value","text":"DataFrame","title":"Value"},{"location":"reference/DataFrame_clone/#examples","text":"df1 = pl$DataFrame(iris); df2 = df1$clone(); df3 = df1 pl$mem_address(df1) != pl$mem_address(df2) pl$mem_address(df1) == pl$mem_address(df3)","title":"Examples"},{"location":"reference/DataFrame_columns/","text":"columns get/set columns (the names columns) Description get/set column names of DataFrame object get/set column names of DataFrame object Usage RField_datatype() DataFrame_columns() Value char vec of column names char vec of column names Examples df = pl$DataFrame(iris) #get values df$columns #set + get values df$columns = letters[1:5] #<- is fine too df$columns df = pl$DataFrame(iris) #get values df$columns #set + get values df$columns = letters[1:5] #<- is fine too df$columns","title":"`columns`"},{"location":"reference/DataFrame_columns/#columns","text":"get/set columns (the names columns)","title":"columns"},{"location":"reference/DataFrame_columns/#description","text":"get/set column names of DataFrame object get/set column names of DataFrame object","title":"Description"},{"location":"reference/DataFrame_columns/#usage","text":"RField_datatype() DataFrame_columns()","title":"Usage"},{"location":"reference/DataFrame_columns/#value","text":"char vec of column names char vec of column names","title":"Value"},{"location":"reference/DataFrame_columns/#examples","text":"df = pl$DataFrame(iris) #get values df$columns #set + get values df$columns = letters[1:5] #<- is fine too df$columns df = pl$DataFrame(iris) #get values df$columns #set + get values df$columns = letters[1:5] #<- is fine too df$columns","title":"Examples"},{"location":"reference/DataFrame_dtypes/","text":"dtypes DataFrame dtypes Description Get dtypes of columns in DataFrame. Dtypes can also be found in column headers when printing the DataFrame. Get dtypes of columns in DataFrame. Dtypes can also be found in column headers when printing the DataFrame. Usage DataFrame_dtypes() DataFrame_schema() Value width as numeric scalar width as numeric scalar Examples pl$DataFrame(iris)$dtypes pl$DataFrame(iris)$schema","title":"`dtypes`"},{"location":"reference/DataFrame_dtypes/#dtypes","text":"DataFrame dtypes","title":"dtypes"},{"location":"reference/DataFrame_dtypes/#description","text":"Get dtypes of columns in DataFrame. Dtypes can also be found in column headers when printing the DataFrame. Get dtypes of columns in DataFrame. Dtypes can also be found in column headers when printing the DataFrame.","title":"Description"},{"location":"reference/DataFrame_dtypes/#usage","text":"DataFrame_dtypes() DataFrame_schema()","title":"Usage"},{"location":"reference/DataFrame_dtypes/#value","text":"width as numeric scalar width as numeric scalar","title":"Value"},{"location":"reference/DataFrame_dtypes/#examples","text":"pl$DataFrame(iris)$dtypes pl$DataFrame(iris)$schema","title":"Examples"},{"location":"reference/DataFrame_estimated_size/","text":"estimated_size Estimated size Description Return an estimation of the total (heap) allocated size of the DataFrame. Format function Usage DataFrame_estimated_size Value Bytes Examples pl$DataFrame(mtcars)$estimated_size()","title":"`estimated_size`"},{"location":"reference/DataFrame_estimated_size/#estimated_size","text":"Estimated size","title":"estimated_size"},{"location":"reference/DataFrame_estimated_size/#description","text":"Return an estimation of the total (heap) allocated size of the DataFrame.","title":"Description"},{"location":"reference/DataFrame_estimated_size/#format","text":"function","title":"Format"},{"location":"reference/DataFrame_estimated_size/#usage","text":"DataFrame_estimated_size","title":"Usage"},{"location":"reference/DataFrame_estimated_size/#value","text":"Bytes","title":"Value"},{"location":"reference/DataFrame_estimated_size/#examples","text":"pl$DataFrame(mtcars)$estimated_size()","title":"Examples"},{"location":"reference/DataFrame_first/","text":"first First Description Get the first row of the DataFrame. Usage DataFrame_first() Value A new DataFrame object with applied filter. Examples pl$DataFrame(mtcars)$first()","title":"`first`"},{"location":"reference/DataFrame_first/#first","text":"First","title":"first"},{"location":"reference/DataFrame_first/#description","text":"Get the first row of the DataFrame.","title":"Description"},{"location":"reference/DataFrame_first/#usage","text":"DataFrame_first()","title":"Usage"},{"location":"reference/DataFrame_first/#value","text":"A new DataFrame object with applied filter.","title":"Value"},{"location":"reference/DataFrame_first/#examples","text":"pl$DataFrame(mtcars)$first()","title":"Examples"},{"location":"reference/DataFrame_get_column/","text":"get_column Get Column (as one Series) Description get one column by name as series Usage DataFrame_get_column(name) Arguments Argument Description name name of column to extract as Series Value Series Examples df = pl$DataFrame(iris[1,]) df$get_column(\"Species\")","title":"`get_column`"},{"location":"reference/DataFrame_get_column/#get_column","text":"Get Column (as one Series)","title":"get_column"},{"location":"reference/DataFrame_get_column/#description","text":"get one column by name as series","title":"Description"},{"location":"reference/DataFrame_get_column/#usage","text":"DataFrame_get_column(name)","title":"Usage"},{"location":"reference/DataFrame_get_column/#arguments","text":"Argument Description name name of column to extract as Series","title":"Arguments"},{"location":"reference/DataFrame_get_column/#value","text":"Series","title":"Value"},{"location":"reference/DataFrame_get_column/#examples","text":"df = pl$DataFrame(iris[1,]) df$get_column(\"Species\")","title":"Examples"},{"location":"reference/DataFrame_get_columns/","text":"get_columns Get columns (as Series) Description get columns as list of series Format An object of class character of length 1. Usage DataFrame_get_columns Value list of series Examples df = pl$DataFrame(iris[1,]) df$get_columns()","title":"`get_columns`"},{"location":"reference/DataFrame_get_columns/#get_columns","text":"Get columns (as Series)","title":"get_columns"},{"location":"reference/DataFrame_get_columns/#description","text":"get columns as list of series","title":"Description"},{"location":"reference/DataFrame_get_columns/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/DataFrame_get_columns/#usage","text":"DataFrame_get_columns","title":"Usage"},{"location":"reference/DataFrame_get_columns/#value","text":"list of series","title":"Value"},{"location":"reference/DataFrame_get_columns/#examples","text":"df = pl$DataFrame(iris[1,]) df$get_columns()","title":"Examples"},{"location":"reference/DataFrame_groupby/","text":"groupby groupby DataFrame Description DataFrame$groupby(..., maintain_order = FALSE) Usage DataFrame_groupby(..., maintain_order = FALSE) Arguments Argument Description ... any expression maintain_order bool Value GroupBy (subclass of DataFrame)","title":"`groupby`"},{"location":"reference/DataFrame_groupby/#groupby","text":"groupby DataFrame","title":"groupby"},{"location":"reference/DataFrame_groupby/#description","text":"DataFrame$groupby(..., maintain_order = FALSE)","title":"Description"},{"location":"reference/DataFrame_groupby/#usage","text":"DataFrame_groupby(..., maintain_order = FALSE)","title":"Usage"},{"location":"reference/DataFrame_groupby/#arguments","text":"Argument Description ... any expression maintain_order bool","title":"Arguments"},{"location":"reference/DataFrame_groupby/#value","text":"GroupBy (subclass of DataFrame)","title":"Value"},{"location":"reference/DataFrame_height/","text":"height Height of DataFrame Description Get height(nrow) of DataFrame Usage DataFrame_height() Value height as numeric Examples pl$DataFrame(iris)$height","title":"`height`"},{"location":"reference/DataFrame_height/#height","text":"Height of DataFrame","title":"height"},{"location":"reference/DataFrame_height/#description","text":"Get height(nrow) of DataFrame","title":"Description"},{"location":"reference/DataFrame_height/#usage","text":"DataFrame_height()","title":"Usage"},{"location":"reference/DataFrame_height/#value","text":"height as numeric","title":"Value"},{"location":"reference/DataFrame_height/#examples","text":"pl$DataFrame(iris)$height","title":"Examples"},{"location":"reference/DataFrame_join/","text":"join join DataFrame with other DataFrame Description join DataFrame with other DataFrame Usage DataFrame_join( other, left_on = NULL, right_on = NULL, on = NULL, how = c(\"inner\", \"left\", \"outer\", \"semi\", \"anti\", \"cross\"), suffix = \"_right\", allow_parallel = TRUE, force_parallel = FALSE ) Arguments Argument Description other DataFrame left_on names of columns in self LazyFrame, order should match. Type, see on param. right_on names of columns in other LazyFrame, order should match. Type, see on param. on named columns as char vector of named columns, or list of expressions and/or strings. how a string selecting one of the following methods: inner, left, outer, semi, anti, cross suffix name to added right table allow_parallel bool force_parallel bool Value DataFrame Examples print(df1 <- pl$DataFrame(list(key=1:3,payload=c('f','i',NA)))) print(df2 <- pl$DataFrame(list(key=c(3L,4L,5L,NA_integer_)))) df1$join(other = df2,on = 'key')","title":"`join`"},{"location":"reference/DataFrame_join/#join","text":"join DataFrame with other DataFrame","title":"join"},{"location":"reference/DataFrame_join/#description","text":"join DataFrame with other DataFrame","title":"Description"},{"location":"reference/DataFrame_join/#usage","text":"DataFrame_join( other, left_on = NULL, right_on = NULL, on = NULL, how = c(\"inner\", \"left\", \"outer\", \"semi\", \"anti\", \"cross\"), suffix = \"_right\", allow_parallel = TRUE, force_parallel = FALSE )","title":"Usage"},{"location":"reference/DataFrame_join/#arguments","text":"Argument Description other DataFrame left_on names of columns in self LazyFrame, order should match. Type, see on param. right_on names of columns in other LazyFrame, order should match. Type, see on param. on named columns as char vector of named columns, or list of expressions and/or strings. how a string selecting one of the following methods: inner, left, outer, semi, anti, cross suffix name to added right table allow_parallel bool force_parallel bool","title":"Arguments"},{"location":"reference/DataFrame_join/#value","text":"DataFrame","title":"Value"},{"location":"reference/DataFrame_join/#examples","text":"print(df1 <- pl$DataFrame(list(key=1:3,payload=c('f','i',NA)))) print(df2 <- pl$DataFrame(list(key=c(3L,4L,5L,NA_integer_)))) df1$join(other = df2,on = 'key')","title":"Examples"},{"location":"reference/DataFrame_last/","text":"last Last Description Get the last row of the DataFrame. Usage DataFrame_last() Value A new DataFrame object with applied filter. Examples pl$DataFrame(mtcars)$last()","title":"`last`"},{"location":"reference/DataFrame_last/#last","text":"Last","title":"last"},{"location":"reference/DataFrame_last/#description","text":"Get the last row of the DataFrame.","title":"Description"},{"location":"reference/DataFrame_last/#usage","text":"DataFrame_last()","title":"Usage"},{"location":"reference/DataFrame_last/#value","text":"A new DataFrame object with applied filter.","title":"Value"},{"location":"reference/DataFrame_last/#examples","text":"pl$DataFrame(mtcars)$last()","title":"Examples"},{"location":"reference/DataFrame_lazy/","text":"lazy New LazyFrame from DataFrame_object$lazy() Description Start a new lazy query from a DataFrame Format An object of class character of length 1. Usage DataFrame_lazy Value a LazyFrame Examples pl$DataFrame(iris)$lazy() #use of lazy method pl$DataFrame(iris)$lazy()$filter(pl$col(\"Sepal.Length\") >= 7.7)$collect()","title":"`lazy`"},{"location":"reference/DataFrame_lazy/#lazy","text":"New LazyFrame from DataFrame_object$lazy()","title":"lazy"},{"location":"reference/DataFrame_lazy/#description","text":"Start a new lazy query from a DataFrame","title":"Description"},{"location":"reference/DataFrame_lazy/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/DataFrame_lazy/#usage","text":"DataFrame_lazy","title":"Usage"},{"location":"reference/DataFrame_lazy/#value","text":"a LazyFrame","title":"Value"},{"location":"reference/DataFrame_lazy/#examples","text":"pl$DataFrame(iris)$lazy() #use of lazy method pl$DataFrame(iris)$lazy()$filter(pl$col(\"Sepal.Length\") >= 7.7)$collect()","title":"Examples"},{"location":"reference/DataFrame_limit/","text":"limit Limit a DataFrame Description take limit of n rows of query Usage DataFrame_limit(n) Arguments Argument Description n positive numeric or integer number not larger than 2^32 Details any number will converted to u32. Negative raises error Value DataFrame","title":"`limit`"},{"location":"reference/DataFrame_limit/#limit","text":"Limit a DataFrame","title":"limit"},{"location":"reference/DataFrame_limit/#description","text":"take limit of n rows of query","title":"Description"},{"location":"reference/DataFrame_limit/#usage","text":"DataFrame_limit(n)","title":"Usage"},{"location":"reference/DataFrame_limit/#arguments","text":"Argument Description n positive numeric or integer number not larger than 2^32","title":"Arguments"},{"location":"reference/DataFrame_limit/#details","text":"any number will converted to u32. Negative raises error","title":"Details"},{"location":"reference/DataFrame_limit/#value","text":"DataFrame","title":"Value"},{"location":"reference/DataFrame_max/","text":"max Max Description Aggregate the columns in the DataFrame to their maximum value. Usage DataFrame_max() Value A new DataFrame object with applied aggregation. Examples pl$DataFrame(mtcars)$max()","title":"`max`"},{"location":"reference/DataFrame_max/#max","text":"Max","title":"max"},{"location":"reference/DataFrame_max/#description","text":"Aggregate the columns in the DataFrame to their maximum value.","title":"Description"},{"location":"reference/DataFrame_max/#usage","text":"DataFrame_max()","title":"Usage"},{"location":"reference/DataFrame_max/#value","text":"A new DataFrame object with applied aggregation.","title":"Value"},{"location":"reference/DataFrame_max/#examples","text":"pl$DataFrame(mtcars)$max()","title":"Examples"},{"location":"reference/DataFrame_mean/","text":"mean Mean Description Aggregate the columns in the DataFrame to their mean value. Usage DataFrame_mean() Value A new DataFrame object with applied aggregation. Examples pl$DataFrame(mtcars)$mean()","title":"`mean`"},{"location":"reference/DataFrame_mean/#mean","text":"Mean","title":"mean"},{"location":"reference/DataFrame_mean/#description","text":"Aggregate the columns in the DataFrame to their mean value.","title":"Description"},{"location":"reference/DataFrame_mean/#usage","text":"DataFrame_mean()","title":"Usage"},{"location":"reference/DataFrame_mean/#value","text":"A new DataFrame object with applied aggregation.","title":"Value"},{"location":"reference/DataFrame_mean/#examples","text":"pl$DataFrame(mtcars)$mean()","title":"Examples"},{"location":"reference/DataFrame_median/","text":"median Median Description Aggregate the columns in the DataFrame to their median value. Usage DataFrame_median() Value A new DataFrame object with applied aggregation. Examples pl$DataFrame(mtcars)$median()","title":"`median`"},{"location":"reference/DataFrame_median/#median","text":"Median","title":"median"},{"location":"reference/DataFrame_median/#description","text":"Aggregate the columns in the DataFrame to their median value.","title":"Description"},{"location":"reference/DataFrame_median/#usage","text":"DataFrame_median()","title":"Usage"},{"location":"reference/DataFrame_median/#value","text":"A new DataFrame object with applied aggregation.","title":"Value"},{"location":"reference/DataFrame_median/#examples","text":"pl$DataFrame(mtcars)$median()","title":"Examples"},{"location":"reference/DataFrame_min/","text":"min Min Description Aggregate the columns in the DataFrame to their minimum value. Usage DataFrame_min() Value A new DataFrame object with applied aggregation. Examples pl$DataFrame(mtcars)$min()","title":"`min`"},{"location":"reference/DataFrame_min/#min","text":"Min","title":"min"},{"location":"reference/DataFrame_min/#description","text":"Aggregate the columns in the DataFrame to their minimum value.","title":"Description"},{"location":"reference/DataFrame_min/#usage","text":"DataFrame_min()","title":"Usage"},{"location":"reference/DataFrame_min/#value","text":"A new DataFrame object with applied aggregation.","title":"Value"},{"location":"reference/DataFrame_min/#examples","text":"pl$DataFrame(mtcars)$min()","title":"Examples"},{"location":"reference/DataFrame_null_count/","text":"null_count Null count Description Create a new DataFrame that shows the null counts per column. Format function Usage DataFrame_null_count Value DataFrame Examples x = mtcars x[1, 2:3] = NA pl$DataFrame(x)$null_count()","title":"`null_count`"},{"location":"reference/DataFrame_null_count/#null_count","text":"Null count","title":"null_count"},{"location":"reference/DataFrame_null_count/#description","text":"Create a new DataFrame that shows the null counts per column.","title":"Description"},{"location":"reference/DataFrame_null_count/#format","text":"function","title":"Format"},{"location":"reference/DataFrame_null_count/#usage","text":"DataFrame_null_count","title":"Usage"},{"location":"reference/DataFrame_null_count/#value","text":"DataFrame","title":"Value"},{"location":"reference/DataFrame_null_count/#examples","text":"x = mtcars x[1, 2:3] = NA pl$DataFrame(x)$null_count()","title":"Examples"},{"location":"reference/DataFrame_print/","text":"print internal method print DataFrame Description internal method print DataFrame Usage DataFrame_print() Value self Examples pl$DataFrame(iris)","title":"`print`"},{"location":"reference/DataFrame_print/#print","text":"internal method print DataFrame","title":"print"},{"location":"reference/DataFrame_print/#description","text":"internal method print DataFrame","title":"Description"},{"location":"reference/DataFrame_print/#usage","text":"DataFrame_print()","title":"Usage"},{"location":"reference/DataFrame_print/#value","text":"self","title":"Value"},{"location":"reference/DataFrame_print/#examples","text":"pl$DataFrame(iris)","title":"Examples"},{"location":"reference/DataFrame_reverse/","text":"reverse Reverse Description Reverse the DataFrame. Usage DataFrame_reverse() Value LazyFrame Examples pl$DataFrame(mtcars)$reverse()","title":"`reverse`"},{"location":"reference/DataFrame_reverse/#reverse","text":"Reverse","title":"reverse"},{"location":"reference/DataFrame_reverse/#description","text":"Reverse the DataFrame.","title":"Description"},{"location":"reference/DataFrame_reverse/#usage","text":"DataFrame_reverse()","title":"Usage"},{"location":"reference/DataFrame_reverse/#value","text":"LazyFrame","title":"Value"},{"location":"reference/DataFrame_reverse/#examples","text":"pl$DataFrame(mtcars)$reverse()","title":"Examples"},{"location":"reference/DataFrame_select/","text":"select perform select on DataFrame Description related to dplyr mutate() However discards unmentioned columns as data.table .() . Usage DataFrame_select(...) Arguments Argument Description ... expresssions or strings defining columns to select(keep) in context the DataFrame","title":"`select`"},{"location":"reference/DataFrame_select/#select","text":"perform select on DataFrame","title":"select"},{"location":"reference/DataFrame_select/#description","text":"related to dplyr mutate() However discards unmentioned columns as data.table .() .","title":"Description"},{"location":"reference/DataFrame_select/#usage","text":"DataFrame_select(...)","title":"Usage"},{"location":"reference/DataFrame_select/#arguments","text":"Argument Description ... expresssions or strings defining columns to select(keep) in context the DataFrame","title":"Arguments"},{"location":"reference/DataFrame_shape/","text":"shape Shape of DataFrame Description Get shape/dimensions of DataFrame Usage DataFrame_shape() Value two length numeric vector of c(nrows,ncols) Examples df = pl$DataFrame(iris)$shape","title":"`shape`"},{"location":"reference/DataFrame_shape/#shape","text":"Shape of DataFrame","title":"shape"},{"location":"reference/DataFrame_shape/#description","text":"Get shape/dimensions of DataFrame","title":"Description"},{"location":"reference/DataFrame_shape/#usage","text":"DataFrame_shape()","title":"Usage"},{"location":"reference/DataFrame_shape/#value","text":"two length numeric vector of c(nrows,ncols)","title":"Value"},{"location":"reference/DataFrame_shape/#examples","text":"df = pl$DataFrame(iris)$shape","title":"Examples"},{"location":"reference/DataFrame_slice/","text":"slice Slice Description Get a slice of this DataFrame. Usage DataFrame_slice(offset, length = NULL) Arguments Argument Description offset integer length integer or NULL Value LazyFrame Examples pl$DataFrame(mtcars)$slice(2, 4) mtcars[2:6,]","title":"`slice`"},{"location":"reference/DataFrame_slice/#slice","text":"Slice","title":"slice"},{"location":"reference/DataFrame_slice/#description","text":"Get a slice of this DataFrame.","title":"Description"},{"location":"reference/DataFrame_slice/#usage","text":"DataFrame_slice(offset, length = NULL)","title":"Usage"},{"location":"reference/DataFrame_slice/#arguments","text":"Argument Description offset integer length integer or NULL","title":"Arguments"},{"location":"reference/DataFrame_slice/#value","text":"LazyFrame","title":"Value"},{"location":"reference/DataFrame_slice/#examples","text":"pl$DataFrame(mtcars)$slice(2, 4) mtcars[2:6,]","title":"Examples"},{"location":"reference/DataFrame_std/","text":"std Std Description Aggregate the columns of this DataFrame to their standard deviation values. Usage DataFrame_std(ddof = 1) Arguments Argument Description ddof integer Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1. Value A new DataFrame object with applied aggregation. Examples pl$DataFrame(mtcars)$std()","title":"`std`"},{"location":"reference/DataFrame_std/#std","text":"Std","title":"std"},{"location":"reference/DataFrame_std/#description","text":"Aggregate the columns of this DataFrame to their standard deviation values.","title":"Description"},{"location":"reference/DataFrame_std/#usage","text":"DataFrame_std(ddof = 1)","title":"Usage"},{"location":"reference/DataFrame_std/#arguments","text":"Argument Description ddof integer Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1.","title":"Arguments"},{"location":"reference/DataFrame_std/#value","text":"A new DataFrame object with applied aggregation.","title":"Value"},{"location":"reference/DataFrame_std/#examples","text":"pl$DataFrame(mtcars)$std()","title":"Examples"},{"location":"reference/DataFrame_sum/","text":"sum Sum Description Aggregate the columns of this DataFrame to their sum values. Usage DataFrame_sum() Value A new DataFrame object with applied aggregation. Examples pl$DataFrame(mtcars)$sum()","title":"`sum`"},{"location":"reference/DataFrame_sum/#sum","text":"Sum","title":"sum"},{"location":"reference/DataFrame_sum/#description","text":"Aggregate the columns of this DataFrame to their sum values.","title":"Description"},{"location":"reference/DataFrame_sum/#usage","text":"DataFrame_sum()","title":"Usage"},{"location":"reference/DataFrame_sum/#value","text":"A new DataFrame object with applied aggregation.","title":"Value"},{"location":"reference/DataFrame_sum/#examples","text":"pl$DataFrame(mtcars)$sum()","title":"Examples"},{"location":"reference/DataFrame_tail/","text":"tail Tail a DataFrame Description Get the last n rows. Usage DataFrame_tail(n) Arguments Argument Description n positive numeric of integer number not larger than 2^32 Details any number will converted to u32. Negative raises error Value DataFrame","title":"`tail`"},{"location":"reference/DataFrame_tail/#tail","text":"Tail a DataFrame","title":"tail"},{"location":"reference/DataFrame_tail/#description","text":"Get the last n rows.","title":"Description"},{"location":"reference/DataFrame_tail/#usage","text":"DataFrame_tail(n)","title":"Usage"},{"location":"reference/DataFrame_tail/#arguments","text":"Argument Description n positive numeric of integer number not larger than 2^32","title":"Arguments"},{"location":"reference/DataFrame_tail/#details","text":"any number will converted to u32. Negative raises error","title":"Details"},{"location":"reference/DataFrame_tail/#value","text":"DataFrame","title":"Value"},{"location":"reference/DataFrame_to_Struct_unnest/","text":"to_Struct_unnest to_struct and unnest again Description to_struct and unnest again Unnest a DataFrame struct columns. Usage DataFrame_to_struct(name = \"\") DataFrame_unnest(names = NULL) Arguments Argument Description name name of new Series names names of struct columns to unnest, default NULL unnest any struct column Value @to_struct() returns a Series $unnest() returns a DataFrame with all column including any that has been unnested Examples #round-trip conversion from DataFrame with two columns df = pl$DataFrame(a=1:5,b=c(\"one\",\"two\",\"three\",\"four\",\"five\")) s = df$to_struct() s s$to_r() # to r list df_s = s$to_frame() #place series in a new DataFrame df_s$unnest() # back to starting df","title":"`to_Struct_unnest`"},{"location":"reference/DataFrame_to_Struct_unnest/#to_struct_unnest","text":"to_struct and unnest again","title":"to_Struct_unnest"},{"location":"reference/DataFrame_to_Struct_unnest/#description","text":"to_struct and unnest again Unnest a DataFrame struct columns.","title":"Description"},{"location":"reference/DataFrame_to_Struct_unnest/#usage","text":"DataFrame_to_struct(name = \"\") DataFrame_unnest(names = NULL)","title":"Usage"},{"location":"reference/DataFrame_to_Struct_unnest/#arguments","text":"Argument Description name name of new Series names names of struct columns to unnest, default NULL unnest any struct column","title":"Arguments"},{"location":"reference/DataFrame_to_Struct_unnest/#value","text":"@to_struct() returns a Series $unnest() returns a DataFrame with all column including any that has been unnested","title":"Value"},{"location":"reference/DataFrame_to_Struct_unnest/#examples","text":"#round-trip conversion from DataFrame with two columns df = pl$DataFrame(a=1:5,b=c(\"one\",\"two\",\"three\",\"four\",\"five\")) s = df$to_struct() s s$to_r() # to r list df_s = s$to_frame() #place series in a new DataFrame df_s$unnest() # back to starting df","title":"Examples"},{"location":"reference/DataFrame_to_series/","text":"to_series Get Series by idx, if there Description get one column by idx as series from DataFrame. Unlike get_column this method will not fail if no series found at idx but return a NULL, idx is zero idx. Usage DataFrame_to_series(idx = 0) Arguments Argument Description idx numeric default 0, zero-index of what column to return as Series Value Series or NULL Examples pl$DataFrame(a=1:4)$to_series()","title":"`to_series`"},{"location":"reference/DataFrame_to_series/#to_series","text":"Get Series by idx, if there","title":"to_series"},{"location":"reference/DataFrame_to_series/#description","text":"get one column by idx as series from DataFrame. Unlike get_column this method will not fail if no series found at idx but return a NULL, idx is zero idx.","title":"Description"},{"location":"reference/DataFrame_to_series/#usage","text":"DataFrame_to_series(idx = 0)","title":"Usage"},{"location":"reference/DataFrame_to_series/#arguments","text":"Argument Description idx numeric default 0, zero-index of what column to return as Series","title":"Arguments"},{"location":"reference/DataFrame_to_series/#value","text":"Series or NULL","title":"Value"},{"location":"reference/DataFrame_to_series/#examples","text":"pl$DataFrame(a=1:4)$to_series()","title":"Examples"},{"location":"reference/DataFrame_var/","text":"var Var Description Aggregate the columns of this DataFrame to their variance values. Usage DataFrame_var(ddof = 1) Arguments Argument Description ddof integer Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1. Value A new DataFrame object with applied aggregation. Examples pl$DataFrame(mtcars)$var()","title":"`var`"},{"location":"reference/DataFrame_var/#var","text":"Var","title":"var"},{"location":"reference/DataFrame_var/#description","text":"Aggregate the columns of this DataFrame to their variance values.","title":"Description"},{"location":"reference/DataFrame_var/#usage","text":"DataFrame_var(ddof = 1)","title":"Usage"},{"location":"reference/DataFrame_var/#arguments","text":"Argument Description ddof integer Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1.","title":"Arguments"},{"location":"reference/DataFrame_var/#value","text":"A new DataFrame object with applied aggregation.","title":"Value"},{"location":"reference/DataFrame_var/#examples","text":"pl$DataFrame(mtcars)$var()","title":"Examples"},{"location":"reference/DataFrame_width/","text":"width Width of DataFrame Description Get width(ncol) of DataFrame Usage DataFrame_width() Value width as numeric scalar Examples pl$DataFrame(iris)$width","title":"`width`"},{"location":"reference/DataFrame_width/#width","text":"Width of DataFrame","title":"width"},{"location":"reference/DataFrame_width/#description","text":"Get width(ncol) of DataFrame","title":"Description"},{"location":"reference/DataFrame_width/#usage","text":"DataFrame_width()","title":"Usage"},{"location":"reference/DataFrame_width/#value","text":"width as numeric scalar","title":"Value"},{"location":"reference/DataFrame_width/#examples","text":"pl$DataFrame(iris)$width","title":"Examples"},{"location":"reference/DataFrame_with_columns/","text":"with_columns modify/append column(s) Description add or modify columns with expressions Usage DataFrame_with_columns(...) DataFrame_with_column(expr) Arguments Argument Description ... any expressions or string column name, or same wrapped in a list expr a single expression or string Details Like dplyr mutate() as it keeps unmentioned columns unlike $select(). with_column is derived from with_columns but takes only one expression argument Value DataFrame DataFrame Examples pl$DataFrame(iris)$with_columns( pl$col(\"Sepal.Length\")$abs()$alias(\"abs_SL\"), (pl$col(\"Sepal.Length\")+2)$alias(\"add_2_SL\") ) #rename columns by naming expression is concidered experimental pl$set_polars_options(named_exprs = TRUE) #unlock pl$DataFrame(iris)$with_columns( pl$col(\"Sepal.Length\")$abs(), #not named expr will keep name \"Sepal.Length\" SW_add_2 = (pl$col(\"Sepal.Width\")+2) )","title":"`with_columns`"},{"location":"reference/DataFrame_with_columns/#with_columns","text":"modify/append column(s)","title":"with_columns"},{"location":"reference/DataFrame_with_columns/#description","text":"add or modify columns with expressions","title":"Description"},{"location":"reference/DataFrame_with_columns/#usage","text":"DataFrame_with_columns(...) DataFrame_with_column(expr)","title":"Usage"},{"location":"reference/DataFrame_with_columns/#arguments","text":"Argument Description ... any expressions or string column name, or same wrapped in a list expr a single expression or string","title":"Arguments"},{"location":"reference/DataFrame_with_columns/#details","text":"Like dplyr mutate() as it keeps unmentioned columns unlike $select(). with_column is derived from with_columns but takes only one expression argument","title":"Details"},{"location":"reference/DataFrame_with_columns/#value","text":"DataFrame DataFrame","title":"Value"},{"location":"reference/DataFrame_with_columns/#examples","text":"pl$DataFrame(iris)$with_columns( pl$col(\"Sepal.Length\")$abs()$alias(\"abs_SL\"), (pl$col(\"Sepal.Length\")+2)$alias(\"add_2_SL\") ) #rename columns by naming expression is concidered experimental pl$set_polars_options(named_exprs = TRUE) #unlock pl$DataFrame(iris)$with_columns( pl$col(\"Sepal.Length\")$abs(), #not named expr will keep name \"Sepal.Length\" SW_add_2 = (pl$col(\"Sepal.Width\")+2) )","title":"Examples"},{"location":"reference/DataType/","text":"DataType DataTypes polars types Description DataType any polars type (ported so far) Examples print(ls(pl$dtypes)) pl$dtypes$Float64 pl$dtypes$Utf8 pl$List(pl$List(pl$UInt64)) pl$Struct(pl$Field(\"CityNames\", pl$Utf8)) # Some DataType use case, this user function fails because.... pl$Series(1:4)$apply(\\(x) letters[x]) #The function changes type from Integer(Int32)[Integers] to char(Utf8)[Strings] #specifying the output DataType: Utf8 solves the problem pl$Series(1:4)$apply(\\(x) letters[x],datatype = pl$dtypes$Utf8)","title":"`DataType`"},{"location":"reference/DataType/#datatype","text":"DataTypes polars types","title":"DataType"},{"location":"reference/DataType/#description","text":"DataType any polars type (ported so far)","title":"Description"},{"location":"reference/DataType/#examples","text":"print(ls(pl$dtypes)) pl$dtypes$Float64 pl$dtypes$Utf8 pl$List(pl$List(pl$UInt64)) pl$Struct(pl$Field(\"CityNames\", pl$Utf8)) # Some DataType use case, this user function fails because.... pl$Series(1:4)$apply(\\(x) letters[x]) #The function changes type from Integer(Int32)[Integers] to char(Utf8)[Strings] #specifying the output DataType: Utf8 solves the problem pl$Series(1:4)$apply(\\(x) letters[x],datatype = pl$dtypes$Utf8)","title":"Examples"},{"location":"reference/DataType_constructors/","text":"DataType_constructors DataType_constructors (composite DataType's) Description List of all composite DataType constructors Format An object of class list of length 3. Usage DataType_constructors Details This list is mainly used in zzz.R .onLoad to instantiate singletons of all flag-like DataTypes. Non-flag like DataType called composite DataTypes also carries extra information e.g. Datetime a timeunit and a TimeZone, or List which recursively carries another DataType inside. Composite DataTypes use DataType constructors. Any DataType can be found in pl$dtypes Value DataType Examples #constructors are finally available via pl$... or pl$dtypes$... pl$List(pl$List(pl$Int64))","title":"`DataType_constructors`"},{"location":"reference/DataType_constructors/#datatype_constructors","text":"DataType_constructors (composite DataType's)","title":"DataType_constructors"},{"location":"reference/DataType_constructors/#description","text":"List of all composite DataType constructors","title":"Description"},{"location":"reference/DataType_constructors/#format","text":"An object of class list of length 3.","title":"Format"},{"location":"reference/DataType_constructors/#usage","text":"DataType_constructors","title":"Usage"},{"location":"reference/DataType_constructors/#details","text":"This list is mainly used in zzz.R .onLoad to instantiate singletons of all flag-like DataTypes. Non-flag like DataType called composite DataTypes also carries extra information e.g. Datetime a timeunit and a TimeZone, or List which recursively carries another DataType inside. Composite DataTypes use DataType constructors. Any DataType can be found in pl$dtypes","title":"Details"},{"location":"reference/DataType_constructors/#value","text":"DataType","title":"Value"},{"location":"reference/DataType_constructors/#examples","text":"#constructors are finally available via pl$... or pl$dtypes$... pl$List(pl$List(pl$Int64))","title":"Examples"},{"location":"reference/DataType_new/","text":"DataType_new DataType_new (simple DataType's) Description Create a new flag like DataType Usage DataType_new(str) Arguments Argument Description str name of DataType to create Details This function is mainly used in zzz.R .onLoad to instantiate singletons of all flag-like DataType. Non-flag like DataType called composite DataTypes also carries extra information e.g. Datetime a timeunit and a TimeZone, or List which recursively carries another DataType inside. Composite DataTypes use DataType constructors. Any DataType can be found in pl$dtypes Value DataType Examples polars:::DataType_new(\"Int64\")","title":"`DataType_new`"},{"location":"reference/DataType_new/#datatype_new","text":"DataType_new (simple DataType's)","title":"DataType_new"},{"location":"reference/DataType_new/#description","text":"Create a new flag like DataType","title":"Description"},{"location":"reference/DataType_new/#usage","text":"DataType_new(str)","title":"Usage"},{"location":"reference/DataType_new/#arguments","text":"Argument Description str name of DataType to create","title":"Arguments"},{"location":"reference/DataType_new/#details","text":"This function is mainly used in zzz.R .onLoad to instantiate singletons of all flag-like DataType. Non-flag like DataType called composite DataTypes also carries extra information e.g. Datetime a timeunit and a TimeZone, or List which recursively carries another DataType inside. Composite DataTypes use DataType constructors. Any DataType can be found in pl$dtypes","title":"Details"},{"location":"reference/DataType_new/#value","text":"DataType","title":"Value"},{"location":"reference/DataType_new/#examples","text":"polars:::DataType_new(\"Int64\")","title":"Examples"},{"location":"reference/Err/","text":"Err Wrap in Err Description Wrap in Err Usage Err(x) Arguments Argument Description x any R object Value same R object wrapped in a Err-result","title":"`Err`"},{"location":"reference/Err/#err","text":"Wrap in Err","title":"Err"},{"location":"reference/Err/#description","text":"Wrap in Err","title":"Description"},{"location":"reference/Err/#usage","text":"Err(x)","title":"Usage"},{"location":"reference/Err/#arguments","text":"Argument Description x any R object","title":"Arguments"},{"location":"reference/Err/#value","text":"same R object wrapped in a Err-result","title":"Value"},{"location":"reference/Expr-cash-print-open-paren-close-paren/","text":"Expr$print() internal method print Expr Description internal method print Expr Usage Expr_print() Examples pl$DataFrame(iris)","title":"`Expr$print()`"},{"location":"reference/Expr-cash-print-open-paren-close-paren/#exprprint","text":"internal method print Expr","title":"Expr$print()"},{"location":"reference/Expr-cash-print-open-paren-close-paren/#description","text":"internal method print Expr","title":"Description"},{"location":"reference/Expr-cash-print-open-paren-close-paren/#usage","text":"Expr_print()","title":"Usage"},{"location":"reference/Expr-cash-print-open-paren-close-paren/#examples","text":"pl$DataFrame(iris)","title":"Examples"},{"location":"reference/Expr/","text":"Expr Polars Expr Description Polars pl$Expr Usage Expr_lit(x) Expr_suffix(suffix) Expr_prefix(prefix) Expr_reverse() Arguments Argument Description x an R Scalar, or R vector/list (via Series) into Expr suffix string suffix to be added to a name prefix string suffix to be added to a name Details pl$lit(NULL) translates into a typeless polars Null Value Expr, literal of that value Expr Expr Expr Examples 2+2 #Expr has the following methods/constructors ls(polars:::Expr) pl$col(\"this_column\")$sum()$over(\"that_column\") #scalars to literal, explit `pl$lit(42)` implicit `+ 2` pl$col(\"some_column\") / pl$lit(42) + 2 #vector to literal explicitly via Series and back again #R vector to expression and back again pl$select(pl$lit(pl$Series(1:4)))$to_list()[[1L]] #r vecot to literal and back r vector pl$lit(1:4)$to_r() #r vector to literal to dataframe pl$select(pl$lit(1:4)) #r vector to literal to Series pl$lit(1:4)$lit_to_s() #vectors to literal implicitly (pl$lit(2) + 1:4 ) / 4:1 pl$col(\"some\")$suffix(\"_column\") pl$col(\"some\")$suffix(\"_column\") pl$DataFrame(list(a=1:5))$select(pl$col(\"a\")$reverse())","title":"`Expr`"},{"location":"reference/Expr/#expr","text":"Polars Expr","title":"Expr"},{"location":"reference/Expr/#description","text":"Polars pl$Expr","title":"Description"},{"location":"reference/Expr/#usage","text":"Expr_lit(x) Expr_suffix(suffix) Expr_prefix(prefix) Expr_reverse()","title":"Usage"},{"location":"reference/Expr/#arguments","text":"Argument Description x an R Scalar, or R vector/list (via Series) into Expr suffix string suffix to be added to a name prefix string suffix to be added to a name","title":"Arguments"},{"location":"reference/Expr/#details","text":"pl$lit(NULL) translates into a typeless polars Null","title":"Details"},{"location":"reference/Expr/#value","text":"Expr, literal of that value Expr Expr Expr","title":"Value"},{"location":"reference/Expr/#examples","text":"2+2 #Expr has the following methods/constructors ls(polars:::Expr) pl$col(\"this_column\")$sum()$over(\"that_column\") #scalars to literal, explit `pl$lit(42)` implicit `+ 2` pl$col(\"some_column\") / pl$lit(42) + 2 #vector to literal explicitly via Series and back again #R vector to expression and back again pl$select(pl$lit(pl$Series(1:4)))$to_list()[[1L]] #r vecot to literal and back r vector pl$lit(1:4)$to_r() #r vector to literal to dataframe pl$select(pl$lit(1:4)) #r vector to literal to Series pl$lit(1:4)$lit_to_s() #vectors to literal implicitly (pl$lit(2) + 1:4 ) / 4:1 pl$col(\"some\")$suffix(\"_column\") pl$col(\"some\")$suffix(\"_column\") pl$DataFrame(list(a=1:5))$select(pl$col(\"a\")$reverse())","title":"Examples"},{"location":"reference/ExprBin_contains/","text":"ExprBin_contains contains Description R Check if binaries in Series contain a binary substring. Arguments Argument Description lit The binary substring to look for Value Expr returning a Boolean","title":"`ExprBin_contains`"},{"location":"reference/ExprBin_contains/#exprbin_contains","text":"contains","title":"ExprBin_contains"},{"location":"reference/ExprBin_contains/#description","text":"R Check if binaries in Series contain a binary substring.","title":"Description"},{"location":"reference/ExprBin_contains/#arguments","text":"Argument Description lit The binary substring to look for","title":"Arguments"},{"location":"reference/ExprBin_contains/#value","text":"Expr returning a Boolean","title":"Value"},{"location":"reference/ExprBin_decode/","text":"ExprBin_decode decode Description Decode a value using the provided encoding. Arguments Argument Description encoding binary choice either 'hex' or 'base64' strict Raise an error if the underlying value cannot be decoded, otherwise mask out with a null value. Value binary array with values decoded using provided encoding","title":"`ExprBin_decode`"},{"location":"reference/ExprBin_decode/#exprbin_decode","text":"decode","title":"ExprBin_decode"},{"location":"reference/ExprBin_decode/#description","text":"Decode a value using the provided encoding.","title":"Description"},{"location":"reference/ExprBin_decode/#arguments","text":"Argument Description encoding binary choice either 'hex' or 'base64' strict Raise an error if the underlying value cannot be decoded, otherwise mask out with a null value.","title":"Arguments"},{"location":"reference/ExprBin_decode/#value","text":"binary array with values decoded using provided encoding","title":"Value"},{"location":"reference/ExprBin_encode/","text":"ExprBin_encode encode Description Encode a value using the provided encoding. Arguments Argument Description encoding binary choice either 'hex' or 'base64' Value binary array with values encoded using provided encoding","title":"`ExprBin_encode`"},{"location":"reference/ExprBin_encode/#exprbin_encode","text":"encode","title":"ExprBin_encode"},{"location":"reference/ExprBin_encode/#description","text":"Encode a value using the provided encoding.","title":"Description"},{"location":"reference/ExprBin_encode/#arguments","text":"Argument Description encoding binary choice either 'hex' or 'base64'","title":"Arguments"},{"location":"reference/ExprBin_encode/#value","text":"binary array with values encoded using provided encoding","title":"Value"},{"location":"reference/ExprBin_ends_with/","text":"ExprBin_ends_with ends_with Description Check if string values end with a binary substring. Value Expr returning a Boolean","title":"`ExprBin_ends_with`"},{"location":"reference/ExprBin_ends_with/#exprbin_ends_with","text":"ends_with","title":"ExprBin_ends_with"},{"location":"reference/ExprBin_ends_with/#description","text":"Check if string values end with a binary substring.","title":"Description"},{"location":"reference/ExprBin_ends_with/#value","text":"Expr returning a Boolean","title":"Value"},{"location":"reference/ExprBin_starts_with/","text":"ExprBin_starts_with starts_with Description Check if values starts with a binary substring. Arguments Argument Description sub Prefix substring.","title":"`ExprBin_starts_with`"},{"location":"reference/ExprBin_starts_with/#exprbin_starts_with","text":"starts_with","title":"ExprBin_starts_with"},{"location":"reference/ExprBin_starts_with/#description","text":"Check if values starts with a binary substring.","title":"Description"},{"location":"reference/ExprBin_starts_with/#arguments","text":"Argument Description sub Prefix substring.","title":"Arguments"},{"location":"reference/ExprCat_set_ordering/","text":"ExprCat_set_ordering Set Ordering Description Determine how this categorical series should be sorted. Arguments Argument Description ordering string either 'physical' or 'lexical' 'physical' -> Use the physical representation of the categories to determine the order (default). 'lexical' -> Use the string values to determine the ordering. Value bool: TRUE if equal Examples df = pl$DataFrame( cats = c(\"z\", \"z\", \"k\", \"a\", \"b\"), vals = c(3, 1, 2, 2, 3) )$with_columns( pl$col(\"cats\")$cast(pl$Categorical)$cat$set_ordering(\"physical\") ) df$select(pl$all()$sort())","title":"`ExprCat_set_ordering`"},{"location":"reference/ExprCat_set_ordering/#exprcat_set_ordering","text":"Set Ordering","title":"ExprCat_set_ordering"},{"location":"reference/ExprCat_set_ordering/#description","text":"Determine how this categorical series should be sorted.","title":"Description"},{"location":"reference/ExprCat_set_ordering/#arguments","text":"Argument Description ordering string either 'physical' or 'lexical' 'physical' -> Use the physical representation of the categories to determine the order (default). 'lexical' -> Use the string values to determine the ordering.","title":"Arguments"},{"location":"reference/ExprCat_set_ordering/#value","text":"bool: TRUE if equal","title":"Value"},{"location":"reference/ExprCat_set_ordering/#examples","text":"df = pl$DataFrame( cats = c(\"z\", \"z\", \"k\", \"a\", \"b\"), vals = c(3, 1, 2, 2, 3) )$with_columns( pl$col(\"cats\")$cast(pl$Categorical)$cat$set_ordering(\"physical\") ) df$select(pl$all()$sort())","title":"Examples"},{"location":"reference/ExprDT_cast_time_unit/","text":"ExprDT_cast_time_unit cast_time_unit Description Cast the underlying data to another time unit. This may lose precision. The corresponding global timepoint will stay unchanged +/- precision. Format function Arguments Argument Description tu string option either 'ns', 'us', or 'ms' Value Expr of i64 Examples df = pl$DataFrame( date = pl$date_range(low = as.Date(\"2001-1-1\"), high = as.Date(\"2001-1-3\"), interval = \"1d\") ) df$select( pl$col(\"date\"), pl$col(\"date\")$dt$cast_time_unit()$alias(\"cast_time_unit_ns\"), pl$col(\"date\")$dt$cast_time_unit(tu=\"ms\")$alias(\"cast_time_unit_ms\") )","title":"`ExprDT_cast_time_unit`"},{"location":"reference/ExprDT_cast_time_unit/#exprdt_cast_time_unit","text":"cast_time_unit","title":"ExprDT_cast_time_unit"},{"location":"reference/ExprDT_cast_time_unit/#description","text":"Cast the underlying data to another time unit. This may lose precision. The corresponding global timepoint will stay unchanged +/- precision.","title":"Description"},{"location":"reference/ExprDT_cast_time_unit/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_cast_time_unit/#arguments","text":"Argument Description tu string option either 'ns', 'us', or 'ms'","title":"Arguments"},{"location":"reference/ExprDT_cast_time_unit/#value","text":"Expr of i64","title":"Value"},{"location":"reference/ExprDT_cast_time_unit/#examples","text":"df = pl$DataFrame( date = pl$date_range(low = as.Date(\"2001-1-1\"), high = as.Date(\"2001-1-3\"), interval = \"1d\") ) df$select( pl$col(\"date\"), pl$col(\"date\")$dt$cast_time_unit()$alias(\"cast_time_unit_ns\"), pl$col(\"date\")$dt$cast_time_unit(tu=\"ms\")$alias(\"cast_time_unit_ms\") )","title":"Examples"},{"location":"reference/ExprDT_combine/","text":"ExprDT_combine Combine Data and Time Description Create a naive Datetime from an existing Date/Datetime expression and a Time. Each date/datetime in the first half of the interval is mapped to the start of its bucket. Each date/datetime in the second half of the interval is mapped to the end of its bucket. Format function Arguments Argument Description tm Expr or numeric or PTime, the number of epoch since or before(if negative) the Date or tm is an Expr e.g. a column of DataType 'Time' or something into an Expr. tu time unit of epochs, default is \"us\", if tm is a PTime, then tz passed via PTime. Details The tu allows the following time time units the following string language: 1ns # 1 nanosecond 1us # 1 microsecond 1ms # 1 millisecond Value Date/Datetime expr Examples #Using pl$PTime pl$lit(as.Date(\"2021-01-01\"))$dt$combine(pl$PTime(\"02:34:12\"))$lit_to_s() pl$lit(as.Date(\"2021-01-01\"))$dt$combine(pl$PTime(3600 * 1.5, tu=\"s\"))$lit_to_s() pl$lit(as.Date(\"2021-01-01\"))$dt$combine(pl$PTime(3600 * 1.5E6 + 123, tu=\"us\"))$lit_to_s() #pass double and set tu manually pl$lit(as.Date(\"2021-01-01\"))$dt$combine(3600 * 1.5E6 + 123, tu=\"us\")$lit_to_s() #if needed to convert back to R it is more intuitive to set a specific time zone expr = pl$lit(as.Date(\"2021-01-01\"))$dt$combine(3600 * 1.5E6 + 123, tu=\"us\") expr$cast(pl$Datetime(tu = \"us\", tz = \"GMT\"))$to_r()","title":"`ExprDT_combine`"},{"location":"reference/ExprDT_combine/#exprdt_combine","text":"Combine Data and Time","title":"ExprDT_combine"},{"location":"reference/ExprDT_combine/#description","text":"Create a naive Datetime from an existing Date/Datetime expression and a Time. Each date/datetime in the first half of the interval is mapped to the start of its bucket. Each date/datetime in the second half of the interval is mapped to the end of its bucket.","title":"Description"},{"location":"reference/ExprDT_combine/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_combine/#arguments","text":"Argument Description tm Expr or numeric or PTime, the number of epoch since or before(if negative) the Date or tm is an Expr e.g. a column of DataType 'Time' or something into an Expr. tu time unit of epochs, default is \"us\", if tm is a PTime, then tz passed via PTime.","title":"Arguments"},{"location":"reference/ExprDT_combine/#details","text":"The tu allows the following time time units the following string language: 1ns # 1 nanosecond 1us # 1 microsecond 1ms # 1 millisecond","title":"Details"},{"location":"reference/ExprDT_combine/#value","text":"Date/Datetime expr","title":"Value"},{"location":"reference/ExprDT_combine/#examples","text":"#Using pl$PTime pl$lit(as.Date(\"2021-01-01\"))$dt$combine(pl$PTime(\"02:34:12\"))$lit_to_s() pl$lit(as.Date(\"2021-01-01\"))$dt$combine(pl$PTime(3600 * 1.5, tu=\"s\"))$lit_to_s() pl$lit(as.Date(\"2021-01-01\"))$dt$combine(pl$PTime(3600 * 1.5E6 + 123, tu=\"us\"))$lit_to_s() #pass double and set tu manually pl$lit(as.Date(\"2021-01-01\"))$dt$combine(3600 * 1.5E6 + 123, tu=\"us\")$lit_to_s() #if needed to convert back to R it is more intuitive to set a specific time zone expr = pl$lit(as.Date(\"2021-01-01\"))$dt$combine(3600 * 1.5E6 + 123, tu=\"us\") expr$cast(pl$Datetime(tu = \"us\", tz = \"GMT\"))$to_r()","title":"Examples"},{"location":"reference/ExprDT_convert_time_zone/","text":"ExprDT_convert_time_zone With Time Zone Description Set time zone for a Series of type Datetime. Use to change time zone annotation, but keep the corresponding global timepoint. Format function Arguments Argument Description tz String time zone from base::OlsonNames() Details corresponds to in R manually modifying the tzone attribute of POSIXt objects Value Expr of i64 Examples df = pl$DataFrame( date = pl$date_range(low = as.Date(\"2001-3-1\"), high = as.Date(\"2001-5-1\"), interval = \"1mo\") ) df$select( pl$col(\"date\"), pl$col(\"date\") $dt$replace_time_zone(\"Europe/Amsterdam\") $dt$convert_time_zone(\"Europe/London\") $alias(\"London_with\"), pl$col(\"date\") $dt$tz_localize(\"Europe/London\") $alias(\"London_localize\") )","title":"`ExprDT_convert_time_zone`"},{"location":"reference/ExprDT_convert_time_zone/#exprdt_convert_time_zone","text":"With Time Zone","title":"ExprDT_convert_time_zone"},{"location":"reference/ExprDT_convert_time_zone/#description","text":"Set time zone for a Series of type Datetime. Use to change time zone annotation, but keep the corresponding global timepoint.","title":"Description"},{"location":"reference/ExprDT_convert_time_zone/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_convert_time_zone/#arguments","text":"Argument Description tz String time zone from base::OlsonNames()","title":"Arguments"},{"location":"reference/ExprDT_convert_time_zone/#details","text":"corresponds to in R manually modifying the tzone attribute of POSIXt objects","title":"Details"},{"location":"reference/ExprDT_convert_time_zone/#value","text":"Expr of i64","title":"Value"},{"location":"reference/ExprDT_convert_time_zone/#examples","text":"df = pl$DataFrame( date = pl$date_range(low = as.Date(\"2001-3-1\"), high = as.Date(\"2001-5-1\"), interval = \"1mo\") ) df$select( pl$col(\"date\"), pl$col(\"date\") $dt$replace_time_zone(\"Europe/Amsterdam\") $dt$convert_time_zone(\"Europe/London\") $alias(\"London_with\"), pl$col(\"date\") $dt$tz_localize(\"Europe/London\") $alias(\"London_localize\") )","title":"Examples"},{"location":"reference/ExprDT_day/","text":"ExprDT_day Day Description Extract day from underlying Date representation. Applies to Date and Datetime columns. Returns the day of month starting from 1. The return value ranges from 1 to 31. (The last day of month differs by months.) Format function Value Expr of day as UInt32 Examples df = pl$DataFrame( date = pl$date_range( as.Date(\"2020-12-25\"), as.Date(\"2021-1-05\"), interval = \"1d\", time_zone = \"GMT\" ) ) df$with_columns( pl$col(\"date\")$dt$day()$alias(\"day\") )","title":"`ExprDT_day`"},{"location":"reference/ExprDT_day/#exprdt_day","text":"Day","title":"ExprDT_day"},{"location":"reference/ExprDT_day/#description","text":"Extract day from underlying Date representation. Applies to Date and Datetime columns. Returns the day of month starting from 1. The return value ranges from 1 to 31. (The last day of month differs by months.)","title":"Description"},{"location":"reference/ExprDT_day/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_day/#value","text":"Expr of day as UInt32","title":"Value"},{"location":"reference/ExprDT_day/#examples","text":"df = pl$DataFrame( date = pl$date_range( as.Date(\"2020-12-25\"), as.Date(\"2021-1-05\"), interval = \"1d\", time_zone = \"GMT\" ) ) df$with_columns( pl$col(\"date\")$dt$day()$alias(\"day\") )","title":"Examples"},{"location":"reference/ExprDT_days/","text":"ExprDT_days Days Description Extract the days from a Duration type. Format function Value Expr of i64 Examples df = pl$DataFrame( date = pl$date_range(low = as.Date(\"2020-3-1\"), high = as.Date(\"2020-5-1\"), interval = \"1mo\") ) df$select( pl$col(\"date\"), pl$col(\"date\")$diff()$dt$days()$alias(\"days_diff\") )","title":"`ExprDT_days`"},{"location":"reference/ExprDT_days/#exprdt_days","text":"Days","title":"ExprDT_days"},{"location":"reference/ExprDT_days/#description","text":"Extract the days from a Duration type.","title":"Description"},{"location":"reference/ExprDT_days/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_days/#value","text":"Expr of i64","title":"Value"},{"location":"reference/ExprDT_days/#examples","text":"df = pl$DataFrame( date = pl$date_range(low = as.Date(\"2020-3-1\"), high = as.Date(\"2020-5-1\"), interval = \"1mo\") ) df$select( pl$col(\"date\"), pl$col(\"date\")$diff()$dt$days()$alias(\"days_diff\") )","title":"Examples"},{"location":"reference/ExprDT_epoch/","text":"ExprDT_epoch Epoch Description Get the time passed since the Unix EPOCH in the give time unit. Format function Arguments Argument Description tu string option either 'ns', 'us', 'ms', 's' or 'd' Details ns and perhaps us will exceed integerish limit if returning to R as flaot64/double. Value Expr of epoch as UInt32 Examples pl$date_range(as.Date(\"2022-1-1\"),lazy = TRUE)$dt$epoch(\"ns\")$lit_to_s() pl$date_range(as.Date(\"2022-1-1\"),lazy = TRUE)$dt$epoch(\"ms\")$lit_to_s() pl$date_range(as.Date(\"2022-1-1\"),lazy = TRUE)$dt$epoch(\"s\")$lit_to_s() pl$date_range(as.Date(\"2022-1-1\"),lazy = TRUE)$dt$epoch(\"d\")$lit_to_s()","title":"`ExprDT_epoch`"},{"location":"reference/ExprDT_epoch/#exprdt_epoch","text":"Epoch","title":"ExprDT_epoch"},{"location":"reference/ExprDT_epoch/#description","text":"Get the time passed since the Unix EPOCH in the give time unit.","title":"Description"},{"location":"reference/ExprDT_epoch/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_epoch/#arguments","text":"Argument Description tu string option either 'ns', 'us', 'ms', 's' or 'd'","title":"Arguments"},{"location":"reference/ExprDT_epoch/#details","text":"ns and perhaps us will exceed integerish limit if returning to R as flaot64/double.","title":"Details"},{"location":"reference/ExprDT_epoch/#value","text":"Expr of epoch as UInt32","title":"Value"},{"location":"reference/ExprDT_epoch/#examples","text":"pl$date_range(as.Date(\"2022-1-1\"),lazy = TRUE)$dt$epoch(\"ns\")$lit_to_s() pl$date_range(as.Date(\"2022-1-1\"),lazy = TRUE)$dt$epoch(\"ms\")$lit_to_s() pl$date_range(as.Date(\"2022-1-1\"),lazy = TRUE)$dt$epoch(\"s\")$lit_to_s() pl$date_range(as.Date(\"2022-1-1\"),lazy = TRUE)$dt$epoch(\"d\")$lit_to_s()","title":"Examples"},{"location":"reference/ExprDT_hour/","text":"ExprDT_hour Hour Description Extract hour from underlying Datetime representation. Applies to Datetime columns. Returns the hour number from 0 to 23. Format function Value Expr of hour as UInt32 Examples df = pl$DataFrame( date = pl$date_range( as.Date(\"2020-12-25\"), as.Date(\"2021-1-05\"), interval = \"1d\", time_zone = \"GMT\" ) ) df$with_columns( pl$col(\"date\")$dt$hour()$alias(\"hour\") )","title":"`ExprDT_hour`"},{"location":"reference/ExprDT_hour/#exprdt_hour","text":"Hour","title":"ExprDT_hour"},{"location":"reference/ExprDT_hour/#description","text":"Extract hour from underlying Datetime representation. Applies to Datetime columns. Returns the hour number from 0 to 23.","title":"Description"},{"location":"reference/ExprDT_hour/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_hour/#value","text":"Expr of hour as UInt32","title":"Value"},{"location":"reference/ExprDT_hour/#examples","text":"df = pl$DataFrame( date = pl$date_range( as.Date(\"2020-12-25\"), as.Date(\"2021-1-05\"), interval = \"1d\", time_zone = \"GMT\" ) ) df$with_columns( pl$col(\"date\")$dt$hour()$alias(\"hour\") )","title":"Examples"},{"location":"reference/ExprDT_hours/","text":"ExprDT_hours Hours Description Extract the hours from a Duration type. Format function Value Expr of i64 Examples df = pl$DataFrame( date = pl$date_range(low = as.Date(\"2020-1-1\"), high = as.Date(\"2020-1-4\"), interval = \"1d\") ) df$select( pl$col(\"date\"), pl$col(\"date\")$diff()$dt$hours()$alias(\"hours_diff\") )","title":"`ExprDT_hours`"},{"location":"reference/ExprDT_hours/#exprdt_hours","text":"Hours","title":"ExprDT_hours"},{"location":"reference/ExprDT_hours/#description","text":"Extract the hours from a Duration type.","title":"Description"},{"location":"reference/ExprDT_hours/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_hours/#value","text":"Expr of i64","title":"Value"},{"location":"reference/ExprDT_hours/#examples","text":"df = pl$DataFrame( date = pl$date_range(low = as.Date(\"2020-1-1\"), high = as.Date(\"2020-1-4\"), interval = \"1d\") ) df$select( pl$col(\"date\"), pl$col(\"date\")$diff()$dt$hours()$alias(\"hours_diff\") )","title":"Examples"},{"location":"reference/ExprDT_iso_year/","text":"ExprDT_iso_year Iso-Year Description Extract ISO year from underlying Date representation. Applies to Date and Datetime columns. Returns the year number in the ISO standard. This may not correspond with the calendar year. Format function Value Expr of iso_year as Int32 Examples df = pl$DataFrame( date = pl$date_range( as.Date(\"2020-12-25\"), as.Date(\"2021-1-05\"), interval = \"1d\", time_zone = \"GMT\" ) ) df$with_columns( pl$col(\"date\")$dt$year()$alias(\"year\"), pl$col(\"date\")$dt$iso_year()$alias(\"iso_year\") )","title":"`ExprDT_iso_year`"},{"location":"reference/ExprDT_iso_year/#exprdt_iso_year","text":"Iso-Year","title":"ExprDT_iso_year"},{"location":"reference/ExprDT_iso_year/#description","text":"Extract ISO year from underlying Date representation. Applies to Date and Datetime columns. Returns the year number in the ISO standard. This may not correspond with the calendar year.","title":"Description"},{"location":"reference/ExprDT_iso_year/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_iso_year/#value","text":"Expr of iso_year as Int32","title":"Value"},{"location":"reference/ExprDT_iso_year/#examples","text":"df = pl$DataFrame( date = pl$date_range( as.Date(\"2020-12-25\"), as.Date(\"2021-1-05\"), interval = \"1d\", time_zone = \"GMT\" ) ) df$with_columns( pl$col(\"date\")$dt$year()$alias(\"year\"), pl$col(\"date\")$dt$iso_year()$alias(\"iso_year\") )","title":"Examples"},{"location":"reference/ExprDT_microsecond/","text":"ExprDT_microsecond Microsecond Description Extract microseconds from underlying Datetime representation. Applies to Datetime columns. Format function Value Expr of microsecond as Int64 Examples pl$DataFrame(date = pl$date_range( as.numeric(as.POSIXct(\"2001-1-1\"))*1E6+456789, #manually convert to us as.numeric(as.POSIXct(\"2001-1-1 00:00:6\"))*1E6, interval = \"2s654321us\", time_unit = \"us\" #instruct polars input is us, and store as us ))$with_columns( pl$col(\"date\")$cast(pl$Int64)$alias(\"datetime int64\"), pl$col(\"date\")$dt$microsecond()$alias(\"microsecond\") )","title":"`ExprDT_microsecond`"},{"location":"reference/ExprDT_microsecond/#exprdt_microsecond","text":"Microsecond","title":"ExprDT_microsecond"},{"location":"reference/ExprDT_microsecond/#description","text":"Extract microseconds from underlying Datetime representation. Applies to Datetime columns.","title":"Description"},{"location":"reference/ExprDT_microsecond/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_microsecond/#value","text":"Expr of microsecond as Int64","title":"Value"},{"location":"reference/ExprDT_microsecond/#examples","text":"pl$DataFrame(date = pl$date_range( as.numeric(as.POSIXct(\"2001-1-1\"))*1E6+456789, #manually convert to us as.numeric(as.POSIXct(\"2001-1-1 00:00:6\"))*1E6, interval = \"2s654321us\", time_unit = \"us\" #instruct polars input is us, and store as us ))$with_columns( pl$col(\"date\")$cast(pl$Int64)$alias(\"datetime int64\"), pl$col(\"date\")$dt$microsecond()$alias(\"microsecond\") )","title":"Examples"},{"location":"reference/ExprDT_microseconds/","text":"ExprDT_microseconds microseconds Description Extract the microseconds from a Duration type. Format function Value Expr of i64 Examples df = pl$DataFrame(date = pl$date_range( low = as.POSIXct(\"2020-1-1\", tz = \"GMT\"), high = as.POSIXct(\"2020-1-1 00:00:01\", tz = \"GMT\"), interval = \"1ms\" )) df$select( pl$col(\"date\"), pl$col(\"date\")$diff()$dt$microseconds()$alias(\"seconds_diff\") )","title":"`ExprDT_microseconds`"},{"location":"reference/ExprDT_microseconds/#exprdt_microseconds","text":"microseconds","title":"ExprDT_microseconds"},{"location":"reference/ExprDT_microseconds/#description","text":"Extract the microseconds from a Duration type.","title":"Description"},{"location":"reference/ExprDT_microseconds/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_microseconds/#value","text":"Expr of i64","title":"Value"},{"location":"reference/ExprDT_microseconds/#examples","text":"df = pl$DataFrame(date = pl$date_range( low = as.POSIXct(\"2020-1-1\", tz = \"GMT\"), high = as.POSIXct(\"2020-1-1 00:00:01\", tz = \"GMT\"), interval = \"1ms\" )) df$select( pl$col(\"date\"), pl$col(\"date\")$diff()$dt$microseconds()$alias(\"seconds_diff\") )","title":"Examples"},{"location":"reference/ExprDT_millisecond/","text":"ExprDT_millisecond Millisecond Description Extract milliseconds from underlying Datetime representation. Applies to Datetime columns. Format function Value Expr of millisecond as Int64 Examples pl$DataFrame(date = pl$date_range( as.numeric(as.POSIXct(\"2001-1-1\"))*1E6+456789, #manually convert to us as.numeric(as.POSIXct(\"2001-1-1 00:00:6\"))*1E6, interval = \"2s654321us\", time_unit = \"us\" #instruct polars input is us, and store as us ))$with_columns( pl$col(\"date\")$cast(pl$Int64)$alias(\"datetime int64\"), pl$col(\"date\")$dt$millisecond()$alias(\"millisecond\") )","title":"`ExprDT_millisecond`"},{"location":"reference/ExprDT_millisecond/#exprdt_millisecond","text":"Millisecond","title":"ExprDT_millisecond"},{"location":"reference/ExprDT_millisecond/#description","text":"Extract milliseconds from underlying Datetime representation. Applies to Datetime columns.","title":"Description"},{"location":"reference/ExprDT_millisecond/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_millisecond/#value","text":"Expr of millisecond as Int64","title":"Value"},{"location":"reference/ExprDT_millisecond/#examples","text":"pl$DataFrame(date = pl$date_range( as.numeric(as.POSIXct(\"2001-1-1\"))*1E6+456789, #manually convert to us as.numeric(as.POSIXct(\"2001-1-1 00:00:6\"))*1E6, interval = \"2s654321us\", time_unit = \"us\" #instruct polars input is us, and store as us ))$with_columns( pl$col(\"date\")$cast(pl$Int64)$alias(\"datetime int64\"), pl$col(\"date\")$dt$millisecond()$alias(\"millisecond\") )","title":"Examples"},{"location":"reference/ExprDT_milliseconds/","text":"ExprDT_milliseconds milliseconds Description Extract the milliseconds from a Duration type. Format function Value Expr of i64 Examples df = pl$DataFrame(date = pl$date_range( low = as.POSIXct(\"2020-1-1\", tz = \"GMT\"), high = as.POSIXct(\"2020-1-1 00:00:01\", tz = \"GMT\"), interval = \"1ms\" )) df$select( pl$col(\"date\"), pl$col(\"date\")$diff()$dt$milliseconds()$alias(\"seconds_diff\") )","title":"`ExprDT_milliseconds`"},{"location":"reference/ExprDT_milliseconds/#exprdt_milliseconds","text":"milliseconds","title":"ExprDT_milliseconds"},{"location":"reference/ExprDT_milliseconds/#description","text":"Extract the milliseconds from a Duration type.","title":"Description"},{"location":"reference/ExprDT_milliseconds/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_milliseconds/#value","text":"Expr of i64","title":"Value"},{"location":"reference/ExprDT_milliseconds/#examples","text":"df = pl$DataFrame(date = pl$date_range( low = as.POSIXct(\"2020-1-1\", tz = \"GMT\"), high = as.POSIXct(\"2020-1-1 00:00:01\", tz = \"GMT\"), interval = \"1ms\" )) df$select( pl$col(\"date\"), pl$col(\"date\")$diff()$dt$milliseconds()$alias(\"seconds_diff\") )","title":"Examples"},{"location":"reference/ExprDT_minute/","text":"ExprDT_minute Minute Description Extract minutes from underlying Datetime representation. Applies to Datetime columns. Returns the minute number from 0 to 59. Format function Value Expr of minute as UInt32 Examples df = pl$DataFrame( date = pl$date_range( as.Date(\"2020-12-25\"), as.Date(\"2021-1-05\"), interval = \"1d\", time_zone = \"GMT\" ) ) df$with_columns( pl$col(\"date\")$dt$minute()$alias(\"minute\") )","title":"`ExprDT_minute`"},{"location":"reference/ExprDT_minute/#exprdt_minute","text":"Minute","title":"ExprDT_minute"},{"location":"reference/ExprDT_minute/#description","text":"Extract minutes from underlying Datetime representation. Applies to Datetime columns. Returns the minute number from 0 to 59.","title":"Description"},{"location":"reference/ExprDT_minute/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_minute/#value","text":"Expr of minute as UInt32","title":"Value"},{"location":"reference/ExprDT_minute/#examples","text":"df = pl$DataFrame( date = pl$date_range( as.Date(\"2020-12-25\"), as.Date(\"2021-1-05\"), interval = \"1d\", time_zone = \"GMT\" ) ) df$with_columns( pl$col(\"date\")$dt$minute()$alias(\"minute\") )","title":"Examples"},{"location":"reference/ExprDT_minutes/","text":"ExprDT_minutes Minutes Description Extract the minutes from a Duration type. Format function Value Expr of i64 Examples df = pl$DataFrame( date = pl$date_range(low = as.Date(\"2020-1-1\"), high = as.Date(\"2020-1-4\"), interval = \"1d\") ) df$select( pl$col(\"date\"), pl$col(\"date\")$diff()$dt$minutes()$alias(\"minutes_diff\") )","title":"`ExprDT_minutes`"},{"location":"reference/ExprDT_minutes/#exprdt_minutes","text":"Minutes","title":"ExprDT_minutes"},{"location":"reference/ExprDT_minutes/#description","text":"Extract the minutes from a Duration type.","title":"Description"},{"location":"reference/ExprDT_minutes/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_minutes/#value","text":"Expr of i64","title":"Value"},{"location":"reference/ExprDT_minutes/#examples","text":"df = pl$DataFrame( date = pl$date_range(low = as.Date(\"2020-1-1\"), high = as.Date(\"2020-1-4\"), interval = \"1d\") ) df$select( pl$col(\"date\"), pl$col(\"date\")$diff()$dt$minutes()$alias(\"minutes_diff\") )","title":"Examples"},{"location":"reference/ExprDT_month/","text":"ExprDT_month Month Description Extract month from underlying Date representation. Applies to Date and Datetime columns. Returns the month number starting from 1. The return value ranges from 1 to 12. Format function Value Expr of month as UInt32 Examples df = pl$DataFrame( date = pl$date_range( as.Date(\"2020-12-25\"), as.Date(\"2021-1-05\"), interval = \"1d\", time_zone = \"GMT\" ) ) df$with_columns( pl$col(\"date\")$dt$month()$alias(\"month\") )","title":"`ExprDT_month`"},{"location":"reference/ExprDT_month/#exprdt_month","text":"Month","title":"ExprDT_month"},{"location":"reference/ExprDT_month/#description","text":"Extract month from underlying Date representation. Applies to Date and Datetime columns. Returns the month number starting from 1. The return value ranges from 1 to 12.","title":"Description"},{"location":"reference/ExprDT_month/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_month/#value","text":"Expr of month as UInt32","title":"Value"},{"location":"reference/ExprDT_month/#examples","text":"df = pl$DataFrame( date = pl$date_range( as.Date(\"2020-12-25\"), as.Date(\"2021-1-05\"), interval = \"1d\", time_zone = \"GMT\" ) ) df$with_columns( pl$col(\"date\")$dt$month()$alias(\"month\") )","title":"Examples"},{"location":"reference/ExprDT_nanosecond/","text":"ExprDT_nanosecond Nanosecond Description Extract seconds from underlying Datetime representation. Applies to Datetime columns. Returns the integer second number from 0 to 59, or a floating point number from 0 < 60 if fractional=True that includes any milli/micro/nanosecond component. Format function Value Expr of second as Int64 Examples pl$DataFrame(date = pl$date_range( as.numeric(as.POSIXct(\"2001-1-1\"))*1E9+123456789, #manually convert to us as.numeric(as.POSIXct(\"2001-1-1 00:00:6\"))*1E9, interval = \"1s987654321ns\", time_unit = \"ns\" #instruct polars input is us, and store as us ))$with_columns( pl$col(\"date\")$cast(pl$Int64)$alias(\"datetime int64\"), pl$col(\"date\")$dt$nanosecond()$alias(\"nanosecond\") )","title":"`ExprDT_nanosecond`"},{"location":"reference/ExprDT_nanosecond/#exprdt_nanosecond","text":"Nanosecond","title":"ExprDT_nanosecond"},{"location":"reference/ExprDT_nanosecond/#description","text":"Extract seconds from underlying Datetime representation. Applies to Datetime columns. Returns the integer second number from 0 to 59, or a floating point number from 0 < 60 if fractional=True that includes any milli/micro/nanosecond component.","title":"Description"},{"location":"reference/ExprDT_nanosecond/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_nanosecond/#value","text":"Expr of second as Int64","title":"Value"},{"location":"reference/ExprDT_nanosecond/#examples","text":"pl$DataFrame(date = pl$date_range( as.numeric(as.POSIXct(\"2001-1-1\"))*1E9+123456789, #manually convert to us as.numeric(as.POSIXct(\"2001-1-1 00:00:6\"))*1E9, interval = \"1s987654321ns\", time_unit = \"ns\" #instruct polars input is us, and store as us ))$with_columns( pl$col(\"date\")$cast(pl$Int64)$alias(\"datetime int64\"), pl$col(\"date\")$dt$nanosecond()$alias(\"nanosecond\") )","title":"Examples"},{"location":"reference/ExprDT_nanoseconds/","text":"ExprDT_nanoseconds nanoseconds Description Extract the nanoseconds from a Duration type. Format function Value Expr of i64 Examples df = pl$DataFrame(date = pl$date_range( low = as.POSIXct(\"2020-1-1\", tz = \"GMT\"), high = as.POSIXct(\"2020-1-1 00:00:01\", tz = \"GMT\"), interval = \"1ms\" )) df$select( pl$col(\"date\"), pl$col(\"date\")$diff()$dt$nanoseconds()$alias(\"seconds_diff\") )","title":"`ExprDT_nanoseconds`"},{"location":"reference/ExprDT_nanoseconds/#exprdt_nanoseconds","text":"nanoseconds","title":"ExprDT_nanoseconds"},{"location":"reference/ExprDT_nanoseconds/#description","text":"Extract the nanoseconds from a Duration type.","title":"Description"},{"location":"reference/ExprDT_nanoseconds/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_nanoseconds/#value","text":"Expr of i64","title":"Value"},{"location":"reference/ExprDT_nanoseconds/#examples","text":"df = pl$DataFrame(date = pl$date_range( low = as.POSIXct(\"2020-1-1\", tz = \"GMT\"), high = as.POSIXct(\"2020-1-1 00:00:01\", tz = \"GMT\"), interval = \"1ms\" )) df$select( pl$col(\"date\"), pl$col(\"date\")$diff()$dt$nanoseconds()$alias(\"seconds_diff\") )","title":"Examples"},{"location":"reference/ExprDT_offset_by/","text":"ExprDT_offset_by Offset By Description Offset this date by a relative time offset. This differs from pl$col(\"foo_datetime_tu\") + value_tu in that it can take months and leap years into account. Note that only a single minus sign is allowed in the by string, as the first character. Format function Arguments Argument Description by optional string encoding duration see details. Details The by are created with the the following string language: 1ns # 1 nanosecond 1us # 1 microsecond 1ms # 1 millisecond 1s # 1 second 1m # 1 minute 1h # 1 hour 1d # 1 day 1w # 1 calendar week 1mo # 1 calendar month 1y # 1 calendar year 1i # 1 index count These strings can be combined: 3d12h4m25s # 3 days, 12 hours, 4 minutes, and 25 seconds Value Date/Datetime expr Examples df = pl$DataFrame( dates = pl$date_range(as.Date(\"2000-1-1\"),as.Date(\"2005-1-1\"), \"1y\") ) df$select( pl$col(\"dates\")$dt$offset_by(\"1y\")$alias(\"date_plus_1y\"), pl$col(\"dates\")$dt$offset_by(\"-1y2mo\")$alias(\"date_min\") )","title":"`ExprDT_offset_by`"},{"location":"reference/ExprDT_offset_by/#exprdt_offset_by","text":"Offset By","title":"ExprDT_offset_by"},{"location":"reference/ExprDT_offset_by/#description","text":"Offset this date by a relative time offset. This differs from pl$col(\"foo_datetime_tu\") + value_tu in that it can take months and leap years into account. Note that only a single minus sign is allowed in the by string, as the first character.","title":"Description"},{"location":"reference/ExprDT_offset_by/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_offset_by/#arguments","text":"Argument Description by optional string encoding duration see details.","title":"Arguments"},{"location":"reference/ExprDT_offset_by/#details","text":"The by are created with the the following string language: 1ns # 1 nanosecond 1us # 1 microsecond 1ms # 1 millisecond 1s # 1 second 1m # 1 minute 1h # 1 hour 1d # 1 day 1w # 1 calendar week 1mo # 1 calendar month 1y # 1 calendar year 1i # 1 index count These strings can be combined: 3d12h4m25s # 3 days, 12 hours, 4 minutes, and 25 seconds","title":"Details"},{"location":"reference/ExprDT_offset_by/#value","text":"Date/Datetime expr","title":"Value"},{"location":"reference/ExprDT_offset_by/#examples","text":"df = pl$DataFrame( dates = pl$date_range(as.Date(\"2000-1-1\"),as.Date(\"2005-1-1\"), \"1y\") ) df$select( pl$col(\"dates\")$dt$offset_by(\"1y\")$alias(\"date_plus_1y\"), pl$col(\"dates\")$dt$offset_by(\"-1y2mo\")$alias(\"date_min\") )","title":"Examples"},{"location":"reference/ExprDT_ordinal_day/","text":"ExprDT_ordinal_day Ordinal Day Description Extract ordinal day from underlying Date representation. Applies to Date and Datetime columns. Returns the day of year starting from 1. The return value ranges from 1 to 366. (The last day of year differs by years.) Format function Value Expr of ordinal_day as UInt32 Examples df = pl$DataFrame( date = pl$date_range( as.Date(\"2020-12-25\"), as.Date(\"2021-1-05\"), interval = \"1d\", time_zone = \"GMT\" ) ) df$with_columns( pl$col(\"date\")$dt$ordinal_day()$alias(\"ordinal_day\") )","title":"`ExprDT_ordinal_day`"},{"location":"reference/ExprDT_ordinal_day/#exprdt_ordinal_day","text":"Ordinal Day","title":"ExprDT_ordinal_day"},{"location":"reference/ExprDT_ordinal_day/#description","text":"Extract ordinal day from underlying Date representation. Applies to Date and Datetime columns. Returns the day of year starting from 1. The return value ranges from 1 to 366. (The last day of year differs by years.)","title":"Description"},{"location":"reference/ExprDT_ordinal_day/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_ordinal_day/#value","text":"Expr of ordinal_day as UInt32","title":"Value"},{"location":"reference/ExprDT_ordinal_day/#examples","text":"df = pl$DataFrame( date = pl$date_range( as.Date(\"2020-12-25\"), as.Date(\"2021-1-05\"), interval = \"1d\", time_zone = \"GMT\" ) ) df$with_columns( pl$col(\"date\")$dt$ordinal_day()$alias(\"ordinal_day\") )","title":"Examples"},{"location":"reference/ExprDT_quarter/","text":"ExprDT_quarter Quarter Description Extract quarter from underlying Date representation. Applies to Date and Datetime columns. Returns the quarter ranging from 1 to 4. Format function Value Expr of quater as UInt32 Examples df = pl$DataFrame( date = pl$date_range( as.Date(\"2020-12-25\"), as.Date(\"2021-1-05\"), interval = \"1d\", time_zone = \"GMT\" ) ) df$with_columns( pl$col(\"date\")$dt$quarter()$alias(\"quarter\") )","title":"`ExprDT_quarter`"},{"location":"reference/ExprDT_quarter/#exprdt_quarter","text":"Quarter","title":"ExprDT_quarter"},{"location":"reference/ExprDT_quarter/#description","text":"Extract quarter from underlying Date representation. Applies to Date and Datetime columns. Returns the quarter ranging from 1 to 4.","title":"Description"},{"location":"reference/ExprDT_quarter/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_quarter/#value","text":"Expr of quater as UInt32","title":"Value"},{"location":"reference/ExprDT_quarter/#examples","text":"df = pl$DataFrame( date = pl$date_range( as.Date(\"2020-12-25\"), as.Date(\"2021-1-05\"), interval = \"1d\", time_zone = \"GMT\" ) ) df$with_columns( pl$col(\"date\")$dt$quarter()$alias(\"quarter\") )","title":"Examples"},{"location":"reference/ExprDT_replace_time_zone/","text":"ExprDT_replace_time_zone replace_time_zone Description Cast time zone for a Series of type Datetime. Different from convert_time_zone , this will also modify the underlying timestamp. Use to correct a wrong time zone annotation. This will change the corresponding global timepoint. Format function Arguments Argument Description tz Null or string time zone from base::OlsonNames() Value Expr of i64 Examples df = pl$DataFrame( date = pl$date_range(low = as.Date(\"2001-3-1\"), high = as.Date(\"2001-7-1\"), interval = \"1mo\") ) df = df$with_columns( pl$col(\"date\") $dt$replace_time_zone(\"Europe/Amsterdam\") $dt$convert_time_zone(\"Europe/London\") $alias(\"london_timezone\") ) df2 = df$with_columns( pl$col(\"london_timezone\") $dt$replace_time_zone(\"Europe/Amsterdam\") $alias(\"cast London_to_Amsterdam\"), pl$col(\"london_timezone\") $dt$convert_time_zone(\"Europe/Amsterdam\") $alias(\"with London_to_Amsterdam\"), pl$col(\"london_timezone\") $dt$convert_time_zone(\"Europe/Amsterdam\") $dt$replace_time_zone(NULL) $alias(\"strip tz from with-'Europe/Amsterdam'\") ) df2","title":"`ExprDT_replace_time_zone`"},{"location":"reference/ExprDT_replace_time_zone/#exprdt_replace_time_zone","text":"replace_time_zone","title":"ExprDT_replace_time_zone"},{"location":"reference/ExprDT_replace_time_zone/#description","text":"Cast time zone for a Series of type Datetime. Different from convert_time_zone , this will also modify the underlying timestamp. Use to correct a wrong time zone annotation. This will change the corresponding global timepoint.","title":"Description"},{"location":"reference/ExprDT_replace_time_zone/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_replace_time_zone/#arguments","text":"Argument Description tz Null or string time zone from base::OlsonNames()","title":"Arguments"},{"location":"reference/ExprDT_replace_time_zone/#value","text":"Expr of i64","title":"Value"},{"location":"reference/ExprDT_replace_time_zone/#examples","text":"df = pl$DataFrame( date = pl$date_range(low = as.Date(\"2001-3-1\"), high = as.Date(\"2001-7-1\"), interval = \"1mo\") ) df = df$with_columns( pl$col(\"date\") $dt$replace_time_zone(\"Europe/Amsterdam\") $dt$convert_time_zone(\"Europe/London\") $alias(\"london_timezone\") ) df2 = df$with_columns( pl$col(\"london_timezone\") $dt$replace_time_zone(\"Europe/Amsterdam\") $alias(\"cast London_to_Amsterdam\"), pl$col(\"london_timezone\") $dt$convert_time_zone(\"Europe/Amsterdam\") $alias(\"with London_to_Amsterdam\"), pl$col(\"london_timezone\") $dt$convert_time_zone(\"Europe/Amsterdam\") $dt$replace_time_zone(NULL) $alias(\"strip tz from with-'Europe/Amsterdam'\") ) df2","title":"Examples"},{"location":"reference/ExprDT_round/","text":"ExprDT_round Round datetime Description Divide the date/datetime range into buckets. Each date/datetime in the first half of the interval is mapped to the start of its bucket. Each date/datetime in the second half of the interval is mapped to the end of its bucket. Format function Arguments Argument Description every string encoding duration see details. ofset optional string encoding duration see details. Details The every and offset argument are created with the the following string language: 1ns # 1 nanosecond 1us # 1 microsecond 1ms # 1 millisecond 1s # 1 second 1m # 1 minute 1h # 1 hour 1d # 1 day 1w # 1 calendar week 1mo # 1 calendar month 1y # 1 calendar year These strings can be combined: 3d12h4m25s # 3 days, 12 hours, 4 minutes, and 25 seconds This functionality is currently experimental and may change without it being considered a breaking change. Value Date/Datetime expr Examples t1 = as.POSIXct(\"3040-01-01\",tz = \"GMT\") t2 = t1 + as.difftime(25,units = \"secs\") s = pl$date_range(t1, t2, interval = \"2s\", time_unit = \"ms\") #use a dt namespace function df = pl$DataFrame(datetime = s)$with_columns( pl$col(\"datetime\")$dt$truncate(\"4s\")$alias(\"truncated_4s\"), pl$col(\"datetime\")$dt$truncate(\"4s\",offset(\"3s\"))$alias(\"truncated_4s_offset_2s\") ) df","title":"`ExprDT_round`"},{"location":"reference/ExprDT_round/#exprdt_round","text":"Round datetime","title":"ExprDT_round"},{"location":"reference/ExprDT_round/#description","text":"Divide the date/datetime range into buckets. Each date/datetime in the first half of the interval is mapped to the start of its bucket. Each date/datetime in the second half of the interval is mapped to the end of its bucket.","title":"Description"},{"location":"reference/ExprDT_round/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_round/#arguments","text":"Argument Description every string encoding duration see details. ofset optional string encoding duration see details.","title":"Arguments"},{"location":"reference/ExprDT_round/#details","text":"The every and offset argument are created with the the following string language: 1ns # 1 nanosecond 1us # 1 microsecond 1ms # 1 millisecond 1s # 1 second 1m # 1 minute 1h # 1 hour 1d # 1 day 1w # 1 calendar week 1mo # 1 calendar month 1y # 1 calendar year These strings can be combined: 3d12h4m25s # 3 days, 12 hours, 4 minutes, and 25 seconds This functionality is currently experimental and may change without it being considered a breaking change.","title":"Details"},{"location":"reference/ExprDT_round/#value","text":"Date/Datetime expr","title":"Value"},{"location":"reference/ExprDT_round/#examples","text":"t1 = as.POSIXct(\"3040-01-01\",tz = \"GMT\") t2 = t1 + as.difftime(25,units = \"secs\") s = pl$date_range(t1, t2, interval = \"2s\", time_unit = \"ms\") #use a dt namespace function df = pl$DataFrame(datetime = s)$with_columns( pl$col(\"datetime\")$dt$truncate(\"4s\")$alias(\"truncated_4s\"), pl$col(\"datetime\")$dt$truncate(\"4s\",offset(\"3s\"))$alias(\"truncated_4s_offset_2s\") ) df","title":"Examples"},{"location":"reference/ExprDT_second/","text":"ExprDT_second Second Description Extract seconds from underlying Datetime representation. Applies to Datetime columns. Returns the integer second number from 0 to 59, or a floating point number from 0 < 60 if fractional=True that includes any milli/micro/nanosecond component. Format function Value Expr of second as UInt32 Examples pl$DataFrame(date = pl$date_range( as.numeric(as.POSIXct(\"2001-1-1\"))*1E6+456789, #manually convert to us as.numeric(as.POSIXct(\"2001-1-1 00:00:6\"))*1E6, interval = \"2s654321us\", time_unit = \"us\" #instruct polars input is us, and store as us ))$with_columns( pl$col(\"date\")$dt$second()$alias(\"second\"), pl$col(\"date\")$dt$second(fractional = TRUE)$alias(\"second_frac\") )","title":"`ExprDT_second`"},{"location":"reference/ExprDT_second/#exprdt_second","text":"Second","title":"ExprDT_second"},{"location":"reference/ExprDT_second/#description","text":"Extract seconds from underlying Datetime representation. Applies to Datetime columns. Returns the integer second number from 0 to 59, or a floating point number from 0 < 60 if fractional=True that includes any milli/micro/nanosecond component.","title":"Description"},{"location":"reference/ExprDT_second/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_second/#value","text":"Expr of second as UInt32","title":"Value"},{"location":"reference/ExprDT_second/#examples","text":"pl$DataFrame(date = pl$date_range( as.numeric(as.POSIXct(\"2001-1-1\"))*1E6+456789, #manually convert to us as.numeric(as.POSIXct(\"2001-1-1 00:00:6\"))*1E6, interval = \"2s654321us\", time_unit = \"us\" #instruct polars input is us, and store as us ))$with_columns( pl$col(\"date\")$dt$second()$alias(\"second\"), pl$col(\"date\")$dt$second(fractional = TRUE)$alias(\"second_frac\") )","title":"Examples"},{"location":"reference/ExprDT_seconds/","text":"ExprDT_seconds Seconds Description Extract the seconds from a Duration type. Format function Value Expr of i64 Examples df = pl$DataFrame(date = pl$date_range( low = as.POSIXct(\"2020-1-1\", tz = \"GMT\"), high = as.POSIXct(\"2020-1-1 00:04:00\", tz = \"GMT\"), interval = \"1m\" )) df$select( pl$col(\"date\"), pl$col(\"date\")$diff()$dt$seconds()$alias(\"seconds_diff\") )","title":"`ExprDT_seconds`"},{"location":"reference/ExprDT_seconds/#exprdt_seconds","text":"Seconds","title":"ExprDT_seconds"},{"location":"reference/ExprDT_seconds/#description","text":"Extract the seconds from a Duration type.","title":"Description"},{"location":"reference/ExprDT_seconds/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_seconds/#value","text":"Expr of i64","title":"Value"},{"location":"reference/ExprDT_seconds/#examples","text":"df = pl$DataFrame(date = pl$date_range( low = as.POSIXct(\"2020-1-1\", tz = \"GMT\"), high = as.POSIXct(\"2020-1-1 00:04:00\", tz = \"GMT\"), interval = \"1m\" )) df$select( pl$col(\"date\"), pl$col(\"date\")$diff()$dt$seconds()$alias(\"seconds_diff\") )","title":"Examples"},{"location":"reference/ExprDT_strftime/","text":"ExprDT_strftime strftime Description Format Date/Datetime with a formatting rule. See chrono strftime/strptime https://docs.rs/chrono/latest/chrono/format/strftime/index.html _. Format function Arguments Argument Description fmt string format very much like in R passed to chrono Value Date/Datetime expr Examples pl$lit(as.POSIXct(\"2021-01-02 12:13:14\",tz=\"GMT\"))$dt$strftime(\"this is the year: %Y\")$to_r()","title":"`ExprDT_strftime`"},{"location":"reference/ExprDT_strftime/#exprdt_strftime","text":"strftime","title":"ExprDT_strftime"},{"location":"reference/ExprDT_strftime/#description","text":"Format Date/Datetime with a formatting rule. See chrono strftime/strptime https://docs.rs/chrono/latest/chrono/format/strftime/index.html _.","title":"Description"},{"location":"reference/ExprDT_strftime/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_strftime/#arguments","text":"Argument Description fmt string format very much like in R passed to chrono","title":"Arguments"},{"location":"reference/ExprDT_strftime/#value","text":"Date/Datetime expr","title":"Value"},{"location":"reference/ExprDT_strftime/#examples","text":"pl$lit(as.POSIXct(\"2021-01-02 12:13:14\",tz=\"GMT\"))$dt$strftime(\"this is the year: %Y\")$to_r()","title":"Examples"},{"location":"reference/ExprDT_timestamp/","text":"ExprDT_timestamp timestamp Description Return a timestamp in the given time unit. Format function Arguments Argument Description tu string option either 'ns', 'us', or 'ms' Value Expr of i64 Examples df = pl$DataFrame( date = pl$date_range(low = as.Date(\"2001-1-1\"), high = as.Date(\"2001-1-3\"), interval = \"1d\") ) df$select( pl$col(\"date\"), pl$col(\"date\")$dt$timestamp()$alias(\"timestamp_ns\"), pl$col(\"date\")$dt$timestamp(tu=\"ms\")$alias(\"timestamp_ms\") )","title":"`ExprDT_timestamp`"},{"location":"reference/ExprDT_timestamp/#exprdt_timestamp","text":"timestamp","title":"ExprDT_timestamp"},{"location":"reference/ExprDT_timestamp/#description","text":"Return a timestamp in the given time unit.","title":"Description"},{"location":"reference/ExprDT_timestamp/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_timestamp/#arguments","text":"Argument Description tu string option either 'ns', 'us', or 'ms'","title":"Arguments"},{"location":"reference/ExprDT_timestamp/#value","text":"Expr of i64","title":"Value"},{"location":"reference/ExprDT_timestamp/#examples","text":"df = pl$DataFrame( date = pl$date_range(low = as.Date(\"2001-1-1\"), high = as.Date(\"2001-1-3\"), interval = \"1d\") ) df$select( pl$col(\"date\"), pl$col(\"date\")$dt$timestamp()$alias(\"timestamp_ns\"), pl$col(\"date\")$dt$timestamp(tu=\"ms\")$alias(\"timestamp_ms\") )","title":"Examples"},{"location":"reference/ExprDT_truncate/","text":"ExprDT_truncate Truncate datetime Description Divide the date/datetime range into buckets. Each date/datetime is mapped to the start of its bucket. Format function Arguments Argument Description every string encoding duration see details. ofset optional string encoding duration see details. Details The every and offset argument are created with the the following string language: 1ns # 1 nanosecond 1us # 1 microsecond 1ms # 1 millisecond 1s # 1 second 1m # 1 minute 1h # 1 hour 1d # 1 day 1w # 1 calendar week 1mo # 1 calendar month 1y # 1 calendar year These strings can be combined: 3d12h4m25s # 3 days, 12 hours, 4 minutes, and 25 seconds Value Date/Datetime expr Examples t1 = as.POSIXct(\"3040-01-01\",tz = \"GMT\") t2 = t1 + as.difftime(25,units = \"secs\") s = pl$date_range(t1, t2, interval = \"2s\", time_unit = \"ms\") #use a dt namespace function df = pl$DataFrame(datetime = s)$with_columns( pl$col(\"datetime\")$dt$truncate(\"4s\")$alias(\"truncated_4s\"), pl$col(\"datetime\")$dt$truncate(\"4s\",offset(\"3s\"))$alias(\"truncated_4s_offset_2s\") ) df","title":"`ExprDT_truncate`"},{"location":"reference/ExprDT_truncate/#exprdt_truncate","text":"Truncate datetime","title":"ExprDT_truncate"},{"location":"reference/ExprDT_truncate/#description","text":"Divide the date/datetime range into buckets. Each date/datetime is mapped to the start of its bucket.","title":"Description"},{"location":"reference/ExprDT_truncate/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_truncate/#arguments","text":"Argument Description every string encoding duration see details. ofset optional string encoding duration see details.","title":"Arguments"},{"location":"reference/ExprDT_truncate/#details","text":"The every and offset argument are created with the the following string language: 1ns # 1 nanosecond 1us # 1 microsecond 1ms # 1 millisecond 1s # 1 second 1m # 1 minute 1h # 1 hour 1d # 1 day 1w # 1 calendar week 1mo # 1 calendar month 1y # 1 calendar year These strings can be combined: 3d12h4m25s # 3 days, 12 hours, 4 minutes, and 25 seconds","title":"Details"},{"location":"reference/ExprDT_truncate/#value","text":"Date/Datetime expr","title":"Value"},{"location":"reference/ExprDT_truncate/#examples","text":"t1 = as.POSIXct(\"3040-01-01\",tz = \"GMT\") t2 = t1 + as.difftime(25,units = \"secs\") s = pl$date_range(t1, t2, interval = \"2s\", time_unit = \"ms\") #use a dt namespace function df = pl$DataFrame(datetime = s)$with_columns( pl$col(\"datetime\")$dt$truncate(\"4s\")$alias(\"truncated_4s\"), pl$col(\"datetime\")$dt$truncate(\"4s\",offset(\"3s\"))$alias(\"truncated_4s_offset_2s\") ) df","title":"Examples"},{"location":"reference/ExprDT_tz_localize/","text":"ExprDT_tz_localize Localize time zone Description Localize tz-naive Datetime Series to tz-aware Datetime Series. This method takes a naive Datetime Series and makes this time zone aware. It does not move the time to another time zone. Format function Arguments Argument Description tz string of time zone (no NULL allowed) see allowed timezone in base::OlsonNames() Details In R as modifying tzone attribute manually but takes into account summertime. See unittest \"dt$convert_time_zone dt$tz_localize\" for a more detailed comparison to base R. Value Expr of i64 Examples df = pl$DataFrame( date = pl$date_range(low = as.Date(\"2001-3-1\"), high = as.Date(\"2001-7-1\"), interval = \"1mo\") ) df = df$with_columns( pl$col(\"date\") $dt$replace_time_zone(\"Europe/Amsterdam\") $dt$convert_time_zone(\"Europe/London\") $alias(\"london_timezone\"), pl$col(\"date\") $dt$tz_localize(\"Europe/London\") $alias(\"tz_loc_london\") ) df2 = df$with_columns( pl$col(\"london_timezone\") $dt$replace_time_zone(\"Europe/Amsterdam\") $alias(\"cast London_to_Amsterdam\"), pl$col(\"london_timezone\") $dt$convert_time_zone(\"Europe/Amsterdam\") $alias(\"with London_to_Amsterdam\"), pl$col(\"london_timezone\") $dt$convert_time_zone(\"Europe/Amsterdam\") $dt$replace_time_zone(NULL) $alias(\"strip tz from with-'Europe/Amsterdam'\") ) df2","title":"`ExprDT_tz_localize`"},{"location":"reference/ExprDT_tz_localize/#exprdt_tz_localize","text":"Localize time zone","title":"ExprDT_tz_localize"},{"location":"reference/ExprDT_tz_localize/#description","text":"Localize tz-naive Datetime Series to tz-aware Datetime Series. This method takes a naive Datetime Series and makes this time zone aware. It does not move the time to another time zone.","title":"Description"},{"location":"reference/ExprDT_tz_localize/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_tz_localize/#arguments","text":"Argument Description tz string of time zone (no NULL allowed) see allowed timezone in base::OlsonNames()","title":"Arguments"},{"location":"reference/ExprDT_tz_localize/#details","text":"In R as modifying tzone attribute manually but takes into account summertime. See unittest \"dt$convert_time_zone dt$tz_localize\" for a more detailed comparison to base R.","title":"Details"},{"location":"reference/ExprDT_tz_localize/#value","text":"Expr of i64","title":"Value"},{"location":"reference/ExprDT_tz_localize/#examples","text":"df = pl$DataFrame( date = pl$date_range(low = as.Date(\"2001-3-1\"), high = as.Date(\"2001-7-1\"), interval = \"1mo\") ) df = df$with_columns( pl$col(\"date\") $dt$replace_time_zone(\"Europe/Amsterdam\") $dt$convert_time_zone(\"Europe/London\") $alias(\"london_timezone\"), pl$col(\"date\") $dt$tz_localize(\"Europe/London\") $alias(\"tz_loc_london\") ) df2 = df$with_columns( pl$col(\"london_timezone\") $dt$replace_time_zone(\"Europe/Amsterdam\") $alias(\"cast London_to_Amsterdam\"), pl$col(\"london_timezone\") $dt$convert_time_zone(\"Europe/Amsterdam\") $alias(\"with London_to_Amsterdam\"), pl$col(\"london_timezone\") $dt$convert_time_zone(\"Europe/Amsterdam\") $dt$replace_time_zone(NULL) $alias(\"strip tz from with-'Europe/Amsterdam'\") ) df2","title":"Examples"},{"location":"reference/ExprDT_week/","text":"ExprDT_week Week Description Extract the week from the underlying Date representation. Applies to Date and Datetime columns. Returns the ISO week number starting from 1. The return value ranges from 1 to 53. (The last week of year differs by years.) Format function Value Expr of week as UInt32 Examples df = pl$DataFrame( date = pl$date_range( as.Date(\"2020-12-25\"), as.Date(\"2021-1-05\"), interval = \"1d\", time_zone = \"GMT\" ) ) df$with_columns( pl$col(\"date\")$dt$week()$alias(\"week\") )","title":"`ExprDT_week`"},{"location":"reference/ExprDT_week/#exprdt_week","text":"Week","title":"ExprDT_week"},{"location":"reference/ExprDT_week/#description","text":"Extract the week from the underlying Date representation. Applies to Date and Datetime columns. Returns the ISO week number starting from 1. The return value ranges from 1 to 53. (The last week of year differs by years.)","title":"Description"},{"location":"reference/ExprDT_week/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_week/#value","text":"Expr of week as UInt32","title":"Value"},{"location":"reference/ExprDT_week/#examples","text":"df = pl$DataFrame( date = pl$date_range( as.Date(\"2020-12-25\"), as.Date(\"2021-1-05\"), interval = \"1d\", time_zone = \"GMT\" ) ) df$with_columns( pl$col(\"date\")$dt$week()$alias(\"week\") )","title":"Examples"},{"location":"reference/ExprDT_weekday/","text":"ExprDT_weekday Weekday Description Extract the week day from the underlying Date representation. Applies to Date and Datetime columns. Returns the ISO weekday number where monday = 1 and sunday = 7 Format function Value Expr of weekday as UInt32 Examples df = pl$DataFrame( date = pl$date_range( as.Date(\"2020-12-25\"), as.Date(\"2021-1-05\"), interval = \"1d\", time_zone = \"GMT\" ) ) df$with_columns( pl$col(\"date\")$dt$weekday()$alias(\"weekday\") )","title":"`ExprDT_weekday`"},{"location":"reference/ExprDT_weekday/#exprdt_weekday","text":"Weekday","title":"ExprDT_weekday"},{"location":"reference/ExprDT_weekday/#description","text":"Extract the week day from the underlying Date representation. Applies to Date and Datetime columns. Returns the ISO weekday number where monday = 1 and sunday = 7","title":"Description"},{"location":"reference/ExprDT_weekday/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_weekday/#value","text":"Expr of weekday as UInt32","title":"Value"},{"location":"reference/ExprDT_weekday/#examples","text":"df = pl$DataFrame( date = pl$date_range( as.Date(\"2020-12-25\"), as.Date(\"2021-1-05\"), interval = \"1d\", time_zone = \"GMT\" ) ) df$with_columns( pl$col(\"date\")$dt$weekday()$alias(\"weekday\") )","title":"Examples"},{"location":"reference/ExprDT_with_time_unit/","text":"ExprDT_with_time_unit with_time_unit Description Set time unit of a Series of dtype Datetime or Duration. This does not modify underlying data, and should be used to fix an incorrect time unit. The corresponding global timepoint will change. Format function Arguments Argument Description tu string option either 'ns', 'us', or 'ms' Value Expr of i64 Examples df = pl$DataFrame( date = pl$date_range(low = as.Date(\"2001-1-1\"), high = as.Date(\"2001-1-3\"), interval = \"1d\") ) df$select( pl$col(\"date\"), pl$col(\"date\")$dt$with_time_unit()$alias(\"with_time_unit_ns\"), pl$col(\"date\")$dt$with_time_unit(tu=\"ms\")$alias(\"with_time_unit_ms\") )","title":"`ExprDT_with_time_unit`"},{"location":"reference/ExprDT_with_time_unit/#exprdt_with_time_unit","text":"with_time_unit","title":"ExprDT_with_time_unit"},{"location":"reference/ExprDT_with_time_unit/#description","text":"Set time unit of a Series of dtype Datetime or Duration. This does not modify underlying data, and should be used to fix an incorrect time unit. The corresponding global timepoint will change.","title":"Description"},{"location":"reference/ExprDT_with_time_unit/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_with_time_unit/#arguments","text":"Argument Description tu string option either 'ns', 'us', or 'ms'","title":"Arguments"},{"location":"reference/ExprDT_with_time_unit/#value","text":"Expr of i64","title":"Value"},{"location":"reference/ExprDT_with_time_unit/#examples","text":"df = pl$DataFrame( date = pl$date_range(low = as.Date(\"2001-1-1\"), high = as.Date(\"2001-1-3\"), interval = \"1d\") ) df$select( pl$col(\"date\"), pl$col(\"date\")$dt$with_time_unit()$alias(\"with_time_unit_ns\"), pl$col(\"date\")$dt$with_time_unit(tu=\"ms\")$alias(\"with_time_unit_ms\") )","title":"Examples"},{"location":"reference/ExprDT_year/","text":"ExprDT_year Year Description Extract year from underlying Date representation. Applies to Date and Datetime columns. Returns the year number in the calendar date. Format function Value Expr of Year as Int32 Examples df = pl$DataFrame( date = pl$date_range( as.Date(\"2020-12-25\"), as.Date(\"2021-1-05\"), interval = \"1d\", time_zone = \"GMT\" ) ) df$with_columns( pl$col(\"date\")$dt$year()$alias(\"year\"), pl$col(\"date\")$dt$iso_year()$alias(\"iso_year\") )","title":"`ExprDT_year`"},{"location":"reference/ExprDT_year/#exprdt_year","text":"Year","title":"ExprDT_year"},{"location":"reference/ExprDT_year/#description","text":"Extract year from underlying Date representation. Applies to Date and Datetime columns. Returns the year number in the calendar date.","title":"Description"},{"location":"reference/ExprDT_year/#format","text":"function","title":"Format"},{"location":"reference/ExprDT_year/#value","text":"Expr of Year as Int32","title":"Value"},{"location":"reference/ExprDT_year/#examples","text":"df = pl$DataFrame( date = pl$date_range( as.Date(\"2020-12-25\"), as.Date(\"2021-1-05\"), interval = \"1d\", time_zone = \"GMT\" ) ) df$with_columns( pl$col(\"date\")$dt$year()$alias(\"year\"), pl$col(\"date\")$dt$iso_year()$alias(\"iso_year\") )","title":"Examples"},{"location":"reference/ExprMeta_eq/","text":"ExprMeta_eq Meta Equal Description Are two expressions on a meta level equal Arguments Argument Description other Expr to compare with Value bool: TRUE if equal Examples #three naive expression literals e1 = pl$lit(40) + 2 e2 = pl$lit(42) e3 = pl$lit(40) +2 #e1 and e3 are identical expressions e1$meta$eq(e3) #e_test is an expression testing whether e1 and e2 evaluates to the same value. e_test = e1 == e2 # or e_test = e1$eq(e2) #direct evaluate e_test, possible because only made up of literals e_test$to_r() #e1 and e2 are on the meta-level NOT identical expressions e1$meta$neq(e2)","title":"`ExprMeta_eq`"},{"location":"reference/ExprMeta_eq/#exprmeta_eq","text":"Meta Equal","title":"ExprMeta_eq"},{"location":"reference/ExprMeta_eq/#description","text":"Are two expressions on a meta level equal","title":"Description"},{"location":"reference/ExprMeta_eq/#arguments","text":"Argument Description other Expr to compare with","title":"Arguments"},{"location":"reference/ExprMeta_eq/#value","text":"bool: TRUE if equal","title":"Value"},{"location":"reference/ExprMeta_eq/#examples","text":"#three naive expression literals e1 = pl$lit(40) + 2 e2 = pl$lit(42) e3 = pl$lit(40) +2 #e1 and e3 are identical expressions e1$meta$eq(e3) #e_test is an expression testing whether e1 and e2 evaluates to the same value. e_test = e1 == e2 # or e_test = e1$eq(e2) #direct evaluate e_test, possible because only made up of literals e_test$to_r() #e1 and e2 are on the meta-level NOT identical expressions e1$meta$neq(e2)","title":"Examples"},{"location":"reference/ExprMeta_has_multiple_outputs/","text":"ExprMeta_has_multiple_outputs Has multiple outputs Description Whether this expression expands into multiple expressions. Value Bool Examples pl$all()$meta$has_multiple_outputs() pl$col(\"some_colname\")$meta$has_multiple_outputs()","title":"`ExprMeta_has_multiple_outputs`"},{"location":"reference/ExprMeta_has_multiple_outputs/#exprmeta_has_multiple_outputs","text":"Has multiple outputs","title":"ExprMeta_has_multiple_outputs"},{"location":"reference/ExprMeta_has_multiple_outputs/#description","text":"Whether this expression expands into multiple expressions.","title":"Description"},{"location":"reference/ExprMeta_has_multiple_outputs/#value","text":"Bool","title":"Value"},{"location":"reference/ExprMeta_has_multiple_outputs/#examples","text":"pl$all()$meta$has_multiple_outputs() pl$col(\"some_colname\")$meta$has_multiple_outputs()","title":"Examples"},{"location":"reference/ExprMeta_is_regex_projection/","text":"ExprMeta_is_regex_projection Is regex projecion. Description Whether this expression expands to columns that match a regex pattern. Value Bool Examples pl$col(\"^Sepal.*$\")$meta$is_regex_projection() pl$col(\"Sepal.Length\")$meta$is_regex_projection()","title":"`ExprMeta_is_regex_projection`"},{"location":"reference/ExprMeta_is_regex_projection/#exprmeta_is_regex_projection","text":"Is regex projecion.","title":"ExprMeta_is_regex_projection"},{"location":"reference/ExprMeta_is_regex_projection/#description","text":"Whether this expression expands to columns that match a regex pattern.","title":"Description"},{"location":"reference/ExprMeta_is_regex_projection/#value","text":"Bool","title":"Value"},{"location":"reference/ExprMeta_is_regex_projection/#examples","text":"pl$col(\"^Sepal.*$\")$meta$is_regex_projection() pl$col(\"Sepal.Length\")$meta$is_regex_projection()","title":"Examples"},{"location":"reference/ExprMeta_neq/","text":"ExprMeta_neq Meta Not Equal Description Are two expressions on a meta level NOT equal Arguments Argument Description other Expr to compare with Value bool: TRUE if NOT equal Examples #three naive expression literals e1 = pl$lit(40) + 2 e2 = pl$lit(42) e3 = pl$lit(40) +2 #e1 and e3 are identical expressions e1$meta$eq(e3) #e_test is an expression testing whether e1 and e2 evaluates to the same value. e_test = e1 == e2 # or e_test = e1$eq(e2) #direct evaluate e_test, possible because only made up of literals e_test$to_r() #e1 and e2 are on the meta-level NOT identical expressions e1$meta$neq(e2)","title":"`ExprMeta_neq`"},{"location":"reference/ExprMeta_neq/#exprmeta_neq","text":"Meta Not Equal","title":"ExprMeta_neq"},{"location":"reference/ExprMeta_neq/#description","text":"Are two expressions on a meta level NOT equal","title":"Description"},{"location":"reference/ExprMeta_neq/#arguments","text":"Argument Description other Expr to compare with","title":"Arguments"},{"location":"reference/ExprMeta_neq/#value","text":"bool: TRUE if NOT equal","title":"Value"},{"location":"reference/ExprMeta_neq/#examples","text":"#three naive expression literals e1 = pl$lit(40) + 2 e2 = pl$lit(42) e3 = pl$lit(40) +2 #e1 and e3 are identical expressions e1$meta$eq(e3) #e_test is an expression testing whether e1 and e2 evaluates to the same value. e_test = e1 == e2 # or e_test = e1$eq(e2) #direct evaluate e_test, possible because only made up of literals e_test$to_r() #e1 and e2 are on the meta-level NOT identical expressions e1$meta$neq(e2)","title":"Examples"},{"location":"reference/ExprMeta_output_name/","text":"ExprMeta_output_name Output Name Description Get the column name that this expression would produce. It might not always be possible to determine the output name as it might depend on the schema of the context. In that case this will raise an error. Value R charvec of output names. Examples e = pl$col(\"alice\")$alias(\"bob\") e$meta$root_names() == \"alice\" e$meta$output_name() == \"bob\" e$meta$undo_aliases()$meta$output_name() == \"alice\"","title":"`ExprMeta_output_name`"},{"location":"reference/ExprMeta_output_name/#exprmeta_output_name","text":"Output Name","title":"ExprMeta_output_name"},{"location":"reference/ExprMeta_output_name/#description","text":"Get the column name that this expression would produce. It might not always be possible to determine the output name as it might depend on the schema of the context. In that case this will raise an error.","title":"Description"},{"location":"reference/ExprMeta_output_name/#value","text":"R charvec of output names.","title":"Value"},{"location":"reference/ExprMeta_output_name/#examples","text":"e = pl$col(\"alice\")$alias(\"bob\") e$meta$root_names() == \"alice\" e$meta$output_name() == \"bob\" e$meta$undo_aliases()$meta$output_name() == \"alice\"","title":"Examples"},{"location":"reference/ExprMeta_pop/","text":"ExprMeta_pop Pop Description Pop the latest expression and return the input(s) of the popped expression. Value R list of Expr(s) usually one, only multiple if top Expr took more Expr as input. Examples e1 = pl$lit(40) + 2 e2 = pl$lit(42)$sum() e1 e1$meta$pop() e2 e2$meta$pop()","title":"`ExprMeta_pop`"},{"location":"reference/ExprMeta_pop/#exprmeta_pop","text":"Pop","title":"ExprMeta_pop"},{"location":"reference/ExprMeta_pop/#description","text":"Pop the latest expression and return the input(s) of the popped expression.","title":"Description"},{"location":"reference/ExprMeta_pop/#value","text":"R list of Expr(s) usually one, only multiple if top Expr took more Expr as input.","title":"Value"},{"location":"reference/ExprMeta_pop/#examples","text":"e1 = pl$lit(40) + 2 e2 = pl$lit(42)$sum() e1 e1$meta$pop() e2 e2$meta$pop()","title":"Examples"},{"location":"reference/ExprMeta_root_names/","text":"ExprMeta_root_names Root Name Description Get a vector with the root column name Value R charvec of root names. Examples e = pl$col(\"alice\")$alias(\"bob\") e$meta$root_names() == \"alice\" e$meta$output_name() == \"bob\" e$meta$undo_aliases()$meta$output_name() == \"alice\"","title":"`ExprMeta_root_names`"},{"location":"reference/ExprMeta_root_names/#exprmeta_root_names","text":"Root Name","title":"ExprMeta_root_names"},{"location":"reference/ExprMeta_root_names/#description","text":"Get a vector with the root column name","title":"Description"},{"location":"reference/ExprMeta_root_names/#value","text":"R charvec of root names.","title":"Value"},{"location":"reference/ExprMeta_root_names/#examples","text":"e = pl$col(\"alice\")$alias(\"bob\") e$meta$root_names() == \"alice\" e$meta$output_name() == \"bob\" e$meta$undo_aliases()$meta$output_name() == \"alice\"","title":"Examples"},{"location":"reference/ExprMeta_undo_aliases/","text":"ExprMeta_undo_aliases Undo aliases Description Undo any renaming operation like alias or keep_name . Value Expr with aliases undone Examples e = pl$col(\"alice\")$alias(\"bob\") e$meta$root_names() == \"alice\" e$meta$output_name() == \"bob\" e$meta$undo_aliases()$meta$output_name() == \"alice\"","title":"`ExprMeta_undo_aliases`"},{"location":"reference/ExprMeta_undo_aliases/#exprmeta_undo_aliases","text":"Undo aliases","title":"ExprMeta_undo_aliases"},{"location":"reference/ExprMeta_undo_aliases/#description","text":"Undo any renaming operation like alias or keep_name .","title":"Description"},{"location":"reference/ExprMeta_undo_aliases/#value","text":"Expr with aliases undone","title":"Value"},{"location":"reference/ExprMeta_undo_aliases/#examples","text":"e = pl$col(\"alice\")$alias(\"bob\") e$meta$root_names() == \"alice\" e$meta$output_name() == \"bob\" e$meta$undo_aliases()$meta$output_name() == \"alice\"","title":"Examples"},{"location":"reference/ExprStr_concat/","text":"ExprStr_concat Concat Description Vertically concat the values in the Series to a single string value. Arguments Argument Description delimiter string The delimiter to insert between consecutive string values. Value Expr of Utf8 concatenated Examples #concatenate a Series of strings to a single string df = pl$DataFrame(foo = c(\"1\", NA, 2)) df$select(pl$col(\"foo\")$str$concat(\"-\")) #Series list of strings to Series of concatenated strings df = pl$DataFrame(list(bar = list(c(\"a\",\"b\", \"c\"), c(\"1\",\"2\",NA)))) df$select(pl$col(\"bar\")$arr$eval(pl$col()$str$concat())$arr$first())","title":"`ExprStr_concat`"},{"location":"reference/ExprStr_concat/#exprstr_concat","text":"Concat","title":"ExprStr_concat"},{"location":"reference/ExprStr_concat/#description","text":"Vertically concat the values in the Series to a single string value.","title":"Description"},{"location":"reference/ExprStr_concat/#arguments","text":"Argument Description delimiter string The delimiter to insert between consecutive string values.","title":"Arguments"},{"location":"reference/ExprStr_concat/#value","text":"Expr of Utf8 concatenated","title":"Value"},{"location":"reference/ExprStr_concat/#examples","text":"#concatenate a Series of strings to a single string df = pl$DataFrame(foo = c(\"1\", NA, 2)) df$select(pl$col(\"foo\")$str$concat(\"-\")) #Series list of strings to Series of concatenated strings df = pl$DataFrame(list(bar = list(c(\"a\",\"b\", \"c\"), c(\"1\",\"2\",NA)))) df$select(pl$col(\"bar\")$arr$eval(pl$col()$str$concat())$arr$first())","title":"Examples"},{"location":"reference/ExprStr_contains/","text":"ExprStr_contains contains Description R Check if string contains a substring that matches a regex. Arguments Argument Description pattern String or Expr of a string, a valid regex pattern. literal bool, treat pattern as a literal string. NULL is aliased with FALSE. strict bool, raise an error if the underlying pattern is not a valid regex expression, otherwise mask out with a null value. Details starts_with : Check if string values start with a substring. ends_with : Check if string values end with a substring. Value Expr returning a Boolean Examples df = pl$DataFrame(a = c(\"Crab\", \"cat and dog\", \"rab$bit\", NA)) df$select( pl$col(\"a\"), pl$col(\"a\")$str$contains(\"cat|bit\")$alias(\"regex\"), pl$col(\"a\")$str$contains(\"rab$\", literal=TRUE)$alias(\"literal\") )","title":"`ExprStr_contains`"},{"location":"reference/ExprStr_contains/#exprstr_contains","text":"contains","title":"ExprStr_contains"},{"location":"reference/ExprStr_contains/#description","text":"R Check if string contains a substring that matches a regex.","title":"Description"},{"location":"reference/ExprStr_contains/#arguments","text":"Argument Description pattern String or Expr of a string, a valid regex pattern. literal bool, treat pattern as a literal string. NULL is aliased with FALSE. strict bool, raise an error if the underlying pattern is not a valid regex expression, otherwise mask out with a null value.","title":"Arguments"},{"location":"reference/ExprStr_contains/#details","text":"starts_with : Check if string values start with a substring. ends_with : Check if string values end with a substring.","title":"Details"},{"location":"reference/ExprStr_contains/#value","text":"Expr returning a Boolean","title":"Value"},{"location":"reference/ExprStr_contains/#examples","text":"df = pl$DataFrame(a = c(\"Crab\", \"cat and dog\", \"rab$bit\", NA)) df$select( pl$col(\"a\"), pl$col(\"a\")$str$contains(\"cat|bit\")$alias(\"regex\"), pl$col(\"a\")$str$contains(\"rab$\", literal=TRUE)$alias(\"literal\") )","title":"Examples"},{"location":"reference/ExprStr_count_match/","text":"ExprStr_count_match count_match Description Count all successive non-overlapping regex matches. Arguments Argument Description pattern A valid regex pattern Value UInt32 array. Contain null if original value is null or regex capture nothing. Examples df = pl$DataFrame( foo = c(\"123 bla 45 asd\", \"xyz 678 910t\")) df$select( pl$col(\"foo\")$str$count_match(r\"{(\\d)}\")$alias(\"count digits\") )","title":"`ExprStr_count_match`"},{"location":"reference/ExprStr_count_match/#exprstr_count_match","text":"count_match","title":"ExprStr_count_match"},{"location":"reference/ExprStr_count_match/#description","text":"Count all successive non-overlapping regex matches.","title":"Description"},{"location":"reference/ExprStr_count_match/#arguments","text":"Argument Description pattern A valid regex pattern","title":"Arguments"},{"location":"reference/ExprStr_count_match/#value","text":"UInt32 array. Contain null if original value is null or regex capture nothing.","title":"Value"},{"location":"reference/ExprStr_count_match/#examples","text":"df = pl$DataFrame( foo = c(\"123 bla 45 asd\", \"xyz 678 910t\")) df$select( pl$col(\"foo\")$str$count_match(r\"{(\\d)}\")$alias(\"count digits\") )","title":"Examples"},{"location":"reference/ExprStr_decode/","text":"ExprStr_decode decode Description Decode a value using the provided encoding. Arguments Argument Description encoding string choice either 'hex' or 'base64' ... not used currently strict Raise an error if the underlying value cannot be decoded, otherwise mask out with a null value. Value Utf8 array with values decoded using provided encoding Examples df = pl$DataFrame( strings = c(\"foo\", \"bar\", NA)) df$select(pl$col(\"strings\")$str$encode(\"hex\")) df$with_columns( pl$col(\"strings\")$str$encode(\"base64\")$alias(\"base64\"), #notice DataType is not encoded pl$col(\"strings\")$str$encode(\"hex\")$alias(\"hex\") #... and must restored with cast )$with_columns( pl$col(\"base64\")$str$decode(\"base64\")$alias(\"base64_decoded\")$cast(pl$Utf8), pl$col(\"hex\")$str$decode(\"hex\")$alias(\"hex_decoded\")$cast(pl$Utf8) )","title":"`ExprStr_decode`"},{"location":"reference/ExprStr_decode/#exprstr_decode","text":"decode","title":"ExprStr_decode"},{"location":"reference/ExprStr_decode/#description","text":"Decode a value using the provided encoding.","title":"Description"},{"location":"reference/ExprStr_decode/#arguments","text":"Argument Description encoding string choice either 'hex' or 'base64' ... not used currently strict Raise an error if the underlying value cannot be decoded, otherwise mask out with a null value.","title":"Arguments"},{"location":"reference/ExprStr_decode/#value","text":"Utf8 array with values decoded using provided encoding","title":"Value"},{"location":"reference/ExprStr_decode/#examples","text":"df = pl$DataFrame( strings = c(\"foo\", \"bar\", NA)) df$select(pl$col(\"strings\")$str$encode(\"hex\")) df$with_columns( pl$col(\"strings\")$str$encode(\"base64\")$alias(\"base64\"), #notice DataType is not encoded pl$col(\"strings\")$str$encode(\"hex\")$alias(\"hex\") #... and must restored with cast )$with_columns( pl$col(\"base64\")$str$decode(\"base64\")$alias(\"base64_decoded\")$cast(pl$Utf8), pl$col(\"hex\")$str$decode(\"hex\")$alias(\"hex_decoded\")$cast(pl$Utf8) )","title":"Examples"},{"location":"reference/ExprStr_encode/","text":"ExprStr_encode encode Description Encode a value using the provided encoding. Arguments Argument Description encoding string choice either 'hex' or 'base64' Value Utf8 array with values encoded using provided encoding Examples df = pl$DataFrame( strings = c(\"foo\", \"bar\", NA)) df$select(pl$col(\"strings\")$str$encode(\"hex\")) df$with_columns( pl$col(\"strings\")$str$encode(\"base64\")$alias(\"base64\"), #notice DataType is not encoded pl$col(\"strings\")$str$encode(\"hex\")$alias(\"hex\") #... and must restored with cast )$with_columns( pl$col(\"base64\")$str$decode(\"base64\")$alias(\"base64_decoded\")$cast(pl$Utf8), pl$col(\"hex\")$str$decode(\"hex\")$alias(\"hex_decoded\")$cast(pl$Utf8) )","title":"`ExprStr_encode`"},{"location":"reference/ExprStr_encode/#exprstr_encode","text":"encode","title":"ExprStr_encode"},{"location":"reference/ExprStr_encode/#description","text":"Encode a value using the provided encoding.","title":"Description"},{"location":"reference/ExprStr_encode/#arguments","text":"Argument Description encoding string choice either 'hex' or 'base64'","title":"Arguments"},{"location":"reference/ExprStr_encode/#value","text":"Utf8 array with values encoded using provided encoding","title":"Value"},{"location":"reference/ExprStr_encode/#examples","text":"df = pl$DataFrame( strings = c(\"foo\", \"bar\", NA)) df$select(pl$col(\"strings\")$str$encode(\"hex\")) df$with_columns( pl$col(\"strings\")$str$encode(\"base64\")$alias(\"base64\"), #notice DataType is not encoded pl$col(\"strings\")$str$encode(\"hex\")$alias(\"hex\") #... and must restored with cast )$with_columns( pl$col(\"base64\")$str$decode(\"base64\")$alias(\"base64_decoded\")$cast(pl$Utf8), pl$col(\"hex\")$str$decode(\"hex\")$alias(\"hex_decoded\")$cast(pl$Utf8) )","title":"Examples"},{"location":"reference/ExprStr_ends_with/","text":"ExprStr_ends_with ends_with Description Check if string values end with a substring. Arguments Argument Description sub Suffix substring or Expr. Details contains : Check if string contains a substring that matches a regex. starts_with : Check if string values start with a substring. Value Expr returning a Boolean Examples df = pl$DataFrame(fruits = c(\"apple\", \"mango\", NA)) df$select( pl$col(\"fruits\"), pl$col(\"fruits\")$str$ends_with(\"go\")$alias(\"has_suffix\") )","title":"`ExprStr_ends_with`"},{"location":"reference/ExprStr_ends_with/#exprstr_ends_with","text":"ends_with","title":"ExprStr_ends_with"},{"location":"reference/ExprStr_ends_with/#description","text":"Check if string values end with a substring.","title":"Description"},{"location":"reference/ExprStr_ends_with/#arguments","text":"Argument Description sub Suffix substring or Expr.","title":"Arguments"},{"location":"reference/ExprStr_ends_with/#details","text":"contains : Check if string contains a substring that matches a regex. starts_with : Check if string values start with a substring.","title":"Details"},{"location":"reference/ExprStr_ends_with/#value","text":"Expr returning a Boolean","title":"Value"},{"location":"reference/ExprStr_ends_with/#examples","text":"df = pl$DataFrame(fruits = c(\"apple\", \"mango\", NA)) df$select( pl$col(\"fruits\"), pl$col(\"fruits\")$str$ends_with(\"go\")$alias(\"has_suffix\") )","title":"Examples"},{"location":"reference/ExprStr_explode/","text":"ExprStr_explode explode Description Returns a column with a separate row for every string character. Value Expr: Series of dtype Utf8. Examples df = pl$DataFrame(a = c(\"foo\", \"bar\")) df$select(pl$col(\"a\")$str$explode())","title":"`ExprStr_explode`"},{"location":"reference/ExprStr_explode/#exprstr_explode","text":"explode","title":"ExprStr_explode"},{"location":"reference/ExprStr_explode/#description","text":"Returns a column with a separate row for every string character.","title":"Description"},{"location":"reference/ExprStr_explode/#value","text":"Expr: Series of dtype Utf8.","title":"Value"},{"location":"reference/ExprStr_explode/#examples","text":"df = pl$DataFrame(a = c(\"foo\", \"bar\")) df$select(pl$col(\"a\")$str$explode())","title":"Examples"},{"location":"reference/ExprStr_extract/","text":"ExprStr_extract extract Description Extract the target capture group from provided patterns. Arguments Argument Description pattern A valid regex pattern group_index Index of the targeted capture group. Group 0 mean the whole pattern, first group begin at index 1. Default to the first capture group. Value Utf8 array. Contain null if original value is null or regex capture nothing. Examples df = pl$DataFrame( a = c( \"http://vote.com/ballon_dor?candidate=messi&ref=polars\", \"http://vote.com/ballon_dor?candidat=jorginho&ref=polars\", \"http://vote.com/ballon_dor?candidate=ronaldo&ref=polars\" ) ) df$select( pl$col(\"a\")$str$extract(r\"(candidate=(\\w+))\", 1) )","title":"`ExprStr_extract`"},{"location":"reference/ExprStr_extract/#exprstr_extract","text":"extract","title":"ExprStr_extract"},{"location":"reference/ExprStr_extract/#description","text":"Extract the target capture group from provided patterns.","title":"Description"},{"location":"reference/ExprStr_extract/#arguments","text":"Argument Description pattern A valid regex pattern group_index Index of the targeted capture group. Group 0 mean the whole pattern, first group begin at index 1. Default to the first capture group.","title":"Arguments"},{"location":"reference/ExprStr_extract/#value","text":"Utf8 array. Contain null if original value is null or regex capture nothing.","title":"Value"},{"location":"reference/ExprStr_extract/#examples","text":"df = pl$DataFrame( a = c( \"http://vote.com/ballon_dor?candidate=messi&ref=polars\", \"http://vote.com/ballon_dor?candidat=jorginho&ref=polars\", \"http://vote.com/ballon_dor?candidate=ronaldo&ref=polars\" ) ) df$select( pl$col(\"a\")$str$extract(r\"(candidate=(\\w+))\", 1) )","title":"Examples"},{"location":"reference/ExprStr_extract_all/","text":"ExprStr_extract_all extract_all Description Extracts all matches for the given regex pattern. Extracts each successive non-overlapping regex match in an individual string as an array. Arguments Argument Description pattern A valid regex pattern Value List[Utf8] array. Contain null if original value is null or regex capture nothing. Examples df = pl$DataFrame( foo = c(\"123 bla 45 asd\", \"xyz 678 910t\")) df$select( pl$col(\"foo\")$str$extract_all(r\"((\\d+))\")$alias(\"extracted_nrs\") )","title":"`ExprStr_extract_all`"},{"location":"reference/ExprStr_extract_all/#exprstr_extract_all","text":"extract_all","title":"ExprStr_extract_all"},{"location":"reference/ExprStr_extract_all/#description","text":"Extracts all matches for the given regex pattern. Extracts each successive non-overlapping regex match in an individual string as an array.","title":"Description"},{"location":"reference/ExprStr_extract_all/#arguments","text":"Argument Description pattern A valid regex pattern","title":"Arguments"},{"location":"reference/ExprStr_extract_all/#value","text":"List[Utf8] array. Contain null if original value is null or regex capture nothing.","title":"Value"},{"location":"reference/ExprStr_extract_all/#examples","text":"df = pl$DataFrame( foo = c(\"123 bla 45 asd\", \"xyz 678 910t\")) df$select( pl$col(\"foo\")$str$extract_all(r\"((\\d+))\")$alias(\"extracted_nrs\") )","title":"Examples"},{"location":"reference/ExprStr_json_extract/","text":"ExprStr_json_extract json_extract Description Parse string values as JSON. Arguments Argument Description dtype The dtype to cast the extracted value to. If None, the dtype will be inferred from the JSON value. Details Throw errors if encounter invalid json strings. Value Expr returning a boolean Examples df = pl$DataFrame( json_val = c('{\"a\":1, \"b\": true}', NA, '{\"a\":2, \"b\": false}') ) dtype = pl$Struct(pl$Field(\"a\", pl$Int64), pl$Field(\"b\", pl$Boolean)) df$select(pl$col(\"json_val\")$str$json_extract(dtype))","title":"`ExprStr_json_extract`"},{"location":"reference/ExprStr_json_extract/#exprstr_json_extract","text":"json_extract","title":"ExprStr_json_extract"},{"location":"reference/ExprStr_json_extract/#description","text":"Parse string values as JSON.","title":"Description"},{"location":"reference/ExprStr_json_extract/#arguments","text":"Argument Description dtype The dtype to cast the extracted value to. If None, the dtype will be inferred from the JSON value.","title":"Arguments"},{"location":"reference/ExprStr_json_extract/#details","text":"Throw errors if encounter invalid json strings.","title":"Details"},{"location":"reference/ExprStr_json_extract/#value","text":"Expr returning a boolean","title":"Value"},{"location":"reference/ExprStr_json_extract/#examples","text":"df = pl$DataFrame( json_val = c('{\"a\":1, \"b\": true}', NA, '{\"a\":2, \"b\": false}') ) dtype = pl$Struct(pl$Field(\"a\", pl$Int64), pl$Field(\"b\", pl$Boolean)) df$select(pl$col(\"json_val\")$str$json_extract(dtype))","title":"Examples"},{"location":"reference/ExprStr_json_path_match/","text":"ExprStr_json_path_match json_path_match Description Extract the first match of json string with provided JSONPath expression. Arguments Argument Description json_path A valid JSON path query string. Details Throw errors if encounter invalid json strings. All return value will be casted to Utf8 regardless of the original value. Documentation on JSONPath standard can be found here https://goessner.net/articles/JsonPath/ _. Value Utf8 array. Contain null if original value is null or the json_path return nothing. Examples df = pl$DataFrame( json_val = c('{\"a\":\"1\"}', NA, '{\"a\":2}', '{\"a\":2.1}', '{\"a\":true}') ) df$select(pl$col(\"json_val\")$str$json_path_match(\"$.a\"))","title":"`ExprStr_json_path_match`"},{"location":"reference/ExprStr_json_path_match/#exprstr_json_path_match","text":"json_path_match","title":"ExprStr_json_path_match"},{"location":"reference/ExprStr_json_path_match/#description","text":"Extract the first match of json string with provided JSONPath expression.","title":"Description"},{"location":"reference/ExprStr_json_path_match/#arguments","text":"Argument Description json_path A valid JSON path query string.","title":"Arguments"},{"location":"reference/ExprStr_json_path_match/#details","text":"Throw errors if encounter invalid json strings. All return value will be casted to Utf8 regardless of the original value. Documentation on JSONPath standard can be found here https://goessner.net/articles/JsonPath/ _.","title":"Details"},{"location":"reference/ExprStr_json_path_match/#value","text":"Utf8 array. Contain null if original value is null or the json_path return nothing.","title":"Value"},{"location":"reference/ExprStr_json_path_match/#examples","text":"df = pl$DataFrame( json_val = c('{\"a\":\"1\"}', NA, '{\"a\":2}', '{\"a\":2.1}', '{\"a\":true}') ) df$select(pl$col(\"json_val\")$str$json_path_match(\"$.a\"))","title":"Examples"},{"location":"reference/ExprStr_lengths/","text":"ExprStr_lengths lengths Description Get length of the strings as UInt32 (as number of bytes). Format function Details The returned lengths are equal to the number of bytes in the UTF8 string. If you need the length in terms of the number of characters, use n_chars instead. Value Expr of u32 lengths Examples pl$DataFrame( s = c(\"Caf\u00e9\", NA, \"345\", \"\u00e6\u00f8\u00e5\") )$select( pl$col(\"s\"), pl$col(\"s\")$str$lengths()$alias(\"lengths\"), pl$col(\"s\")$str$n_chars()$alias(\"n_chars\") )","title":"`ExprStr_lengths`"},{"location":"reference/ExprStr_lengths/#exprstr_lengths","text":"lengths","title":"ExprStr_lengths"},{"location":"reference/ExprStr_lengths/#description","text":"Get length of the strings as UInt32 (as number of bytes).","title":"Description"},{"location":"reference/ExprStr_lengths/#format","text":"function","title":"Format"},{"location":"reference/ExprStr_lengths/#details","text":"The returned lengths are equal to the number of bytes in the UTF8 string. If you need the length in terms of the number of characters, use n_chars instead.","title":"Details"},{"location":"reference/ExprStr_lengths/#value","text":"Expr of u32 lengths","title":"Value"},{"location":"reference/ExprStr_lengths/#examples","text":"pl$DataFrame( s = c(\"Caf\u00e9\", NA, \"345\", \"\u00e6\u00f8\u00e5\") )$select( pl$col(\"s\"), pl$col(\"s\")$str$lengths()$alias(\"lengths\"), pl$col(\"s\")$str$n_chars()$alias(\"n_chars\") )","title":"Examples"},{"location":"reference/ExprStr_ljust/","text":"ExprStr_ljust ljust Description Return the string left justified in a string of length width . Arguments Argument Description width Justify left to this length. fillchar Fill with this ASCII character. Details Padding is done using the specified fillchar . The original string is returned if width is less than or equal to len(s) . Value Expr of Utf8 Examples df = pl$DataFrame(a = c(\"cow\", \"monkey\", NA, \"hippopotamus\")) df$select(pl$col(\"a\")$str$ljust(8, \"*\"))","title":"`ExprStr_ljust`"},{"location":"reference/ExprStr_ljust/#exprstr_ljust","text":"ljust","title":"ExprStr_ljust"},{"location":"reference/ExprStr_ljust/#description","text":"Return the string left justified in a string of length width .","title":"Description"},{"location":"reference/ExprStr_ljust/#arguments","text":"Argument Description width Justify left to this length. fillchar Fill with this ASCII character.","title":"Arguments"},{"location":"reference/ExprStr_ljust/#details","text":"Padding is done using the specified fillchar . The original string is returned if width is less than or equal to len(s) .","title":"Details"},{"location":"reference/ExprStr_ljust/#value","text":"Expr of Utf8","title":"Value"},{"location":"reference/ExprStr_ljust/#examples","text":"df = pl$DataFrame(a = c(\"cow\", \"monkey\", NA, \"hippopotamus\")) df$select(pl$col(\"a\")$str$ljust(8, \"*\"))","title":"Examples"},{"location":"reference/ExprStr_lstrip/","text":"ExprStr_lstrip lstrip Description Remove leading characters. Arguments Argument Description matches The set of characters to be removed. All combinations of this set of characters will be stripped. If set to NULL (default), all whitespace is removed instead. Details will not strip anyt chars beyond the first char not matched. strip() starts from both left and right. Whereas lstrip() and rstrip() starts from left and right respectively. Value Expr of Utf8 lowercase chars Examples df = pl$DataFrame(foo = c(\" hello\", \"\\tworld\")) df$select(pl$col(\"foo\")$str$strip()) df$select(pl$col(\"foo\")$str$strip(\" hel rld\")) df$select(pl$col(\"foo\")$str$lstrip(\" hel rld\")) df$select(pl$col(\"foo\")$str$rstrip(\" hel\\trld\")) df$select(pl$col(\"foo\")$str$rstrip(\"rldhel\\t \"))","title":"`ExprStr_lstrip`"},{"location":"reference/ExprStr_lstrip/#exprstr_lstrip","text":"lstrip","title":"ExprStr_lstrip"},{"location":"reference/ExprStr_lstrip/#description","text":"Remove leading characters.","title":"Description"},{"location":"reference/ExprStr_lstrip/#arguments","text":"Argument Description matches The set of characters to be removed. All combinations of this set of characters will be stripped. If set to NULL (default), all whitespace is removed instead.","title":"Arguments"},{"location":"reference/ExprStr_lstrip/#details","text":"will not strip anyt chars beyond the first char not matched. strip() starts from both left and right. Whereas lstrip() and rstrip() starts from left and right respectively.","title":"Details"},{"location":"reference/ExprStr_lstrip/#value","text":"Expr of Utf8 lowercase chars","title":"Value"},{"location":"reference/ExprStr_lstrip/#examples","text":"df = pl$DataFrame(foo = c(\" hello\", \"\\tworld\")) df$select(pl$col(\"foo\")$str$strip()) df$select(pl$col(\"foo\")$str$strip(\" hel rld\")) df$select(pl$col(\"foo\")$str$lstrip(\" hel rld\")) df$select(pl$col(\"foo\")$str$rstrip(\" hel\\trld\")) df$select(pl$col(\"foo\")$str$rstrip(\"rldhel\\t \"))","title":"Examples"},{"location":"reference/ExprStr_n_chars/","text":"ExprStr_n_chars n_chars Description Get length of the strings as UInt32 (as number of chars). Format function Details If you know that you are working with ASCII text, lengths will be equivalent, and faster (returns length in terms of the number of bytes). Value Expr of u32 n_chars Examples pl$DataFrame( s = c(\"Caf\u00e9\", NA, \"345\", \"\u00e6\u00f8\u00e5\") )$select( pl$col(\"s\"), pl$col(\"s\")$str$lengths()$alias(\"lengths\"), pl$col(\"s\")$str$n_chars()$alias(\"n_chars\") )","title":"`ExprStr_n_chars`"},{"location":"reference/ExprStr_n_chars/#exprstr_n_chars","text":"n_chars","title":"ExprStr_n_chars"},{"location":"reference/ExprStr_n_chars/#description","text":"Get length of the strings as UInt32 (as number of chars).","title":"Description"},{"location":"reference/ExprStr_n_chars/#format","text":"function","title":"Format"},{"location":"reference/ExprStr_n_chars/#details","text":"If you know that you are working with ASCII text, lengths will be equivalent, and faster (returns length in terms of the number of bytes).","title":"Details"},{"location":"reference/ExprStr_n_chars/#value","text":"Expr of u32 n_chars","title":"Value"},{"location":"reference/ExprStr_n_chars/#examples","text":"pl$DataFrame( s = c(\"Caf\u00e9\", NA, \"345\", \"\u00e6\u00f8\u00e5\") )$select( pl$col(\"s\"), pl$col(\"s\")$str$lengths()$alias(\"lengths\"), pl$col(\"s\")$str$n_chars()$alias(\"n_chars\") )","title":"Examples"},{"location":"reference/ExprStr_parse_int/","text":"ExprStr_parse_int parse_int Description Parse integers with base radix from strings. By default base 2. Arguments Argument Description radix Positive integer which is the base of the string we are parsing. Default: 2 Value Expr: Series of dtype i32. Examples df = pl$DataFrame(bin = c(\"110\", \"101\", \"010\")) df$select(pl$col(\"bin\")$str$parse_int(2))","title":"`ExprStr_parse_int`"},{"location":"reference/ExprStr_parse_int/#exprstr_parse_int","text":"parse_int","title":"ExprStr_parse_int"},{"location":"reference/ExprStr_parse_int/#description","text":"Parse integers with base radix from strings. By default base 2.","title":"Description"},{"location":"reference/ExprStr_parse_int/#arguments","text":"Argument Description radix Positive integer which is the base of the string we are parsing. Default: 2","title":"Arguments"},{"location":"reference/ExprStr_parse_int/#value","text":"Expr: Series of dtype i32.","title":"Value"},{"location":"reference/ExprStr_parse_int/#examples","text":"df = pl$DataFrame(bin = c(\"110\", \"101\", \"010\")) df$select(pl$col(\"bin\")$str$parse_int(2))","title":"Examples"},{"location":"reference/ExprStr_replace/","text":"ExprStr_replace replace Description Replace first matching regex/literal substring with a new string value. Arguments Argument Description pattern Into list(list(\"html\"), list(list(\" \"))) , regex pattern value Into list(list(\"html\"), list(list(\" \"))) replcacement literal bool, Treat pattern as a literal string. Value Expr of Utf8 Series Seealso replace_all : Replace all matching regex/literal substrings. Examples df = pl$DataFrame(id = c(1, 2), text = c(\"123abc\", \"abc456\")) df$with_columns( pl$col(\"text\")$str$replace(r\"{abc\\b}\", \"ABC\") )","title":"`ExprStr_replace`"},{"location":"reference/ExprStr_replace/#exprstr_replace","text":"replace","title":"ExprStr_replace"},{"location":"reference/ExprStr_replace/#description","text":"Replace first matching regex/literal substring with a new string value.","title":"Description"},{"location":"reference/ExprStr_replace/#arguments","text":"Argument Description pattern Into list(list(\"html\"), list(list(\" \"))) , regex pattern value Into list(list(\"html\"), list(list(\" \"))) replcacement literal bool, Treat pattern as a literal string.","title":"Arguments"},{"location":"reference/ExprStr_replace/#value","text":"Expr of Utf8 Series","title":"Value"},{"location":"reference/ExprStr_replace/#seealso","text":"replace_all : Replace all matching regex/literal substrings.","title":"Seealso"},{"location":"reference/ExprStr_replace/#examples","text":"df = pl$DataFrame(id = c(1, 2), text = c(\"123abc\", \"abc456\")) df$with_columns( pl$col(\"text\")$str$replace(r\"{abc\\b}\", \"ABC\") )","title":"Examples"},{"location":"reference/ExprStr_replace_all/","text":"ExprStr_replace_all replace_all Description Replace all matching regex/literal substrings with a new string value. Arguments Argument Description pattern Into list(list(\"html\"), list(list(\" \"))) , regex pattern value Into list(list(\"html\"), list(list(\" \"))) replcacement literal bool, treat pattern as a literal string. Value Expr of Utf8 Series Seealso replace : Replace first matching regex/literal substring. Examples df = pl$DataFrame(id = c(1, 2), text = c(\"abcabc\", \"123a123\")) df$with_columns( pl$col(\"text\")$str$replace_all(\"a\", \"-\") )","title":"`ExprStr_replace_all`"},{"location":"reference/ExprStr_replace_all/#exprstr_replace_all","text":"replace_all","title":"ExprStr_replace_all"},{"location":"reference/ExprStr_replace_all/#description","text":"Replace all matching regex/literal substrings with a new string value.","title":"Description"},{"location":"reference/ExprStr_replace_all/#arguments","text":"Argument Description pattern Into list(list(\"html\"), list(list(\" \"))) , regex pattern value Into list(list(\"html\"), list(list(\" \"))) replcacement literal bool, treat pattern as a literal string.","title":"Arguments"},{"location":"reference/ExprStr_replace_all/#value","text":"Expr of Utf8 Series","title":"Value"},{"location":"reference/ExprStr_replace_all/#seealso","text":"replace : Replace first matching regex/literal substring.","title":"Seealso"},{"location":"reference/ExprStr_replace_all/#examples","text":"df = pl$DataFrame(id = c(1, 2), text = c(\"abcabc\", \"123a123\")) df$with_columns( pl$col(\"text\")$str$replace_all(\"a\", \"-\") )","title":"Examples"},{"location":"reference/ExprStr_rjust/","text":"ExprStr_rjust rjust Description Return the string left justified in a string of length width . Arguments Argument Description width Justify left to this length. fillchar Fill with this ASCII character. Details Padding is done using the specified fillchar . The original string is returned if width is less than or equal to len(s) . Value Expr of Utf8 Examples df = pl$DataFrame(a = c(\"cow\", \"monkey\", NA, \"hippopotamus\")) df$select(pl$col(\"a\")$str$rjust(8, \"*\"))","title":"`ExprStr_rjust`"},{"location":"reference/ExprStr_rjust/#exprstr_rjust","text":"rjust","title":"ExprStr_rjust"},{"location":"reference/ExprStr_rjust/#description","text":"Return the string left justified in a string of length width .","title":"Description"},{"location":"reference/ExprStr_rjust/#arguments","text":"Argument Description width Justify left to this length. fillchar Fill with this ASCII character.","title":"Arguments"},{"location":"reference/ExprStr_rjust/#details","text":"Padding is done using the specified fillchar . The original string is returned if width is less than or equal to len(s) .","title":"Details"},{"location":"reference/ExprStr_rjust/#value","text":"Expr of Utf8","title":"Value"},{"location":"reference/ExprStr_rjust/#examples","text":"df = pl$DataFrame(a = c(\"cow\", \"monkey\", NA, \"hippopotamus\")) df$select(pl$col(\"a\")$str$rjust(8, \"*\"))","title":"Examples"},{"location":"reference/ExprStr_rstrip/","text":"ExprStr_rstrip rstrip Description Remove leading characters. Arguments Argument Description matches The set of characters to be removed. All combinations of this set of characters will be stripped. If set to NULL (default), all whitespace is removed instead. Details will not strip anyt chars beyond the first char not matched. strip() starts from both left and right. Whereas rstrip() and rstrip() starts from left and right respectively. Value Expr of Utf8 lowercase chars Examples df = pl$DataFrame(foo = c(\" hello\", \"\\tworld\")) df$select(pl$col(\"foo\")$str$strip()) df$select(pl$col(\"foo\")$str$strip(\" hel rld\")) df$select(pl$col(\"foo\")$str$lstrip(\" hel rld\")) df$select(pl$col(\"foo\")$str$rstrip(\" hel\\trld\")) df$select(pl$col(\"foo\")$str$rstrip(\"rldhel\\t \"))","title":"`ExprStr_rstrip`"},{"location":"reference/ExprStr_rstrip/#exprstr_rstrip","text":"rstrip","title":"ExprStr_rstrip"},{"location":"reference/ExprStr_rstrip/#description","text":"Remove leading characters.","title":"Description"},{"location":"reference/ExprStr_rstrip/#arguments","text":"Argument Description matches The set of characters to be removed. All combinations of this set of characters will be stripped. If set to NULL (default), all whitespace is removed instead.","title":"Arguments"},{"location":"reference/ExprStr_rstrip/#details","text":"will not strip anyt chars beyond the first char not matched. strip() starts from both left and right. Whereas rstrip() and rstrip() starts from left and right respectively.","title":"Details"},{"location":"reference/ExprStr_rstrip/#value","text":"Expr of Utf8 lowercase chars","title":"Value"},{"location":"reference/ExprStr_rstrip/#examples","text":"df = pl$DataFrame(foo = c(\" hello\", \"\\tworld\")) df$select(pl$col(\"foo\")$str$strip()) df$select(pl$col(\"foo\")$str$strip(\" hel rld\")) df$select(pl$col(\"foo\")$str$lstrip(\" hel rld\")) df$select(pl$col(\"foo\")$str$rstrip(\" hel\\trld\")) df$select(pl$col(\"foo\")$str$rstrip(\"rldhel\\t \"))","title":"Examples"},{"location":"reference/ExprStr_slice/","text":"ExprStr_slice slice Description Create subslices of the string values of a Utf8 Series. Arguments Argument Description pattern Into list(list(\"html\"), list(list(\" \"))) , regex pattern value Into list(list(\"html\"), list(list(\" \"))) replcacement literal bool, treat pattern as a literal string. Value Expr: Series of dtype Utf8. Examples df = pl$DataFrame(s = c(\"pear\", NA, \"papaya\", \"dragonfruit\")) df$with_columns( pl$col(\"s\")$str$slice(-3)$alias(\"s_sliced\") )","title":"`ExprStr_slice`"},{"location":"reference/ExprStr_slice/#exprstr_slice","text":"slice","title":"ExprStr_slice"},{"location":"reference/ExprStr_slice/#description","text":"Create subslices of the string values of a Utf8 Series.","title":"Description"},{"location":"reference/ExprStr_slice/#arguments","text":"Argument Description pattern Into list(list(\"html\"), list(list(\" \"))) , regex pattern value Into list(list(\"html\"), list(list(\" \"))) replcacement literal bool, treat pattern as a literal string.","title":"Arguments"},{"location":"reference/ExprStr_slice/#value","text":"Expr: Series of dtype Utf8.","title":"Value"},{"location":"reference/ExprStr_slice/#examples","text":"df = pl$DataFrame(s = c(\"pear\", NA, \"papaya\", \"dragonfruit\")) df$with_columns( pl$col(\"s\")$str$slice(-3)$alias(\"s_sliced\") )","title":"Examples"},{"location":"reference/ExprStr_split/","text":"ExprStr_split split Description Split the string by a substring. Arguments Argument Description by Substring to split by. inclusive If True, include the split character/string in the results. Value List of Utf8 type Examples df = pl$DataFrame(s = c(\"foo bar\", \"foo-bar\", \"foo bar baz\")) df$select( pl$col(\"s\")$str$split(by=\" \"))","title":"`ExprStr_split`"},{"location":"reference/ExprStr_split/#exprstr_split","text":"split","title":"ExprStr_split"},{"location":"reference/ExprStr_split/#description","text":"Split the string by a substring.","title":"Description"},{"location":"reference/ExprStr_split/#arguments","text":"Argument Description by Substring to split by. inclusive If True, include the split character/string in the results.","title":"Arguments"},{"location":"reference/ExprStr_split/#value","text":"List of Utf8 type","title":"Value"},{"location":"reference/ExprStr_split/#examples","text":"df = pl$DataFrame(s = c(\"foo bar\", \"foo-bar\", \"foo bar baz\")) df$select( pl$col(\"s\")$str$split(by=\" \"))","title":"Examples"},{"location":"reference/ExprStr_split_exact/","text":"ExprStr_split_exact split_exact Description Split the string by a substring using n splits. Results in a struct of n+1 fields. If it cannot make n splits, the remaining field elements will be null. Arguments Argument Description by Substring to split by. n Number of splits to make. inclusive If True, include the split_exact character/string in the results. Value Struct where each of n+1 fields is of Utf8 type Examples df = pl$DataFrame(s = c(\"a_1\", NA, \"c\", \"d_4\")) df$select( pl$col(\"s\")$str$split_exact(by=\"_\",1))","title":"`ExprStr_split_exact`"},{"location":"reference/ExprStr_split_exact/#exprstr_split_exact","text":"split_exact","title":"ExprStr_split_exact"},{"location":"reference/ExprStr_split_exact/#description","text":"Split the string by a substring using n splits. Results in a struct of n+1 fields. If it cannot make n splits, the remaining field elements will be null.","title":"Description"},{"location":"reference/ExprStr_split_exact/#arguments","text":"Argument Description by Substring to split by. n Number of splits to make. inclusive If True, include the split_exact character/string in the results.","title":"Arguments"},{"location":"reference/ExprStr_split_exact/#value","text":"Struct where each of n+1 fields is of Utf8 type","title":"Value"},{"location":"reference/ExprStr_split_exact/#examples","text":"df = pl$DataFrame(s = c(\"a_1\", NA, \"c\", \"d_4\")) df$select( pl$col(\"s\")$str$split_exact(by=\"_\",1))","title":"Examples"},{"location":"reference/ExprStr_splitn/","text":"ExprStr_splitn splitn Description Split the string by a substring, restricted to returning at most n items. If the number of possible splits is less than n-1 , the remaining field elements will be null. If the number of possible splits is n-1 or greater, the last (nth) substring will contain the remainder of the string. Arguments Argument Description by Substring to split by. n Number of splits to make. Value Struct where each of n+1 fields is of Utf8 type Examples df = pl$DataFrame(s = c(\"a_1\", NA, \"c\", \"d_4\")) df$select( pl$col(\"s\")$str$splitn(by=\"_\",0)) df$select( pl$col(\"s\")$str$splitn(by=\"_\",1)) df$select( pl$col(\"s\")$str$splitn(by=\"_\",2))","title":"`ExprStr_splitn`"},{"location":"reference/ExprStr_splitn/#exprstr_splitn","text":"splitn","title":"ExprStr_splitn"},{"location":"reference/ExprStr_splitn/#description","text":"Split the string by a substring, restricted to returning at most n items. If the number of possible splits is less than n-1 , the remaining field elements will be null. If the number of possible splits is n-1 or greater, the last (nth) substring will contain the remainder of the string.","title":"Description"},{"location":"reference/ExprStr_splitn/#arguments","text":"Argument Description by Substring to split by. n Number of splits to make.","title":"Arguments"},{"location":"reference/ExprStr_splitn/#value","text":"Struct where each of n+1 fields is of Utf8 type","title":"Value"},{"location":"reference/ExprStr_splitn/#examples","text":"df = pl$DataFrame(s = c(\"a_1\", NA, \"c\", \"d_4\")) df$select( pl$col(\"s\")$str$splitn(by=\"_\",0)) df$select( pl$col(\"s\")$str$splitn(by=\"_\",1)) df$select( pl$col(\"s\")$str$splitn(by=\"_\",2))","title":"Examples"},{"location":"reference/ExprStr_starts_with/","text":"ExprStr_starts_with starts_with Description Check if string values starts with a substring. Arguments Argument Description sub Prefix substring or Expr. Details contains : Check if string contains a substring that matches a regex. ends_with : Check if string values end with a substring. Value Expr returning a Boolean Examples df = pl$DataFrame(fruits = c(\"apple\", \"mango\", NA)) df$select( pl$col(\"fruits\"), pl$col(\"fruits\")$str$starts_with(\"app\")$alias(\"has_suffix\") )","title":"`ExprStr_starts_with`"},{"location":"reference/ExprStr_starts_with/#exprstr_starts_with","text":"starts_with","title":"ExprStr_starts_with"},{"location":"reference/ExprStr_starts_with/#description","text":"Check if string values starts with a substring.","title":"Description"},{"location":"reference/ExprStr_starts_with/#arguments","text":"Argument Description sub Prefix substring or Expr.","title":"Arguments"},{"location":"reference/ExprStr_starts_with/#details","text":"contains : Check if string contains a substring that matches a regex. ends_with : Check if string values end with a substring.","title":"Details"},{"location":"reference/ExprStr_starts_with/#value","text":"Expr returning a Boolean","title":"Value"},{"location":"reference/ExprStr_starts_with/#examples","text":"df = pl$DataFrame(fruits = c(\"apple\", \"mango\", NA)) df$select( pl$col(\"fruits\"), pl$col(\"fruits\")$str$starts_with(\"app\")$alias(\"has_suffix\") )","title":"Examples"},{"location":"reference/ExprStr_strip/","text":"ExprStr_strip Strip Description Remove leading and trailing characters. Arguments Argument Description matches The set of characters to be removed. All combinations of this set of characters will be stripped. If set to NULL (default), all whitespace is removed instead. Details will not strip anyt chars beyond the first char not matched. strip() starts from both left and right. Whereas lstrip() and rstrip() starts from left and right respectively. Value Expr of Utf8 lowercase chars Examples df = pl$DataFrame(foo = c(\" hello\", \"\\tworld\")) df$select(pl$col(\"foo\")$str$strip()) df$select(pl$col(\"foo\")$str$strip(\" hel rld\")) df$select(pl$col(\"foo\")$str$lstrip(\" hel rld\")) df$select(pl$col(\"foo\")$str$rstrip(\" hel\\trld\")) df$select(pl$col(\"foo\")$str$rstrip(\"rldhel\\t \"))","title":"`ExprStr_strip`"},{"location":"reference/ExprStr_strip/#exprstr_strip","text":"Strip","title":"ExprStr_strip"},{"location":"reference/ExprStr_strip/#description","text":"Remove leading and trailing characters.","title":"Description"},{"location":"reference/ExprStr_strip/#arguments","text":"Argument Description matches The set of characters to be removed. All combinations of this set of characters will be stripped. If set to NULL (default), all whitespace is removed instead.","title":"Arguments"},{"location":"reference/ExprStr_strip/#details","text":"will not strip anyt chars beyond the first char not matched. strip() starts from both left and right. Whereas lstrip() and rstrip() starts from left and right respectively.","title":"Details"},{"location":"reference/ExprStr_strip/#value","text":"Expr of Utf8 lowercase chars","title":"Value"},{"location":"reference/ExprStr_strip/#examples","text":"df = pl$DataFrame(foo = c(\" hello\", \"\\tworld\")) df$select(pl$col(\"foo\")$str$strip()) df$select(pl$col(\"foo\")$str$strip(\" hel rld\")) df$select(pl$col(\"foo\")$str$lstrip(\" hel rld\")) df$select(pl$col(\"foo\")$str$rstrip(\" hel\\trld\")) df$select(pl$col(\"foo\")$str$rstrip(\"rldhel\\t \"))","title":"Examples"},{"location":"reference/ExprStr_strptime/","text":"ExprStr_strptime strptime Description Parse a Series of dtype Utf8 to a Date/Datetime Series. Arguments Argument Description datatype a temporal data type either pl$Date, pl$Time or pl$Datetime fmt fmt string for parsenig see see details here https://docs.rs/chrono/latest/chrono/format/strftime/index.html#fn6 Notice time_zone %Z is not supported and will just ignore timezones. Numeric tz like %z, %:z .... are supported. strict bool, if true raise error if a single string cannot be parsed, else produce a polars null . exact bool , If True, require an exact format match. If False, allow the format to match anywhere in the target string. cache Use a cache of unique, converted dates to apply the datetime conversion. tz_aware bool, Parse timezone aware datetimes. This may be automatically toggled by the \u2018fmt\u2019 given. utc bool Parse timezone aware datetimes as UTC. This may be useful if you have data with mixed offsets. Details Notes When parsing a Datetime the column precision will be inferred from the format string, if given, eg: \u201c%F %T%.3f\u201d => Datetime(\u201cms\u201d). If no fractional second component is found then the default is \u201cus\u201d. Value Expr of a Data, Datetime or Time Series Examples s = pl$Series(c( \"2021-04-22\", \"2022-01-04 00:00:00\", \"01/31/22\", \"Sun Jul 8 00:34:60 2001\" ), \"date\" ) #' #join multiple passes with different fmt s$to_frame()$with_columns( pl$col(\"date\") $str$strptime(pl$Date, \"%F\", strict=FALSE) $fill_null(pl$col(\"date\")$str$strptime(pl$Date, \"%F %T\", strict=FALSE)) $fill_null(pl$col(\"date\")$str$strptime(pl$Date, \"%D\", strict=FALSE)) $fill_null(pl$col(\"date\")$str$strptime(pl$Date, \"%c\", strict=FALSE)) ) txt_datetimes = c( \"2023-01-01 11:22:33 -0100\", \"2023-01-01 11:22:33 +0300\", \"invalid time\" ) pl$lit(txt_datetimes)$str$strptime( pl$Datetime(\"ns\"),fmt = \"%Y-%m-%d %H:%M:%S %z\", strict = FALSE, tz_aware = TRUE, utc =TRUE )$lit_to_s()","title":"`ExprStr_strptime`"},{"location":"reference/ExprStr_strptime/#exprstr_strptime","text":"strptime","title":"ExprStr_strptime"},{"location":"reference/ExprStr_strptime/#description","text":"Parse a Series of dtype Utf8 to a Date/Datetime Series.","title":"Description"},{"location":"reference/ExprStr_strptime/#arguments","text":"Argument Description datatype a temporal data type either pl$Date, pl$Time or pl$Datetime fmt fmt string for parsenig see see details here https://docs.rs/chrono/latest/chrono/format/strftime/index.html#fn6 Notice time_zone %Z is not supported and will just ignore timezones. Numeric tz like %z, %:z .... are supported. strict bool, if true raise error if a single string cannot be parsed, else produce a polars null . exact bool , If True, require an exact format match. If False, allow the format to match anywhere in the target string. cache Use a cache of unique, converted dates to apply the datetime conversion. tz_aware bool, Parse timezone aware datetimes. This may be automatically toggled by the \u2018fmt\u2019 given. utc bool Parse timezone aware datetimes as UTC. This may be useful if you have data with mixed offsets.","title":"Arguments"},{"location":"reference/ExprStr_strptime/#details","text":"Notes When parsing a Datetime the column precision will be inferred from the format string, if given, eg: \u201c%F %T%.3f\u201d => Datetime(\u201cms\u201d). If no fractional second component is found then the default is \u201cus\u201d.","title":"Details"},{"location":"reference/ExprStr_strptime/#value","text":"Expr of a Data, Datetime or Time Series","title":"Value"},{"location":"reference/ExprStr_strptime/#examples","text":"s = pl$Series(c( \"2021-04-22\", \"2022-01-04 00:00:00\", \"01/31/22\", \"Sun Jul 8 00:34:60 2001\" ), \"date\" ) #' #join multiple passes with different fmt s$to_frame()$with_columns( pl$col(\"date\") $str$strptime(pl$Date, \"%F\", strict=FALSE) $fill_null(pl$col(\"date\")$str$strptime(pl$Date, \"%F %T\", strict=FALSE)) $fill_null(pl$col(\"date\")$str$strptime(pl$Date, \"%D\", strict=FALSE)) $fill_null(pl$col(\"date\")$str$strptime(pl$Date, \"%c\", strict=FALSE)) ) txt_datetimes = c( \"2023-01-01 11:22:33 -0100\", \"2023-01-01 11:22:33 +0300\", \"invalid time\" ) pl$lit(txt_datetimes)$str$strptime( pl$Datetime(\"ns\"),fmt = \"%Y-%m-%d %H:%M:%S %z\", strict = FALSE, tz_aware = TRUE, utc =TRUE )$lit_to_s()","title":"Examples"},{"location":"reference/ExprStr_to_lowercase/","text":"ExprStr_to_lowercase To lowercase Description Transform to lowercase variant. Value Expr of Utf8 lowercase chars Examples pl$lit(c(\"A\",\"b\", \"c\", \"1\", NA))$str$to_lowercase()$lit_to_s()","title":"`ExprStr_to_lowercase`"},{"location":"reference/ExprStr_to_lowercase/#exprstr_to_lowercase","text":"To lowercase","title":"ExprStr_to_lowercase"},{"location":"reference/ExprStr_to_lowercase/#description","text":"Transform to lowercase variant.","title":"Description"},{"location":"reference/ExprStr_to_lowercase/#value","text":"Expr of Utf8 lowercase chars","title":"Value"},{"location":"reference/ExprStr_to_lowercase/#examples","text":"pl$lit(c(\"A\",\"b\", \"c\", \"1\", NA))$str$to_lowercase()$lit_to_s()","title":"Examples"},{"location":"reference/ExprStr_to_uppercase/","text":"ExprStr_to_uppercase To uppercase Description Transform to uppercase variant. Value Expr of Utf8 uppercase chars Examples pl$lit(c(\"A\",\"b\", \"c\", \"1\", NA))$str$to_uppercase()$lit_to_s()","title":"`ExprStr_to_uppercase`"},{"location":"reference/ExprStr_to_uppercase/#exprstr_to_uppercase","text":"To uppercase","title":"ExprStr_to_uppercase"},{"location":"reference/ExprStr_to_uppercase/#description","text":"Transform to uppercase variant.","title":"Description"},{"location":"reference/ExprStr_to_uppercase/#value","text":"Expr of Utf8 uppercase chars","title":"Value"},{"location":"reference/ExprStr_to_uppercase/#examples","text":"pl$lit(c(\"A\",\"b\", \"c\", \"1\", NA))$str$to_uppercase()$lit_to_s()","title":"Examples"},{"location":"reference/ExprStr_zfill/","text":"ExprStr_zfill zfill Description Fills the string with zeroes. Arguments Argument Description alignment Fill the value up to this length Details Return a copy of the string left filled with ASCII '0' digits to make a string of length width. A leading sign prefix ('+'/'-') is handled by inserting the padding after the sign character rather than before. The original string is returned if width is less than or equal to len(s) . Value Expr Examples some_floats_expr = pl$lit(c(0,10,-5,5)) #cast to Utf8 and ljust alignment = 5, and view as R char vector some_floats_expr$cast(pl$Utf8)$str$zfill(5)$to_r() #cast to int and the to utf8 and then ljust alignment = 5, and view as R char vector some_floats_expr$cast(pl$Int64)$cast(pl$Utf8)$str$zfill(5)$to_r()","title":"`ExprStr_zfill`"},{"location":"reference/ExprStr_zfill/#exprstr_zfill","text":"zfill","title":"ExprStr_zfill"},{"location":"reference/ExprStr_zfill/#description","text":"Fills the string with zeroes.","title":"Description"},{"location":"reference/ExprStr_zfill/#arguments","text":"Argument Description alignment Fill the value up to this length","title":"Arguments"},{"location":"reference/ExprStr_zfill/#details","text":"Return a copy of the string left filled with ASCII '0' digits to make a string of length width. A leading sign prefix ('+'/'-') is handled by inserting the padding after the sign character rather than before. The original string is returned if width is less than or equal to len(s) .","title":"Details"},{"location":"reference/ExprStr_zfill/#value","text":"Expr","title":"Value"},{"location":"reference/ExprStr_zfill/#examples","text":"some_floats_expr = pl$lit(c(0,10,-5,5)) #cast to Utf8 and ljust alignment = 5, and view as R char vector some_floats_expr$cast(pl$Utf8)$str$zfill(5)$to_r() #cast to int and the to utf8 and then ljust alignment = 5, and view as R char vector some_floats_expr$cast(pl$Int64)$cast(pl$Utf8)$str$zfill(5)$to_r()","title":"Examples"},{"location":"reference/ExprStruct_field/","text":"ExprStruct_field field Description Retrieve a Struct field as a new Series. By default base 2. Arguments Argument Description name string, the Name of the struct field to retrieve. Value Expr: Series of same and name selected field. Examples df = pl$DataFrame( aaa = c(1, 2), bbb = c(\"ab\", \"cd\"), ccc = c(TRUE, NA), ddd = list(c(1, 2), 3) )$select( pl$struct(pl$all())$alias(\"struct_col\") ) #struct field into a new Series df$select( pl$col(\"struct_col\")$struct$field(\"bbb\"), pl$col(\"struct_col\")$struct$field(\"ddd\") )","title":"`ExprStruct_field`"},{"location":"reference/ExprStruct_field/#exprstruct_field","text":"field","title":"ExprStruct_field"},{"location":"reference/ExprStruct_field/#description","text":"Retrieve a Struct field as a new Series. By default base 2.","title":"Description"},{"location":"reference/ExprStruct_field/#arguments","text":"Argument Description name string, the Name of the struct field to retrieve.","title":"Arguments"},{"location":"reference/ExprStruct_field/#value","text":"Expr: Series of same and name selected field.","title":"Value"},{"location":"reference/ExprStruct_field/#examples","text":"df = pl$DataFrame( aaa = c(1, 2), bbb = c(\"ab\", \"cd\"), ccc = c(TRUE, NA), ddd = list(c(1, 2), 3) )$select( pl$struct(pl$all())$alias(\"struct_col\") ) #struct field into a new Series df$select( pl$col(\"struct_col\")$struct$field(\"bbb\"), pl$col(\"struct_col\")$struct$field(\"ddd\") )","title":"Examples"},{"location":"reference/ExprStruct_rename_fields/","text":"ExprStruct_rename_fields rename fields Description Rename the fields of the struct. By default base 2. Arguments Argument Description names char vec or list of strings given in the same order as the struct's fields. Providing fewer names will drop the latter fields. Providing too many names is ignored. Value Expr: struct-series with new names for the fields Examples df = pl$DataFrame( aaa = 1:2, bbb = c(\"ab\", \"cd\"), ccc = c(TRUE, NA), ddd = list(1:2, 3L) )$select( pl$struct(pl$all())$alias(\"struct_col\") )$select( pl$col(\"struct_col\")$struct$rename_fields(c(\"www\", \"xxx\", \"yyy\", \"zzz\")) ) df$unnest()","title":"`ExprStruct_rename_fields`"},{"location":"reference/ExprStruct_rename_fields/#exprstruct_rename_fields","text":"rename fields","title":"ExprStruct_rename_fields"},{"location":"reference/ExprStruct_rename_fields/#description","text":"Rename the fields of the struct. By default base 2.","title":"Description"},{"location":"reference/ExprStruct_rename_fields/#arguments","text":"Argument Description names char vec or list of strings given in the same order as the struct's fields. Providing fewer names will drop the latter fields. Providing too many names is ignored.","title":"Arguments"},{"location":"reference/ExprStruct_rename_fields/#value","text":"Expr: struct-series with new names for the fields","title":"Value"},{"location":"reference/ExprStruct_rename_fields/#examples","text":"df = pl$DataFrame( aaa = 1:2, bbb = c(\"ab\", \"cd\"), ccc = c(TRUE, NA), ddd = list(1:2, 3L) )$select( pl$struct(pl$all())$alias(\"struct_col\") )$select( pl$col(\"struct_col\")$struct$rename_fields(c(\"www\", \"xxx\", \"yyy\", \"zzz\")) ) df$unnest()","title":"Examples"},{"location":"reference/Expr_abs/","text":"Expr_abs Abs Description Compute absolute values Format An object of class character of length 1. Usage Expr_abs Value Exprs abs Examples pl$DataFrame(list(a=-1:1))$select(pl$col(\"a\"),pl$col(\"a\")$abs()$alias(\"abs\"))","title":"`Expr_abs`"},{"location":"reference/Expr_abs/#expr_abs","text":"Abs","title":"Expr_abs"},{"location":"reference/Expr_abs/#description","text":"Compute absolute values","title":"Description"},{"location":"reference/Expr_abs/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_abs/#usage","text":"Expr_abs","title":"Usage"},{"location":"reference/Expr_abs/#value","text":"Exprs abs","title":"Value"},{"location":"reference/Expr_abs/#examples","text":"pl$DataFrame(list(a=-1:1))$select(pl$col(\"a\"),pl$col(\"a\")$abs()$alias(\"abs\"))","title":"Examples"},{"location":"reference/Expr_add/","text":"Expr_add Add Description Addition Usage Expr_add(other) list(list(\"+\"), list(\"Expr\"))(e1, e2) Arguments Argument Description other literal or Robj which can become a literal e1 lhs Expr e2 rhs Expr or anything which can become a literal Expression Value Exprs Examples #three syntaxes same result pl$lit(5) + 10 pl$lit(5) + pl$lit(10) pl$lit(5)$add(pl$lit(10)) +pl$lit(5) #unary use resolves to same as pl$lit(5)","title":"`Expr_add`"},{"location":"reference/Expr_add/#expr_add","text":"Add","title":"Expr_add"},{"location":"reference/Expr_add/#description","text":"Addition","title":"Description"},{"location":"reference/Expr_add/#usage","text":"Expr_add(other) list(list(\"+\"), list(\"Expr\"))(e1, e2)","title":"Usage"},{"location":"reference/Expr_add/#arguments","text":"Argument Description other literal or Robj which can become a literal e1 lhs Expr e2 rhs Expr or anything which can become a literal Expression","title":"Arguments"},{"location":"reference/Expr_add/#value","text":"Exprs","title":"Value"},{"location":"reference/Expr_add/#examples","text":"#three syntaxes same result pl$lit(5) + 10 pl$lit(5) + pl$lit(10) pl$lit(5)$add(pl$lit(10)) +pl$lit(5) #unary use resolves to same as pl$lit(5)","title":"Examples"},{"location":"reference/Expr_agg_groups/","text":"Expr_agg_groups aggregate groups Description Get the group indexes of the group by operation. Should be used in aggregation context only. Format An object of class character of length 1. Usage Expr_agg_groups Value Exprs Examples df = pl$DataFrame(list( group = c(\"one\",\"one\",\"one\",\"two\",\"two\",\"two\"), value = c(94, 95, 96, 97, 97, 99) )) df$groupby(\"group\", maintain_order=TRUE)$agg(pl$col(\"value\")$agg_groups())","title":"`Expr_agg_groups`"},{"location":"reference/Expr_agg_groups/#expr_agg_groups","text":"aggregate groups","title":"Expr_agg_groups"},{"location":"reference/Expr_agg_groups/#description","text":"Get the group indexes of the group by operation. Should be used in aggregation context only.","title":"Description"},{"location":"reference/Expr_agg_groups/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_agg_groups/#usage","text":"Expr_agg_groups","title":"Usage"},{"location":"reference/Expr_agg_groups/#value","text":"Exprs","title":"Value"},{"location":"reference/Expr_agg_groups/#examples","text":"df = pl$DataFrame(list( group = c(\"one\",\"one\",\"one\",\"two\",\"two\",\"two\"), value = c(94, 95, 96, 97, 97, 99) )) df$groupby(\"group\", maintain_order=TRUE)$agg(pl$col(\"value\")$agg_groups())","title":"Examples"},{"location":"reference/Expr_alias/","text":"Expr_alias Rename Expr output Description Rename the output of an expression. Format An object of class character of length 1. Usage Expr_alias(name) Arguments Argument Description name string new name of output Value Expr Examples pl$col(\"bob\")$alias(\"alice\")","title":"`Expr_alias`"},{"location":"reference/Expr_alias/#expr_alias","text":"Rename Expr output","title":"Expr_alias"},{"location":"reference/Expr_alias/#description","text":"Rename the output of an expression.","title":"Description"},{"location":"reference/Expr_alias/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_alias/#usage","text":"Expr_alias(name)","title":"Usage"},{"location":"reference/Expr_alias/#arguments","text":"Argument Description name string new name of output","title":"Arguments"},{"location":"reference/Expr_alias/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_alias/#examples","text":"pl$col(\"bob\")$alias(\"alice\")","title":"Examples"},{"location":"reference/Expr_all/","text":"Expr_all All, is true Description Check if all boolean values in a Boolean column are TRUE . This method is an expression - not to be confused with pl$all which is a function to select all columns. Format An object of class character of length 1. Usage Expr_all Details last all() in example is this Expr method, the first pl$all() refers to \"all-columns\" and is an expression constructor Value Boolean literal Examples pl$DataFrame( all=c(TRUE,TRUE), any=c(TRUE,FALSE), none=c(FALSE,FALSE) )$select( pl$all()$all() )","title":"`Expr_all`"},{"location":"reference/Expr_all/#expr_all","text":"All, is true","title":"Expr_all"},{"location":"reference/Expr_all/#description","text":"Check if all boolean values in a Boolean column are TRUE . This method is an expression - not to be confused with pl$all which is a function to select all columns.","title":"Description"},{"location":"reference/Expr_all/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_all/#usage","text":"Expr_all","title":"Usage"},{"location":"reference/Expr_all/#details","text":"last all() in example is this Expr method, the first pl$all() refers to \"all-columns\" and is an expression constructor","title":"Details"},{"location":"reference/Expr_all/#value","text":"Boolean literal","title":"Value"},{"location":"reference/Expr_all/#examples","text":"pl$DataFrame( all=c(TRUE,TRUE), any=c(TRUE,FALSE), none=c(FALSE,FALSE) )$select( pl$all()$all() )","title":"Examples"},{"location":"reference/Expr_and/","text":"Expr_and And Description combine to boolean exprresions with AND Format An object of class character of length 1. Usage Expr_and(other) Arguments Argument Description other literal or Robj which can become a literal Value Expr Examples pl$lit(TRUE) & TRUE pl$lit(TRUE)$and(pl$lit(TRUE))","title":"`Expr_and`"},{"location":"reference/Expr_and/#expr_and","text":"And","title":"Expr_and"},{"location":"reference/Expr_and/#description","text":"combine to boolean exprresions with AND","title":"Description"},{"location":"reference/Expr_and/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_and/#usage","text":"Expr_and(other)","title":"Usage"},{"location":"reference/Expr_and/#arguments","text":"Argument Description other literal or Robj which can become a literal","title":"Arguments"},{"location":"reference/Expr_and/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_and/#examples","text":"pl$lit(TRUE) & TRUE pl$lit(TRUE)$and(pl$lit(TRUE))","title":"Examples"},{"location":"reference/Expr_any/","text":"Expr_any Any (is true) Description Check if any boolean value in a Boolean column is TRUE . Format An object of class character of length 1. Usage Expr_any Value Boolean literal Examples pl$DataFrame( all=c(TRUE,TRUE), any=c(TRUE,FALSE), none=c(FALSE,FALSE) )$select( pl$all()$any() )","title":"`Expr_any`"},{"location":"reference/Expr_any/#expr_any","text":"Any (is true)","title":"Expr_any"},{"location":"reference/Expr_any/#description","text":"Check if any boolean value in a Boolean column is TRUE .","title":"Description"},{"location":"reference/Expr_any/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_any/#usage","text":"Expr_any","title":"Usage"},{"location":"reference/Expr_any/#value","text":"Boolean literal","title":"Value"},{"location":"reference/Expr_any/#examples","text":"pl$DataFrame( all=c(TRUE,TRUE), any=c(TRUE,FALSE), none=c(FALSE,FALSE) )$select( pl$all()$any() )","title":"Examples"},{"location":"reference/Expr_append/","text":"Expr_append Append expressions Description This is done by adding the chunks of other to this output . Format a method Usage Expr_append(other, upcast = TRUE) Arguments Argument Description other Expr, into Expr upcast bool upcast to, if any supertype of two non equal datatypes. Value Expr Examples #append bottom to to row df = pl$DataFrame(list(a = 1:3, b = c(NA_real_,4,5))) df$select(pl$all()$head(1)$append(pl$all()$tail(1))) #implicit upcast, when default = TRUE pl$DataFrame(list())$select(pl$lit(42)$append(42L)) pl$DataFrame(list())$select(pl$lit(42)$append(FALSE)) pl$DataFrame(list())$select(pl$lit(\"Bob\")$append(FALSE))","title":"`Expr_append`"},{"location":"reference/Expr_append/#expr_append","text":"Append expressions","title":"Expr_append"},{"location":"reference/Expr_append/#description","text":"This is done by adding the chunks of other to this output .","title":"Description"},{"location":"reference/Expr_append/#format","text":"a method","title":"Format"},{"location":"reference/Expr_append/#usage","text":"Expr_append(other, upcast = TRUE)","title":"Usage"},{"location":"reference/Expr_append/#arguments","text":"Argument Description other Expr, into Expr upcast bool upcast to, if any supertype of two non equal datatypes.","title":"Arguments"},{"location":"reference/Expr_append/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_append/#examples","text":"#append bottom to to row df = pl$DataFrame(list(a = 1:3, b = c(NA_real_,4,5))) df$select(pl$all()$head(1)$append(pl$all()$tail(1))) #implicit upcast, when default = TRUE pl$DataFrame(list())$select(pl$lit(42)$append(42L)) pl$DataFrame(list())$select(pl$lit(42)$append(FALSE)) pl$DataFrame(list())$select(pl$lit(\"Bob\")$append(FALSE))","title":"Examples"},{"location":"reference/Expr_apply/","text":"Expr_apply Expr_apply Description Apply a custom/user-defined function (UDF) in a GroupBy or Projection context. Depending on the context it has the following behavior: -Selection Usage Expr_apply( f, return_type = NULL, strict_return_type = TRUE, allow_fail_eval = FALSE ) Arguments Argument Description f r function see details depending on context return_type NULL or one of pl$dtypes, the output datatype, NULL is the same as input. strict_return_type bool (default TRUE), error if not correct datatype returned from R, if FALSE will convert to a Polars Null and carry on. allow_fail_eval bool (default FALSE), if TRUE will not raise user function error but convert result to a polars Null and carry on. Details Apply a user function in a groupby or projection(select) context Depending on context the following behaviour: Projection/Selection: Expects an f to operate on R scalar values. Polars will convert each element into an R value and pass it to the function The output of the user function will be converted back into a polars type. Return type must match. See param return type. Apply in selection context should be avoided as a lapply() has half the overhead. Groupby Expects a user function f to take a Series and return a Series or Robj convertable to Series , eg. R vector. GroupBy context much faster if number groups are quite fewer than number of rows, as the iteration is only across the groups. The r user function could e.g. do vectorized operations and stay quite performant. use s$to_r() to convert input Series to an r vector or list. use s$to_r_vector and s$to_r_list() to force conversion to vector or list. Implementing logic using an R function is almost always significantly slower and more memory intensive than implementing the same logic using the native expression API because: - The native expression engine runs in Rust; functions run in R. - Use of R functions forces the DataFrame to be materialized in memory. - Polars-native expressions can be parallelised (R functions cannot*). - Polars-native expressions can be logically optimised (R functions cannot). Wherever possible you should strongly prefer the native expression API to achieve the best performance. Value Expr Examples #apply over groups - normal usage # s is a series of all values for one column within group, here Species e_all =pl$all() #perform groupby agg on all columns otherwise e.g. pl$col(\"Sepal.Length\") e_sum = e_all$apply(\\(s) sum(s$to_r()))$suffix(\"_sum\") e_head = e_all$apply(\\(s) head(s$to_r(),2))$suffix(\"_head\") pl$DataFrame(iris)$groupby(\"Species\")$agg(e_sum,e_head) # apply over single values (should be avoided as it takes ~2.5us overhead + R function exec time # on a 2015 MacBook Pro) x is an R scalar #perform on all Float64 columns, using pl$all requires user function can handle any input type e_all =pl$col(pl$dtypes$Float64) e_add10 = e_all$apply(\\(x) {x+10})$suffix(\"_sum\") #quite silly index into alphabet(letters) by ceil of float value #must set return_type as not the same as input e_letter = e_all$apply(\\(x) letters[ceiling(x)], return_type = pl$dtypes$Utf8)$suffix(\"_letter\") pl$DataFrame(iris)$select(e_add10,e_letter) ##timing \"slow\" apply in select /with_columns context, this makes apply n = 1000000L set.seed(1) df = pl$DataFrame(list( a = 1:n, b = sample(letters,n,replace=TRUE) )) print(\"apply over 1 million values takes ~2.5 sec on 2015 MacBook Pro\") system.time({ rdf = df$with_columns( pl$col(\"a\")$apply(\\(x) { x*2L })$alias(\"bob\") ) }) print(\"R lapply 1 million values take ~1sec on 2015 MacBook Pro\") system.time({ lapply(df$get_column(\"a\")$to_r(),\\(x) x*2L ) }) print(\"using polars syntax takes ~1ms\") system.time({ (df$get_column(\"a\") * 2L) }) print(\"using R vector syntax takes ~4ms\") r_vec = df$get_column(\"a\")$to_r() system.time({ r_vec * 2L })","title":"`Expr_apply`"},{"location":"reference/Expr_apply/#expr_apply","text":"Expr_apply","title":"Expr_apply"},{"location":"reference/Expr_apply/#description","text":"Apply a custom/user-defined function (UDF) in a GroupBy or Projection context. Depending on the context it has the following behavior: -Selection","title":"Description"},{"location":"reference/Expr_apply/#usage","text":"Expr_apply( f, return_type = NULL, strict_return_type = TRUE, allow_fail_eval = FALSE )","title":"Usage"},{"location":"reference/Expr_apply/#arguments","text":"Argument Description f r function see details depending on context return_type NULL or one of pl$dtypes, the output datatype, NULL is the same as input. strict_return_type bool (default TRUE), error if not correct datatype returned from R, if FALSE will convert to a Polars Null and carry on. allow_fail_eval bool (default FALSE), if TRUE will not raise user function error but convert result to a polars Null and carry on.","title":"Arguments"},{"location":"reference/Expr_apply/#details","text":"Apply a user function in a groupby or projection(select) context Depending on context the following behaviour: Projection/Selection: Expects an f to operate on R scalar values. Polars will convert each element into an R value and pass it to the function The output of the user function will be converted back into a polars type. Return type must match. See param return type. Apply in selection context should be avoided as a lapply() has half the overhead. Groupby Expects a user function f to take a Series and return a Series or Robj convertable to Series , eg. R vector. GroupBy context much faster if number groups are quite fewer than number of rows, as the iteration is only across the groups. The r user function could e.g. do vectorized operations and stay quite performant. use s$to_r() to convert input Series to an r vector or list. use s$to_r_vector and s$to_r_list() to force conversion to vector or list. Implementing logic using an R function is almost always significantly slower and more memory intensive than implementing the same logic using the native expression API because: - The native expression engine runs in Rust; functions run in R. - Use of R functions forces the DataFrame to be materialized in memory. - Polars-native expressions can be parallelised (R functions cannot*). - Polars-native expressions can be logically optimised (R functions cannot). Wherever possible you should strongly prefer the native expression API to achieve the best performance.","title":"Details"},{"location":"reference/Expr_apply/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_apply/#examples","text":"#apply over groups - normal usage # s is a series of all values for one column within group, here Species e_all =pl$all() #perform groupby agg on all columns otherwise e.g. pl$col(\"Sepal.Length\") e_sum = e_all$apply(\\(s) sum(s$to_r()))$suffix(\"_sum\") e_head = e_all$apply(\\(s) head(s$to_r(),2))$suffix(\"_head\") pl$DataFrame(iris)$groupby(\"Species\")$agg(e_sum,e_head) # apply over single values (should be avoided as it takes ~2.5us overhead + R function exec time # on a 2015 MacBook Pro) x is an R scalar #perform on all Float64 columns, using pl$all requires user function can handle any input type e_all =pl$col(pl$dtypes$Float64) e_add10 = e_all$apply(\\(x) {x+10})$suffix(\"_sum\") #quite silly index into alphabet(letters) by ceil of float value #must set return_type as not the same as input e_letter = e_all$apply(\\(x) letters[ceiling(x)], return_type = pl$dtypes$Utf8)$suffix(\"_letter\") pl$DataFrame(iris)$select(e_add10,e_letter) ##timing \"slow\" apply in select /with_columns context, this makes apply n = 1000000L set.seed(1) df = pl$DataFrame(list( a = 1:n, b = sample(letters,n,replace=TRUE) )) print(\"apply over 1 million values takes ~2.5 sec on 2015 MacBook Pro\") system.time({ rdf = df$with_columns( pl$col(\"a\")$apply(\\(x) { x*2L })$alias(\"bob\") ) }) print(\"R lapply 1 million values take ~1sec on 2015 MacBook Pro\") system.time({ lapply(df$get_column(\"a\")$to_r(),\\(x) x*2L ) }) print(\"using polars syntax takes ~1ms\") system.time({ (df$get_column(\"a\") * 2L) }) print(\"using R vector syntax takes ~4ms\") r_vec = df$get_column(\"a\")$to_r() system.time({ r_vec * 2L })","title":"Examples"},{"location":"reference/Expr_arccos/","text":"Expr_arccos Arccos Description Compute the element-wise value for the inverse cosine. Format Method Usage Expr_arccos Details Evaluated Series has dtype Float64 Value Expr Examples pl$DataFrame(a=c(-1,cos(0.5),0,1,NA_real_))$select(pl$col(\"a\")$arccos())","title":"`Expr_arccos`"},{"location":"reference/Expr_arccos/#expr_arccos","text":"Arccos","title":"Expr_arccos"},{"location":"reference/Expr_arccos/#description","text":"Compute the element-wise value for the inverse cosine.","title":"Description"},{"location":"reference/Expr_arccos/#format","text":"Method","title":"Format"},{"location":"reference/Expr_arccos/#usage","text":"Expr_arccos","title":"Usage"},{"location":"reference/Expr_arccos/#details","text":"Evaluated Series has dtype Float64","title":"Details"},{"location":"reference/Expr_arccos/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_arccos/#examples","text":"pl$DataFrame(a=c(-1,cos(0.5),0,1,NA_real_))$select(pl$col(\"a\")$arccos())","title":"Examples"},{"location":"reference/Expr_arccosh/","text":"Expr_arccosh Arccosh Description Compute the element-wise value for the inverse hyperbolic cosine. Format Method Usage Expr_arccosh Details Evaluated Series has dtype Float64 Value Expr Examples pl$DataFrame(a=c(-1,cosh(0.5),0,1,NA_real_))$select(pl$col(\"a\")$arccosh())","title":"`Expr_arccosh`"},{"location":"reference/Expr_arccosh/#expr_arccosh","text":"Arccosh","title":"Expr_arccosh"},{"location":"reference/Expr_arccosh/#description","text":"Compute the element-wise value for the inverse hyperbolic cosine.","title":"Description"},{"location":"reference/Expr_arccosh/#format","text":"Method","title":"Format"},{"location":"reference/Expr_arccosh/#usage","text":"Expr_arccosh","title":"Usage"},{"location":"reference/Expr_arccosh/#details","text":"Evaluated Series has dtype Float64","title":"Details"},{"location":"reference/Expr_arccosh/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_arccosh/#examples","text":"pl$DataFrame(a=c(-1,cosh(0.5),0,1,NA_real_))$select(pl$col(\"a\")$arccosh())","title":"Examples"},{"location":"reference/Expr_arcsin/","text":"Expr_arcsin Arcsin Description Compute the element-wise value for the inverse sine. Format Method Usage Expr_arcsin Details Evaluated Series has dtype Float64 Value Expr Examples pl$DataFrame(a=c(-1,sin(0.5),0,1,NA_real_))$select(pl$col(\"a\")$arcsin())","title":"`Expr_arcsin`"},{"location":"reference/Expr_arcsin/#expr_arcsin","text":"Arcsin","title":"Expr_arcsin"},{"location":"reference/Expr_arcsin/#description","text":"Compute the element-wise value for the inverse sine.","title":"Description"},{"location":"reference/Expr_arcsin/#format","text":"Method","title":"Format"},{"location":"reference/Expr_arcsin/#usage","text":"Expr_arcsin","title":"Usage"},{"location":"reference/Expr_arcsin/#details","text":"Evaluated Series has dtype Float64","title":"Details"},{"location":"reference/Expr_arcsin/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_arcsin/#examples","text":"pl$DataFrame(a=c(-1,sin(0.5),0,1,NA_real_))$select(pl$col(\"a\")$arcsin())","title":"Examples"},{"location":"reference/Expr_arcsinh/","text":"Expr_arcsinh Arcsinh Description Compute the element-wise value for the inverse hyperbolic sine. Format Method Usage Expr_arcsinh Details Evaluated Series has dtype Float64 Value Expr Examples pl$DataFrame(a=c(-1,sinh(0.5),0,1,NA_real_))$select(pl$col(\"a\")$arcsinh())","title":"`Expr_arcsinh`"},{"location":"reference/Expr_arcsinh/#expr_arcsinh","text":"Arcsinh","title":"Expr_arcsinh"},{"location":"reference/Expr_arcsinh/#description","text":"Compute the element-wise value for the inverse hyperbolic sine.","title":"Description"},{"location":"reference/Expr_arcsinh/#format","text":"Method","title":"Format"},{"location":"reference/Expr_arcsinh/#usage","text":"Expr_arcsinh","title":"Usage"},{"location":"reference/Expr_arcsinh/#details","text":"Evaluated Series has dtype Float64","title":"Details"},{"location":"reference/Expr_arcsinh/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_arcsinh/#examples","text":"pl$DataFrame(a=c(-1,sinh(0.5),0,1,NA_real_))$select(pl$col(\"a\")$arcsinh())","title":"Examples"},{"location":"reference/Expr_arctan/","text":"Expr_arctan Arctan Description Compute the element-wise value for the inverse tangent. Format Method Usage Expr_arctan Details Evaluated Series has dtype Float64 Value Expr Examples pl$DataFrame(a=c(-1,tan(0.5),0,1,NA_real_))$select(pl$col(\"a\")$arctan())","title":"`Expr_arctan`"},{"location":"reference/Expr_arctan/#expr_arctan","text":"Arctan","title":"Expr_arctan"},{"location":"reference/Expr_arctan/#description","text":"Compute the element-wise value for the inverse tangent.","title":"Description"},{"location":"reference/Expr_arctan/#format","text":"Method","title":"Format"},{"location":"reference/Expr_arctan/#usage","text":"Expr_arctan","title":"Usage"},{"location":"reference/Expr_arctan/#details","text":"Evaluated Series has dtype Float64","title":"Details"},{"location":"reference/Expr_arctan/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_arctan/#examples","text":"pl$DataFrame(a=c(-1,tan(0.5),0,1,NA_real_))$select(pl$col(\"a\")$arctan())","title":"Examples"},{"location":"reference/Expr_arctanh/","text":"Expr_arctanh Arctanh Description Compute the element-wise value for the inverse hyperbolic tangent. Format Method Usage Expr_arctanh Details Evaluated Series has dtype Float64 Value Expr Examples pl$DataFrame(a=c(-1,tanh(0.5),0,1,NA_real_))$select(pl$col(\"a\")$arctanh())","title":"`Expr_arctanh`"},{"location":"reference/Expr_arctanh/#expr_arctanh","text":"Arctanh","title":"Expr_arctanh"},{"location":"reference/Expr_arctanh/#description","text":"Compute the element-wise value for the inverse hyperbolic tangent.","title":"Description"},{"location":"reference/Expr_arctanh/#format","text":"Method","title":"Format"},{"location":"reference/Expr_arctanh/#usage","text":"Expr_arctanh","title":"Usage"},{"location":"reference/Expr_arctanh/#details","text":"Evaluated Series has dtype Float64","title":"Details"},{"location":"reference/Expr_arctanh/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_arctanh/#examples","text":"pl$DataFrame(a=c(-1,tanh(0.5),0,1,NA_real_))$select(pl$col(\"a\")$arctanh())","title":"Examples"},{"location":"reference/Expr_arg_max/","text":"Expr_arg_max Index of min value Description Get the index of the minimal value. Format a method Usage Expr_arg_max Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples pl$DataFrame(list( a = c(6, 1, 0, NA, Inf, NaN) ))$select(pl$col(\"a\")$arg_max())","title":"`Expr_arg_max`"},{"location":"reference/Expr_arg_max/#expr_arg_max","text":"Index of min value","title":"Expr_arg_max"},{"location":"reference/Expr_arg_max/#description","text":"Get the index of the minimal value.","title":"Description"},{"location":"reference/Expr_arg_max/#format","text":"a method","title":"Format"},{"location":"reference/Expr_arg_max/#usage","text":"Expr_arg_max","title":"Usage"},{"location":"reference/Expr_arg_max/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_arg_max/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_arg_max/#examples","text":"pl$DataFrame(list( a = c(6, 1, 0, NA, Inf, NaN) ))$select(pl$col(\"a\")$arg_max())","title":"Examples"},{"location":"reference/Expr_arg_min/","text":"Expr_arg_min Index of min value Description Get the index of the minimal value. Format a method Usage Expr_arg_min Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples pl$DataFrame(list( a = c(6, 1, 0, NA, Inf, NaN) ))$select(pl$col(\"a\")$arg_min())","title":"`Expr_arg_min`"},{"location":"reference/Expr_arg_min/#expr_arg_min","text":"Index of min value","title":"Expr_arg_min"},{"location":"reference/Expr_arg_min/#description","text":"Get the index of the minimal value.","title":"Description"},{"location":"reference/Expr_arg_min/#format","text":"a method","title":"Format"},{"location":"reference/Expr_arg_min/#usage","text":"Expr_arg_min","title":"Usage"},{"location":"reference/Expr_arg_min/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_arg_min/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_arg_min/#examples","text":"pl$DataFrame(list( a = c(6, 1, 0, NA, Inf, NaN) ))$select(pl$col(\"a\")$arg_min())","title":"Examples"},{"location":"reference/Expr_arg_sort/","text":"Expr_arg_sort Index of a sort Description Get the index values that would sort this column. If 'reverse=True` the smallest elements will be given. argsort is a alias for arg_sort Format a method Usage Expr_arg_sort(reverse = FALSE, nulls_last = FALSE) Expr_argsort(reverse = FALSE, nulls_last = FALSE) Arguments Argument Description reverse bool default FALSE, reverses sort nulls_last bool, default FALSE, place Nulls last Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples pl$DataFrame(list( a = c(6, 1, 0, NA, Inf, NaN) ))$select(pl$col(\"a\")$arg_sort())","title":"`Expr_arg_sort`"},{"location":"reference/Expr_arg_sort/#expr_arg_sort","text":"Index of a sort","title":"Expr_arg_sort"},{"location":"reference/Expr_arg_sort/#description","text":"Get the index values that would sort this column. If 'reverse=True` the smallest elements will be given. argsort is a alias for arg_sort","title":"Description"},{"location":"reference/Expr_arg_sort/#format","text":"a method","title":"Format"},{"location":"reference/Expr_arg_sort/#usage","text":"Expr_arg_sort(reverse = FALSE, nulls_last = FALSE) Expr_argsort(reverse = FALSE, nulls_last = FALSE)","title":"Usage"},{"location":"reference/Expr_arg_sort/#arguments","text":"Argument Description reverse bool default FALSE, reverses sort nulls_last bool, default FALSE, place Nulls last","title":"Arguments"},{"location":"reference/Expr_arg_sort/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_arg_sort/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_arg_sort/#examples","text":"pl$DataFrame(list( a = c(6, 1, 0, NA, Inf, NaN) ))$select(pl$col(\"a\")$arg_sort())","title":"Examples"},{"location":"reference/Expr_arg_unique/","text":"Expr_arg_unique Index of First Unique Value. Description Index of First Unique Value. Format An object of class character of length 1. Usage Expr_arg_unique Value Expr Examples pl$select(pl$lit(c(1:2,1:3))$arg_unique())","title":"`Expr_arg_unique`"},{"location":"reference/Expr_arg_unique/#expr_arg_unique","text":"Index of First Unique Value.","title":"Expr_arg_unique"},{"location":"reference/Expr_arg_unique/#description","text":"Index of First Unique Value.","title":"Description"},{"location":"reference/Expr_arg_unique/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_arg_unique/#usage","text":"Expr_arg_unique","title":"Usage"},{"location":"reference/Expr_arg_unique/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_arg_unique/#examples","text":"pl$select(pl$lit(c(1:2,1:3))$arg_unique())","title":"Examples"},{"location":"reference/Expr_arr/","text":"Expr_arr arr: list related methods Description Create an object namespace of all list related methods. See the individual method pages for full details Usage Expr_arr() Value Expr Examples df_with_list = pl$DataFrame( group = c(1,1,2,2,3), value = c(1:5) )$groupby( \"group\",maintain_order = TRUE )$agg( pl$col(\"value\") * 3L ) df_with_list$with_column( pl$col(\"value\")$arr$lengths()$alias(\"group_size\") )","title":"`Expr_arr`"},{"location":"reference/Expr_arr/#expr_arr","text":"arr: list related methods","title":"Expr_arr"},{"location":"reference/Expr_arr/#description","text":"Create an object namespace of all list related methods. See the individual method pages for full details","title":"Description"},{"location":"reference/Expr_arr/#usage","text":"Expr_arr()","title":"Usage"},{"location":"reference/Expr_arr/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_arr/#examples","text":"df_with_list = pl$DataFrame( group = c(1,1,2,2,3), value = c(1:5) )$groupby( \"group\",maintain_order = TRUE )$agg( pl$col(\"value\") * 3L ) df_with_list$with_column( pl$col(\"value\")$arr$lengths()$alias(\"group_size\") )","title":"Examples"},{"location":"reference/Expr_backward_fill/","text":"Expr_backward_fill Fill Nulls Backward Description Fill missing values with the next to be seen values. Format a method Usage Expr_backward_fill(limit = NULL) Arguments Argument Description limit Expr or Into The number of consecutive null values to backward fill. Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples l = list(a=c(1L,rep(NA_integer_,3L),10)) pl$DataFrame(l)$select( pl$col(\"a\")$backward_fill()$alias(\"bf_null\"), pl$col(\"a\")$backward_fill(limit = 0)$alias(\"bf_l0\"), pl$col(\"a\")$backward_fill(limit = 1)$alias(\"bf_l1\") )$to_list()","title":"`Expr_backward_fill`"},{"location":"reference/Expr_backward_fill/#expr_backward_fill","text":"Fill Nulls Backward","title":"Expr_backward_fill"},{"location":"reference/Expr_backward_fill/#description","text":"Fill missing values with the next to be seen values.","title":"Description"},{"location":"reference/Expr_backward_fill/#format","text":"a method","title":"Format"},{"location":"reference/Expr_backward_fill/#usage","text":"Expr_backward_fill(limit = NULL)","title":"Usage"},{"location":"reference/Expr_backward_fill/#arguments","text":"Argument Description limit Expr or Into The number of consecutive null values to backward fill.","title":"Arguments"},{"location":"reference/Expr_backward_fill/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_backward_fill/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_backward_fill/#examples","text":"l = list(a=c(1L,rep(NA_integer_,3L),10)) pl$DataFrame(l)$select( pl$col(\"a\")$backward_fill()$alias(\"bf_null\"), pl$col(\"a\")$backward_fill(limit = 0)$alias(\"bf_l0\"), pl$col(\"a\")$backward_fill(limit = 1)$alias(\"bf_l1\") )$to_list()","title":"Examples"},{"location":"reference/Expr_bin/","text":"Expr_bin bin: binary related methods Description Create an object namespace of all binary related methods. See the individual method pages for full details Usage Expr_bin() Value Expr Examples #missing","title":"`Expr_bin`"},{"location":"reference/Expr_bin/#expr_bin","text":"bin: binary related methods","title":"Expr_bin"},{"location":"reference/Expr_bin/#description","text":"Create an object namespace of all binary related methods. See the individual method pages for full details","title":"Description"},{"location":"reference/Expr_bin/#usage","text":"Expr_bin()","title":"Usage"},{"location":"reference/Expr_bin/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_bin/#examples","text":"#missing","title":"Examples"},{"location":"reference/Expr_cast/","text":"Expr_cast Cast between DataType(s) Description Cast between DataType(s) Usage Expr_cast(dtype, strict = TRUE) Arguments Argument Description dtype DataType to cast to. strict bool if true an error will be thrown if cast failed at resolve time. Value Expr Examples df = pl$DataFrame(list(a = 1:3, b = 1:3)) df$with_columns( pl$col(\"a\")$cast(pl$dtypes$Float64, TRUE), pl$col(\"a\")$cast(pl$dtypes$Int32, TRUE) )","title":"`Expr_cast`"},{"location":"reference/Expr_cast/#expr_cast","text":"Cast between DataType(s)","title":"Expr_cast"},{"location":"reference/Expr_cast/#description","text":"Cast between DataType(s)","title":"Description"},{"location":"reference/Expr_cast/#usage","text":"Expr_cast(dtype, strict = TRUE)","title":"Usage"},{"location":"reference/Expr_cast/#arguments","text":"Argument Description dtype DataType to cast to. strict bool if true an error will be thrown if cast failed at resolve time.","title":"Arguments"},{"location":"reference/Expr_cast/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_cast/#examples","text":"df = pl$DataFrame(list(a = 1:3, b = 1:3)) df$with_columns( pl$col(\"a\")$cast(pl$dtypes$Float64, TRUE), pl$col(\"a\")$cast(pl$dtypes$Int32, TRUE) )","title":"Examples"},{"location":"reference/Expr_cat/","text":"Expr_cat cat: related methods Description Create an object namespace of all cat related methods. See the individual method pages for full details Usage Expr_cat() Value Expr Examples #missing","title":"`Expr_cat`"},{"location":"reference/Expr_cat/#expr_cat","text":"cat: related methods","title":"Expr_cat"},{"location":"reference/Expr_cat/#description","text":"Create an object namespace of all cat related methods. See the individual method pages for full details","title":"Description"},{"location":"reference/Expr_cat/#usage","text":"Expr_cat()","title":"Usage"},{"location":"reference/Expr_cat/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_cat/#examples","text":"#missing","title":"Examples"},{"location":"reference/Expr_ceil/","text":"Expr_ceil Ceiling Description Rounds up to the nearest integer value. Only works on floating point Series. Format a method Usage Expr_ceil Value Expr Examples pl$DataFrame(list( a = c(0.33, 0.5, 1.02, 1.5, NaN , NA, Inf, -Inf) ))$select( pl$col(\"a\")$ceil() )","title":"`Expr_ceil`"},{"location":"reference/Expr_ceil/#expr_ceil","text":"Ceiling","title":"Expr_ceil"},{"location":"reference/Expr_ceil/#description","text":"Rounds up to the nearest integer value. Only works on floating point Series.","title":"Description"},{"location":"reference/Expr_ceil/#format","text":"a method","title":"Format"},{"location":"reference/Expr_ceil/#usage","text":"Expr_ceil","title":"Usage"},{"location":"reference/Expr_ceil/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_ceil/#examples","text":"pl$DataFrame(list( a = c(0.33, 0.5, 1.02, 1.5, NaN , NA, Inf, -Inf) ))$select( pl$col(\"a\")$ceil() )","title":"Examples"},{"location":"reference/Expr_clip/","text":"Expr_clip Clip Description Clip (limit) the values in an array to a min and max boundary. Usage Expr_clip(min, max) Expr_clip_min(min) Expr_clip_max(max) Arguments Argument Description min Minimum Value, ints and floats or any literal expression of ints and floats max Maximum Value, ints and floats or any literal expression of ints and floats Details Only works for numerical types. If you want to clip other dtypes, consider writing a \"when, then, otherwise\" expression. See :func: when for more information. Value Expr Examples df = pl$DataFrame(foo = c(-50L, 5L, NA_integer_,50L)) df$with_column(pl$col(\"foo\")$clip(1L,10L)$alias(\"foo_clipped\")) df$with_column(pl$col(\"foo\")$clip_min(1L)$alias(\"foo_clipped\")) df$with_column(pl$col(\"foo\")$clip_max(10L)$alias(\"foo_clipped\"))","title":"`Expr_clip`"},{"location":"reference/Expr_clip/#expr_clip","text":"Clip","title":"Expr_clip"},{"location":"reference/Expr_clip/#description","text":"Clip (limit) the values in an array to a min and max boundary.","title":"Description"},{"location":"reference/Expr_clip/#usage","text":"Expr_clip(min, max) Expr_clip_min(min) Expr_clip_max(max)","title":"Usage"},{"location":"reference/Expr_clip/#arguments","text":"Argument Description min Minimum Value, ints and floats or any literal expression of ints and floats max Maximum Value, ints and floats or any literal expression of ints and floats","title":"Arguments"},{"location":"reference/Expr_clip/#details","text":"Only works for numerical types. If you want to clip other dtypes, consider writing a \"when, then, otherwise\" expression. See :func: when for more information.","title":"Details"},{"location":"reference/Expr_clip/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_clip/#examples","text":"df = pl$DataFrame(foo = c(-50L, 5L, NA_integer_,50L)) df$with_column(pl$col(\"foo\")$clip(1L,10L)$alias(\"foo_clipped\")) df$with_column(pl$col(\"foo\")$clip_min(1L)$alias(\"foo_clipped\")) df$with_column(pl$col(\"foo\")$clip_max(10L)$alias(\"foo_clipped\"))","title":"Examples"},{"location":"reference/Expr_cos/","text":"Expr_cos Cos Description Compute the element-wise value for the cosine. Format Method Usage Expr_cos Details Evaluated Series has dtype Float64 Value Expr Examples pl$DataFrame(a=c(0,pi/2,pi,NA_real_))$select(pl$col(\"a\")$cos())","title":"`Expr_cos`"},{"location":"reference/Expr_cos/#expr_cos","text":"Cos","title":"Expr_cos"},{"location":"reference/Expr_cos/#description","text":"Compute the element-wise value for the cosine.","title":"Description"},{"location":"reference/Expr_cos/#format","text":"Method","title":"Format"},{"location":"reference/Expr_cos/#usage","text":"Expr_cos","title":"Usage"},{"location":"reference/Expr_cos/#details","text":"Evaluated Series has dtype Float64","title":"Details"},{"location":"reference/Expr_cos/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_cos/#examples","text":"pl$DataFrame(a=c(0,pi/2,pi,NA_real_))$select(pl$col(\"a\")$cos())","title":"Examples"},{"location":"reference/Expr_cosh/","text":"Expr_cosh Cosh Description Compute the element-wise value for the hyperbolic cosine. Format Method Usage Expr_cosh Details Evaluated Series has dtype Float64 Value Expr Examples pl$DataFrame(a=c(-1,acosh(1.5),0,1,NA_real_))$select(pl$col(\"a\")$cosh())","title":"`Expr_cosh`"},{"location":"reference/Expr_cosh/#expr_cosh","text":"Cosh","title":"Expr_cosh"},{"location":"reference/Expr_cosh/#description","text":"Compute the element-wise value for the hyperbolic cosine.","title":"Description"},{"location":"reference/Expr_cosh/#format","text":"Method","title":"Format"},{"location":"reference/Expr_cosh/#usage","text":"Expr_cosh","title":"Usage"},{"location":"reference/Expr_cosh/#details","text":"Evaluated Series has dtype Float64","title":"Details"},{"location":"reference/Expr_cosh/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_cosh/#examples","text":"pl$DataFrame(a=c(-1,acosh(1.5),0,1,NA_real_))$select(pl$col(\"a\")$cosh())","title":"Examples"},{"location":"reference/Expr_count/","text":"Expr_count Count values (len is a alias) Description Count the number of values in this expression. Similar to R length() Format An object of class character of length 1. An object of class character of length 1. Usage Expr_count Expr_len Value Expr Expr Examples pl$DataFrame( all=c(TRUE,TRUE), any=c(TRUE,FALSE), none=c(FALSE,FALSE) )$select( pl$all()$count() ) pl$DataFrame( all=c(TRUE,TRUE), any=c(TRUE,FALSE), none=c(FALSE,FALSE) )$select( pl$all()$len(), pl$col(\"all\")$first()$len()$alias(\"all_first\") )","title":"`Expr_count`"},{"location":"reference/Expr_count/#expr_count","text":"Count values (len is a alias)","title":"Expr_count"},{"location":"reference/Expr_count/#description","text":"Count the number of values in this expression. Similar to R length()","title":"Description"},{"location":"reference/Expr_count/#format","text":"An object of class character of length 1. An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_count/#usage","text":"Expr_count Expr_len","title":"Usage"},{"location":"reference/Expr_count/#value","text":"Expr Expr","title":"Value"},{"location":"reference/Expr_count/#examples","text":"pl$DataFrame( all=c(TRUE,TRUE), any=c(TRUE,FALSE), none=c(FALSE,FALSE) )$select( pl$all()$count() ) pl$DataFrame( all=c(TRUE,TRUE), any=c(TRUE,FALSE), none=c(FALSE,FALSE) )$select( pl$all()$len(), pl$col(\"all\")$first()$len()$alias(\"all_first\") )","title":"Examples"},{"location":"reference/Expr_cumcount/","text":"Expr_cumcount Cumulative count Description Get an array with the cumulative count computed at every element. Counting from 0 to len Format a method Usage Expr_cumcount(reverse = FALSE) Arguments Argument Description reverse bool, default FALSE, if true roll over vector from back to forth Details Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues. cumcount does not seem to count within lists. Value Expr Examples pl$DataFrame(list(a=1:4))$select( pl$col(\"a\")$cumcount()$alias(\"cumcount\"), pl$col(\"a\")$cumcount(reverse=TRUE)$alias(\"cumcount_reversed\") )","title":"`Expr_cumcount`"},{"location":"reference/Expr_cumcount/#expr_cumcount","text":"Cumulative count","title":"Expr_cumcount"},{"location":"reference/Expr_cumcount/#description","text":"Get an array with the cumulative count computed at every element. Counting from 0 to len","title":"Description"},{"location":"reference/Expr_cumcount/#format","text":"a method","title":"Format"},{"location":"reference/Expr_cumcount/#usage","text":"Expr_cumcount(reverse = FALSE)","title":"Usage"},{"location":"reference/Expr_cumcount/#arguments","text":"Argument Description reverse bool, default FALSE, if true roll over vector from back to forth","title":"Arguments"},{"location":"reference/Expr_cumcount/#details","text":"Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues. cumcount does not seem to count within lists.","title":"Details"},{"location":"reference/Expr_cumcount/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_cumcount/#examples","text":"pl$DataFrame(list(a=1:4))$select( pl$col(\"a\")$cumcount()$alias(\"cumcount\"), pl$col(\"a\")$cumcount(reverse=TRUE)$alias(\"cumcount_reversed\") )","title":"Examples"},{"location":"reference/Expr_cummin/","text":"Expr_cummin Cumulative minimum Description Get an array with the cumulative min computed at every element. Get an array with the cumulative max computed at every element. Format a method a method Usage Expr_cummin(reverse = FALSE) Expr_cummax(reverse = FALSE) Arguments Argument Description reverse bool, default FALSE, if true roll over vector from back to forth Details Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues. See Inf,NaN,NULL,Null/NA translations here docs_translations Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues. See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Expr Examples pl$DataFrame(list(a=1:4))$select( pl$col(\"a\")$cummin()$alias(\"cummin\"), pl$col(\"a\")$cummin(reverse=TRUE)$alias(\"cummin_reversed\") ) pl$DataFrame(list(a=1:4))$select( pl$col(\"a\")$cummax()$alias(\"cummux\"), pl$col(\"a\")$cummax(reverse=TRUE)$alias(\"cummax_reversed\") )","title":"`Expr_cummin`"},{"location":"reference/Expr_cummin/#expr_cummin","text":"Cumulative minimum","title":"Expr_cummin"},{"location":"reference/Expr_cummin/#description","text":"Get an array with the cumulative min computed at every element. Get an array with the cumulative max computed at every element.","title":"Description"},{"location":"reference/Expr_cummin/#format","text":"a method a method","title":"Format"},{"location":"reference/Expr_cummin/#usage","text":"Expr_cummin(reverse = FALSE) Expr_cummax(reverse = FALSE)","title":"Usage"},{"location":"reference/Expr_cummin/#arguments","text":"Argument Description reverse bool, default FALSE, if true roll over vector from back to forth","title":"Arguments"},{"location":"reference/Expr_cummin/#details","text":"Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues. See Inf,NaN,NULL,Null/NA translations here docs_translations Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues. See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_cummin/#value","text":"Expr Expr","title":"Value"},{"location":"reference/Expr_cummin/#examples","text":"pl$DataFrame(list(a=1:4))$select( pl$col(\"a\")$cummin()$alias(\"cummin\"), pl$col(\"a\")$cummin(reverse=TRUE)$alias(\"cummin_reversed\") ) pl$DataFrame(list(a=1:4))$select( pl$col(\"a\")$cummax()$alias(\"cummux\"), pl$col(\"a\")$cummax(reverse=TRUE)$alias(\"cummax_reversed\") )","title":"Examples"},{"location":"reference/Expr_cumprod/","text":"Expr_cumprod Cumulative product Description Get an array with the cumulative product computed at every element. Format a method Usage Expr_cumprod(reverse = FALSE) Arguments Argument Description reverse bool, default FALSE, if true roll over vector from back to forth Details Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues. Value Expr Examples pl$DataFrame(list(a=1:4))$select( pl$col(\"a\")$cumprod()$alias(\"cumprod\"), pl$col(\"a\")$cumprod(reverse=TRUE)$alias(\"cumprod_reversed\") )","title":"`Expr_cumprod`"},{"location":"reference/Expr_cumprod/#expr_cumprod","text":"Cumulative product","title":"Expr_cumprod"},{"location":"reference/Expr_cumprod/#description","text":"Get an array with the cumulative product computed at every element.","title":"Description"},{"location":"reference/Expr_cumprod/#format","text":"a method","title":"Format"},{"location":"reference/Expr_cumprod/#usage","text":"Expr_cumprod(reverse = FALSE)","title":"Usage"},{"location":"reference/Expr_cumprod/#arguments","text":"Argument Description reverse bool, default FALSE, if true roll over vector from back to forth","title":"Arguments"},{"location":"reference/Expr_cumprod/#details","text":"Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues.","title":"Details"},{"location":"reference/Expr_cumprod/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_cumprod/#examples","text":"pl$DataFrame(list(a=1:4))$select( pl$col(\"a\")$cumprod()$alias(\"cumprod\"), pl$col(\"a\")$cumprod(reverse=TRUE)$alias(\"cumprod_reversed\") )","title":"Examples"},{"location":"reference/Expr_cumsum/","text":"Expr_cumsum Cumulative sum Description Get an array with the cumulative sum computed at every element. Format a method Usage Expr_cumsum(reverse = FALSE) Arguments Argument Description reverse bool, default FALSE, if true roll over vector from back to forth Details Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues. Value Expr Examples pl$DataFrame(list(a=1:4))$select( pl$col(\"a\")$cumsum()$alias(\"cumsum\"), pl$col(\"a\")$cumsum(reverse=TRUE)$alias(\"cumsum_reversed\") )","title":"`Expr_cumsum`"},{"location":"reference/Expr_cumsum/#expr_cumsum","text":"Cumulative sum","title":"Expr_cumsum"},{"location":"reference/Expr_cumsum/#description","text":"Get an array with the cumulative sum computed at every element.","title":"Description"},{"location":"reference/Expr_cumsum/#format","text":"a method","title":"Format"},{"location":"reference/Expr_cumsum/#usage","text":"Expr_cumsum(reverse = FALSE)","title":"Usage"},{"location":"reference/Expr_cumsum/#arguments","text":"Argument Description reverse bool, default FALSE, if true roll over vector from back to forth","title":"Arguments"},{"location":"reference/Expr_cumsum/#details","text":"Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues.","title":"Details"},{"location":"reference/Expr_cumsum/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_cumsum/#examples","text":"pl$DataFrame(list(a=1:4))$select( pl$col(\"a\")$cumsum()$alias(\"cumsum\"), pl$col(\"a\")$cumsum(reverse=TRUE)$alias(\"cumsum_reversed\") )","title":"Examples"},{"location":"reference/Expr_cumulative_eval/","text":"Expr_cumulative_eval Cumulative eval Description Run an expression over a sliding window that increases 1 slot every iteration. Usage Expr_cumulative_eval(expr, min_periods = 1L, parallel = FALSE) Arguments Argument Description expr Expression to evaluate min_periods Number of valid values there should be in the window before the expression is evaluated. valid values = length - null_count parallel Run in parallel. Don't do this in a groupby or another operation that already has much parallelization. Details Warnings This functionality is experimental and may change without it being considered a breaking change. This can be really slow as it can have O(n^2) complexity. Don't use this for operations that visit all elements. Value Expr Examples pl$lit(1:5)$cumulative_eval(pl$element()$first()-pl$element()$last() ** 2)$to_r()","title":"`Expr_cumulative_eval`"},{"location":"reference/Expr_cumulative_eval/#expr_cumulative_eval","text":"Cumulative eval","title":"Expr_cumulative_eval"},{"location":"reference/Expr_cumulative_eval/#description","text":"Run an expression over a sliding window that increases 1 slot every iteration.","title":"Description"},{"location":"reference/Expr_cumulative_eval/#usage","text":"Expr_cumulative_eval(expr, min_periods = 1L, parallel = FALSE)","title":"Usage"},{"location":"reference/Expr_cumulative_eval/#arguments","text":"Argument Description expr Expression to evaluate min_periods Number of valid values there should be in the window before the expression is evaluated. valid values = length - null_count parallel Run in parallel. Don't do this in a groupby or another operation that already has much parallelization.","title":"Arguments"},{"location":"reference/Expr_cumulative_eval/#details","text":"Warnings This functionality is experimental and may change without it being considered a breaking change. This can be really slow as it can have O(n^2) complexity. Don't use this for operations that visit all elements.","title":"Details"},{"location":"reference/Expr_cumulative_eval/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_cumulative_eval/#examples","text":"pl$lit(1:5)$cumulative_eval(pl$element()$first()-pl$element()$last() ** 2)$to_r()","title":"Examples"},{"location":"reference/Expr_diff/","text":"Expr_diff Diff Description Calculate the n-th discrete difference. Usage Expr_diff(n = 1, null_behavior = \"ignore\") Arguments Argument Description n Integerish Number of slots to shift. null_behavior option default 'ignore', else 'drop' Value Expr Examples pl$DataFrame(list( a=c(20L,10L,30L,40L)))$select( pl$col(\"a\")$diff()$alias(\"diff_default\"), pl$col(\"a\")$diff(2,\"ignore\")$alias(\"diff_2_ignore\") )","title":"`Expr_diff`"},{"location":"reference/Expr_diff/#expr_diff","text":"Diff","title":"Expr_diff"},{"location":"reference/Expr_diff/#description","text":"Calculate the n-th discrete difference.","title":"Description"},{"location":"reference/Expr_diff/#usage","text":"Expr_diff(n = 1, null_behavior = \"ignore\")","title":"Usage"},{"location":"reference/Expr_diff/#arguments","text":"Argument Description n Integerish Number of slots to shift. null_behavior option default 'ignore', else 'drop'","title":"Arguments"},{"location":"reference/Expr_diff/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_diff/#examples","text":"pl$DataFrame(list( a=c(20L,10L,30L,40L)))$select( pl$col(\"a\")$diff()$alias(\"diff_default\"), pl$col(\"a\")$diff(2,\"ignore\")$alias(\"diff_2_ignore\") )","title":"Examples"},{"location":"reference/Expr_div/","text":"Expr_div Div Description Divide Usage Expr_div(other) list(list(\"/\"), list(\"Expr\"))(e1, e2) Arguments Argument Description other literal or Robj which can become a literal e1 lhs Expr e2 rhs Expr or anything which can become a literal Expression Value Exprs Examples #three syntaxes same result pl$lit(5) / 10 pl$lit(5) / pl$lit(10) pl$lit(5)$div(pl$lit(10))","title":"`Expr_div`"},{"location":"reference/Expr_div/#expr_div","text":"Div","title":"Expr_div"},{"location":"reference/Expr_div/#description","text":"Divide","title":"Description"},{"location":"reference/Expr_div/#usage","text":"Expr_div(other) list(list(\"/\"), list(\"Expr\"))(e1, e2)","title":"Usage"},{"location":"reference/Expr_div/#arguments","text":"Argument Description other literal or Robj which can become a literal e1 lhs Expr e2 rhs Expr or anything which can become a literal Expression","title":"Arguments"},{"location":"reference/Expr_div/#value","text":"Exprs","title":"Value"},{"location":"reference/Expr_div/#examples","text":"#three syntaxes same result pl$lit(5) / 10 pl$lit(5) / pl$lit(10) pl$lit(5)$div(pl$lit(10))","title":"Examples"},{"location":"reference/Expr_dot/","text":"Expr_dot Dot product Description Compute the dot/inner product between two Expressions. Format a method Usage Expr_dot(other) Arguments Argument Description other Expr to compute dot product with. Value Expr Examples pl$DataFrame( a=1:4,b=c(1,2,3,4),c=\"bob\" )$select( pl$col(\"a\")$dot(pl$col(\"b\"))$alias(\"a dot b\"), pl$col(\"a\")$dot(pl$col(\"a\"))$alias(\"a dot a\") )","title":"`Expr_dot`"},{"location":"reference/Expr_dot/#expr_dot","text":"Dot product","title":"Expr_dot"},{"location":"reference/Expr_dot/#description","text":"Compute the dot/inner product between two Expressions.","title":"Description"},{"location":"reference/Expr_dot/#format","text":"a method","title":"Format"},{"location":"reference/Expr_dot/#usage","text":"Expr_dot(other)","title":"Usage"},{"location":"reference/Expr_dot/#arguments","text":"Argument Description other Expr to compute dot product with.","title":"Arguments"},{"location":"reference/Expr_dot/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_dot/#examples","text":"pl$DataFrame( a=1:4,b=c(1,2,3,4),c=\"bob\" )$select( pl$col(\"a\")$dot(pl$col(\"b\"))$alias(\"a dot b\"), pl$col(\"a\")$dot(pl$col(\"a\"))$alias(\"a dot a\") )","title":"Examples"},{"location":"reference/Expr_drop_nans/","text":"Expr_drop_nans Drop NaN(s) Description Drop floating point NaN values. Similar to R syntax x[!is.nan(x)] Format An object of class character of length 1. Usage Expr_drop_nans Details Note that NaN values are not null values! (null corrosponds to R NA, not R NULL) To drop null values, use method drop_nulls . See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples pl$DataFrame(list(x=c(1,2,NaN,NA)))$select(pl$col(\"x\")$drop_nans())","title":"`Expr_drop_nans`"},{"location":"reference/Expr_drop_nans/#expr_drop_nans","text":"Drop NaN(s)","title":"Expr_drop_nans"},{"location":"reference/Expr_drop_nans/#description","text":"Drop floating point NaN values. Similar to R syntax x[!is.nan(x)]","title":"Description"},{"location":"reference/Expr_drop_nans/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_drop_nans/#usage","text":"Expr_drop_nans","title":"Usage"},{"location":"reference/Expr_drop_nans/#details","text":"Note that NaN values are not null values! (null corrosponds to R NA, not R NULL) To drop null values, use method drop_nulls . See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_drop_nans/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_drop_nans/#examples","text":"pl$DataFrame(list(x=c(1,2,NaN,NA)))$select(pl$col(\"x\")$drop_nans())","title":"Examples"},{"location":"reference/Expr_drop_nulls/","text":"Expr_drop_nulls Drop null(s) Description Drop null values. Similar to R syntax x[!(is.na(x) & !is.nan(x))] Format An object of class character of length 1. Usage Expr_drop_nulls Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples pl$DataFrame(list(x=c(1,2,NaN,NA)))$select(pl$col(\"x\")$drop_nulls())","title":"`Expr_drop_nulls`"},{"location":"reference/Expr_drop_nulls/#expr_drop_nulls","text":"Drop null(s)","title":"Expr_drop_nulls"},{"location":"reference/Expr_drop_nulls/#description","text":"Drop null values. Similar to R syntax x[!(is.na(x) & !is.nan(x))]","title":"Description"},{"location":"reference/Expr_drop_nulls/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_drop_nulls/#usage","text":"Expr_drop_nulls","title":"Usage"},{"location":"reference/Expr_drop_nulls/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_drop_nulls/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_drop_nulls/#examples","text":"pl$DataFrame(list(x=c(1,2,NaN,NA)))$select(pl$col(\"x\")$drop_nulls())","title":"Examples"},{"location":"reference/Expr_dt/","text":"Expr_dt dt: datetime related methods Description Create an object namespace of all datetime related methods. See the individual method pages for full details Usage Expr_dt() Value Expr Examples #missing","title":"`Expr_dt`"},{"location":"reference/Expr_dt/#expr_dt","text":"dt: datetime related methods","title":"Expr_dt"},{"location":"reference/Expr_dt/#description","text":"Create an object namespace of all datetime related methods. See the individual method pages for full details","title":"Description"},{"location":"reference/Expr_dt/#usage","text":"Expr_dt()","title":"Usage"},{"location":"reference/Expr_dt/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_dt/#examples","text":"#missing","title":"Examples"},{"location":"reference/Expr_entropy/","text":"Expr_entropy Entropy Description Computes the entropy. Uses the formula -sum(pk * log(pk)) where pk are discrete probabilities. Return Null if input is not values Usage Expr_entropy(base = base::exp(1), normalize = TRUE) Arguments Argument Description base Given exponential base, defaults to e normalize Normalize pk if it doesn't sum to 1. Value Expr Examples pl$select(pl$lit(c(\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"))$unique_counts()$entropy(base=2))","title":"`Expr_entropy`"},{"location":"reference/Expr_entropy/#expr_entropy","text":"Entropy","title":"Expr_entropy"},{"location":"reference/Expr_entropy/#description","text":"Computes the entropy. Uses the formula -sum(pk * log(pk)) where pk are discrete probabilities. Return Null if input is not values","title":"Description"},{"location":"reference/Expr_entropy/#usage","text":"Expr_entropy(base = base::exp(1), normalize = TRUE)","title":"Usage"},{"location":"reference/Expr_entropy/#arguments","text":"Argument Description base Given exponential base, defaults to e normalize Normalize pk if it doesn't sum to 1.","title":"Arguments"},{"location":"reference/Expr_entropy/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_entropy/#examples","text":"pl$select(pl$lit(c(\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"))$unique_counts()$entropy(base=2))","title":"Examples"},{"location":"reference/Expr_eq/","text":"Expr_eq Equal == Description eq method and operator Usage Expr_eq(other) list(list(\"==\"), list(\"Expr\"))(e1, e2) Arguments Argument Description other literal or Robj which can become a literal e1 lhs Expr e2 rhs Expr or anything which can become a literal Expression Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Exprs Examples #' #three syntaxes same result pl$lit(2) == 2 pl$lit(2) == pl$lit(2) pl$lit(2)$eq(pl$lit(2))","title":"`Expr_eq`"},{"location":"reference/Expr_eq/#expr_eq","text":"Equal ==","title":"Expr_eq"},{"location":"reference/Expr_eq/#description","text":"eq method and operator","title":"Description"},{"location":"reference/Expr_eq/#usage","text":"Expr_eq(other) list(list(\"==\"), list(\"Expr\"))(e1, e2)","title":"Usage"},{"location":"reference/Expr_eq/#arguments","text":"Argument Description other literal or Robj which can become a literal e1 lhs Expr e2 rhs Expr or anything which can become a literal Expression","title":"Arguments"},{"location":"reference/Expr_eq/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_eq/#value","text":"Exprs","title":"Value"},{"location":"reference/Expr_eq/#examples","text":"#' #three syntaxes same result pl$lit(2) == 2 pl$lit(2) == pl$lit(2) pl$lit(2)$eq(pl$lit(2))","title":"Examples"},{"location":"reference/Expr_ewm_mean_std_var/","text":"Expr_ewm_mean_std_var Exponentially-weighted moving average/std/var. Description Exponentially-weighted moving average/std/var. Ewm_std Ewm_var Format Method Usage Expr_ewm_mean( com = NULL, span = NULL, half_life = NULL, alpha = NULL, adjust = TRUE, min_periods = 1L, ignore_nulls = TRUE ) Expr_ewm_std( com = NULL, span = NULL, half_life = NULL, alpha = NULL, adjust = TRUE, bias = FALSE, min_periods = 1L, ignore_nulls = TRUE ) Expr_ewm_var( com = NULL, span = NULL, half_life = NULL, alpha = NULL, adjust = TRUE, bias = FALSE, min_periods = 1L, ignore_nulls = TRUE ) Arguments Argument Description com Specify decay in terms of center of mass, $\\gamma$ , with $$$ \\alpha = \\frac{1}{1 + \\gamma} \\; \\forall \\; \\gamma \\geq 0$$ $ span Specify decay in terms of span, $\\theta$ , with $\\alpha = \\frac{2}{\\theta + 1} \\; \\forall \\; \\theta \\geq 1 $ half_life Specify decay in terms of half-life, :math: \\lambda , with $ \\alpha = 1 - \\exp \\left{ \\frac{ -\\ln(2) }{ \\lambda } \\right} $ $ \\forall \\; \\lambda > 0$ alpha Specify smoothing factor alpha directly, $0 < \\alpha \\leq 1$ . adjust Divide by decaying adjustment factor in beginning periods to account for imbalance in relative weightings When adjust=TRUE the EW function is calculated using weights $w_i = (1 - \\alpha)^i $ When adjust=FALSE the EW function is calculated recursively by $$$ y_0 = x_0 \\$$ y_t = (1 - \\alpha)y_{t - 1} + \\alpha x_t$ min_periods | Minimum number of observations in window required to have a value (otherwise result is null). ignore_nulls | ignore_nulls Ignore missing values when calculating weights. When ignore_nulls=FALSE (default), weights are based on absolute positions. For example, the weights of :math: x_0 and :math: x_2 used in calculating the final weighted average of [ $x_0$ , None, $x_2$ \\ ] are $1-\\alpha)^2$ and $1$ if adjust=TRUE , and $(1-\\alpha)^2$ and $\\alpha$ if adjust=FALSE . When ignore_nulls=TRUE , weights are based on relative positions. For example, the weights of $x_0$ and $x_2$ used in calculating the final weighted average of [ $x_0$ , None, $x_2$ ] are $1-\\alpha$ and $1$ if adjust=TRUE , and $1-\\alpha$ and $\\alpha$ if adjust=FALSE . bias | When bias=FALSE`, apply a correction to make the estimate statistically unbiased. Value Expr Examples pl$DataFrame(a = 1:3)$select(pl$col(\"a\")$ewm_mean(com=1)) pl$DataFrame(a = 1:3)$select(pl$col(\"a\")$ewm_std(com=1)) pl$DataFrame(a = 1:3)$select(pl$col(\"a\")$ewm_std(com=1))","title":"`Expr_ewm_mean_std_var`"},{"location":"reference/Expr_ewm_mean_std_var/#expr_ewm_mean_std_var","text":"Exponentially-weighted moving average/std/var.","title":"Expr_ewm_mean_std_var"},{"location":"reference/Expr_ewm_mean_std_var/#description","text":"Exponentially-weighted moving average/std/var. Ewm_std Ewm_var","title":"Description"},{"location":"reference/Expr_ewm_mean_std_var/#format","text":"Method","title":"Format"},{"location":"reference/Expr_ewm_mean_std_var/#usage","text":"Expr_ewm_mean( com = NULL, span = NULL, half_life = NULL, alpha = NULL, adjust = TRUE, min_periods = 1L, ignore_nulls = TRUE ) Expr_ewm_std( com = NULL, span = NULL, half_life = NULL, alpha = NULL, adjust = TRUE, bias = FALSE, min_periods = 1L, ignore_nulls = TRUE ) Expr_ewm_var( com = NULL, span = NULL, half_life = NULL, alpha = NULL, adjust = TRUE, bias = FALSE, min_periods = 1L, ignore_nulls = TRUE )","title":"Usage"},{"location":"reference/Expr_ewm_mean_std_var/#arguments","text":"Argument Description com Specify decay in terms of center of mass, $\\gamma$ , with $$$ \\alpha = \\frac{1}{1 + \\gamma} \\; \\forall \\; \\gamma \\geq 0$$ $ span Specify decay in terms of span, $\\theta$ , with $\\alpha = \\frac{2}{\\theta + 1} \\; \\forall \\; \\theta \\geq 1 $ half_life Specify decay in terms of half-life, :math: \\lambda , with $ \\alpha = 1 - \\exp \\left{ \\frac{ -\\ln(2) }{ \\lambda } \\right} $ $ \\forall \\; \\lambda > 0$ alpha Specify smoothing factor alpha directly, $0 < \\alpha \\leq 1$ . adjust Divide by decaying adjustment factor in beginning periods to account for imbalance in relative weightings When adjust=TRUE the EW function is calculated using weights $w_i = (1 - \\alpha)^i $ When adjust=FALSE the EW function is calculated recursively by $$$ y_0 = x_0 \\$$ y_t = (1 - \\alpha)y_{t - 1} + \\alpha x_t$ min_periods | Minimum number of observations in window required to have a value (otherwise result is null). ignore_nulls | ignore_nulls Ignore missing values when calculating weights. When ignore_nulls=FALSE (default), weights are based on absolute positions. For example, the weights of :math: x_0 and :math: x_2 used in calculating the final weighted average of [ $x_0$ , None, $x_2$ \\ ] are $1-\\alpha)^2$ and $1$ if adjust=TRUE , and $(1-\\alpha)^2$ and $\\alpha$ if adjust=FALSE . When ignore_nulls=TRUE , weights are based on relative positions. For example, the weights of $x_0$ and $x_2$ used in calculating the final weighted average of [ $x_0$ , None, $x_2$ ] are $1-\\alpha$ and $1$ if adjust=TRUE , and $1-\\alpha$ and $\\alpha$ if adjust=FALSE . bias | When bias=FALSE`, apply a correction to make the estimate statistically unbiased.","title":"Arguments"},{"location":"reference/Expr_ewm_mean_std_var/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_ewm_mean_std_var/#examples","text":"pl$DataFrame(a = 1:3)$select(pl$col(\"a\")$ewm_mean(com=1)) pl$DataFrame(a = 1:3)$select(pl$col(\"a\")$ewm_std(com=1)) pl$DataFrame(a = 1:3)$select(pl$col(\"a\")$ewm_std(com=1))","title":"Examples"},{"location":"reference/Expr_exclude/","text":"Expr_exclude Exclude certain columns from a wildcard/regex selection. Description You may also use regexes in the exclude list. They must start with ^ and end with $ . Usage Expr_exclude(columns) Arguments Argument Description columns given param type: string: exclude name of column or exclude regex starting with ^and ending with$ character vector: exclude all these column names, no regex allowed DataType: Exclude any of this DataType List(DataType): Excldue any of these DataType(s) Value Expr Examples #make DataFrame df = pl$DataFrame(iris) #by name(s) df$select(pl$all()$exclude(\"Species\")) #by type df$select(pl$all()$exclude(pl$Categorical)) df$select(pl$all()$exclude(list(pl$Categorical,pl$Float64))) #by regex df$select(pl$all()$exclude(\"^Sepal.*$\"))","title":"`Expr_exclude`"},{"location":"reference/Expr_exclude/#expr_exclude","text":"Exclude certain columns from a wildcard/regex selection.","title":"Expr_exclude"},{"location":"reference/Expr_exclude/#description","text":"You may also use regexes in the exclude list. They must start with ^ and end with $ .","title":"Description"},{"location":"reference/Expr_exclude/#usage","text":"Expr_exclude(columns)","title":"Usage"},{"location":"reference/Expr_exclude/#arguments","text":"Argument Description columns given param type: string: exclude name of column or exclude regex starting with ^and ending with$ character vector: exclude all these column names, no regex allowed DataType: Exclude any of this DataType List(DataType): Excldue any of these DataType(s)","title":"Arguments"},{"location":"reference/Expr_exclude/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_exclude/#examples","text":"#make DataFrame df = pl$DataFrame(iris) #by name(s) df$select(pl$all()$exclude(\"Species\")) #by type df$select(pl$all()$exclude(pl$Categorical)) df$select(pl$all()$exclude(list(pl$Categorical,pl$Float64))) #by regex df$select(pl$all()$exclude(\"^Sepal.*$\"))","title":"Examples"},{"location":"reference/Expr_exp/","text":"Expr_exp Compute the exponential, element-wise. Description Compute the exponential, element-wise. Format a method Usage Expr_exp Value Expr Examples log10123 = suppressWarnings(log(-1:3)) all.equal( pl$DataFrame(list(a = log10123))$select(pl$col(\"a\")$exp())$as_data_frame()$a, exp(1)^log10123 )","title":"`Expr_exp`"},{"location":"reference/Expr_exp/#expr_exp","text":"Compute the exponential, element-wise.","title":"Expr_exp"},{"location":"reference/Expr_exp/#description","text":"Compute the exponential, element-wise.","title":"Description"},{"location":"reference/Expr_exp/#format","text":"a method","title":"Format"},{"location":"reference/Expr_exp/#usage","text":"Expr_exp","title":"Usage"},{"location":"reference/Expr_exp/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_exp/#examples","text":"log10123 = suppressWarnings(log(-1:3)) all.equal( pl$DataFrame(list(a = log10123))$select(pl$col(\"a\")$exp())$as_data_frame()$a, exp(1)^log10123 )","title":"Examples"},{"location":"reference/Expr_explode/","text":"Expr_explode Explode a list or utf8 Series. Description This means that every item is expanded to a new row. ( flatten is an alias for explode ) Format a method a method Usage Expr_explode Expr_flatten Details explode/flatten does not support categorical Value Expr Examples pl$DataFrame(list(a=letters))$select(pl$col(\"a\")$explode()$take(0:5)) listed_group_df = pl$DataFrame(iris[c(1:3,51:53),])$groupby(\"Species\")$agg(pl$all()) print(listed_group_df) vectors_df = listed_group_df$select( pl$col(c(\"Sepal.Width\",\"Sepal.Length\"))$explode() ) print(vectors_df)","title":"`Expr_explode`"},{"location":"reference/Expr_explode/#expr_explode","text":"Explode a list or utf8 Series.","title":"Expr_explode"},{"location":"reference/Expr_explode/#description","text":"This means that every item is expanded to a new row. ( flatten is an alias for explode )","title":"Description"},{"location":"reference/Expr_explode/#format","text":"a method a method","title":"Format"},{"location":"reference/Expr_explode/#usage","text":"Expr_explode Expr_flatten","title":"Usage"},{"location":"reference/Expr_explode/#details","text":"explode/flatten does not support categorical","title":"Details"},{"location":"reference/Expr_explode/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_explode/#examples","text":"pl$DataFrame(list(a=letters))$select(pl$col(\"a\")$explode()$take(0:5)) listed_group_df = pl$DataFrame(iris[c(1:3,51:53),])$groupby(\"Species\")$agg(pl$all()) print(listed_group_df) vectors_df = listed_group_df$select( pl$col(c(\"Sepal.Width\",\"Sepal.Length\"))$explode() ) print(vectors_df)","title":"Examples"},{"location":"reference/Expr_extend_constant/","text":"Expr_extend_constant Extend_constant Description Extend the Series with given number of values. Format Method Usage Expr_extend_constant(value, n) Arguments Argument Description value The value to extend the Series with. This value may be None to fill with nulls. n The number of values to extend. Value Expr Examples pl$select( pl$lit(c(\"5\",\"Bob_is_not_a_number\")) $cast(pl$dtypes$UInt64, strict = FALSE) $extend_constant(10.1, 2) ) pl$select( pl$lit(c(\"5\",\"Bob_is_not_a_number\")) $cast(pl$dtypes$Utf8, strict = FALSE) $extend_constant(\"chuchu\", 2) )","title":"`Expr_extend_constant`"},{"location":"reference/Expr_extend_constant/#expr_extend_constant","text":"Extend_constant","title":"Expr_extend_constant"},{"location":"reference/Expr_extend_constant/#description","text":"Extend the Series with given number of values.","title":"Description"},{"location":"reference/Expr_extend_constant/#format","text":"Method","title":"Format"},{"location":"reference/Expr_extend_constant/#usage","text":"Expr_extend_constant(value, n)","title":"Usage"},{"location":"reference/Expr_extend_constant/#arguments","text":"Argument Description value The value to extend the Series with. This value may be None to fill with nulls. n The number of values to extend.","title":"Arguments"},{"location":"reference/Expr_extend_constant/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_extend_constant/#examples","text":"pl$select( pl$lit(c(\"5\",\"Bob_is_not_a_number\")) $cast(pl$dtypes$UInt64, strict = FALSE) $extend_constant(10.1, 2) ) pl$select( pl$lit(c(\"5\",\"Bob_is_not_a_number\")) $cast(pl$dtypes$Utf8, strict = FALSE) $extend_constant(\"chuchu\", 2) )","title":"Examples"},{"location":"reference/Expr_extend_expr/","text":"Expr_extend_expr Extend_expr Description Extend the Series with a expression repeated a number of times Format Method Usage Expr_extend_expr(value, n) Arguments Argument Description value The expr to extend the Series with. This value may be None to fill with nulls. n The number of values to extend. Value Expr Examples pl$select( pl$lit(c(\"5\",\"Bob_is_not_a_number\")) $cast(pl$dtypes$UInt64, strict = FALSE) $extend_expr(10.1, 2) ) pl$select( pl$lit(c(\"5\",\"Bob_is_not_a_number\")) $cast(pl$dtypes$Utf8, strict = FALSE) $extend_expr(\"chuchu\", 2) )","title":"`Expr_extend_expr`"},{"location":"reference/Expr_extend_expr/#expr_extend_expr","text":"Extend_expr","title":"Expr_extend_expr"},{"location":"reference/Expr_extend_expr/#description","text":"Extend the Series with a expression repeated a number of times","title":"Description"},{"location":"reference/Expr_extend_expr/#format","text":"Method","title":"Format"},{"location":"reference/Expr_extend_expr/#usage","text":"Expr_extend_expr(value, n)","title":"Usage"},{"location":"reference/Expr_extend_expr/#arguments","text":"Argument Description value The expr to extend the Series with. This value may be None to fill with nulls. n The number of values to extend.","title":"Arguments"},{"location":"reference/Expr_extend_expr/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_extend_expr/#examples","text":"pl$select( pl$lit(c(\"5\",\"Bob_is_not_a_number\")) $cast(pl$dtypes$UInt64, strict = FALSE) $extend_expr(10.1, 2) ) pl$select( pl$lit(c(\"5\",\"Bob_is_not_a_number\")) $cast(pl$dtypes$Utf8, strict = FALSE) $extend_expr(\"chuchu\", 2) )","title":"Examples"},{"location":"reference/Expr_fill_nan/","text":"Expr_fill_nan Fill Nulls Forward Description Fill missing values with last seen values. Format a method Usage Expr_fill_nan(expr = NULL) Arguments Argument Description expr Expr or into Expr, value to fill NaNs with Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples l = list(a=c(1,NaN,NaN,3)) pl$DataFrame(l)$select( pl$col(\"a\")$fill_nan()$alias(\"fill_default\"), pl$col(\"a\")$fill_nan(pl$lit(NA))$alias(\"fill_NA\"), #same as default pl$col(\"a\")$fill_nan(2)$alias(\"fill_float2\"), pl$col(\"a\")$fill_nan(\"hej\")$alias(\"fill_str\") #implicit cast to Utf8 )$to_list()","title":"`Expr_fill_nan`"},{"location":"reference/Expr_fill_nan/#expr_fill_nan","text":"Fill Nulls Forward","title":"Expr_fill_nan"},{"location":"reference/Expr_fill_nan/#description","text":"Fill missing values with last seen values.","title":"Description"},{"location":"reference/Expr_fill_nan/#format","text":"a method","title":"Format"},{"location":"reference/Expr_fill_nan/#usage","text":"Expr_fill_nan(expr = NULL)","title":"Usage"},{"location":"reference/Expr_fill_nan/#arguments","text":"Argument Description expr Expr or into Expr, value to fill NaNs with","title":"Arguments"},{"location":"reference/Expr_fill_nan/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_fill_nan/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_fill_nan/#examples","text":"l = list(a=c(1,NaN,NaN,3)) pl$DataFrame(l)$select( pl$col(\"a\")$fill_nan()$alias(\"fill_default\"), pl$col(\"a\")$fill_nan(pl$lit(NA))$alias(\"fill_NA\"), #same as default pl$col(\"a\")$fill_nan(2)$alias(\"fill_float2\"), pl$col(\"a\")$fill_nan(\"hej\")$alias(\"fill_str\") #implicit cast to Utf8 )$to_list()","title":"Examples"},{"location":"reference/Expr_fill_null/","text":"Expr_fill_null Fill Nulls with a value or strategy. Description Shift the values by value or as strategy. Format a method Usage Expr_fill_null(value = NULL, strategy = NULL, limit = NULL) Arguments Argument Description value Expr or Into to fill Null values with strategy default NULL else 'forward', 'backward', 'min', 'max', 'mean', 'zero', 'one' limit Number of consecutive null values to fill when using the 'forward' or 'backward' strategy. Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples pl$select( pl$lit(0:3)$shift_and_fill(-2, fill_value = 42)$alias(\"shift-2\"), pl$lit(0:3)$shift_and_fill(2, fill_value = pl$lit(42)/2)$alias(\"shift+2\") )","title":"`Expr_fill_null`"},{"location":"reference/Expr_fill_null/#expr_fill_null","text":"Fill Nulls with a value or strategy.","title":"Expr_fill_null"},{"location":"reference/Expr_fill_null/#description","text":"Shift the values by value or as strategy.","title":"Description"},{"location":"reference/Expr_fill_null/#format","text":"a method","title":"Format"},{"location":"reference/Expr_fill_null/#usage","text":"Expr_fill_null(value = NULL, strategy = NULL, limit = NULL)","title":"Usage"},{"location":"reference/Expr_fill_null/#arguments","text":"Argument Description value Expr or Into to fill Null values with strategy default NULL else 'forward', 'backward', 'min', 'max', 'mean', 'zero', 'one' limit Number of consecutive null values to fill when using the 'forward' or 'backward' strategy.","title":"Arguments"},{"location":"reference/Expr_fill_null/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_fill_null/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_fill_null/#examples","text":"pl$select( pl$lit(0:3)$shift_and_fill(-2, fill_value = 42)$alias(\"shift-2\"), pl$lit(0:3)$shift_and_fill(2, fill_value = pl$lit(42)/2)$alias(\"shift+2\") )","title":"Examples"},{"location":"reference/Expr_filter/","text":"Expr_filter Filter a single column. Description Mostly useful in an aggregation context. If you want to filter on a DataFrame level, use LazyFrame.filter . where() is an alias for pl$filter Format a method Usage Expr_filter(predicate) Expr_where(predicate) Arguments Argument Description predicate Expr or something Into . Should be a boolean expression. Value Expr Examples df = pl$DataFrame(list( group_col = c(\"g1\", \"g1\", \"g2\"), b = c(1, 2, 3) )) df$groupby(\"group_col\")$agg( pl$col(\"b\")$filter(pl$col(\"b\") < 2)$sum()$alias(\"lt\"), pl$col(\"b\")$filter(pl$col(\"b\") >= 2)$sum()$alias(\"gte\") )","title":"`Expr_filter`"},{"location":"reference/Expr_filter/#expr_filter","text":"Filter a single column.","title":"Expr_filter"},{"location":"reference/Expr_filter/#description","text":"Mostly useful in an aggregation context. If you want to filter on a DataFrame level, use LazyFrame.filter . where() is an alias for pl$filter","title":"Description"},{"location":"reference/Expr_filter/#format","text":"a method","title":"Format"},{"location":"reference/Expr_filter/#usage","text":"Expr_filter(predicate) Expr_where(predicate)","title":"Usage"},{"location":"reference/Expr_filter/#arguments","text":"Argument Description predicate Expr or something Into . Should be a boolean expression.","title":"Arguments"},{"location":"reference/Expr_filter/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_filter/#examples","text":"df = pl$DataFrame(list( group_col = c(\"g1\", \"g1\", \"g2\"), b = c(1, 2, 3) )) df$groupby(\"group_col\")$agg( pl$col(\"b\")$filter(pl$col(\"b\") < 2)$sum()$alias(\"lt\"), pl$col(\"b\")$filter(pl$col(\"b\") >= 2)$sum()$alias(\"gte\") )","title":"Examples"},{"location":"reference/Expr_first/","text":"Expr_first First Description Get the first value. Similar to R head(x,1) Format An object of class character of length 1. Usage Expr_first Value Expr Examples pl$DataFrame(list(x=c(1,2,3)))$select(pl$col(\"x\")$first())","title":"`Expr_first`"},{"location":"reference/Expr_first/#expr_first","text":"First","title":"Expr_first"},{"location":"reference/Expr_first/#description","text":"Get the first value. Similar to R head(x,1)","title":"Description"},{"location":"reference/Expr_first/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_first/#usage","text":"Expr_first","title":"Usage"},{"location":"reference/Expr_first/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_first/#examples","text":"pl$DataFrame(list(x=c(1,2,3)))$select(pl$col(\"x\")$first())","title":"Examples"},{"location":"reference/Expr_floor/","text":"Expr_floor Floor Description Rounds down to the nearest integer value. Only works on floating point Series. Format a method Usage Expr_floor Value Expr Examples pl$DataFrame(list( a = c(0.33, 0.5, 1.02, 1.5, NaN , NA, Inf, -Inf) ))$select( pl$col(\"a\")$floor() )","title":"`Expr_floor`"},{"location":"reference/Expr_floor/#expr_floor","text":"Floor","title":"Expr_floor"},{"location":"reference/Expr_floor/#description","text":"Rounds down to the nearest integer value. Only works on floating point Series.","title":"Description"},{"location":"reference/Expr_floor/#format","text":"a method","title":"Format"},{"location":"reference/Expr_floor/#usage","text":"Expr_floor","title":"Usage"},{"location":"reference/Expr_floor/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_floor/#examples","text":"pl$DataFrame(list( a = c(0.33, 0.5, 1.02, 1.5, NaN , NA, Inf, -Inf) ))$select( pl$col(\"a\")$floor() )","title":"Examples"},{"location":"reference/Expr_forward_fill/","text":"Expr_forward_fill Fill Nulls Forward Description Fill missing values with last seen values. Format a method Usage Expr_forward_fill(limit = NULL) Arguments Argument Description limit Expr or Into The number of consecutive null values to forward fill. Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples l = list(a=c(1L,rep(NA_integer_,3L),10)) pl$DataFrame(l)$select( pl$col(\"a\")$forward_fill()$alias(\"ff_null\"), pl$col(\"a\")$forward_fill(limit = 0)$alias(\"ff_l0\"), pl$col(\"a\")$forward_fill(limit = 1)$alias(\"ff_l1\") )$to_list()","title":"`Expr_forward_fill`"},{"location":"reference/Expr_forward_fill/#expr_forward_fill","text":"Fill Nulls Forward","title":"Expr_forward_fill"},{"location":"reference/Expr_forward_fill/#description","text":"Fill missing values with last seen values.","title":"Description"},{"location":"reference/Expr_forward_fill/#format","text":"a method","title":"Format"},{"location":"reference/Expr_forward_fill/#usage","text":"Expr_forward_fill(limit = NULL)","title":"Usage"},{"location":"reference/Expr_forward_fill/#arguments","text":"Argument Description limit Expr or Into The number of consecutive null values to forward fill.","title":"Arguments"},{"location":"reference/Expr_forward_fill/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_forward_fill/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_forward_fill/#examples","text":"l = list(a=c(1L,rep(NA_integer_,3L),10)) pl$DataFrame(l)$select( pl$col(\"a\")$forward_fill()$alias(\"ff_null\"), pl$col(\"a\")$forward_fill(limit = 0)$alias(\"ff_l0\"), pl$col(\"a\")$forward_fill(limit = 1)$alias(\"ff_l1\") )$to_list()","title":"Examples"},{"location":"reference/Expr_gt/","text":"Expr_gt GreaterThan < Description gt method and operator Usage Expr_gt(other) list(list(\">\"), list(\"Expr\"))(e1, e2) Arguments Argument Description other literal or Robj which can become a literal e1 lhs Expr e2 rhs Expr or anything which can become a literal Expression Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Exprs Examples #' #three syntaxes same result pl$lit(2) > 1 pl$lit(2) > pl$lit(1) pl$lit(2)$gt(pl$lit(1))","title":"`Expr_gt`"},{"location":"reference/Expr_gt/#expr_gt","text":"GreaterThan <","title":"Expr_gt"},{"location":"reference/Expr_gt/#description","text":"gt method and operator","title":"Description"},{"location":"reference/Expr_gt/#usage","text":"Expr_gt(other) list(list(\">\"), list(\"Expr\"))(e1, e2)","title":"Usage"},{"location":"reference/Expr_gt/#arguments","text":"Argument Description other literal or Robj which can become a literal e1 lhs Expr e2 rhs Expr or anything which can become a literal Expression","title":"Arguments"},{"location":"reference/Expr_gt/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_gt/#value","text":"Exprs","title":"Value"},{"location":"reference/Expr_gt/#examples","text":"#' #three syntaxes same result pl$lit(2) > 1 pl$lit(2) > pl$lit(1) pl$lit(2)$gt(pl$lit(1))","title":"Examples"},{"location":"reference/Expr_gt_eq/","text":"Expr_gt_eq Greater Than Or Equal <= Description gt_eq method and operator Usage Expr_gt_eq(other) list(list(\">=\"), list(\"Expr\"))(e1, e2) Arguments Argument Description other literal or Robj which can become a literal e1 lhs Expr e2 rhs Expr or anything which can become a literal Expression Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Exprs Examples #' #three syntaxes same result pl$lit(2) >= 2 pl$lit(2) >= pl$lit(2) pl$lit(2)$gt_eq(pl$lit(2))","title":"`Expr_gt_eq`"},{"location":"reference/Expr_gt_eq/#expr_gt_eq","text":"Greater Than Or Equal <=","title":"Expr_gt_eq"},{"location":"reference/Expr_gt_eq/#description","text":"gt_eq method and operator","title":"Description"},{"location":"reference/Expr_gt_eq/#usage","text":"Expr_gt_eq(other) list(list(\">=\"), list(\"Expr\"))(e1, e2)","title":"Usage"},{"location":"reference/Expr_gt_eq/#arguments","text":"Argument Description other literal or Robj which can become a literal e1 lhs Expr e2 rhs Expr or anything which can become a literal Expression","title":"Arguments"},{"location":"reference/Expr_gt_eq/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_gt_eq/#value","text":"Exprs","title":"Value"},{"location":"reference/Expr_gt_eq/#examples","text":"#' #three syntaxes same result pl$lit(2) >= 2 pl$lit(2) >= pl$lit(2) pl$lit(2)$gt_eq(pl$lit(2))","title":"Examples"},{"location":"reference/Expr_hash/","text":"Expr_hash hash Description Hash the elements in the selection. The hash value is of type UInt64 . Usage Expr_hash(seed = 0, seed_1 = NULL, seed_2 = NULL, seed_3 = NULL) Arguments Argument Description seed Random seed parameter. Defaults to 0. seed_1 Random seed parameter. Defaults to arg seed. seed_2 Random seed parameter. Defaults to arg seed. seed_3 Random seed parameter. Defaults to arg seed. The column will be coerced to UInt32. Give this dtype to make the coercion a no-op. Value Expr Examples df = pl$DataFrame(iris) df$select(pl$all()$head(2)$hash(1234)$cast(pl$Utf8))$to_list()","title":"`Expr_hash`"},{"location":"reference/Expr_hash/#expr_hash","text":"hash","title":"Expr_hash"},{"location":"reference/Expr_hash/#description","text":"Hash the elements in the selection. The hash value is of type UInt64 .","title":"Description"},{"location":"reference/Expr_hash/#usage","text":"Expr_hash(seed = 0, seed_1 = NULL, seed_2 = NULL, seed_3 = NULL)","title":"Usage"},{"location":"reference/Expr_hash/#arguments","text":"Argument Description seed Random seed parameter. Defaults to 0. seed_1 Random seed parameter. Defaults to arg seed. seed_2 Random seed parameter. Defaults to arg seed. seed_3 Random seed parameter. Defaults to arg seed. The column will be coerced to UInt32. Give this dtype to make the coercion a no-op.","title":"Arguments"},{"location":"reference/Expr_hash/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_hash/#examples","text":"df = pl$DataFrame(iris) df$select(pl$all()$head(2)$hash(1234)$cast(pl$Utf8))$to_list()","title":"Examples"},{"location":"reference/Expr_head/","text":"Expr_head Head Description Get the head n elements. Similar to R head(x) Usage Expr_head(n = 10) Arguments Argument Description n numeric number of elements to select from head Value Expr Examples #get 3 first elements pl$DataFrame(list(x=1:11))$select(pl$col(\"x\")$head(3))","title":"`Expr_head`"},{"location":"reference/Expr_head/#expr_head","text":"Head","title":"Expr_head"},{"location":"reference/Expr_head/#description","text":"Get the head n elements. Similar to R head(x)","title":"Description"},{"location":"reference/Expr_head/#usage","text":"Expr_head(n = 10)","title":"Usage"},{"location":"reference/Expr_head/#arguments","text":"Argument Description n numeric number of elements to select from head","title":"Arguments"},{"location":"reference/Expr_head/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_head/#examples","text":"#get 3 first elements pl$DataFrame(list(x=1:11))$select(pl$col(\"x\")$head(3))","title":"Examples"},{"location":"reference/Expr_inspect/","text":"Expr_inspect Inspect evaluated Series Description Print the value that this expression evaluates to and pass on the value. The printing will happen when the expression evaluates, not when it is formed. Usage Expr_inspect(fmt = \"{}\") Arguments Argument Description fmt format string, should contain one set of {} where object will be printed This formatting mimics python \"string\".format() use in pypolars. The string can contain any thing but should have exactly one set of curly bracket list() . Value Expr Examples pl$select(pl$lit(1:5)$inspect( \"before dropping half the column it was:{}and not it is dropped\")$head(2) )","title":"`Expr_inspect`"},{"location":"reference/Expr_inspect/#expr_inspect","text":"Inspect evaluated Series","title":"Expr_inspect"},{"location":"reference/Expr_inspect/#description","text":"Print the value that this expression evaluates to and pass on the value. The printing will happen when the expression evaluates, not when it is formed.","title":"Description"},{"location":"reference/Expr_inspect/#usage","text":"Expr_inspect(fmt = \"{}\")","title":"Usage"},{"location":"reference/Expr_inspect/#arguments","text":"Argument Description fmt format string, should contain one set of {} where object will be printed This formatting mimics python \"string\".format() use in pypolars. The string can contain any thing but should have exactly one set of curly bracket list() .","title":"Arguments"},{"location":"reference/Expr_inspect/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_inspect/#examples","text":"pl$select(pl$lit(1:5)$inspect( \"before dropping half the column it was:{}and not it is dropped\")$head(2) )","title":"Examples"},{"location":"reference/Expr_interpolate/","text":"Expr_interpolate Interpolate Nulls Description Fill nulls with linear interpolation over missing values. Can also be used to regrid data to a new grid - see examples below. Usage Expr_interpolate(method = \"linear\") Arguments Argument Description method string 'linear' or 'nearest', default \"linear\" Value Expr Examples pl$select(pl$lit(c(1,NA,4,NA,100,NaN,150))$interpolate()) #x, y interpolation over a grid df_original_grid = pl$DataFrame(list( grid_points = c(1, 3, 10), values = c(2.0, 6.0, 20.0) )) df_new_grid = pl$DataFrame(list(grid_points = (1:10)*1.0)) # Interpolate from this to the new grid df_new_grid$join( df_original_grid, on=\"grid_points\", how=\"left\" )$with_columns(pl$col(\"values\")$interpolate())","title":"`Expr_interpolate`"},{"location":"reference/Expr_interpolate/#expr_interpolate","text":"Interpolate Nulls","title":"Expr_interpolate"},{"location":"reference/Expr_interpolate/#description","text":"Fill nulls with linear interpolation over missing values. Can also be used to regrid data to a new grid - see examples below.","title":"Description"},{"location":"reference/Expr_interpolate/#usage","text":"Expr_interpolate(method = \"linear\")","title":"Usage"},{"location":"reference/Expr_interpolate/#arguments","text":"Argument Description method string 'linear' or 'nearest', default \"linear\"","title":"Arguments"},{"location":"reference/Expr_interpolate/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_interpolate/#examples","text":"pl$select(pl$lit(c(1,NA,4,NA,100,NaN,150))$interpolate()) #x, y interpolation over a grid df_original_grid = pl$DataFrame(list( grid_points = c(1, 3, 10), values = c(2.0, 6.0, 20.0) )) df_new_grid = pl$DataFrame(list(grid_points = (1:10)*1.0)) # Interpolate from this to the new grid df_new_grid$join( df_original_grid, on=\"grid_points\", how=\"left\" )$with_columns(pl$col(\"values\")$interpolate())","title":"Examples"},{"location":"reference/Expr_is_between/","text":"Expr_is_between is in between Description Check if this expression is between start and end. Usage Expr_is_between(start, end, include_bounds = FALSE) Arguments Argument Description start Lower bound as primitive or datetime end Lower bound as primitive or datetime include_bounds bool vector or scalar: FALSE: Exclude both start and end (default). TRUE: Include both start and end. c(FALSE, FALSE): Exclude start and exclude end. c(TRUE, TRUE): Include start and include end. c(FALSE, TRUE): Exclude start and include end. c(TRUE, FALSE): Include start and exclude end. Details alias the column to 'in_between' This function is equivalent to a combination of < <= >= and the &-and operator. Value Expr Examples df = pl$DataFrame(list(num = 1:5)) df$select(pl$col(\"num\")$is_between(2,4)) df$select(pl$col(\"num\")$is_between(2,4,TRUE)) df$select(pl$col(\"num\")$is_between(2,4,c(FALSE, TRUE))) #start end can be a vector/expr with same length as column df$select(pl$col(\"num\")$is_between(c(0,2,3,3,3),6))","title":"`Expr_is_between`"},{"location":"reference/Expr_is_between/#expr_is_between","text":"is in between","title":"Expr_is_between"},{"location":"reference/Expr_is_between/#description","text":"Check if this expression is between start and end.","title":"Description"},{"location":"reference/Expr_is_between/#usage","text":"Expr_is_between(start, end, include_bounds = FALSE)","title":"Usage"},{"location":"reference/Expr_is_between/#arguments","text":"Argument Description start Lower bound as primitive or datetime end Lower bound as primitive or datetime include_bounds bool vector or scalar: FALSE: Exclude both start and end (default). TRUE: Include both start and end. c(FALSE, FALSE): Exclude start and exclude end. c(TRUE, TRUE): Include start and include end. c(FALSE, TRUE): Exclude start and include end. c(TRUE, FALSE): Include start and exclude end.","title":"Arguments"},{"location":"reference/Expr_is_between/#details","text":"alias the column to 'in_between' This function is equivalent to a combination of < <= >= and the &-and operator.","title":"Details"},{"location":"reference/Expr_is_between/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_is_between/#examples","text":"df = pl$DataFrame(list(num = 1:5)) df$select(pl$col(\"num\")$is_between(2,4)) df$select(pl$col(\"num\")$is_between(2,4,TRUE)) df$select(pl$col(\"num\")$is_between(2,4,c(FALSE, TRUE))) #start end can be a vector/expr with same length as column df$select(pl$col(\"num\")$is_between(c(0,2,3,3,3),6))","title":"Examples"},{"location":"reference/Expr_is_duplicated/","text":"Expr_is_duplicated Get mask of duplicated values. Description Get mask of duplicated values. Format a method Usage Expr_is_duplicated Details is_duplicated is the opposite of is_unique() Looking for R like duplicated() ?, use some_expr$is_first()$is_not() Value Expr (boolean) Examples v = c(1,1,2,2,3,NA,NaN,Inf) all.equal( pl$select( pl$lit(v)$is_unique()$alias(\"is_unique\"), pl$lit(v)$is_first()$alias(\"is_first\"), pl$lit(v)$is_duplicated()$alias(\"is_duplicated\"), pl$lit(v)$is_first()$is_not()$alias(\"R_duplicated\") )$to_list(), list( is_unique = !v %in% v[duplicated(v)], is_first = !duplicated(v), is_duplicated = v %in% v[duplicated(v)], R_duplicated = duplicated(v) ) )","title":"`Expr_is_duplicated`"},{"location":"reference/Expr_is_duplicated/#expr_is_duplicated","text":"Get mask of duplicated values.","title":"Expr_is_duplicated"},{"location":"reference/Expr_is_duplicated/#description","text":"Get mask of duplicated values.","title":"Description"},{"location":"reference/Expr_is_duplicated/#format","text":"a method","title":"Format"},{"location":"reference/Expr_is_duplicated/#usage","text":"Expr_is_duplicated","title":"Usage"},{"location":"reference/Expr_is_duplicated/#details","text":"is_duplicated is the opposite of is_unique() Looking for R like duplicated() ?, use some_expr$is_first()$is_not()","title":"Details"},{"location":"reference/Expr_is_duplicated/#value","text":"Expr (boolean)","title":"Value"},{"location":"reference/Expr_is_duplicated/#examples","text":"v = c(1,1,2,2,3,NA,NaN,Inf) all.equal( pl$select( pl$lit(v)$is_unique()$alias(\"is_unique\"), pl$lit(v)$is_first()$alias(\"is_first\"), pl$lit(v)$is_duplicated()$alias(\"is_duplicated\"), pl$lit(v)$is_first()$is_not()$alias(\"R_duplicated\") )$to_list(), list( is_unique = !v %in% v[duplicated(v)], is_first = !duplicated(v), is_duplicated = v %in% v[duplicated(v)], R_duplicated = duplicated(v) ) )","title":"Examples"},{"location":"reference/Expr_is_finite/","text":"Expr_is_finite Are elements finite Description Returns a boolean output indicating which values are finite. Format a method Usage Expr_is_finite Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples pl$DataFrame(list(alice=c(0,NaN,NA,Inf,-Inf)))$select(pl$col(\"alice\")$is_finite())","title":"`Expr_is_finite`"},{"location":"reference/Expr_is_finite/#expr_is_finite","text":"Are elements finite","title":"Expr_is_finite"},{"location":"reference/Expr_is_finite/#description","text":"Returns a boolean output indicating which values are finite.","title":"Description"},{"location":"reference/Expr_is_finite/#format","text":"a method","title":"Format"},{"location":"reference/Expr_is_finite/#usage","text":"Expr_is_finite","title":"Usage"},{"location":"reference/Expr_is_finite/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_is_finite/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_is_finite/#examples","text":"pl$DataFrame(list(alice=c(0,NaN,NA,Inf,-Inf)))$select(pl$col(\"alice\")$is_finite())","title":"Examples"},{"location":"reference/Expr_is_first/","text":"Expr_is_first Get a mask of the first unique value. Description Get a mask of the first unique value. Format a method Usage Expr_is_first Value Expr (boolean) Examples v = c(1,1,2,2,3,NA,NaN,Inf) all.equal( pl$select( pl$lit(v)$is_unique()$alias(\"is_unique\"), pl$lit(v)$is_first()$alias(\"is_first\"), pl$lit(v)$is_duplicated()$alias(\"is_duplicated\"), pl$lit(v)$is_first()$is_not()$alias(\"R_duplicated\") )$to_list(), list( is_unique = !v %in% v[duplicated(v)], is_first = !duplicated(v), is_duplicated = v %in% v[duplicated(v)], R_duplicated = duplicated(v) ) )","title":"`Expr_is_first`"},{"location":"reference/Expr_is_first/#expr_is_first","text":"Get a mask of the first unique value.","title":"Expr_is_first"},{"location":"reference/Expr_is_first/#description","text":"Get a mask of the first unique value.","title":"Description"},{"location":"reference/Expr_is_first/#format","text":"a method","title":"Format"},{"location":"reference/Expr_is_first/#usage","text":"Expr_is_first","title":"Usage"},{"location":"reference/Expr_is_first/#value","text":"Expr (boolean)","title":"Value"},{"location":"reference/Expr_is_first/#examples","text":"v = c(1,1,2,2,3,NA,NaN,Inf) all.equal( pl$select( pl$lit(v)$is_unique()$alias(\"is_unique\"), pl$lit(v)$is_first()$alias(\"is_first\"), pl$lit(v)$is_duplicated()$alias(\"is_duplicated\"), pl$lit(v)$is_first()$is_not()$alias(\"R_duplicated\") )$to_list(), list( is_unique = !v %in% v[duplicated(v)], is_first = !duplicated(v), is_duplicated = v %in% v[duplicated(v)], R_duplicated = duplicated(v) ) )","title":"Examples"},{"location":"reference/Expr_is_in/","text":"Expr_is_in is_in Description combine to boolean expresions with similar to %in% Format An object of class character of length 1. Usage Expr_is_in(other) Arguments Argument Description other literal or Robj which can become a literal Value Expr Examples #R Na_integer -> polars Null(Int32) is in polars Null(Int32) pl$DataFrame(list(a=c(1:4,NA_integer_)))$select( pl$col(\"a\")$is_in(pl$lit(NA_real_)) )$as_data_frame()[[1L]]","title":"`Expr_is_in`"},{"location":"reference/Expr_is_in/#expr_is_in","text":"is_in","title":"Expr_is_in"},{"location":"reference/Expr_is_in/#description","text":"combine to boolean expresions with similar to %in%","title":"Description"},{"location":"reference/Expr_is_in/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_is_in/#usage","text":"Expr_is_in(other)","title":"Usage"},{"location":"reference/Expr_is_in/#arguments","text":"Argument Description other literal or Robj which can become a literal","title":"Arguments"},{"location":"reference/Expr_is_in/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_is_in/#examples","text":"#R Na_integer -> polars Null(Int32) is in polars Null(Int32) pl$DataFrame(list(a=c(1:4,NA_integer_)))$select( pl$col(\"a\")$is_in(pl$lit(NA_real_)) )$as_data_frame()[[1L]]","title":"Examples"},{"location":"reference/Expr_is_infinite/","text":"Expr_is_infinite Are elements infinite Description Returns a boolean output indicating which values are infinite. Format a method Usage Expr_is_infinite Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples pl$DataFrame(list(alice=c(0,NaN,NA,Inf,-Inf)))$select(pl$col(\"alice\")$is_infinite())","title":"`Expr_is_infinite`"},{"location":"reference/Expr_is_infinite/#expr_is_infinite","text":"Are elements infinite","title":"Expr_is_infinite"},{"location":"reference/Expr_is_infinite/#description","text":"Returns a boolean output indicating which values are infinite.","title":"Description"},{"location":"reference/Expr_is_infinite/#format","text":"a method","title":"Format"},{"location":"reference/Expr_is_infinite/#usage","text":"Expr_is_infinite","title":"Usage"},{"location":"reference/Expr_is_infinite/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_is_infinite/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_is_infinite/#examples","text":"pl$DataFrame(list(alice=c(0,NaN,NA,Inf,-Inf)))$select(pl$col(\"alice\")$is_infinite())","title":"Examples"},{"location":"reference/Expr_is_nan/","text":"Expr_is_nan Are elements NaN's Description Returns a boolean Series indicating which values are NaN. Format a method Usage Expr_is_nan Details Floating point NaN's are a different flag from Null(polars) which is the same as NA_real_(R). See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples pl$DataFrame(list(alice=c(0,NaN,NA,Inf,-Inf)))$select(pl$col(\"alice\")$is_nan())","title":"`Expr_is_nan`"},{"location":"reference/Expr_is_nan/#expr_is_nan","text":"Are elements NaN's","title":"Expr_is_nan"},{"location":"reference/Expr_is_nan/#description","text":"Returns a boolean Series indicating which values are NaN.","title":"Description"},{"location":"reference/Expr_is_nan/#format","text":"a method","title":"Format"},{"location":"reference/Expr_is_nan/#usage","text":"Expr_is_nan","title":"Usage"},{"location":"reference/Expr_is_nan/#details","text":"Floating point NaN's are a different flag from Null(polars) which is the same as NA_real_(R). See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_is_nan/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_is_nan/#examples","text":"pl$DataFrame(list(alice=c(0,NaN,NA,Inf,-Inf)))$select(pl$col(\"alice\")$is_nan())","title":"Examples"},{"location":"reference/Expr_is_not/","text":"Expr_is_not Not ! Description not method and operator Format An object of class character of length 1. Usage Expr_is_not(other) list(list(\"!\"), list(\"Expr\"))(x) Arguments Argument Description x Expr other literal or Robj which can become a literal Value Exprs Examples #two syntaxes same result pl$lit(TRUE)$is_not() !pl$lit(TRUE)","title":"`Expr_is_not`"},{"location":"reference/Expr_is_not/#expr_is_not","text":"Not !","title":"Expr_is_not"},{"location":"reference/Expr_is_not/#description","text":"not method and operator","title":"Description"},{"location":"reference/Expr_is_not/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_is_not/#usage","text":"Expr_is_not(other) list(list(\"!\"), list(\"Expr\"))(x)","title":"Usage"},{"location":"reference/Expr_is_not/#arguments","text":"Argument Description x Expr other literal or Robj which can become a literal","title":"Arguments"},{"location":"reference/Expr_is_not/#value","text":"Exprs","title":"Value"},{"location":"reference/Expr_is_not/#examples","text":"#two syntaxes same result pl$lit(TRUE)$is_not() !pl$lit(TRUE)","title":"Examples"},{"location":"reference/Expr_is_not_nan/","text":"Expr_is_not_nan Are elements not NaN's Description Returns a boolean Series indicating which values are not NaN. Format a method Usage Expr_is_not_nan Details Floating point NaN's are a different flag from Null(polars) which is the same as NA_real_(R). See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples pl$DataFrame(list(alice=c(0,NaN,NA,Inf,-Inf)))$select(pl$col(\"alice\")$is_not_nan())","title":"`Expr_is_not_nan`"},{"location":"reference/Expr_is_not_nan/#expr_is_not_nan","text":"Are elements not NaN's","title":"Expr_is_not_nan"},{"location":"reference/Expr_is_not_nan/#description","text":"Returns a boolean Series indicating which values are not NaN.","title":"Description"},{"location":"reference/Expr_is_not_nan/#format","text":"a method","title":"Format"},{"location":"reference/Expr_is_not_nan/#usage","text":"Expr_is_not_nan","title":"Usage"},{"location":"reference/Expr_is_not_nan/#details","text":"Floating point NaN's are a different flag from Null(polars) which is the same as NA_real_(R). See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_is_not_nan/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_is_not_nan/#examples","text":"pl$DataFrame(list(alice=c(0,NaN,NA,Inf,-Inf)))$select(pl$col(\"alice\")$is_not_nan())","title":"Examples"},{"location":"reference/Expr_is_not_null/","text":"Expr_is_not_null is_not_null Description Returns a boolean Series indicating which values are not null. Similar to R syntax !is.na(x) null polars about the same as R NA Format An object of class character of length 1. Usage Expr_is_not_null Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples pl$DataFrame(list(x=c(1,NA,3)))$select(pl$col(\"x\")$is_not_null())","title":"`Expr_is_not_null`"},{"location":"reference/Expr_is_not_null/#expr_is_not_null","text":"is_not_null","title":"Expr_is_not_null"},{"location":"reference/Expr_is_not_null/#description","text":"Returns a boolean Series indicating which values are not null. Similar to R syntax !is.na(x) null polars about the same as R NA","title":"Description"},{"location":"reference/Expr_is_not_null/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_is_not_null/#usage","text":"Expr_is_not_null","title":"Usage"},{"location":"reference/Expr_is_not_null/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_is_not_null/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_is_not_null/#examples","text":"pl$DataFrame(list(x=c(1,NA,3)))$select(pl$col(\"x\")$is_not_null())","title":"Examples"},{"location":"reference/Expr_is_null/","text":"Expr_is_null is_null Description Returns a boolean Series indicating which values are null. Similar to R syntax is.na(x) null polars about the same as R NA Format An object of class character of length 1. Usage Expr_is_null Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples pl$DataFrame(list(x=c(1,NA,3)))$select(pl$col(\"x\")$is_null())","title":"`Expr_is_null`"},{"location":"reference/Expr_is_null/#expr_is_null","text":"is_null","title":"Expr_is_null"},{"location":"reference/Expr_is_null/#description","text":"Returns a boolean Series indicating which values are null. Similar to R syntax is.na(x) null polars about the same as R NA","title":"Description"},{"location":"reference/Expr_is_null/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_is_null/#usage","text":"Expr_is_null","title":"Usage"},{"location":"reference/Expr_is_null/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_is_null/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_is_null/#examples","text":"pl$DataFrame(list(x=c(1,NA,3)))$select(pl$col(\"x\")$is_null())","title":"Examples"},{"location":"reference/Expr_is_unique/","text":"Expr_is_unique Get mask of unique values Description Get mask of unique values Format a method Usage Expr_is_unique Value Expr (boolean) Examples v = c(1,1,2,2,3,NA,NaN,Inf) all.equal( pl$select( pl$lit(v)$is_unique()$alias(\"is_unique\"), pl$lit(v)$is_first()$alias(\"is_first\"), pl$lit(v)$is_duplicated()$alias(\"is_duplicated\"), pl$lit(v)$is_first()$is_not()$alias(\"R_duplicated\") )$to_list(), list( is_unique = !v %in% v[duplicated(v)], is_first = !duplicated(v), is_duplicated = v %in% v[duplicated(v)], R_duplicated = duplicated(v) ) )","title":"`Expr_is_unique`"},{"location":"reference/Expr_is_unique/#expr_is_unique","text":"Get mask of unique values","title":"Expr_is_unique"},{"location":"reference/Expr_is_unique/#description","text":"Get mask of unique values","title":"Description"},{"location":"reference/Expr_is_unique/#format","text":"a method","title":"Format"},{"location":"reference/Expr_is_unique/#usage","text":"Expr_is_unique","title":"Usage"},{"location":"reference/Expr_is_unique/#value","text":"Expr (boolean)","title":"Value"},{"location":"reference/Expr_is_unique/#examples","text":"v = c(1,1,2,2,3,NA,NaN,Inf) all.equal( pl$select( pl$lit(v)$is_unique()$alias(\"is_unique\"), pl$lit(v)$is_first()$alias(\"is_first\"), pl$lit(v)$is_duplicated()$alias(\"is_duplicated\"), pl$lit(v)$is_first()$is_not()$alias(\"R_duplicated\") )$to_list(), list( is_unique = !v %in% v[duplicated(v)], is_first = !duplicated(v), is_duplicated = v %in% v[duplicated(v)], R_duplicated = duplicated(v) ) )","title":"Examples"},{"location":"reference/Expr_keep_name/","text":"Expr_keep_name Keep the original root name of the expression. Description Keep the original root name of the expression. Format a method Usage Expr_keep_name Value Expr Examples pl$DataFrame(list(alice=1:3))$select(pl$col(\"alice\")$alias(\"bob\")$keep_name())","title":"`Expr_keep_name`"},{"location":"reference/Expr_keep_name/#expr_keep_name","text":"Keep the original root name of the expression.","title":"Expr_keep_name"},{"location":"reference/Expr_keep_name/#description","text":"Keep the original root name of the expression.","title":"Description"},{"location":"reference/Expr_keep_name/#format","text":"a method","title":"Format"},{"location":"reference/Expr_keep_name/#usage","text":"Expr_keep_name","title":"Usage"},{"location":"reference/Expr_keep_name/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_keep_name/#examples","text":"pl$DataFrame(list(alice=1:3))$select(pl$col(\"alice\")$alias(\"bob\")$keep_name())","title":"Examples"},{"location":"reference/Expr_kurtosis/","text":"Expr_kurtosis Kurtosis Description Compute the kurtosis (Fisher or Pearson) of a dataset. Usage Expr_kurtosis(fisher = TRUE, bias = TRUE) Arguments Argument Description fisher bool se details bias bool, If FALSE, then the calculations are corrected for statistical bias. Details Kurtosis is the fourth central moment divided by the square of the variance. If Fisher's definition is used, then 3.0 is subtracted from the result to give 0.0 for a normal distribution. If bias is False then the kurtosis is calculated using k statistics to eliminate bias coming from biased moment estimators See scipy.stats for more information #' See scipy.stats for more information. Value Expr References https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kurtosis.html?highlight=kurtosis Examples df = pl$DataFrame(list( a=c(1:3,2:1))) df$select(pl$col(\"a\")$kurtosis())","title":"`Expr_kurtosis`"},{"location":"reference/Expr_kurtosis/#expr_kurtosis","text":"Kurtosis","title":"Expr_kurtosis"},{"location":"reference/Expr_kurtosis/#description","text":"Compute the kurtosis (Fisher or Pearson) of a dataset.","title":"Description"},{"location":"reference/Expr_kurtosis/#usage","text":"Expr_kurtosis(fisher = TRUE, bias = TRUE)","title":"Usage"},{"location":"reference/Expr_kurtosis/#arguments","text":"Argument Description fisher bool se details bias bool, If FALSE, then the calculations are corrected for statistical bias.","title":"Arguments"},{"location":"reference/Expr_kurtosis/#details","text":"Kurtosis is the fourth central moment divided by the square of the variance. If Fisher's definition is used, then 3.0 is subtracted from the result to give 0.0 for a normal distribution. If bias is False then the kurtosis is calculated using k statistics to eliminate bias coming from biased moment estimators See scipy.stats for more information #' See scipy.stats for more information.","title":"Details"},{"location":"reference/Expr_kurtosis/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_kurtosis/#references","text":"https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.kurtosis.html?highlight=kurtosis","title":"References"},{"location":"reference/Expr_kurtosis/#examples","text":"df = pl$DataFrame(list( a=c(1:3,2:1))) df$select(pl$col(\"a\")$kurtosis())","title":"Examples"},{"location":"reference/Expr_last/","text":"Expr_last Last Description Get the lastvalue. Similar to R syntax tail(x,1) Format An object of class character of length 1. Usage Expr_last Value Expr Examples pl$DataFrame(list(x=c(1,2,3)))$select(pl$col(\"x\")$last())","title":"`Expr_last`"},{"location":"reference/Expr_last/#expr_last","text":"Last","title":"Expr_last"},{"location":"reference/Expr_last/#description","text":"Get the lastvalue. Similar to R syntax tail(x,1)","title":"Description"},{"location":"reference/Expr_last/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_last/#usage","text":"Expr_last","title":"Usage"},{"location":"reference/Expr_last/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_last/#examples","text":"pl$DataFrame(list(x=c(1,2,3)))$select(pl$col(\"x\")$last())","title":"Examples"},{"location":"reference/Expr_limit/","text":"Expr_limit Limit Description Alias for Head Get the head n elements. Similar to R head(x) Usage Expr_limit(n = 10) Arguments Argument Description n numeric number of elements to select from head Value Expr Examples #get 3 first elements pl$DataFrame(list(x=1:11))$select(pl$col(\"x\")$limit(3))","title":"`Expr_limit`"},{"location":"reference/Expr_limit/#expr_limit","text":"Limit","title":"Expr_limit"},{"location":"reference/Expr_limit/#description","text":"Alias for Head Get the head n elements. Similar to R head(x)","title":"Description"},{"location":"reference/Expr_limit/#usage","text":"Expr_limit(n = 10)","title":"Usage"},{"location":"reference/Expr_limit/#arguments","text":"Argument Description n numeric number of elements to select from head","title":"Arguments"},{"location":"reference/Expr_limit/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_limit/#examples","text":"#get 3 first elements pl$DataFrame(list(x=1:11))$select(pl$col(\"x\")$limit(3))","title":"Examples"},{"location":"reference/Expr_list/","text":"Expr_list Wrap column in list Description Aggregate to list. Format a method Usage Expr_list Details use to_struct to wrap a DataFrame Value Expr Examples pl$select(pl$lit(1:4)$list(), pl$lit(c(\"a\")))","title":"`Expr_list`"},{"location":"reference/Expr_list/#expr_list","text":"Wrap column in list","title":"Expr_list"},{"location":"reference/Expr_list/#description","text":"Aggregate to list.","title":"Description"},{"location":"reference/Expr_list/#format","text":"a method","title":"Format"},{"location":"reference/Expr_list/#usage","text":"Expr_list","title":"Usage"},{"location":"reference/Expr_list/#details","text":"use to_struct to wrap a DataFrame","title":"Details"},{"location":"reference/Expr_list/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_list/#examples","text":"pl$select(pl$lit(1:4)$list(), pl$lit(c(\"a\")))","title":"Examples"},{"location":"reference/Expr_lit_to_df/","text":"Expr_lit_to_df Literal to DataFrame Description collect an expression based on literals into a DataFrame Usage Expr_lit_to_df() Value Series Examples ( pl$Series(list(1:1, 1:2, 1:3, 1:4)) $print() $to_lit() $arr$lengths() $sum() $cast(pl$dtypes$Int8) $lit_to_df() )","title":"`Expr_lit_to_df`"},{"location":"reference/Expr_lit_to_df/#expr_lit_to_df","text":"Literal to DataFrame","title":"Expr_lit_to_df"},{"location":"reference/Expr_lit_to_df/#description","text":"collect an expression based on literals into a DataFrame","title":"Description"},{"location":"reference/Expr_lit_to_df/#usage","text":"Expr_lit_to_df()","title":"Usage"},{"location":"reference/Expr_lit_to_df/#value","text":"Series","title":"Value"},{"location":"reference/Expr_lit_to_df/#examples","text":"( pl$Series(list(1:1, 1:2, 1:3, 1:4)) $print() $to_lit() $arr$lengths() $sum() $cast(pl$dtypes$Int8) $lit_to_df() )","title":"Examples"},{"location":"reference/Expr_lit_to_s/","text":"Expr_lit_to_s Literal to Series Description collect an expression based on literals into a Series Usage Expr_lit_to_s() Value Series Examples ( pl$Series(list(1:1, 1:2, 1:3, 1:4)) $print() $to_lit() $arr$lengths() $sum() $cast(pl$dtypes$Int8) $lit_to_s() )","title":"`Expr_lit_to_s`"},{"location":"reference/Expr_lit_to_s/#expr_lit_to_s","text":"Literal to Series","title":"Expr_lit_to_s"},{"location":"reference/Expr_lit_to_s/#description","text":"collect an expression based on literals into a Series","title":"Description"},{"location":"reference/Expr_lit_to_s/#usage","text":"Expr_lit_to_s()","title":"Usage"},{"location":"reference/Expr_lit_to_s/#value","text":"Series","title":"Value"},{"location":"reference/Expr_lit_to_s/#examples","text":"( pl$Series(list(1:1, 1:2, 1:3, 1:4)) $print() $to_lit() $arr$lengths() $sum() $cast(pl$dtypes$Int8) $lit_to_s() )","title":"Examples"},{"location":"reference/Expr_log/","text":"Expr_log Natural Log Description Compute the base x logarithm of the input array, element-wise. Usage Expr_log(base = base::exp(1)) Arguments Argument Description base numeric base value for log, default base::exp(1) Value Expr Examples pl$DataFrame(list(a = exp(1)^(-1:3)))$select(pl$col(\"a\")$log())","title":"`Expr_log`"},{"location":"reference/Expr_log/#expr_log","text":"Natural Log","title":"Expr_log"},{"location":"reference/Expr_log/#description","text":"Compute the base x logarithm of the input array, element-wise.","title":"Description"},{"location":"reference/Expr_log/#usage","text":"Expr_log(base = base::exp(1))","title":"Usage"},{"location":"reference/Expr_log/#arguments","text":"Argument Description base numeric base value for log, default base::exp(1)","title":"Arguments"},{"location":"reference/Expr_log/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_log/#examples","text":"pl$DataFrame(list(a = exp(1)^(-1:3)))$select(pl$col(\"a\")$log())","title":"Examples"},{"location":"reference/Expr_log10/","text":"Expr_log10 10-base log Description Compute the base 10 logarithm of the input array, element-wise. Format a method Usage Expr_log10 Value Expr Examples pl$DataFrame(list(a = 10^(-1:3)))$select(pl$col(\"a\")$log10())","title":"`Expr_log10`"},{"location":"reference/Expr_log10/#expr_log10","text":"10-base log","title":"Expr_log10"},{"location":"reference/Expr_log10/#description","text":"Compute the base 10 logarithm of the input array, element-wise.","title":"Description"},{"location":"reference/Expr_log10/#format","text":"a method","title":"Format"},{"location":"reference/Expr_log10/#usage","text":"Expr_log10","title":"Usage"},{"location":"reference/Expr_log10/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_log10/#examples","text":"pl$DataFrame(list(a = 10^(-1:3)))$select(pl$col(\"a\")$log10())","title":"Examples"},{"location":"reference/Expr_lt/","text":"Expr_lt Less Than < Description lt method and operator Usage Expr_lt(other) list(list(\"<\"), list(\"Expr\"))(e1, e2) Arguments Argument Description other literal or Robj which can become a literal e1 lhs Expr e2 rhs Expr or anything which can become a literal Expression Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Exprs Examples #' #three syntaxes same result pl$lit(5) < 10 pl$lit(5) < pl$lit(10) pl$lit(5)$lt(pl$lit(10))","title":"`Expr_lt`"},{"location":"reference/Expr_lt/#expr_lt","text":"Less Than <","title":"Expr_lt"},{"location":"reference/Expr_lt/#description","text":"lt method and operator","title":"Description"},{"location":"reference/Expr_lt/#usage","text":"Expr_lt(other) list(list(\"<\"), list(\"Expr\"))(e1, e2)","title":"Usage"},{"location":"reference/Expr_lt/#arguments","text":"Argument Description other literal or Robj which can become a literal e1 lhs Expr e2 rhs Expr or anything which can become a literal Expression","title":"Arguments"},{"location":"reference/Expr_lt/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_lt/#value","text":"Exprs","title":"Value"},{"location":"reference/Expr_lt/#examples","text":"#' #three syntaxes same result pl$lit(5) < 10 pl$lit(5) < pl$lit(10) pl$lit(5)$lt(pl$lit(10))","title":"Examples"},{"location":"reference/Expr_lt_eq/","text":"Expr_lt_eq Less Than Or Equal <= Description lt_eq method and operator Usage Expr_lt_eq(other) list(list(\"<=\"), list(\"Expr\"))(e1, e2) Arguments Argument Description other literal or Robj which can become a literal e1 lhs Expr e2 rhs Expr or anything which can become a literal Expression Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Exprs Examples #' #three syntaxes same result pl$lit(2) <= 2 pl$lit(2) <= pl$lit(2) pl$lit(2)$lt_eq(pl$lit(2))","title":"`Expr_lt_eq`"},{"location":"reference/Expr_lt_eq/#expr_lt_eq","text":"Less Than Or Equal <=","title":"Expr_lt_eq"},{"location":"reference/Expr_lt_eq/#description","text":"lt_eq method and operator","title":"Description"},{"location":"reference/Expr_lt_eq/#usage","text":"Expr_lt_eq(other) list(list(\"<=\"), list(\"Expr\"))(e1, e2)","title":"Usage"},{"location":"reference/Expr_lt_eq/#arguments","text":"Argument Description other literal or Robj which can become a literal e1 lhs Expr e2 rhs Expr or anything which can become a literal Expression","title":"Arguments"},{"location":"reference/Expr_lt_eq/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_lt_eq/#value","text":"Exprs","title":"Value"},{"location":"reference/Expr_lt_eq/#examples","text":"#' #three syntaxes same result pl$lit(2) <= 2 pl$lit(2) <= pl$lit(2) pl$lit(2)$lt_eq(pl$lit(2))","title":"Examples"},{"location":"reference/Expr_map/","text":"Expr_map Expr_map Description Expr_map Usage Expr_map(f, output_type = NULL, agg_list = FALSE) Arguments Argument Description f a function mapping a series output_type NULL or one of pl$dtypes$..., the output datatype, NULL is the same as input. agg_list Aggregate list. Map from vector to group in groupby context. Likely not so useful. Details user function return should be a series or any Robj convertable into a Series. In PyPolars likely return must be Series. User functions do fully support browser() , helpful to investigate. Value Expr Examples pl$DataFrame(iris)$select(pl$col(\"Sepal.Length\")$map(\\(x) { paste(\"cheese\",as.character(x$to_r_vector())) }, pl$dtypes$Utf8))","title":"`Expr_map`"},{"location":"reference/Expr_map/#expr_map","text":"Expr_map","title":"Expr_map"},{"location":"reference/Expr_map/#description","text":"Expr_map","title":"Description"},{"location":"reference/Expr_map/#usage","text":"Expr_map(f, output_type = NULL, agg_list = FALSE)","title":"Usage"},{"location":"reference/Expr_map/#arguments","text":"Argument Description f a function mapping a series output_type NULL or one of pl$dtypes$..., the output datatype, NULL is the same as input. agg_list Aggregate list. Map from vector to group in groupby context. Likely not so useful.","title":"Arguments"},{"location":"reference/Expr_map/#details","text":"user function return should be a series or any Robj convertable into a Series. In PyPolars likely return must be Series. User functions do fully support browser() , helpful to investigate.","title":"Details"},{"location":"reference/Expr_map/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_map/#examples","text":"pl$DataFrame(iris)$select(pl$col(\"Sepal.Length\")$map(\\(x) { paste(\"cheese\",as.character(x$to_r_vector())) }, pl$dtypes$Utf8))","title":"Examples"},{"location":"reference/Expr_map_alias/","text":"Expr_map_alias Map alias of expression with an R function Description Rename the output of an expression by mapping a function over the root name. Usage Expr_map_alias(fun) Arguments Argument Description fun an R function which takes a string as input and return a string Value Expr Examples pl$DataFrame(list(alice=1:3))$select( pl$col(\"alice\")$alias(\"joe_is_not_root\")$map_alias(\\(x) paste0(x,\"_and_bob\")) )","title":"`Expr_map_alias`"},{"location":"reference/Expr_map_alias/#expr_map_alias","text":"Map alias of expression with an R function","title":"Expr_map_alias"},{"location":"reference/Expr_map_alias/#description","text":"Rename the output of an expression by mapping a function over the root name.","title":"Description"},{"location":"reference/Expr_map_alias/#usage","text":"Expr_map_alias(fun)","title":"Usage"},{"location":"reference/Expr_map_alias/#arguments","text":"Argument Description fun an R function which takes a string as input and return a string","title":"Arguments"},{"location":"reference/Expr_map_alias/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_map_alias/#examples","text":"pl$DataFrame(list(alice=1:3))$select( pl$col(\"alice\")$alias(\"joe_is_not_root\")$map_alias(\\(x) paste0(x,\"_and_bob\")) )","title":"Examples"},{"location":"reference/Expr_max/","text":"Expr_max max Description Get maximum value. Format An object of class character of length 1. Usage Expr_max Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples pl$DataFrame(list(x=c(1,NA,3)))$select(pl$col(\"x\")$max() == 3) #is true","title":"`Expr_max`"},{"location":"reference/Expr_max/#expr_max","text":"max","title":"Expr_max"},{"location":"reference/Expr_max/#description","text":"Get maximum value.","title":"Description"},{"location":"reference/Expr_max/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_max/#usage","text":"Expr_max","title":"Usage"},{"location":"reference/Expr_max/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_max/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_max/#examples","text":"pl$DataFrame(list(x=c(1,NA,3)))$select(pl$col(\"x\")$max() == 3) #is true","title":"Examples"},{"location":"reference/Expr_mean/","text":"Expr_mean mean Description Get mean value. Format An object of class character of length 1. Usage Expr_mean Value Expr Examples pl$DataFrame(list(x=c(1,NA,3)))$select(pl$col(\"x\")$mean()==2) #is true","title":"`Expr_mean`"},{"location":"reference/Expr_mean/#expr_mean","text":"mean","title":"Expr_mean"},{"location":"reference/Expr_mean/#description","text":"Get mean value.","title":"Description"},{"location":"reference/Expr_mean/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_mean/#usage","text":"Expr_mean","title":"Usage"},{"location":"reference/Expr_mean/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_mean/#examples","text":"pl$DataFrame(list(x=c(1,NA,3)))$select(pl$col(\"x\")$mean()==2) #is true","title":"Examples"},{"location":"reference/Expr_median/","text":"Expr_median median Description Get median value. Format An object of class character of length 1. Usage Expr_median Value Expr Examples pl$DataFrame(list(x=c(1,NA,2)))$select(pl$col(\"x\")$median()==1.5) #is true","title":"`Expr_median`"},{"location":"reference/Expr_median/#expr_median","text":"median","title":"Expr_median"},{"location":"reference/Expr_median/#description","text":"Get median value.","title":"Description"},{"location":"reference/Expr_median/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_median/#usage","text":"Expr_median","title":"Usage"},{"location":"reference/Expr_median/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_median/#examples","text":"pl$DataFrame(list(x=c(1,NA,2)))$select(pl$col(\"x\")$median()==1.5) #is true","title":"Examples"},{"location":"reference/Expr_meta/","text":"Expr_meta meta: related methods Description Create an object namespace of all meta related methods. See the individual method pages for full details Usage Expr_meta() Value Expr Examples #missing","title":"`Expr_meta`"},{"location":"reference/Expr_meta/#expr_meta","text":"meta: related methods","title":"Expr_meta"},{"location":"reference/Expr_meta/#description","text":"Create an object namespace of all meta related methods. See the individual method pages for full details","title":"Description"},{"location":"reference/Expr_meta/#usage","text":"Expr_meta()","title":"Usage"},{"location":"reference/Expr_meta/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_meta/#examples","text":"#missing","title":"Examples"},{"location":"reference/Expr_min/","text":"Expr_min min Description Get minimum value. Format An object of class character of length 1. Usage Expr_min Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples pl$DataFrame(list(x=c(1,NA,3)))$select(pl$col(\"x\")$min()== 1 ) #is true","title":"`Expr_min`"},{"location":"reference/Expr_min/#expr_min","text":"min","title":"Expr_min"},{"location":"reference/Expr_min/#description","text":"Get minimum value.","title":"Description"},{"location":"reference/Expr_min/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_min/#usage","text":"Expr_min","title":"Usage"},{"location":"reference/Expr_min/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_min/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_min/#examples","text":"pl$DataFrame(list(x=c(1,NA,3)))$select(pl$col(\"x\")$min()== 1 ) #is true","title":"Examples"},{"location":"reference/Expr_mode/","text":"Expr_mode Mode Description Compute the most occurring value(s). Can return multiple Values. Format a method Usage Expr_mode Value Expr Examples df =pl$DataFrame(list(a=1:6,b = c(1L,1L,3L,3L,5L,6L), c = c(1L,1L,2L,2L,3L,3L))) df$select(pl$col(\"a\")$mode()) df$select(pl$col(\"b\")$mode()) df$select(pl$col(\"c\")$mode())","title":"`Expr_mode`"},{"location":"reference/Expr_mode/#expr_mode","text":"Mode","title":"Expr_mode"},{"location":"reference/Expr_mode/#description","text":"Compute the most occurring value(s). Can return multiple Values.","title":"Description"},{"location":"reference/Expr_mode/#format","text":"a method","title":"Format"},{"location":"reference/Expr_mode/#usage","text":"Expr_mode","title":"Usage"},{"location":"reference/Expr_mode/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_mode/#examples","text":"df =pl$DataFrame(list(a=1:6,b = c(1L,1L,3L,3L,5L,6L), c = c(1L,1L,2L,2L,3L,3L))) df$select(pl$col(\"a\")$mode()) df$select(pl$col(\"b\")$mode()) df$select(pl$col(\"c\")$mode())","title":"Examples"},{"location":"reference/Expr_mul/","text":"Expr_mul Mul * Description Multiplication Usage Expr_mul(other) list(list(\"*\"), list(\"Expr\"))(e1, e2) Arguments Argument Description other literal or Robj which can become a literal e1 lhs Expr e2 rhs Expr or anything which can become a literal Expression Value Exprs Examples #three syntaxes same result pl$lit(5) * 10 pl$lit(5) * pl$lit(10) pl$lit(5)$mul(pl$lit(10))","title":"`Expr_mul`"},{"location":"reference/Expr_mul/#expr_mul","text":"Mul *","title":"Expr_mul"},{"location":"reference/Expr_mul/#description","text":"Multiplication","title":"Description"},{"location":"reference/Expr_mul/#usage","text":"Expr_mul(other) list(list(\"*\"), list(\"Expr\"))(e1, e2)","title":"Usage"},{"location":"reference/Expr_mul/#arguments","text":"Argument Description other literal or Robj which can become a literal e1 lhs Expr e2 rhs Expr or anything which can become a literal Expression","title":"Arguments"},{"location":"reference/Expr_mul/#value","text":"Exprs","title":"Value"},{"location":"reference/Expr_mul/#examples","text":"#three syntaxes same result pl$lit(5) * 10 pl$lit(5) * pl$lit(10) pl$lit(5)$mul(pl$lit(10))","title":"Examples"},{"location":"reference/Expr_n_unique/","text":"Expr_n_unique Count number of unique values Description Count number of unique values. Similar to R length(unique(x)) Format An object of class character of length 1. Usage Expr_n_unique Value Expr Examples pl$DataFrame(iris)$select(pl$col(\"Species\")$n_unique())","title":"`Expr_n_unique`"},{"location":"reference/Expr_n_unique/#expr_n_unique","text":"Count number of unique values","title":"Expr_n_unique"},{"location":"reference/Expr_n_unique/#description","text":"Count number of unique values. Similar to R length(unique(x))","title":"Description"},{"location":"reference/Expr_n_unique/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_n_unique/#usage","text":"Expr_n_unique","title":"Usage"},{"location":"reference/Expr_n_unique/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_n_unique/#examples","text":"pl$DataFrame(iris)$select(pl$col(\"Species\")$n_unique())","title":"Examples"},{"location":"reference/Expr_nan_max/","text":"Expr_nan_max max Description Get maximum value, but propagate/poison encountered NaN values. Get maximum value. Format An object of class character of length 1. Usage Expr_nan_max Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples pl$DataFrame(list(x=c(1,NaN,Inf,3)))$select(pl$col(\"x\")$nan_max()$is_nan()) #is true","title":"`Expr_nan_max`"},{"location":"reference/Expr_nan_max/#expr_nan_max","text":"max","title":"Expr_nan_max"},{"location":"reference/Expr_nan_max/#description","text":"Get maximum value, but propagate/poison encountered NaN values. Get maximum value.","title":"Description"},{"location":"reference/Expr_nan_max/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_nan_max/#usage","text":"Expr_nan_max","title":"Usage"},{"location":"reference/Expr_nan_max/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_nan_max/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_nan_max/#examples","text":"pl$DataFrame(list(x=c(1,NaN,Inf,3)))$select(pl$col(\"x\")$nan_max()$is_nan()) #is true","title":"Examples"},{"location":"reference/Expr_nan_min/","text":"Expr_nan_min min propagate NaN Description Get minimum value, but propagate/poison encountered NaN values. Format An object of class character of length 1. Usage Expr_nan_min Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples pl$DataFrame(list(x=c(1,NaN,-Inf,3)))$select(pl$col(\"x\")$nan_min()$is_nan()) #is true","title":"`Expr_nan_min`"},{"location":"reference/Expr_nan_min/#expr_nan_min","text":"min propagate NaN","title":"Expr_nan_min"},{"location":"reference/Expr_nan_min/#description","text":"Get minimum value, but propagate/poison encountered NaN values.","title":"Description"},{"location":"reference/Expr_nan_min/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_nan_min/#usage","text":"Expr_nan_min","title":"Usage"},{"location":"reference/Expr_nan_min/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_nan_min/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_nan_min/#examples","text":"pl$DataFrame(list(x=c(1,NaN,-Inf,3)))$select(pl$col(\"x\")$nan_min()$is_nan()) #is true","title":"Examples"},{"location":"reference/Expr_neq/","text":"Expr_neq Not Equal != Description neq method and operator Usage Expr_neq(other) list(list(\"!=\"), list(\"Expr\"))(e1, e2) Arguments Argument Description other literal or Robj which can become a literal e1 lhs Expr e2 rhs Expr or anything which can become a literal Expression Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Exprs Examples #' #three syntaxes same result pl$lit(1) != 2 pl$lit(1) != pl$lit(2) pl$lit(1)$neq(pl$lit(2))","title":"`Expr_neq`"},{"location":"reference/Expr_neq/#expr_neq","text":"Not Equal !=","title":"Expr_neq"},{"location":"reference/Expr_neq/#description","text":"neq method and operator","title":"Description"},{"location":"reference/Expr_neq/#usage","text":"Expr_neq(other) list(list(\"!=\"), list(\"Expr\"))(e1, e2)","title":"Usage"},{"location":"reference/Expr_neq/#arguments","text":"Argument Description other literal or Robj which can become a literal e1 lhs Expr e2 rhs Expr or anything which can become a literal Expression","title":"Arguments"},{"location":"reference/Expr_neq/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_neq/#value","text":"Exprs","title":"Value"},{"location":"reference/Expr_neq/#examples","text":"#' #three syntaxes same result pl$lit(1) != 2 pl$lit(1) != pl$lit(2) pl$lit(1)$neq(pl$lit(2))","title":"Examples"},{"location":"reference/Expr_null_count/","text":"Expr_null_count Count Nulls Description Count Nulls Format An object of class character of length 1. Usage Expr_null_count Value Expr Examples pl$select(pl$lit(c(NA,\"a\",NA,\"b\"))$null_count())","title":"`Expr_null_count`"},{"location":"reference/Expr_null_count/#expr_null_count","text":"Count Nulls","title":"Expr_null_count"},{"location":"reference/Expr_null_count/#description","text":"Count Nulls","title":"Description"},{"location":"reference/Expr_null_count/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_null_count/#usage","text":"Expr_null_count","title":"Usage"},{"location":"reference/Expr_null_count/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_null_count/#examples","text":"pl$select(pl$lit(c(NA,\"a\",NA,\"b\"))$null_count())","title":"Examples"},{"location":"reference/Expr_or/","text":"Expr_or Or Description combine to boolean expresions with OR Format An object of class character of length 1. Usage Expr_or(other) Arguments Argument Description other Expr or into Expr Value Expr Examples pl$lit(TRUE) | FALSE pl$lit(TRUE)$or(pl$lit(TRUE))","title":"`Expr_or`"},{"location":"reference/Expr_or/#expr_or","text":"Or","title":"Expr_or"},{"location":"reference/Expr_or/#description","text":"combine to boolean expresions with OR","title":"Description"},{"location":"reference/Expr_or/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_or/#usage","text":"Expr_or(other)","title":"Usage"},{"location":"reference/Expr_or/#arguments","text":"Argument Description other Expr or into Expr","title":"Arguments"},{"location":"reference/Expr_or/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_or/#examples","text":"pl$lit(TRUE) | FALSE pl$lit(TRUE)$or(pl$lit(TRUE))","title":"Examples"},{"location":"reference/Expr_over/","text":"Expr_over over Description Apply window function over a subgroup. This is similar to a groupby + aggregation + self join. Or similar to window functions in Postgres https://www.postgresql.org/docs/current/tutorial-window.html _. Usage Expr_over(...) Arguments Argument Description ... of strings or columns to group by Value Expr Examples pl$DataFrame( val = 1:5, a = c(\"+\",\"+\",\"-\",\"-\",\"+\"), b = c(\"+\",\"-\",\"+\",\"-\",\"+\") )$select( pl$col(\"val\")$count()$over(\"a\",\"b\") )","title":"`Expr_over`"},{"location":"reference/Expr_over/#expr_over","text":"over","title":"Expr_over"},{"location":"reference/Expr_over/#description","text":"Apply window function over a subgroup. This is similar to a groupby + aggregation + self join. Or similar to window functions in Postgres https://www.postgresql.org/docs/current/tutorial-window.html _.","title":"Description"},{"location":"reference/Expr_over/#usage","text":"Expr_over(...)","title":"Usage"},{"location":"reference/Expr_over/#arguments","text":"Argument Description ... of strings or columns to group by","title":"Arguments"},{"location":"reference/Expr_over/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_over/#examples","text":"pl$DataFrame( val = 1:5, a = c(\"+\",\"+\",\"-\",\"-\",\"+\"), b = c(\"+\",\"-\",\"+\",\"-\",\"+\") )$select( pl$col(\"val\")$count()$over(\"a\",\"b\") )","title":"Examples"},{"location":"reference/Expr_pct_change/","text":"Expr_pct_change Pct change Description Computes percentage change between values. Percentage change (as fraction) between current element and most-recent non-null element at least n period(s) before the current element. Computes the change from the previous row by default. Usage Expr_pct_change(n = 1) Arguments Argument Description n periods to shift for forming percent change. Value Expr Examples df = pl$DataFrame(list( a=c(10L, 11L, 12L, NA_integer_, 12L))) df$with_column(pl$col(\"a\")$pct_change()$alias(\"pct_change\"))","title":"`Expr_pct_change`"},{"location":"reference/Expr_pct_change/#expr_pct_change","text":"Pct change","title":"Expr_pct_change"},{"location":"reference/Expr_pct_change/#description","text":"Computes percentage change between values. Percentage change (as fraction) between current element and most-recent non-null element at least n period(s) before the current element. Computes the change from the previous row by default.","title":"Description"},{"location":"reference/Expr_pct_change/#usage","text":"Expr_pct_change(n = 1)","title":"Usage"},{"location":"reference/Expr_pct_change/#arguments","text":"Argument Description n periods to shift for forming percent change.","title":"Arguments"},{"location":"reference/Expr_pct_change/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_pct_change/#examples","text":"df = pl$DataFrame(list( a=c(10L, 11L, 12L, NA_integer_, 12L))) df$with_column(pl$col(\"a\")$pct_change()$alias(\"pct_change\"))","title":"Examples"},{"location":"reference/Expr_pow/","text":"Expr_pow Exponentiation ^ or ** Description Raise expression to the power of exponent. Usage Expr_pow(exponent) Arguments Argument Description exponent exponent Value Expr Examples pl$DataFrame(a= -1:3)$select( pl$lit(2)$pow(pl$col(\"a\")) )$get_column(\"literal\")$to_r()== 2^(-1:3) pl$DataFrame(a = -1:3)$select( pl$lit(2) ^ (pl$col(\"a\")) )$get_column(\"literal\")$to_r()== 2^(-1:3)","title":"`Expr_pow`"},{"location":"reference/Expr_pow/#expr_pow","text":"Exponentiation ^ or **","title":"Expr_pow"},{"location":"reference/Expr_pow/#description","text":"Raise expression to the power of exponent.","title":"Description"},{"location":"reference/Expr_pow/#usage","text":"Expr_pow(exponent)","title":"Usage"},{"location":"reference/Expr_pow/#arguments","text":"Argument Description exponent exponent","title":"Arguments"},{"location":"reference/Expr_pow/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_pow/#examples","text":"pl$DataFrame(a= -1:3)$select( pl$lit(2)$pow(pl$col(\"a\")) )$get_column(\"literal\")$to_r()== 2^(-1:3) pl$DataFrame(a = -1:3)$select( pl$lit(2) ^ (pl$col(\"a\")) )$get_column(\"literal\")$to_r()== 2^(-1:3)","title":"Examples"},{"location":"reference/Expr_product/","text":"Expr_product Product Description Compute the product of an expression. Format An object of class character of length 1. Usage Expr_product Details does not support integer32 currently, .cast() to f64 or i64 first. Value Expr Examples pl$DataFrame(list(x=c(1,2,3)))$select(pl$col(\"x\")$product()==6) #is true","title":"`Expr_product`"},{"location":"reference/Expr_product/#expr_product","text":"Product","title":"Expr_product"},{"location":"reference/Expr_product/#description","text":"Compute the product of an expression.","title":"Description"},{"location":"reference/Expr_product/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_product/#usage","text":"Expr_product","title":"Usage"},{"location":"reference/Expr_product/#details","text":"does not support integer32 currently, .cast() to f64 or i64 first.","title":"Details"},{"location":"reference/Expr_product/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_product/#examples","text":"pl$DataFrame(list(x=c(1,2,3)))$select(pl$col(\"x\")$product()==6) #is true","title":"Examples"},{"location":"reference/Expr_quantile/","text":"Expr_quantile Get quantile value. Description Get quantile value. Format a method Usage Expr_quantile(quantile, interpolation = \"nearest\") Arguments Argument Description quantile numeric/Expression 0.0 to 1.0 interpolation string value from choices \"nearest\", \"higher\", \"lower\", \"midpoint\", \"linear\" Details Nulls are ignored and NaNs are ranked as the largest value. For linear interpolation NaN poisons Inf , that poisons any other value. Value Expr Examples pl$select(pl$lit(-5:5)$quantile(.5))","title":"`Expr_quantile`"},{"location":"reference/Expr_quantile/#expr_quantile","text":"Get quantile value.","title":"Expr_quantile"},{"location":"reference/Expr_quantile/#description","text":"Get quantile value.","title":"Description"},{"location":"reference/Expr_quantile/#format","text":"a method","title":"Format"},{"location":"reference/Expr_quantile/#usage","text":"Expr_quantile(quantile, interpolation = \"nearest\")","title":"Usage"},{"location":"reference/Expr_quantile/#arguments","text":"Argument Description quantile numeric/Expression 0.0 to 1.0 interpolation string value from choices \"nearest\", \"higher\", \"lower\", \"midpoint\", \"linear\"","title":"Arguments"},{"location":"reference/Expr_quantile/#details","text":"Nulls are ignored and NaNs are ranked as the largest value. For linear interpolation NaN poisons Inf , that poisons any other value.","title":"Details"},{"location":"reference/Expr_quantile/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_quantile/#examples","text":"pl$select(pl$lit(-5:5)$quantile(.5))","title":"Examples"},{"location":"reference/Expr_rank/","text":"Expr_rank Rank Description Assign ranks to data, dealing with ties appropriately. Usage Expr_rank(method = \"average\", reverse = FALSE) Arguments Argument Description method string option 'average', 'min', 'max', 'dense', 'ordinal', 'random' #' The method used to assign ranks to tied elements. The following methods are available (default is 'average'): 'average' : The average of the ranks that would have been assigned to all the tied values is assigned to each value. 'min' : The minimum of the ranks that would have been assigned to all the tied values is assigned to each value. (This is also referred to as \"competition\" ranking.) 'max' : The maximum of the ranks that would have been assigned to all the tied values is assigned to each value. 'dense' : Like 'min', but the rank of the next highest element is assigned the rank immediately after those assigned to the tied elements. 'ordinal' : All values are given a distinct rank, corresponding to the order that the values occur in the Series. 'random' : Like 'ordinal', but the rank for ties is not dependent on the order that the values occur in the Series. reverse | bool, reverse the operation Value Expr Examples # The 'average' method: df = pl$DataFrame(list(a = c(3, 6, 1, 1, 6))) df$select(pl$col(\"a\")$rank()) # The 'ordinal' method: df = pl$DataFrame(list(a = c(3, 6, 1, 1, 6))) df$select(pl$col(\"a\")$rank(\"ordinal\"))","title":"`Expr_rank`"},{"location":"reference/Expr_rank/#expr_rank","text":"Rank","title":"Expr_rank"},{"location":"reference/Expr_rank/#description","text":"Assign ranks to data, dealing with ties appropriately.","title":"Description"},{"location":"reference/Expr_rank/#usage","text":"Expr_rank(method = \"average\", reverse = FALSE)","title":"Usage"},{"location":"reference/Expr_rank/#arguments","text":"Argument Description method string option 'average', 'min', 'max', 'dense', 'ordinal', 'random' #' The method used to assign ranks to tied elements. The following methods are available (default is 'average'): 'average' : The average of the ranks that would have been assigned to all the tied values is assigned to each value. 'min' : The minimum of the ranks that would have been assigned to all the tied values is assigned to each value. (This is also referred to as \"competition\" ranking.) 'max' : The maximum of the ranks that would have been assigned to all the tied values is assigned to each value. 'dense' : Like 'min', but the rank of the next highest element is assigned the rank immediately after those assigned to the tied elements. 'ordinal' : All values are given a distinct rank, corresponding to the order that the values occur in the Series. 'random' : Like 'ordinal', but the rank for ties is not dependent on the order that the values occur in the Series. reverse | bool, reverse the operation","title":"Arguments"},{"location":"reference/Expr_rank/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_rank/#examples","text":"# The 'average' method: df = pl$DataFrame(list(a = c(3, 6, 1, 1, 6))) df$select(pl$col(\"a\")$rank()) # The 'ordinal' method: df = pl$DataFrame(list(a = c(3, 6, 1, 1, 6))) df$select(pl$col(\"a\")$rank(\"ordinal\"))","title":"Examples"},{"location":"reference/Expr_rechunk/","text":"Expr_rechunk Rechunk memory layout Description Create a single chunk of memory for this Series. Format a method Usage Expr_rechunk Details See rechunk() explained here docs_translations Value Expr Examples #get chunked lengths with/without rechunk series_list = pl$DataFrame(list(a=1:3,b=4:6))$select( pl$col(\"a\")$append(pl$col(\"b\"))$alias(\"a_chunked\"), pl$col(\"a\")$append(pl$col(\"b\"))$rechunk()$alias(\"a_rechunked\") )$get_columns() lapply(series_list, \\(x) x$chunk_lengths())","title":"`Expr_rechunk`"},{"location":"reference/Expr_rechunk/#expr_rechunk","text":"Rechunk memory layout","title":"Expr_rechunk"},{"location":"reference/Expr_rechunk/#description","text":"Create a single chunk of memory for this Series.","title":"Description"},{"location":"reference/Expr_rechunk/#format","text":"a method","title":"Format"},{"location":"reference/Expr_rechunk/#usage","text":"Expr_rechunk","title":"Usage"},{"location":"reference/Expr_rechunk/#details","text":"See rechunk() explained here docs_translations","title":"Details"},{"location":"reference/Expr_rechunk/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_rechunk/#examples","text":"#get chunked lengths with/without rechunk series_list = pl$DataFrame(list(a=1:3,b=4:6))$select( pl$col(\"a\")$append(pl$col(\"b\"))$alias(\"a_chunked\"), pl$col(\"a\")$append(pl$col(\"b\"))$rechunk()$alias(\"a_rechunked\") )$get_columns() lapply(series_list, \\(x) x$chunk_lengths())","title":"Examples"},{"location":"reference/Expr_reinterpret/","text":"Expr_reinterpret reinterpret bits Description Reinterpret the underlying bits as a signed/unsigned integer. This operation is only allowed for 64bit integers. For lower bits integers, you can safely use that cast operation. Usage Expr_reinterpret(signed = TRUE) Arguments Argument Description signed bool reinterpret into Int64 else UInt64 Value Expr Examples df = pl$DataFrame(iris) df$select(pl$all()$head(2)$hash(1,2,3,4)$reinterpret())$as_data_frame()","title":"`Expr_reinterpret`"},{"location":"reference/Expr_reinterpret/#expr_reinterpret","text":"reinterpret bits","title":"Expr_reinterpret"},{"location":"reference/Expr_reinterpret/#description","text":"Reinterpret the underlying bits as a signed/unsigned integer. This operation is only allowed for 64bit integers. For lower bits integers, you can safely use that cast operation.","title":"Description"},{"location":"reference/Expr_reinterpret/#usage","text":"Expr_reinterpret(signed = TRUE)","title":"Usage"},{"location":"reference/Expr_reinterpret/#arguments","text":"Argument Description signed bool reinterpret into Int64 else UInt64","title":"Arguments"},{"location":"reference/Expr_reinterpret/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_reinterpret/#examples","text":"df = pl$DataFrame(iris) df$select(pl$all()$head(2)$hash(1,2,3,4)$reinterpret())$as_data_frame()","title":"Examples"},{"location":"reference/Expr_rep/","text":"Expr_rep expression: repeat series Description This expression takes input and repeats it n times and append chunk Format Method Usage Expr_rep(n, rechunk = TRUE) Arguments Argument Description n Numeric the number of times to repeat, must be non-negative and finite rechunk bool default = TRUE, if true memory layout will be rewritten Details if self$len() == 1 , has a special faster implementation, Here rechunk is not necessary, and takes no effect. if self$len() > 1 , then the expression instructs the series to append onto itself n time and rewrite memory Value Expr Examples pl$select( pl$lit(\"alice\")$rep(n = 3) ) pl$select( pl$lit(1:3)$rep(n = 2) )","title":"`Expr_rep`"},{"location":"reference/Expr_rep/#expr_rep","text":"expression: repeat series","title":"Expr_rep"},{"location":"reference/Expr_rep/#description","text":"This expression takes input and repeats it n times and append chunk","title":"Description"},{"location":"reference/Expr_rep/#format","text":"Method","title":"Format"},{"location":"reference/Expr_rep/#usage","text":"Expr_rep(n, rechunk = TRUE)","title":"Usage"},{"location":"reference/Expr_rep/#arguments","text":"Argument Description n Numeric the number of times to repeat, must be non-negative and finite rechunk bool default = TRUE, if true memory layout will be rewritten","title":"Arguments"},{"location":"reference/Expr_rep/#details","text":"if self$len() == 1 , has a special faster implementation, Here rechunk is not necessary, and takes no effect. if self$len() > 1 , then the expression instructs the series to append onto itself n time and rewrite memory","title":"Details"},{"location":"reference/Expr_rep/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_rep/#examples","text":"pl$select( pl$lit(\"alice\")$rep(n = 3) ) pl$select( pl$lit(1:3)$rep(n = 2) )","title":"Examples"},{"location":"reference/Expr_rep_extend/","text":"Expr_rep_extend extend series with repeated series Description Extend a series with a repeated series or value. Format Method Usage Expr_rep_extend(expr, n, rechunk = TRUE, upcast = TRUE) Arguments Argument Description expr Expr or into Expr n Numeric the number of times to repeat, must be non-negative and finite rechunk bool default = TRUE, if true memory layout will be rewritten upcast bool default = TRUE, passed to self$append(), if TRUE non identical types will be casted to common super type if any. If FALSE or no common super type throw error. Value Expr Examples pl$select(pl$lit(c(1,2,3))$rep_extend(1:3, n = 5))","title":"`Expr_rep_extend`"},{"location":"reference/Expr_rep_extend/#expr_rep_extend","text":"extend series with repeated series","title":"Expr_rep_extend"},{"location":"reference/Expr_rep_extend/#description","text":"Extend a series with a repeated series or value.","title":"Description"},{"location":"reference/Expr_rep_extend/#format","text":"Method","title":"Format"},{"location":"reference/Expr_rep_extend/#usage","text":"Expr_rep_extend(expr, n, rechunk = TRUE, upcast = TRUE)","title":"Usage"},{"location":"reference/Expr_rep_extend/#arguments","text":"Argument Description expr Expr or into Expr n Numeric the number of times to repeat, must be non-negative and finite rechunk bool default = TRUE, if true memory layout will be rewritten upcast bool default = TRUE, passed to self$append(), if TRUE non identical types will be casted to common super type if any. If FALSE or no common super type throw error.","title":"Arguments"},{"location":"reference/Expr_rep_extend/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_rep_extend/#examples","text":"pl$select(pl$lit(c(1,2,3))$rep_extend(1:3, n = 5))","title":"Examples"},{"location":"reference/Expr_repeat_by/","text":"Expr_repeat_by Repeat by Description Repeat the elements in this Series as specified in the given expression. The repeated elements are expanded into a List . Usage Expr_repeat_by(by) Arguments Argument Description by Expr Numeric column that determines how often the values will be repeated. The column will be coerced to UInt32. Give this dtype to make the coercion a no-op. Value Expr Examples df = pl$DataFrame(list(a = c(\"x\",\"y\",\"z\"), n = c(0:2))) df$select(pl$col(\"a\")$repeat_by(\"n\"))","title":"`Expr_repeat_by`"},{"location":"reference/Expr_repeat_by/#expr_repeat_by","text":"Repeat by","title":"Expr_repeat_by"},{"location":"reference/Expr_repeat_by/#description","text":"Repeat the elements in this Series as specified in the given expression. The repeated elements are expanded into a List .","title":"Description"},{"location":"reference/Expr_repeat_by/#usage","text":"Expr_repeat_by(by)","title":"Usage"},{"location":"reference/Expr_repeat_by/#arguments","text":"Argument Description by Expr Numeric column that determines how often the values will be repeated. The column will be coerced to UInt32. Give this dtype to make the coercion a no-op.","title":"Arguments"},{"location":"reference/Expr_repeat_by/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_repeat_by/#examples","text":"df = pl$DataFrame(list(a = c(\"x\",\"y\",\"z\"), n = c(0:2))) df$select(pl$col(\"a\")$repeat_by(\"n\"))","title":"Examples"},{"location":"reference/Expr_reshape/","text":"Expr_reshape Reshape Description Reshape this Expr to a flat Series or a Series of Lists. Format Method Usage Expr_reshape(dims) Arguments Argument Description dims numeric vec of the dimension sizes. If a -1 is used in any of the dimensions, that dimension is inferred. Value Expr Examples pl$select(pl$lit(1:12)$reshape(c(3,4))) pl$select(pl$lit(1:12)$reshape(c(3,-1)))","title":"`Expr_reshape`"},{"location":"reference/Expr_reshape/#expr_reshape","text":"Reshape","title":"Expr_reshape"},{"location":"reference/Expr_reshape/#description","text":"Reshape this Expr to a flat Series or a Series of Lists.","title":"Description"},{"location":"reference/Expr_reshape/#format","text":"Method","title":"Format"},{"location":"reference/Expr_reshape/#usage","text":"Expr_reshape(dims)","title":"Usage"},{"location":"reference/Expr_reshape/#arguments","text":"Argument Description dims numeric vec of the dimension sizes. If a -1 is used in any of the dimensions, that dimension is inferred.","title":"Arguments"},{"location":"reference/Expr_reshape/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_reshape/#examples","text":"pl$select(pl$lit(1:12)$reshape(c(3,4))) pl$select(pl$lit(1:12)$reshape(c(3,-1)))","title":"Examples"},{"location":"reference/Expr_rolling_max/","text":"Expr_rolling_max Rolling max Description Apply a rolling max (moving max) over the values in this array. A window of length window_size will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the weight vector. The resulting values will be aggregated to their sum. Usage Expr_rolling_max( window_size, weights = NULL, min_periods = NULL, center = FALSE, by = NULL, closed = \"left\" ) Arguments Argument Description window_size The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language: 1ns (1 nanosecond) 1us (1 microsecond) 1ms (1 millisecond) 1s (1 second) 1m (1 minute) 1h (1 hour) 1d (1 day) 1w (1 week) 1mo (1 calendar month) 1y (1 calendar year) 1i (1 index count) If the dynamic string language is used, the by and closed arguments must also be set. weights | An optional slice with the same length as the window that will be multiplied elementwise with the values in the window. min_periods | The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size. center | Set the labels at the center of the window by | If the window_size is temporal for instance \"5h\" or \"3s , you must set the column that will be used to determine the windows. This column must be of dtype {Date, Datetime} closed | : 'left', 'right', 'both', 'none' Define whether the temporal window interval is closed or not. Details This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using groupby_rolling this method can cache the window size computation. Value Expr Examples pl$DataFrame(list(a=1:6))$select(pl$col(\"a\")$rolling_max(window_size = 2))","title":"`Expr_rolling_max`"},{"location":"reference/Expr_rolling_max/#expr_rolling_max","text":"Rolling max","title":"Expr_rolling_max"},{"location":"reference/Expr_rolling_max/#description","text":"Apply a rolling max (moving max) over the values in this array. A window of length window_size will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the weight vector. The resulting values will be aggregated to their sum.","title":"Description"},{"location":"reference/Expr_rolling_max/#usage","text":"Expr_rolling_max( window_size, weights = NULL, min_periods = NULL, center = FALSE, by = NULL, closed = \"left\" )","title":"Usage"},{"location":"reference/Expr_rolling_max/#arguments","text":"Argument Description window_size The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language: 1ns (1 nanosecond) 1us (1 microsecond) 1ms (1 millisecond) 1s (1 second) 1m (1 minute) 1h (1 hour) 1d (1 day) 1w (1 week) 1mo (1 calendar month) 1y (1 calendar year) 1i (1 index count) If the dynamic string language is used, the by and closed arguments must also be set. weights | An optional slice with the same length as the window that will be multiplied elementwise with the values in the window. min_periods | The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size. center | Set the labels at the center of the window by | If the window_size is temporal for instance \"5h\" or \"3s , you must set the column that will be used to determine the windows. This column must be of dtype {Date, Datetime} closed | : 'left', 'right', 'both', 'none' Define whether the temporal window interval is closed or not.","title":"Arguments"},{"location":"reference/Expr_rolling_max/#details","text":"This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using groupby_rolling this method can cache the window size computation.","title":"Details"},{"location":"reference/Expr_rolling_max/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_rolling_max/#examples","text":"pl$DataFrame(list(a=1:6))$select(pl$col(\"a\")$rolling_max(window_size = 2))","title":"Examples"},{"location":"reference/Expr_rolling_mean/","text":"Expr_rolling_mean Rolling mean Description Apply a rolling mean (moving mean) over the values in this array. A window of length window_size will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the weight vector. The resulting values will be aggregated to their sum. Usage Expr_rolling_mean( window_size, weights = NULL, min_periods = NULL, center = FALSE, by = NULL, closed = \"left\" ) Arguments Argument Description window_size The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language: 1ns (1 nanosecond) 1us (1 microsecond) 1ms (1 millisecond) 1s (1 second) 1m (1 minute) 1h (1 hour) 1d (1 day) 1w (1 week) 1mo (1 calendar month) 1y (1 calendar year) 1i (1 index count) If the dynamic string language is used, the by and closed arguments must also be set. weights | An optional slice with the same length as the window that will be multiplied elementwise with the values in the window. min_periods | The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size. center | Set the labels at the center of the window by | If the window_size is temporal for instance \"5h\" or \"3s , you must set the column that will be used to determine the windows. This column must be of dtype {Date, Datetime} closed | : 'left', 'right', 'both', 'none' Define whether the temporal window interval is closed or not. Details This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using groupby_rolling this method can cache the window size computation. Value Expr Examples pl$DataFrame(list(a=1:6))$select(pl$col(\"a\")$rolling_mean(window_size = 2))","title":"`Expr_rolling_mean`"},{"location":"reference/Expr_rolling_mean/#expr_rolling_mean","text":"Rolling mean","title":"Expr_rolling_mean"},{"location":"reference/Expr_rolling_mean/#description","text":"Apply a rolling mean (moving mean) over the values in this array. A window of length window_size will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the weight vector. The resulting values will be aggregated to their sum.","title":"Description"},{"location":"reference/Expr_rolling_mean/#usage","text":"Expr_rolling_mean( window_size, weights = NULL, min_periods = NULL, center = FALSE, by = NULL, closed = \"left\" )","title":"Usage"},{"location":"reference/Expr_rolling_mean/#arguments","text":"Argument Description window_size The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language: 1ns (1 nanosecond) 1us (1 microsecond) 1ms (1 millisecond) 1s (1 second) 1m (1 minute) 1h (1 hour) 1d (1 day) 1w (1 week) 1mo (1 calendar month) 1y (1 calendar year) 1i (1 index count) If the dynamic string language is used, the by and closed arguments must also be set. weights | An optional slice with the same length as the window that will be multiplied elementwise with the values in the window. min_periods | The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size. center | Set the labels at the center of the window by | If the window_size is temporal for instance \"5h\" or \"3s , you must set the column that will be used to determine the windows. This column must be of dtype {Date, Datetime} closed | : 'left', 'right', 'both', 'none' Define whether the temporal window interval is closed or not.","title":"Arguments"},{"location":"reference/Expr_rolling_mean/#details","text":"This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using groupby_rolling this method can cache the window size computation.","title":"Details"},{"location":"reference/Expr_rolling_mean/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_rolling_mean/#examples","text":"pl$DataFrame(list(a=1:6))$select(pl$col(\"a\")$rolling_mean(window_size = 2))","title":"Examples"},{"location":"reference/Expr_rolling_median/","text":"Expr_rolling_median Rolling median Description Apply a rolling median (moving median) over the values in this array. A window of length window_size will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the weight vector. The resulting values will be aggregated to their sum. Usage Expr_rolling_median( window_size, weights = NULL, min_periods = NULL, center = FALSE, by = NULL, closed = \"left\" ) Arguments Argument Description window_size The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language: 1ns (1 nanosecond) 1us (1 microsecond) 1ms (1 millisecond) 1s (1 second) 1m (1 minute) 1h (1 hour) 1d (1 day) 1w (1 week) 1mo (1 calendar month) 1y (1 calendar year) 1i (1 index count) If the dynamic string language is used, the by and closed arguments must also be set. weights | An optional slice with the same length as the window that will be multiplied elementwise with the values in the window. min_periods | The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size. center | Set the labels at the center of the window by | If the window_size is temporal for instance \"5h\" or \"3s , you must set the column that will be used to determine the windows. This column must be of dtype {Date, Datetime} closed | : 'left', 'right', 'both', 'none' Define whether the temporal window interval is closed or not. Details This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using groupby_rolling this method can cache the window size computation. Value Expr Examples pl$DataFrame(list(a=1:6))$select(pl$col(\"a\")$rolling_median(window_size = 2))","title":"`Expr_rolling_median`"},{"location":"reference/Expr_rolling_median/#expr_rolling_median","text":"Rolling median","title":"Expr_rolling_median"},{"location":"reference/Expr_rolling_median/#description","text":"Apply a rolling median (moving median) over the values in this array. A window of length window_size will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the weight vector. The resulting values will be aggregated to their sum.","title":"Description"},{"location":"reference/Expr_rolling_median/#usage","text":"Expr_rolling_median( window_size, weights = NULL, min_periods = NULL, center = FALSE, by = NULL, closed = \"left\" )","title":"Usage"},{"location":"reference/Expr_rolling_median/#arguments","text":"Argument Description window_size The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language: 1ns (1 nanosecond) 1us (1 microsecond) 1ms (1 millisecond) 1s (1 second) 1m (1 minute) 1h (1 hour) 1d (1 day) 1w (1 week) 1mo (1 calendar month) 1y (1 calendar year) 1i (1 index count) If the dynamic string language is used, the by and closed arguments must also be set. weights | An optional slice with the same length as the window that will be multiplied elementwise with the values in the window. min_periods | The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size. center | Set the labels at the center of the window by | If the window_size is temporal for instance \"5h\" or \"3s , you must set the column that will be used to determine the windows. This column must be of dtype {Date, Datetime} closed | : 'left', 'right', 'both', 'none' Define whether the temporal window interval is closed or not.","title":"Arguments"},{"location":"reference/Expr_rolling_median/#details","text":"This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using groupby_rolling this method can cache the window size computation.","title":"Details"},{"location":"reference/Expr_rolling_median/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_rolling_median/#examples","text":"pl$DataFrame(list(a=1:6))$select(pl$col(\"a\")$rolling_median(window_size = 2))","title":"Examples"},{"location":"reference/Expr_rolling_min/","text":"Expr_rolling_min Rolling Min Description Apply a rolling min (moving min) over the values in this array. A window of length window_size will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the weight vector. The resulting values will be aggregated to their sum. Usage Expr_rolling_min( window_size, weights = NULL, min_periods = NULL, center = FALSE, by = NULL, closed = \"left\" ) Arguments Argument Description window_size The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language: 1ns (1 nanosecond) 1us (1 microsecond) 1ms (1 millisecond) 1s (1 second) 1m (1 minute) 1h (1 hour) 1d (1 day) 1w (1 week) 1mo (1 calendar month) 1y (1 calendar year) 1i (1 index count) If the dynamic string language is used, the by and closed arguments must also be set. weights | An optional slice with the same length as the window that will be multiplied elementwise with the values in the window. min_periods | The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size. center | Set the labels at the center of the window by | If the window_size is temporal for instance \"5h\" or \"3s , you must set the column that will be used to determine the windows. This column must be of dtype {Date, Datetime} closed | : 'left', 'right', 'both', 'none' Define whether the temporal window interval is closed or not. Details This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using groupby_rolling this method can cache the window size computation. Value Expr Examples pl$DataFrame(list(a=1:6))$select(pl$col(\"a\")$rolling_min(window_size = 2))","title":"`Expr_rolling_min`"},{"location":"reference/Expr_rolling_min/#expr_rolling_min","text":"Rolling Min","title":"Expr_rolling_min"},{"location":"reference/Expr_rolling_min/#description","text":"Apply a rolling min (moving min) over the values in this array. A window of length window_size will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the weight vector. The resulting values will be aggregated to their sum.","title":"Description"},{"location":"reference/Expr_rolling_min/#usage","text":"Expr_rolling_min( window_size, weights = NULL, min_periods = NULL, center = FALSE, by = NULL, closed = \"left\" )","title":"Usage"},{"location":"reference/Expr_rolling_min/#arguments","text":"Argument Description window_size The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language: 1ns (1 nanosecond) 1us (1 microsecond) 1ms (1 millisecond) 1s (1 second) 1m (1 minute) 1h (1 hour) 1d (1 day) 1w (1 week) 1mo (1 calendar month) 1y (1 calendar year) 1i (1 index count) If the dynamic string language is used, the by and closed arguments must also be set. weights | An optional slice with the same length as the window that will be multiplied elementwise with the values in the window. min_periods | The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size. center | Set the labels at the center of the window by | If the window_size is temporal for instance \"5h\" or \"3s , you must set the column that will be used to determine the windows. This column must be of dtype {Date, Datetime} closed | : 'left', 'right', 'both', 'none' Define whether the temporal window interval is closed or not.","title":"Arguments"},{"location":"reference/Expr_rolling_min/#details","text":"This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using groupby_rolling this method can cache the window size computation.","title":"Details"},{"location":"reference/Expr_rolling_min/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_rolling_min/#examples","text":"pl$DataFrame(list(a=1:6))$select(pl$col(\"a\")$rolling_min(window_size = 2))","title":"Examples"},{"location":"reference/Expr_rolling_quantile/","text":"Expr_rolling_quantile Rolling quantile Description Apply a rolling quantile (moving quantile) over the values in this array. A window of length window_size will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the weight vector. The resulting values will be aggregated to their sum. Usage Expr_rolling_quantile( quantile, interpolation = \"nearest\", window_size, weights = NULL, min_periods = NULL, center = FALSE, by = NULL, closed = \"left\" ) Arguments Argument Description quantile Quantile between 0.0 and 1.0. interpolation choice c('nearest', 'higher', 'lower', 'midpoint', 'linear') window_size The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language: 1ns (1 nanosecond) 1us (1 microsecond) 1ms (1 millisecond) 1s (1 second) 1m (1 minute) 1h (1 hour) 1d (1 day) 1w (1 week) 1mo (1 calendar month) 1y (1 calendar year) 1i (1 index count) If the dynamic string language is used, the by and closed arguments must also be set. weights | An optional slice with the same length as the window that will be multiplied elementwise with the values in the window. min_periods | The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size. center | Set the labels at the center of the window by | If the window_size is temporal for instance \"5h\" or \"3s , you must set the column that will be used to determine the windows. This column must be of dtype {Date, Datetime} closed | : 'left', 'right', 'both', 'none' Define whether the temporal window interval is closed or not. Details This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using groupby_rolling this method can cache the window size computation. Value Expr Examples pl$DataFrame(list(a=1:6))$select( pl$col(\"a\")$rolling_quantile(window_size = 2, quantile = .5) )","title":"`Expr_rolling_quantile`"},{"location":"reference/Expr_rolling_quantile/#expr_rolling_quantile","text":"Rolling quantile","title":"Expr_rolling_quantile"},{"location":"reference/Expr_rolling_quantile/#description","text":"Apply a rolling quantile (moving quantile) over the values in this array. A window of length window_size will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the weight vector. The resulting values will be aggregated to their sum.","title":"Description"},{"location":"reference/Expr_rolling_quantile/#usage","text":"Expr_rolling_quantile( quantile, interpolation = \"nearest\", window_size, weights = NULL, min_periods = NULL, center = FALSE, by = NULL, closed = \"left\" )","title":"Usage"},{"location":"reference/Expr_rolling_quantile/#arguments","text":"Argument Description quantile Quantile between 0.0 and 1.0. interpolation choice c('nearest', 'higher', 'lower', 'midpoint', 'linear') window_size The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language: 1ns (1 nanosecond) 1us (1 microsecond) 1ms (1 millisecond) 1s (1 second) 1m (1 minute) 1h (1 hour) 1d (1 day) 1w (1 week) 1mo (1 calendar month) 1y (1 calendar year) 1i (1 index count) If the dynamic string language is used, the by and closed arguments must also be set. weights | An optional slice with the same length as the window that will be multiplied elementwise with the values in the window. min_periods | The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size. center | Set the labels at the center of the window by | If the window_size is temporal for instance \"5h\" or \"3s , you must set the column that will be used to determine the windows. This column must be of dtype {Date, Datetime} closed | : 'left', 'right', 'both', 'none' Define whether the temporal window interval is closed or not.","title":"Arguments"},{"location":"reference/Expr_rolling_quantile/#details","text":"This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using groupby_rolling this method can cache the window size computation.","title":"Details"},{"location":"reference/Expr_rolling_quantile/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_rolling_quantile/#examples","text":"pl$DataFrame(list(a=1:6))$select( pl$col(\"a\")$rolling_quantile(window_size = 2, quantile = .5) )","title":"Examples"},{"location":"reference/Expr_rolling_skew/","text":"Expr_rolling_skew Rolling skew Description Compute a rolling skew. Usage Expr_rolling_skew(window_size, bias = TRUE) Arguments Argument Description window_size integerish, Size of the rolling window bias bool default = TRUE, If False, then the calculations are corrected for statistical bias. Details Extra comments copied from rust-polars_0.25.1 Compute the sample skewness of a data set. For normally distributed data, the skewness should be about zero. For uni-modal continuous distributions, a skewness value greater than zero means that there is more weight in the right tail of the distribution. The function skewtest can be used to determine if the skewness value is close enough to zero, statistically speaking. see: https://github.com/scipy/scipy/blob/47bb6febaa10658c72962b9615d5d5aa2513fa3a/scipy/stats/stats.py#L1024 Value Expr Examples pl$DataFrame(list(a=iris$Sepal.Length))$select(pl$col(\"a\")$rolling_skew(window_size = 4 )$head(10))","title":"`Expr_rolling_skew`"},{"location":"reference/Expr_rolling_skew/#expr_rolling_skew","text":"Rolling skew","title":"Expr_rolling_skew"},{"location":"reference/Expr_rolling_skew/#description","text":"Compute a rolling skew.","title":"Description"},{"location":"reference/Expr_rolling_skew/#usage","text":"Expr_rolling_skew(window_size, bias = TRUE)","title":"Usage"},{"location":"reference/Expr_rolling_skew/#arguments","text":"Argument Description window_size integerish, Size of the rolling window bias bool default = TRUE, If False, then the calculations are corrected for statistical bias.","title":"Arguments"},{"location":"reference/Expr_rolling_skew/#details","text":"Extra comments copied from rust-polars_0.25.1 Compute the sample skewness of a data set. For normally distributed data, the skewness should be about zero. For uni-modal continuous distributions, a skewness value greater than zero means that there is more weight in the right tail of the distribution. The function skewtest can be used to determine if the skewness value is close enough to zero, statistically speaking. see: https://github.com/scipy/scipy/blob/47bb6febaa10658c72962b9615d5d5aa2513fa3a/scipy/stats/stats.py#L1024","title":"Details"},{"location":"reference/Expr_rolling_skew/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_rolling_skew/#examples","text":"pl$DataFrame(list(a=iris$Sepal.Length))$select(pl$col(\"a\")$rolling_skew(window_size = 4 )$head(10))","title":"Examples"},{"location":"reference/Expr_rolling_std/","text":"Expr_rolling_std Rolling std Description Apply a rolling std (moving std) over the values in this array. A window of length window_size will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the weight vector. The resulting values will be aggregated to their sum. Usage Expr_rolling_std( window_size, weights = NULL, min_periods = NULL, center = FALSE, by = NULL, closed = \"left\" ) Arguments Argument Description window_size The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language: 1ns (1 nanosecond) 1us (1 microsecond) 1ms (1 millisecond) 1s (1 second) 1m (1 minute) 1h (1 hour) 1d (1 day) 1w (1 week) 1mo (1 calendar month) 1y (1 calendar year) 1i (1 index count) If the dynamic string language is used, the by and closed arguments must also be set. weights | An optional slice with the same length as the window that will be multiplied elementwise with the values in the window. min_periods | The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size. center | Set the labels at the center of the window by | If the window_size is temporal for instance \"5h\" or \"3s , you must set the column that will be used to determine the windows. This column must be of dtype {Date, Datetime} closed | : 'left', 'right', 'both', 'none' Define whether the temporal window interval is closed or not. Details This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using groupby_rolling this method can cache the window size computation. Value Expr Examples pl$DataFrame(list(a=1:6))$select(pl$col(\"a\")$rolling_std(window_size = 2))","title":"`Expr_rolling_std`"},{"location":"reference/Expr_rolling_std/#expr_rolling_std","text":"Rolling std","title":"Expr_rolling_std"},{"location":"reference/Expr_rolling_std/#description","text":"Apply a rolling std (moving std) over the values in this array. A window of length window_size will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the weight vector. The resulting values will be aggregated to their sum.","title":"Description"},{"location":"reference/Expr_rolling_std/#usage","text":"Expr_rolling_std( window_size, weights = NULL, min_periods = NULL, center = FALSE, by = NULL, closed = \"left\" )","title":"Usage"},{"location":"reference/Expr_rolling_std/#arguments","text":"Argument Description window_size The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language: 1ns (1 nanosecond) 1us (1 microsecond) 1ms (1 millisecond) 1s (1 second) 1m (1 minute) 1h (1 hour) 1d (1 day) 1w (1 week) 1mo (1 calendar month) 1y (1 calendar year) 1i (1 index count) If the dynamic string language is used, the by and closed arguments must also be set. weights | An optional slice with the same length as the window that will be multiplied elementwise with the values in the window. min_periods | The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size. center | Set the labels at the center of the window by | If the window_size is temporal for instance \"5h\" or \"3s , you must set the column that will be used to determine the windows. This column must be of dtype {Date, Datetime} closed | : 'left', 'right', 'both', 'none' Define whether the temporal window interval is closed or not.","title":"Arguments"},{"location":"reference/Expr_rolling_std/#details","text":"This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using groupby_rolling this method can cache the window size computation.","title":"Details"},{"location":"reference/Expr_rolling_std/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_rolling_std/#examples","text":"pl$DataFrame(list(a=1:6))$select(pl$col(\"a\")$rolling_std(window_size = 2))","title":"Examples"},{"location":"reference/Expr_rolling_sum/","text":"Expr_rolling_sum Rolling sum Description Apply a rolling sum (moving sum) over the values in this array. A window of length window_size will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the weight vector. The resulting values will be aggregated to their sum. Usage Expr_rolling_sum( window_size, weights = NULL, min_periods = NULL, center = FALSE, by = NULL, closed = \"left\" ) Arguments Argument Description window_size The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language: 1ns (1 nanosecond) 1us (1 microsecond) 1ms (1 millisecond) 1s (1 second) 1m (1 minute) 1h (1 hour) 1d (1 day) 1w (1 week) 1mo (1 calendar month) 1y (1 calendar year) 1i (1 index count) If the dynamic string language is used, the by and closed arguments must also be set. weights | An optional slice with the same length as the window that will be multiplied elementwise with the values in the window. min_periods | The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size. center | Set the labels at the center of the window by | If the window_size is temporal for instance \"5h\" or \"3s , you must set the column that will be used to determine the windows. This column must be of dtype {Date, Datetime} closed | : 'left', 'right', 'both', 'none' Define whether the temporal window interval is closed or not. Details This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using groupby_rolling this method can cache the window size computation. Value Expr Examples pl$DataFrame(list(a=1:6))$select(pl$col(\"a\")$rolling_sum(window_size = 2))","title":"`Expr_rolling_sum`"},{"location":"reference/Expr_rolling_sum/#expr_rolling_sum","text":"Rolling sum","title":"Expr_rolling_sum"},{"location":"reference/Expr_rolling_sum/#description","text":"Apply a rolling sum (moving sum) over the values in this array. A window of length window_size will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the weight vector. The resulting values will be aggregated to their sum.","title":"Description"},{"location":"reference/Expr_rolling_sum/#usage","text":"Expr_rolling_sum( window_size, weights = NULL, min_periods = NULL, center = FALSE, by = NULL, closed = \"left\" )","title":"Usage"},{"location":"reference/Expr_rolling_sum/#arguments","text":"Argument Description window_size The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language: 1ns (1 nanosecond) 1us (1 microsecond) 1ms (1 millisecond) 1s (1 second) 1m (1 minute) 1h (1 hour) 1d (1 day) 1w (1 week) 1mo (1 calendar month) 1y (1 calendar year) 1i (1 index count) If the dynamic string language is used, the by and closed arguments must also be set. weights | An optional slice with the same length as the window that will be multiplied elementwise with the values in the window. min_periods | The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size. center | Set the labels at the center of the window by | If the window_size is temporal for instance \"5h\" or \"3s , you must set the column that will be used to determine the windows. This column must be of dtype {Date, Datetime} closed | : 'left', 'right', 'both', 'none' Define whether the temporal window interval is closed or not.","title":"Arguments"},{"location":"reference/Expr_rolling_sum/#details","text":"This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using groupby_rolling this method can cache the window size computation.","title":"Details"},{"location":"reference/Expr_rolling_sum/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_rolling_sum/#examples","text":"pl$DataFrame(list(a=1:6))$select(pl$col(\"a\")$rolling_sum(window_size = 2))","title":"Examples"},{"location":"reference/Expr_rolling_var/","text":"Expr_rolling_var Rolling var Description Apply a rolling var (moving var) over the values in this array. A window of length window_size will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the weight vector. The resulting values will be aggregated to their sum. Usage Expr_rolling_var( window_size, weights = NULL, min_periods = NULL, center = FALSE, by = NULL, closed = \"left\" ) Arguments Argument Description window_size The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language: 1ns (1 nanosecond) 1us (1 microsecond) 1ms (1 millisecond) 1s (1 second) 1m (1 minute) 1h (1 hour) 1d (1 day) 1w (1 week) 1mo (1 calendar month) 1y (1 calendar year) 1i (1 index count) If the dynamic string language is used, the by and closed arguments must also be set. weights | An optional slice with the same length as the window that will be multiplied elementwise with the values in the window. min_periods | The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size. center | Set the labels at the center of the window by | If the window_size is temporal for instance \"5h\" or \"3s , you must set the column that will be used to determine the windows. This column must be of dtype {Date, Datetime} closed | : 'left', 'right', 'both', 'none' Define whether the temporal window interval is closed or not. Details This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using groupby_rolling this method can cache the window size computation. Value Expr Examples pl$DataFrame(list(a=1:6))$select(pl$col(\"a\")$rolling_var(window_size = 2))","title":"`Expr_rolling_var`"},{"location":"reference/Expr_rolling_var/#expr_rolling_var","text":"Rolling var","title":"Expr_rolling_var"},{"location":"reference/Expr_rolling_var/#description","text":"Apply a rolling var (moving var) over the values in this array. A window of length window_size will traverse the array. The values that fill this window will (optionally) be multiplied with the weights given by the weight vector. The resulting values will be aggregated to their sum.","title":"Description"},{"location":"reference/Expr_rolling_var/#usage","text":"Expr_rolling_var( window_size, weights = NULL, min_periods = NULL, center = FALSE, by = NULL, closed = \"left\" )","title":"Usage"},{"location":"reference/Expr_rolling_var/#arguments","text":"Argument Description window_size The length of the window. Can be a fixed integer size, or a dynamic temporal size indicated by the following string language: 1ns (1 nanosecond) 1us (1 microsecond) 1ms (1 millisecond) 1s (1 second) 1m (1 minute) 1h (1 hour) 1d (1 day) 1w (1 week) 1mo (1 calendar month) 1y (1 calendar year) 1i (1 index count) If the dynamic string language is used, the by and closed arguments must also be set. weights | An optional slice with the same length as the window that will be multiplied elementwise with the values in the window. min_periods | The number of values in the window that should be non-null before computing a result. If None, it will be set equal to window size. center | Set the labels at the center of the window by | If the window_size is temporal for instance \"5h\" or \"3s , you must set the column that will be used to determine the windows. This column must be of dtype {Date, Datetime} closed | : 'left', 'right', 'both', 'none' Define whether the temporal window interval is closed or not.","title":"Arguments"},{"location":"reference/Expr_rolling_var/#details","text":"This functionality is experimental and may change without it being considered a breaking change. Notes: If you want to compute multiple aggregation statistics over the same dynamic window, consider using groupby_rolling this method can cache the window size computation.","title":"Details"},{"location":"reference/Expr_rolling_var/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_rolling_var/#examples","text":"pl$DataFrame(list(a=1:6))$select(pl$col(\"a\")$rolling_var(window_size = 2))","title":"Examples"},{"location":"reference/Expr_round/","text":"Expr_round round Description Round underlying floating point data by decimals digits. Format a method Usage Expr_round(decimals) Arguments Argument Description decimals integer Number of decimals to round by. Value Expr Examples pl$DataFrame(list( a = c(0.33, 0.5, 1.02, 1.5, NaN , NA, Inf, -Inf) ))$select( pl$col(\"a\")$round(0) )","title":"`Expr_round`"},{"location":"reference/Expr_round/#expr_round","text":"round","title":"Expr_round"},{"location":"reference/Expr_round/#description","text":"Round underlying floating point data by decimals digits.","title":"Description"},{"location":"reference/Expr_round/#format","text":"a method","title":"Format"},{"location":"reference/Expr_round/#usage","text":"Expr_round(decimals)","title":"Usage"},{"location":"reference/Expr_round/#arguments","text":"Argument Description decimals integer Number of decimals to round by.","title":"Arguments"},{"location":"reference/Expr_round/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_round/#examples","text":"pl$DataFrame(list( a = c(0.33, 0.5, 1.02, 1.5, NaN , NA, Inf, -Inf) ))$select( pl$col(\"a\")$round(0) )","title":"Examples"},{"location":"reference/Expr_rpow/","text":"Expr_rpow Reverse exponentiation % % (in R == ^ ) Description Raise a base to the power of the expression as exponent. Usage Expr_rpow(base) e1 %**% e2 `%**%.Expr`(e1, e2) Arguments Argument Description base real or Expr, the value of the base, self is the exponent e1 value where ** operator is defined e2 value where ** operator is defined Details do not use ** , R secretly parses that just as if it was a ^ Value Expr Examples pl$DataFrame(list(a = -1:3))$select( pl$lit(2)$rpow(pl$col(\"a\")) )$get_column(\"a\")$to_r() == (-1:3)^2 pl$DataFrame(list(a = -1:3))$select( pl$lit(2) %**% (pl$col(\"a\")) )$get_column(\"a\")$to_r() == (-1:3)^2","title":"`Expr_rpow`"},{"location":"reference/Expr_rpow/#expr_rpow","text":"Reverse exponentiation % % (in R == ^ )","title":"Expr_rpow"},{"location":"reference/Expr_rpow/#description","text":"Raise a base to the power of the expression as exponent.","title":"Description"},{"location":"reference/Expr_rpow/#usage","text":"Expr_rpow(base) e1 %**% e2 `%**%.Expr`(e1, e2)","title":"Usage"},{"location":"reference/Expr_rpow/#arguments","text":"Argument Description base real or Expr, the value of the base, self is the exponent e1 value where ** operator is defined e2 value where ** operator is defined","title":"Arguments"},{"location":"reference/Expr_rpow/#details","text":"do not use ** , R secretly parses that just as if it was a ^","title":"Details"},{"location":"reference/Expr_rpow/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_rpow/#examples","text":"pl$DataFrame(list(a = -1:3))$select( pl$lit(2)$rpow(pl$col(\"a\")) )$get_column(\"a\")$to_r() == (-1:3)^2 pl$DataFrame(list(a = -1:3))$select( pl$lit(2) %**% (pl$col(\"a\")) )$get_column(\"a\")$to_r() == (-1:3)^2","title":"Examples"},{"location":"reference/Expr_sample/","text":"Expr_sample Sample Description ' Sample from this expression. Format Method Usage Expr_sample( frac = NULL, with_replacement = TRUE, shuffle = FALSE, seed = NULL, n = NULL ) Arguments Argument Description frac Fraction of items to return. Cannot be used with n . with_replacement Allow values to be sampled more than once. shuffle Shuffle the order of sampled data points. (implicitly TRUE if, with_replacement = TRUE) seed Seed for the random number generator. If set to None (default), a random seed is used. n Number of items to return. Cannot be used with frac . Value Expr Examples df = pl$DataFrame(a=1:3) df$select(pl$col(\"a\")$sample(frac=1,with_replacement=TRUE,seed=1L)) df$select(pl$col(\"a\")$sample(frac=2,with_replacement=TRUE,seed=1L)) df$select(pl$col(\"a\")$sample(n=2,with_replacement=FALSE,seed=1L))","title":"`Expr_sample`"},{"location":"reference/Expr_sample/#expr_sample","text":"Sample","title":"Expr_sample"},{"location":"reference/Expr_sample/#description","text":"","title":"Description"},{"location":"reference/Expr_sample/#sample-from-this-expression","text":"","title":"' Sample from this expression."},{"location":"reference/Expr_sample/#format","text":"Method","title":"Format"},{"location":"reference/Expr_sample/#usage","text":"Expr_sample( frac = NULL, with_replacement = TRUE, shuffle = FALSE, seed = NULL, n = NULL )","title":"Usage"},{"location":"reference/Expr_sample/#arguments","text":"Argument Description frac Fraction of items to return. Cannot be used with n . with_replacement Allow values to be sampled more than once. shuffle Shuffle the order of sampled data points. (implicitly TRUE if, with_replacement = TRUE) seed Seed for the random number generator. If set to None (default), a random seed is used. n Number of items to return. Cannot be used with frac .","title":"Arguments"},{"location":"reference/Expr_sample/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_sample/#examples","text":"df = pl$DataFrame(a=1:3) df$select(pl$col(\"a\")$sample(frac=1,with_replacement=TRUE,seed=1L)) df$select(pl$col(\"a\")$sample(frac=2,with_replacement=TRUE,seed=1L)) df$select(pl$col(\"a\")$sample(n=2,with_replacement=FALSE,seed=1L))","title":"Examples"},{"location":"reference/Expr_search_sorted/","text":"Expr_search_sorted Where to inject element(s) to maintain sorting Description Find indices in self where elements should be inserted into to maintain order. Format a method Usage Expr_search_sorted(element) Arguments Argument Description element a R value into literal or an expression of an element Details This function look up where to insert element if to keep self column sorted. It is assumed the self column is already sorted ascending, otherwise wrongs answers. This function is a bit under documented in py-polars. Value Expr Examples pl$DataFrame(list(a=0:100))$select(pl$col(\"a\")$search_sorted(pl$lit(42L)))","title":"`Expr_search_sorted`"},{"location":"reference/Expr_search_sorted/#expr_search_sorted","text":"Where to inject element(s) to maintain sorting","title":"Expr_search_sorted"},{"location":"reference/Expr_search_sorted/#description","text":"Find indices in self where elements should be inserted into to maintain order.","title":"Description"},{"location":"reference/Expr_search_sorted/#format","text":"a method","title":"Format"},{"location":"reference/Expr_search_sorted/#usage","text":"Expr_search_sorted(element)","title":"Usage"},{"location":"reference/Expr_search_sorted/#arguments","text":"Argument Description element a R value into literal or an expression of an element","title":"Arguments"},{"location":"reference/Expr_search_sorted/#details","text":"This function look up where to insert element if to keep self column sorted. It is assumed the self column is already sorted ascending, otherwise wrongs answers. This function is a bit under documented in py-polars.","title":"Details"},{"location":"reference/Expr_search_sorted/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_search_sorted/#examples","text":"pl$DataFrame(list(a=0:100))$select(pl$col(\"a\")$search_sorted(pl$lit(42L)))","title":"Examples"},{"location":"reference/Expr_set_sorted/","text":"Expr_set_sorted Set_sorted Description Flags the expression as 'sorted'. Usage Expr_set_sorted(reverse = FALSE) Arguments Argument Description reverse bool if TRUE Descending else Ascending Value Expr Examples #correct use flag something correctly as ascendingly sorted s = pl$select(pl$lit(1:4)$set_sorted()$alias(\"a\"))$get_column(\"a\") s$flags # see flags #incorrect use, flag somthing as not sorted ascendingly s2 = pl$select(pl$lit(c(1,3,2,4))$set_sorted()$alias(\"a\"))$get_column(\"a\") s2$sort() #sorting skipped, although not actually sorted","title":"`Expr_set_sorted`"},{"location":"reference/Expr_set_sorted/#expr_set_sorted","text":"Set_sorted","title":"Expr_set_sorted"},{"location":"reference/Expr_set_sorted/#description","text":"Flags the expression as 'sorted'.","title":"Description"},{"location":"reference/Expr_set_sorted/#usage","text":"Expr_set_sorted(reverse = FALSE)","title":"Usage"},{"location":"reference/Expr_set_sorted/#arguments","text":"Argument Description reverse bool if TRUE Descending else Ascending","title":"Arguments"},{"location":"reference/Expr_set_sorted/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_set_sorted/#examples","text":"#correct use flag something correctly as ascendingly sorted s = pl$select(pl$lit(1:4)$set_sorted()$alias(\"a\"))$get_column(\"a\") s$flags # see flags #incorrect use, flag somthing as not sorted ascendingly s2 = pl$select(pl$lit(c(1,3,2,4))$set_sorted()$alias(\"a\"))$get_column(\"a\") s2$sort() #sorting skipped, although not actually sorted","title":"Examples"},{"location":"reference/Expr_shift/","text":"Expr_shift Shift values Description Shift values Format a method Usage Expr_shift(periods) Arguments Argument Description periods numeric number of periods to shift, may be negative. Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples pl$select( pl$lit(0:3)$shift(-2)$alias(\"shift-2\"), pl$lit(0:3)$shift(2)$alias(\"shift+2\") )","title":"`Expr_shift`"},{"location":"reference/Expr_shift/#expr_shift","text":"Shift values","title":"Expr_shift"},{"location":"reference/Expr_shift/#description","text":"Shift values","title":"Description"},{"location":"reference/Expr_shift/#format","text":"a method","title":"Format"},{"location":"reference/Expr_shift/#usage","text":"Expr_shift(periods)","title":"Usage"},{"location":"reference/Expr_shift/#arguments","text":"Argument Description periods numeric number of periods to shift, may be negative.","title":"Arguments"},{"location":"reference/Expr_shift/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_shift/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_shift/#examples","text":"pl$select( pl$lit(0:3)$shift(-2)$alias(\"shift-2\"), pl$lit(0:3)$shift(2)$alias(\"shift+2\") )","title":"Examples"},{"location":"reference/Expr_shift_and_fill/","text":"Expr_shift_and_fill Shift and fill values Description Shift the values by a given period and fill the resulting null values. Format a method Usage Expr_shift_and_fill(periods, fill_value) Arguments Argument Description periods numeric number of periods to shift, may be negative. fill_value Fill None values with the result of this expression. Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples pl$select( pl$lit(0:3), pl$lit(0:3)$shift_and_fill(-2, fill_value = 42)$alias(\"shift-2\"), pl$lit(0:3)$shift_and_fill(2, fill_value = pl$lit(42)/2)$alias(\"shift+2\") )","title":"`Expr_shift_and_fill`"},{"location":"reference/Expr_shift_and_fill/#expr_shift_and_fill","text":"Shift and fill values","title":"Expr_shift_and_fill"},{"location":"reference/Expr_shift_and_fill/#description","text":"Shift the values by a given period and fill the resulting null values.","title":"Description"},{"location":"reference/Expr_shift_and_fill/#format","text":"a method","title":"Format"},{"location":"reference/Expr_shift_and_fill/#usage","text":"Expr_shift_and_fill(periods, fill_value)","title":"Usage"},{"location":"reference/Expr_shift_and_fill/#arguments","text":"Argument Description periods numeric number of periods to shift, may be negative. fill_value Fill None values with the result of this expression.","title":"Arguments"},{"location":"reference/Expr_shift_and_fill/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_shift_and_fill/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_shift_and_fill/#examples","text":"pl$select( pl$lit(0:3), pl$lit(0:3)$shift_and_fill(-2, fill_value = 42)$alias(\"shift-2\"), pl$lit(0:3)$shift_and_fill(2, fill_value = pl$lit(42)/2)$alias(\"shift+2\") )","title":"Examples"},{"location":"reference/Expr_shrink_dtype/","text":"Expr_shrink_dtype Wrap column in list Description Shrink numeric columns to the minimal required datatype. Shrink to the dtype needed to fit the extrema of this [Series] . This can be used to reduce memory pressure. Format An object of class character of length 1. Usage Expr_shrink_dtype Value Expr Examples pl$DataFrame( a= c(1L, 2L, 3L), b= c(1L, 2L, bitwShiftL(2L,29)), c= c(-1L, 2L, bitwShiftL(1L,15)), d= c(-112L, 2L, 112L), e= c(-112L, 2L, 129L), f= c(\"a\", \"b\", \"c\"), g= c(0.1, 1.32, 0.12), h= c(TRUE, NA, FALSE) )$with_column( pl$col(\"b\")$cast(pl$Int64) *32L )$select(pl$all()$shrink_dtype())","title":"`Expr_shrink_dtype`"},{"location":"reference/Expr_shrink_dtype/#expr_shrink_dtype","text":"Wrap column in list","title":"Expr_shrink_dtype"},{"location":"reference/Expr_shrink_dtype/#description","text":"Shrink numeric columns to the minimal required datatype. Shrink to the dtype needed to fit the extrema of this [Series] . This can be used to reduce memory pressure.","title":"Description"},{"location":"reference/Expr_shrink_dtype/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_shrink_dtype/#usage","text":"Expr_shrink_dtype","title":"Usage"},{"location":"reference/Expr_shrink_dtype/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_shrink_dtype/#examples","text":"pl$DataFrame( a= c(1L, 2L, 3L), b= c(1L, 2L, bitwShiftL(2L,29)), c= c(-1L, 2L, bitwShiftL(1L,15)), d= c(-112L, 2L, 112L), e= c(-112L, 2L, 129L), f= c(\"a\", \"b\", \"c\"), g= c(0.1, 1.32, 0.12), h= c(TRUE, NA, FALSE) )$with_column( pl$col(\"b\")$cast(pl$Int64) *32L )$select(pl$all()$shrink_dtype())","title":"Examples"},{"location":"reference/Expr_shuffle/","text":"Expr_shuffle Shuffle Description Shuffle the contents of this expr. Format Method Usage Expr_shuffle(seed = NULL) Arguments Argument Description seed numeric value of 0 to 2^52 Seed for the random number generator. If set to Null (default), a random seed value intergish value between 0 and 10000 is picked Value Expr Examples pl$DataFrame(a = 1:3)$select(pl$col(\"a\")$shuffle(seed=1))","title":"`Expr_shuffle`"},{"location":"reference/Expr_shuffle/#expr_shuffle","text":"Shuffle","title":"Expr_shuffle"},{"location":"reference/Expr_shuffle/#description","text":"Shuffle the contents of this expr.","title":"Description"},{"location":"reference/Expr_shuffle/#format","text":"Method","title":"Format"},{"location":"reference/Expr_shuffle/#usage","text":"Expr_shuffle(seed = NULL)","title":"Usage"},{"location":"reference/Expr_shuffle/#arguments","text":"Argument Description seed numeric value of 0 to 2^52 Seed for the random number generator. If set to Null (default), a random seed value intergish value between 0 and 10000 is picked","title":"Arguments"},{"location":"reference/Expr_shuffle/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_shuffle/#examples","text":"pl$DataFrame(a = 1:3)$select(pl$col(\"a\")$shuffle(seed=1))","title":"Examples"},{"location":"reference/Expr_sign/","text":"Expr_sign Sign Description Compute the element-wise indication of the sign. Format Method Usage Expr_sign Value Expr Examples pl$DataFrame(a=c(.9,-0,0,4,NA_real_))$select(pl$col(\"a\")$sign())","title":"`Expr_sign`"},{"location":"reference/Expr_sign/#expr_sign","text":"Sign","title":"Expr_sign"},{"location":"reference/Expr_sign/#description","text":"Compute the element-wise indication of the sign.","title":"Description"},{"location":"reference/Expr_sign/#format","text":"Method","title":"Format"},{"location":"reference/Expr_sign/#usage","text":"Expr_sign","title":"Usage"},{"location":"reference/Expr_sign/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_sign/#examples","text":"pl$DataFrame(a=c(.9,-0,0,4,NA_real_))$select(pl$col(\"a\")$sign())","title":"Examples"},{"location":"reference/Expr_sin/","text":"Expr_sin Sin Description Compute the element-wise value for the sine. Format Method Usage Expr_sin Details Evaluated Series has dtype Float64 Value Expr Examples pl$DataFrame(a=c(0,pi/2,pi,NA_real_))$select(pl$col(\"a\")$sin())","title":"`Expr_sin`"},{"location":"reference/Expr_sin/#expr_sin","text":"Sin","title":"Expr_sin"},{"location":"reference/Expr_sin/#description","text":"Compute the element-wise value for the sine.","title":"Description"},{"location":"reference/Expr_sin/#format","text":"Method","title":"Format"},{"location":"reference/Expr_sin/#usage","text":"Expr_sin","title":"Usage"},{"location":"reference/Expr_sin/#details","text":"Evaluated Series has dtype Float64","title":"Details"},{"location":"reference/Expr_sin/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_sin/#examples","text":"pl$DataFrame(a=c(0,pi/2,pi,NA_real_))$select(pl$col(\"a\")$sin())","title":"Examples"},{"location":"reference/Expr_sinh/","text":"Expr_sinh Sinh Description Compute the element-wise value for the hyperbolic sine. Format Method Usage Expr_sinh Details Evaluated Series has dtype Float64 Value Expr Examples pl$DataFrame(a=c(-1,asinh(0.5),0,1,NA_real_))$select(pl$col(\"a\")$sinh())","title":"`Expr_sinh`"},{"location":"reference/Expr_sinh/#expr_sinh","text":"Sinh","title":"Expr_sinh"},{"location":"reference/Expr_sinh/#description","text":"Compute the element-wise value for the hyperbolic sine.","title":"Description"},{"location":"reference/Expr_sinh/#format","text":"Method","title":"Format"},{"location":"reference/Expr_sinh/#usage","text":"Expr_sinh","title":"Usage"},{"location":"reference/Expr_sinh/#details","text":"Evaluated Series has dtype Float64","title":"Details"},{"location":"reference/Expr_sinh/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_sinh/#examples","text":"pl$DataFrame(a=c(-1,asinh(0.5),0,1,NA_real_))$select(pl$col(\"a\")$sinh())","title":"Examples"},{"location":"reference/Expr_skew/","text":"Expr_skew Skewness Description Compute the sample skewness of a data set. Usage Expr_skew(bias = TRUE) Arguments Argument Description bias If False, then the calculations are corrected for statistical bias. Details For normally distributed data, the skewness should be about zero. For unimodal continuous distributions, a skewness value greater than zero means that there is more weight in the right tail of the distribution. The function skewtest can be used to determine if the skewness value is close enough to zero, statistically speaking. See scipy.stats for more information. list(list(\"Notes\"), list(\"\\n\", \"\\n\", \"The sample skewness is computed as the Fisher-Pearson coefficient\\n\", \"of skewness, i.e.\\n\", \"\\n\", list(list(\" g_1=\\frac{m_3}{m_2^{3/2}}\")), \"\\n\", \"\\n\", \"where\\n\", \"\\n\", list(list(\" m_i=\\frac{1}{N}\\sum_{n=1}^N(x[n]-\\bar{x})^i\")), \"\\n\", \"\\n\", \"is the biased sample :math:\", list(\"i\\texttt{th}\"), \" central moment, and \", list(list(\"\\bar{x}\")), \" is\\n\", \"the sample mean. If \", list(\"bias\"), \" is False, the calculations are\\n\", \"corrected for bias and the value computed is the adjusted\\n\", \"Fisher-Pearson standardized moment coefficient, i.e.\\n\", \"\\n\", list(list(\" G_1 = \\frac{k_3}{k_2^{3/2}} = \\frac{\\sqrt{N(N-1)}}{N-2}\\frac{m_3}{m_2^{3/2}}\")), \"\\n\")) Value Expr References https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.skew.html?highlight=skew#scipy.stats.skew Examples df = pl$DataFrame(list( a=c(1:3,2:1))) df$select(pl$col(\"a\")$skew())","title":"`Expr_skew`"},{"location":"reference/Expr_skew/#expr_skew","text":"Skewness","title":"Expr_skew"},{"location":"reference/Expr_skew/#description","text":"Compute the sample skewness of a data set.","title":"Description"},{"location":"reference/Expr_skew/#usage","text":"Expr_skew(bias = TRUE)","title":"Usage"},{"location":"reference/Expr_skew/#arguments","text":"Argument Description bias If False, then the calculations are corrected for statistical bias.","title":"Arguments"},{"location":"reference/Expr_skew/#details","text":"For normally distributed data, the skewness should be about zero. For unimodal continuous distributions, a skewness value greater than zero means that there is more weight in the right tail of the distribution. The function skewtest can be used to determine if the skewness value is close enough to zero, statistically speaking. See scipy.stats for more information. list(list(\"Notes\"), list(\"\\n\", \"\\n\", \"The sample skewness is computed as the Fisher-Pearson coefficient\\n\", \"of skewness, i.e.\\n\", \"\\n\", list(list(\" g_1=\\frac{m_3}{m_2^{3/2}}\")), \"\\n\", \"\\n\", \"where\\n\", \"\\n\", list(list(\" m_i=\\frac{1}{N}\\sum_{n=1}^N(x[n]-\\bar{x})^i\")), \"\\n\", \"\\n\", \"is the biased sample :math:\", list(\"i\\texttt{th}\"), \" central moment, and \", list(list(\"\\bar{x}\")), \" is\\n\", \"the sample mean. If \", list(\"bias\"), \" is False, the calculations are\\n\", \"corrected for bias and the value computed is the adjusted\\n\", \"Fisher-Pearson standardized moment coefficient, i.e.\\n\", \"\\n\", list(list(\" G_1 = \\frac{k_3}{k_2^{3/2}} = \\frac{\\sqrt{N(N-1)}}{N-2}\\frac{m_3}{m_2^{3/2}}\")), \"\\n\"))","title":"Details"},{"location":"reference/Expr_skew/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_skew/#references","text":"https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.skew.html?highlight=skew#scipy.stats.skew","title":"References"},{"location":"reference/Expr_skew/#examples","text":"df = pl$DataFrame(list( a=c(1:3,2:1))) df$select(pl$col(\"a\")$skew())","title":"Examples"},{"location":"reference/Expr_slice/","text":"Expr_slice Get a slice of this expression. Description Get a slice of this expression. Format a method Usage Expr_slice(offset, length = NULL) Arguments Argument Description offset numeric or expression, zero-indexed where to start slice negative value indicate starting (one-indexed) from back length how many elements should slice contain, default NULL is max length Value Expr Examples #as head pl$DataFrame(list(a=0:100))$select( pl$all()$slice(0,6) ) #as tail pl$DataFrame(list(a=0:100))$select( pl$all()$slice(-6,6) ) pl$DataFrame(list(a=0:100))$select( pl$all()$slice(80) )","title":"`Expr_slice`"},{"location":"reference/Expr_slice/#expr_slice","text":"Get a slice of this expression.","title":"Expr_slice"},{"location":"reference/Expr_slice/#description","text":"Get a slice of this expression.","title":"Description"},{"location":"reference/Expr_slice/#format","text":"a method","title":"Format"},{"location":"reference/Expr_slice/#usage","text":"Expr_slice(offset, length = NULL)","title":"Usage"},{"location":"reference/Expr_slice/#arguments","text":"Argument Description offset numeric or expression, zero-indexed where to start slice negative value indicate starting (one-indexed) from back length how many elements should slice contain, default NULL is max length","title":"Arguments"},{"location":"reference/Expr_slice/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_slice/#examples","text":"#as head pl$DataFrame(list(a=0:100))$select( pl$all()$slice(0,6) ) #as tail pl$DataFrame(list(a=0:100))$select( pl$all()$slice(-6,6) ) pl$DataFrame(list(a=0:100))$select( pl$all()$slice(80) )","title":"Examples"},{"location":"reference/Expr_sort/","text":"Expr_sort Expr_sort Description Sort this column. In projection/ selection context the whole column is sorted. If used in a groupby context, the groups are sorted. Format a method Usage Expr_sort(reverse = FALSE, nulls_last = FALSE) Arguments Argument Description reverse bool default FALSE, reverses sort nulls_last bool, default FALSE, place Nulls last Details See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples pl$DataFrame(list( a = c(6, 1, 0, NA, Inf, NaN) ))$select(pl$col(\"a\")$sort())","title":"`Expr_sort`"},{"location":"reference/Expr_sort/#expr_sort","text":"Expr_sort","title":"Expr_sort"},{"location":"reference/Expr_sort/#description","text":"Sort this column. In projection/ selection context the whole column is sorted. If used in a groupby context, the groups are sorted.","title":"Description"},{"location":"reference/Expr_sort/#format","text":"a method","title":"Format"},{"location":"reference/Expr_sort/#usage","text":"Expr_sort(reverse = FALSE, nulls_last = FALSE)","title":"Usage"},{"location":"reference/Expr_sort/#arguments","text":"Argument Description reverse bool default FALSE, reverses sort nulls_last bool, default FALSE, place Nulls last","title":"Arguments"},{"location":"reference/Expr_sort/#details","text":"See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_sort/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_sort/#examples","text":"pl$DataFrame(list( a = c(6, 1, 0, NA, Inf, NaN) ))$select(pl$col(\"a\")$sort())","title":"Examples"},{"location":"reference/Expr_sort_by/","text":"Expr_sort_by sort column by order of others Description Sort this column by the ordering of another column, or multiple other columns. Format a method Usage Expr_sort_by(by, reverse = FALSE) Arguments Argument Description by one expression or list expressions and/or strings(interpreted as column names) reverse single bool to boolean vector, any is_TRUE will give reverse sorting of that column Details In projection/ selection context the whole column is sorted. If used in a groupby context, the groups are sorted. See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples df = pl$DataFrame(list( group = c(\"a\",\"a\",\"a\",\"b\",\"b\",\"b\"), value1 = c(98,1,3,2,99,100), value2 = c(\"d\",\"f\",\"b\",\"e\",\"c\",\"a\") )) # by one column/expression df$select( pl$col(\"group\")$sort_by(\"value1\") ) # by two columns/expressions df$select( pl$col(\"group\")$sort_by(list(\"value2\",pl$col(\"value1\")), reverse =c(TRUE,FALSE)) ) # by some expression df$select( pl$col(\"group\")$sort_by(pl$col(\"value1\")$sort(reverse=TRUE)) ) #quite similar usecase as R function `order()` l = list( ab = c(rep(\"a\",6),rep(\"b\",6)), v4 = rep(1:4, 3), v3 = rep(1:3, 4), v2 = rep(1:2,6), v1 = 1:12 ) df = pl$DataFrame(l) #examples of order versus sort_by all.equal( df$select( pl$col(\"ab\")$sort_by(\"v4\")$alias(\"ab4\"), pl$col(\"ab\")$sort_by(\"v3\")$alias(\"ab3\"), pl$col(\"ab\")$sort_by(\"v2\")$alias(\"ab2\"), pl$col(\"ab\")$sort_by(\"v1\")$alias(\"ab1\"), pl$col(\"ab\")$sort_by(list(\"v3\",pl$col(\"v1\")),reverse=c(FALSE,TRUE))$alias(\"ab13FT\"), pl$col(\"ab\")$sort_by(list(\"v3\",pl$col(\"v1\")),reverse=TRUE)$alias(\"ab13T\") )$to_list(), list( ab4 = l$ab[order(l$v4)], ab3 = l$ab[order(l$v3)], ab2 = l$ab[order(l$v2)], ab1 = l$ab[order(l$v1)], ab13FT= l$ab[order(l$v3,rev(l$v1))], ab13T = l$ab[order(l$v3,l$v1,decreasing= TRUE)] ) )","title":"`Expr_sort_by`"},{"location":"reference/Expr_sort_by/#expr_sort_by","text":"sort column by order of others","title":"Expr_sort_by"},{"location":"reference/Expr_sort_by/#description","text":"Sort this column by the ordering of another column, or multiple other columns.","title":"Description"},{"location":"reference/Expr_sort_by/#format","text":"a method","title":"Format"},{"location":"reference/Expr_sort_by/#usage","text":"Expr_sort_by(by, reverse = FALSE)","title":"Usage"},{"location":"reference/Expr_sort_by/#arguments","text":"Argument Description by one expression or list expressions and/or strings(interpreted as column names) reverse single bool to boolean vector, any is_TRUE will give reverse sorting of that column","title":"Arguments"},{"location":"reference/Expr_sort_by/#details","text":"In projection/ selection context the whole column is sorted. If used in a groupby context, the groups are sorted. See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_sort_by/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_sort_by/#examples","text":"df = pl$DataFrame(list( group = c(\"a\",\"a\",\"a\",\"b\",\"b\",\"b\"), value1 = c(98,1,3,2,99,100), value2 = c(\"d\",\"f\",\"b\",\"e\",\"c\",\"a\") )) # by one column/expression df$select( pl$col(\"group\")$sort_by(\"value1\") ) # by two columns/expressions df$select( pl$col(\"group\")$sort_by(list(\"value2\",pl$col(\"value1\")), reverse =c(TRUE,FALSE)) ) # by some expression df$select( pl$col(\"group\")$sort_by(pl$col(\"value1\")$sort(reverse=TRUE)) ) #quite similar usecase as R function `order()` l = list( ab = c(rep(\"a\",6),rep(\"b\",6)), v4 = rep(1:4, 3), v3 = rep(1:3, 4), v2 = rep(1:2,6), v1 = 1:12 ) df = pl$DataFrame(l) #examples of order versus sort_by all.equal( df$select( pl$col(\"ab\")$sort_by(\"v4\")$alias(\"ab4\"), pl$col(\"ab\")$sort_by(\"v3\")$alias(\"ab3\"), pl$col(\"ab\")$sort_by(\"v2\")$alias(\"ab2\"), pl$col(\"ab\")$sort_by(\"v1\")$alias(\"ab1\"), pl$col(\"ab\")$sort_by(list(\"v3\",pl$col(\"v1\")),reverse=c(FALSE,TRUE))$alias(\"ab13FT\"), pl$col(\"ab\")$sort_by(list(\"v3\",pl$col(\"v1\")),reverse=TRUE)$alias(\"ab13T\") )$to_list(), list( ab4 = l$ab[order(l$v4)], ab3 = l$ab[order(l$v3)], ab2 = l$ab[order(l$v2)], ab1 = l$ab[order(l$v1)], ab13FT= l$ab[order(l$v3,rev(l$v1))], ab13T = l$ab[order(l$v3,l$v1,decreasing= TRUE)] ) )","title":"Examples"},{"location":"reference/Expr_sqrt/","text":"Expr_sqrt Square root Description Compute the square root of the elements. Usage Expr_sqrt() Value Expr Examples pl$DataFrame(list(a = -1:3))$select(pl$col(\"a\")$sqrt())","title":"`Expr_sqrt`"},{"location":"reference/Expr_sqrt/#expr_sqrt","text":"Square root","title":"Expr_sqrt"},{"location":"reference/Expr_sqrt/#description","text":"Compute the square root of the elements.","title":"Description"},{"location":"reference/Expr_sqrt/#usage","text":"Expr_sqrt()","title":"Usage"},{"location":"reference/Expr_sqrt/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_sqrt/#examples","text":"pl$DataFrame(list(a = -1:3))$select(pl$col(\"a\")$sqrt())","title":"Examples"},{"location":"reference/Expr_std/","text":"Expr_std Get Standard Deviation Description Get Standard Deviation Format a method Usage Expr_std(ddof = 1) Arguments Argument Description ddof integer in range [0;255] degrees of freedom Value Expr (f64 scalar) Examples pl$select(pl$lit(1:5)$std())","title":"`Expr_std`"},{"location":"reference/Expr_std/#expr_std","text":"Get Standard Deviation","title":"Expr_std"},{"location":"reference/Expr_std/#description","text":"Get Standard Deviation","title":"Description"},{"location":"reference/Expr_std/#format","text":"a method","title":"Format"},{"location":"reference/Expr_std/#usage","text":"Expr_std(ddof = 1)","title":"Usage"},{"location":"reference/Expr_std/#arguments","text":"Argument Description ddof integer in range [0;255] degrees of freedom","title":"Arguments"},{"location":"reference/Expr_std/#value","text":"Expr (f64 scalar)","title":"Value"},{"location":"reference/Expr_std/#examples","text":"pl$select(pl$lit(1:5)$std())","title":"Examples"},{"location":"reference/Expr_str/","text":"Expr_str str: string related methods Description Create an object namespace of all string related methods. See the individual method pages for full details Usage Expr_str() Value Expr Examples #missing","title":"`Expr_str`"},{"location":"reference/Expr_str/#expr_str","text":"str: string related methods","title":"Expr_str"},{"location":"reference/Expr_str/#description","text":"Create an object namespace of all string related methods. See the individual method pages for full details","title":"Description"},{"location":"reference/Expr_str/#usage","text":"Expr_str()","title":"Usage"},{"location":"reference/Expr_str/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_str/#examples","text":"#missing","title":"Examples"},{"location":"reference/Expr_struct/","text":"Expr_struct struct: related methods Description Create an object namespace of all struct related methods. See the individual method pages for full details Usage Expr_struct() Value Expr Examples #missing","title":"`Expr_struct`"},{"location":"reference/Expr_struct/#expr_struct","text":"struct: related methods","title":"Expr_struct"},{"location":"reference/Expr_struct/#description","text":"Create an object namespace of all struct related methods. See the individual method pages for full details","title":"Description"},{"location":"reference/Expr_struct/#usage","text":"Expr_struct()","title":"Usage"},{"location":"reference/Expr_struct/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_struct/#examples","text":"#missing","title":"Examples"},{"location":"reference/Expr_sub/","text":"Expr_sub Sub Description Substract Usage Expr_sub(other) list(list(\"-\"), list(\"Expr\"))(e1, e2) Arguments Argument Description other literal or Robj which can become a literal e1 lhs Expr e2 rhs Expr or anything which can become a literal Expression Value Exprs Examples #three syntaxes same result pl$lit(5) - 10 pl$lit(5) - pl$lit(10) pl$lit(5)$sub(pl$lit(10)) -pl$lit(5)","title":"`Expr_sub`"},{"location":"reference/Expr_sub/#expr_sub","text":"Sub","title":"Expr_sub"},{"location":"reference/Expr_sub/#description","text":"Substract","title":"Description"},{"location":"reference/Expr_sub/#usage","text":"Expr_sub(other) list(list(\"-\"), list(\"Expr\"))(e1, e2)","title":"Usage"},{"location":"reference/Expr_sub/#arguments","text":"Argument Description other literal or Robj which can become a literal e1 lhs Expr e2 rhs Expr or anything which can become a literal Expression","title":"Arguments"},{"location":"reference/Expr_sub/#value","text":"Exprs","title":"Value"},{"location":"reference/Expr_sub/#examples","text":"#three syntaxes same result pl$lit(5) - 10 pl$lit(5) - pl$lit(10) pl$lit(5)$sub(pl$lit(10)) -pl$lit(5)","title":"Examples"},{"location":"reference/Expr_sum/","text":"Expr_sum sum Description Get sum value Format An object of class character of length 1. Usage Expr_sum Details Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues. Value Expr Examples pl$DataFrame(list(x=c(1L,NA,2L)))$select(pl$col(\"x\")$sum())#is i32 3 (Int32 not casted)","title":"`Expr_sum`"},{"location":"reference/Expr_sum/#expr_sum","text":"sum","title":"Expr_sum"},{"location":"reference/Expr_sum/#description","text":"Get sum value","title":"Description"},{"location":"reference/Expr_sum/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_sum/#usage","text":"Expr_sum","title":"Usage"},{"location":"reference/Expr_sum/#details","text":"Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues.","title":"Details"},{"location":"reference/Expr_sum/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_sum/#examples","text":"pl$DataFrame(list(x=c(1L,NA,2L)))$select(pl$col(\"x\")$sum())#is i32 3 (Int32 not casted)","title":"Examples"},{"location":"reference/Expr_tail/","text":"Expr_tail Tail Description Get the tail n elements. Similar to R tail(x) Usage Expr_tail(n = 10) Arguments Argument Description n numeric number of elements to select from tail Value Expr Examples #get 3 last elements pl$DataFrame(list(x=1:11))$select(pl$col(\"x\")$tail(3))","title":"`Expr_tail`"},{"location":"reference/Expr_tail/#expr_tail","text":"Tail","title":"Expr_tail"},{"location":"reference/Expr_tail/#description","text":"Get the tail n elements. Similar to R tail(x)","title":"Description"},{"location":"reference/Expr_tail/#usage","text":"Expr_tail(n = 10)","title":"Usage"},{"location":"reference/Expr_tail/#arguments","text":"Argument Description n numeric number of elements to select from tail","title":"Arguments"},{"location":"reference/Expr_tail/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_tail/#examples","text":"#get 3 last elements pl$DataFrame(list(x=1:11))$select(pl$col(\"x\")$tail(3))","title":"Examples"},{"location":"reference/Expr_take/","text":"Expr_take Take values by index. Description Take values by index. Format a method Usage Expr_take(indices) Arguments Argument Description indices R scalar/vector or Series, or Expr that leads to a UInt32 dtyped Series. Details similar to R indexing syntax e.g. letters[c(1,3,5)] , however as an expression, not as eager computation exceeding Value Expr Examples pl$select( pl$lit(0:10)$take(c(1,8,0,7)))","title":"`Expr_take`"},{"location":"reference/Expr_take/#expr_take","text":"Take values by index.","title":"Expr_take"},{"location":"reference/Expr_take/#description","text":"Take values by index.","title":"Description"},{"location":"reference/Expr_take/#format","text":"a method","title":"Format"},{"location":"reference/Expr_take/#usage","text":"Expr_take(indices)","title":"Usage"},{"location":"reference/Expr_take/#arguments","text":"Argument Description indices R scalar/vector or Series, or Expr that leads to a UInt32 dtyped Series.","title":"Arguments"},{"location":"reference/Expr_take/#details","text":"similar to R indexing syntax e.g. letters[c(1,3,5)] , however as an expression, not as eager computation exceeding","title":"Details"},{"location":"reference/Expr_take/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_take/#examples","text":"pl$select( pl$lit(0:10)$take(c(1,8,0,7)))","title":"Examples"},{"location":"reference/Expr_take_every/","text":"Expr_take_every Take every n'th element Description Take every nth value in the Series and return as a new Series. Format a method Usage Expr_take_every(n) Arguments Argument Description n positive integerish value Value Expr Examples pl$DataFrame(list(a=0:24))$select(pl$col(\"a\")$take_every(6))","title":"`Expr_take_every`"},{"location":"reference/Expr_take_every/#expr_take_every","text":"Take every n'th element","title":"Expr_take_every"},{"location":"reference/Expr_take_every/#description","text":"Take every nth value in the Series and return as a new Series.","title":"Description"},{"location":"reference/Expr_take_every/#format","text":"a method","title":"Format"},{"location":"reference/Expr_take_every/#usage","text":"Expr_take_every(n)","title":"Usage"},{"location":"reference/Expr_take_every/#arguments","text":"Argument Description n positive integerish value","title":"Arguments"},{"location":"reference/Expr_take_every/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_take_every/#examples","text":"pl$DataFrame(list(a=0:24))$select(pl$col(\"a\")$take_every(6))","title":"Examples"},{"location":"reference/Expr_tan/","text":"Expr_tan Tan Description Compute the element-wise value for the tangent. Format Method Usage Expr_tan Details Evaluated Series has dtype Float64 Value Expr Examples pl$DataFrame(a=c(0,pi/2,pi,NA_real_))$select(pl$col(\"a\")$tan())","title":"`Expr_tan`"},{"location":"reference/Expr_tan/#expr_tan","text":"Tan","title":"Expr_tan"},{"location":"reference/Expr_tan/#description","text":"Compute the element-wise value for the tangent.","title":"Description"},{"location":"reference/Expr_tan/#format","text":"Method","title":"Format"},{"location":"reference/Expr_tan/#usage","text":"Expr_tan","title":"Usage"},{"location":"reference/Expr_tan/#details","text":"Evaluated Series has dtype Float64","title":"Details"},{"location":"reference/Expr_tan/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_tan/#examples","text":"pl$DataFrame(a=c(0,pi/2,pi,NA_real_))$select(pl$col(\"a\")$tan())","title":"Examples"},{"location":"reference/Expr_tanh/","text":"Expr_tanh Tanh Description Compute the element-wise value for the hyperbolic tangent. Format Method Usage Expr_tanh Details Evaluated Series has dtype Float64 Value Expr Examples pl$DataFrame(a=c(-1,atanh(0.5),0,1,NA_real_))$select(pl$col(\"a\")$tanh())","title":"`Expr_tanh`"},{"location":"reference/Expr_tanh/#expr_tanh","text":"Tanh","title":"Expr_tanh"},{"location":"reference/Expr_tanh/#description","text":"Compute the element-wise value for the hyperbolic tangent.","title":"Description"},{"location":"reference/Expr_tanh/#format","text":"Method","title":"Format"},{"location":"reference/Expr_tanh/#usage","text":"Expr_tanh","title":"Usage"},{"location":"reference/Expr_tanh/#details","text":"Evaluated Series has dtype Float64","title":"Details"},{"location":"reference/Expr_tanh/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_tanh/#examples","text":"pl$DataFrame(a=c(-1,atanh(0.5),0,1,NA_real_))$select(pl$col(\"a\")$tanh())","title":"Examples"},{"location":"reference/Expr_to_physical/","text":"Expr_to_physical To physical representation Description expression request underlying physical base representation Format An object of class character of length 1. Usage Expr_to_physical Value Expr Examples pl$DataFrame( list(vals = c(\"a\", \"x\", NA, \"a\")) )$with_columns( pl$col(\"vals\")$cast(pl$Categorical), pl$col(\"vals\") $cast(pl$Categorical) $to_physical() $alias(\"vals_physical\") )","title":"`Expr_to_physical`"},{"location":"reference/Expr_to_physical/#expr_to_physical","text":"To physical representation","title":"Expr_to_physical"},{"location":"reference/Expr_to_physical/#description","text":"expression request underlying physical base representation","title":"Description"},{"location":"reference/Expr_to_physical/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_to_physical/#usage","text":"Expr_to_physical","title":"Usage"},{"location":"reference/Expr_to_physical/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_to_physical/#examples","text":"pl$DataFrame( list(vals = c(\"a\", \"x\", NA, \"a\")) )$with_columns( pl$col(\"vals\")$cast(pl$Categorical), pl$col(\"vals\") $cast(pl$Categorical) $to_physical() $alias(\"vals_physical\") )","title":"Examples"},{"location":"reference/Expr_to_r/","text":"Expr_to_r to_r: for debuging an expression Description debug an expression by evaluating in empty DataFrame and return first series to R Format Method Usage Expr_to_r(df = NULL, i = 0) Arguments Argument Description df otherwise a DataFrame to evaluate in, default NULL is an empty DataFrame i numeric column to extract zero index default first, expression could generate multiple columns Value R object Examples pl$lit(1:3)$to_r() pl$expr_to_r(pl$lit(1:3)) pl$expr_to_r(1:3)","title":"`Expr_to_r`"},{"location":"reference/Expr_to_r/#expr_to_r","text":"to_r: for debuging an expression","title":"Expr_to_r"},{"location":"reference/Expr_to_r/#description","text":"debug an expression by evaluating in empty DataFrame and return first series to R","title":"Description"},{"location":"reference/Expr_to_r/#format","text":"Method","title":"Format"},{"location":"reference/Expr_to_r/#usage","text":"Expr_to_r(df = NULL, i = 0)","title":"Usage"},{"location":"reference/Expr_to_r/#arguments","text":"Argument Description df otherwise a DataFrame to evaluate in, default NULL is an empty DataFrame i numeric column to extract zero index default first, expression could generate multiple columns","title":"Arguments"},{"location":"reference/Expr_to_r/#value","text":"R object","title":"Value"},{"location":"reference/Expr_to_r/#examples","text":"pl$lit(1:3)$to_r() pl$expr_to_r(pl$lit(1:3)) pl$expr_to_r(1:3)","title":"Examples"},{"location":"reference/Expr_to_struct/","text":"Expr_to_struct to_struct Description pass expr to pl$struct Usage Expr_to_struct() Value Expr Examples e = pl$all()$to_struct()$alias(\"my_struct\") print(e) pl$DataFrame(iris)$select(e)","title":"`Expr_to_struct`"},{"location":"reference/Expr_to_struct/#expr_to_struct","text":"to_struct","title":"Expr_to_struct"},{"location":"reference/Expr_to_struct/#description","text":"pass expr to pl$struct","title":"Description"},{"location":"reference/Expr_to_struct/#usage","text":"Expr_to_struct()","title":"Usage"},{"location":"reference/Expr_to_struct/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_to_struct/#examples","text":"e = pl$all()$to_struct()$alias(\"my_struct\") print(e) pl$DataFrame(iris)$select(e)","title":"Examples"},{"location":"reference/Expr_top_k/","text":"Expr_top_k Top k values Description Return the k largest elements. If 'reverse=True` the smallest elements will be given. Format a method Usage Expr_top_k(k, reverse = FALSE) Arguments Argument Description k numeric k top values to get reverse bool if true then k smallest values Details This has time complexity: $ O(n + k \\log{}n - \\frac{k}{2}) $ See Inf,NaN,NULL,Null/NA translations here docs_translations Value Expr Examples pl$DataFrame(list( a = c(6, 1, 0, NA, Inf, NaN) ))$select(pl$col(\"a\")$top_k(5))","title":"`Expr_top_k`"},{"location":"reference/Expr_top_k/#expr_top_k","text":"Top k values","title":"Expr_top_k"},{"location":"reference/Expr_top_k/#description","text":"Return the k largest elements. If 'reverse=True` the smallest elements will be given.","title":"Description"},{"location":"reference/Expr_top_k/#format","text":"a method","title":"Format"},{"location":"reference/Expr_top_k/#usage","text":"Expr_top_k(k, reverse = FALSE)","title":"Usage"},{"location":"reference/Expr_top_k/#arguments","text":"Argument Description k numeric k top values to get reverse bool if true then k smallest values","title":"Arguments"},{"location":"reference/Expr_top_k/#details","text":"This has time complexity: $ O(n + k \\log{}n - \\frac{k}{2}) $ See Inf,NaN,NULL,Null/NA translations here docs_translations","title":"Details"},{"location":"reference/Expr_top_k/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_top_k/#examples","text":"pl$DataFrame(list( a = c(6, 1, 0, NA, Inf, NaN) ))$select(pl$col(\"a\")$top_k(5))","title":"Examples"},{"location":"reference/Expr_unique/","text":"Expr_unique get unqie values Description Get unique values of this expression. Similar to R unique() Usage Expr_unique(maintain_order = FALSE) Arguments Argument Description maintain_order bool, if TRUE guranteed same order, if FALSE maybe Value Expr Examples pl$DataFrame(iris)$select(pl$col(\"Species\")$unique())","title":"`Expr_unique`"},{"location":"reference/Expr_unique/#expr_unique","text":"get unqie values","title":"Expr_unique"},{"location":"reference/Expr_unique/#description","text":"Get unique values of this expression. Similar to R unique()","title":"Description"},{"location":"reference/Expr_unique/#usage","text":"Expr_unique(maintain_order = FALSE)","title":"Usage"},{"location":"reference/Expr_unique/#arguments","text":"Argument Description maintain_order bool, if TRUE guranteed same order, if FALSE maybe","title":"Arguments"},{"location":"reference/Expr_unique/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_unique/#examples","text":"pl$DataFrame(iris)$select(pl$col(\"Species\")$unique())","title":"Examples"},{"location":"reference/Expr_unique_counts/","text":"Expr_unique_counts Value counts Description Return a count of the unique values in the order of appearance. This method differs from value_counts in that it does not return the values, only the counts and might be faster Format Method Usage Expr_unique_counts Value Expr Examples pl$DataFrame(iris)$select(pl$col(\"Species\")$unique_counts())","title":"`Expr_unique_counts`"},{"location":"reference/Expr_unique_counts/#expr_unique_counts","text":"Value counts","title":"Expr_unique_counts"},{"location":"reference/Expr_unique_counts/#description","text":"Return a count of the unique values in the order of appearance. This method differs from value_counts in that it does not return the values, only the counts and might be faster","title":"Description"},{"location":"reference/Expr_unique_counts/#format","text":"Method","title":"Format"},{"location":"reference/Expr_unique_counts/#usage","text":"Expr_unique_counts","title":"Usage"},{"location":"reference/Expr_unique_counts/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_unique_counts/#examples","text":"pl$DataFrame(iris)$select(pl$col(\"Species\")$unique_counts())","title":"Examples"},{"location":"reference/Expr_upper_lower_bound/","text":"Expr_upper_lower_bound Upper bound Description Calculate the upper/lower bound. Returns a unit Series with the highest value possible for the dtype of this expression. Format Method Method Usage Expr_upper_bound Expr_lower_bound Details Notice lower bound i32 exported to R is NA_integer_ for now Value Expr Examples pl$DataFrame(i32=1L,f64=1)$select(pl$all()$upper_bound()) pl$DataFrame(i32=1L,f64=1)$select(pl$all()$lower_bound())","title":"`Expr_upper_lower_bound`"},{"location":"reference/Expr_upper_lower_bound/#expr_upper_lower_bound","text":"Upper bound","title":"Expr_upper_lower_bound"},{"location":"reference/Expr_upper_lower_bound/#description","text":"Calculate the upper/lower bound. Returns a unit Series with the highest value possible for the dtype of this expression.","title":"Description"},{"location":"reference/Expr_upper_lower_bound/#format","text":"Method Method","title":"Format"},{"location":"reference/Expr_upper_lower_bound/#usage","text":"Expr_upper_bound Expr_lower_bound","title":"Usage"},{"location":"reference/Expr_upper_lower_bound/#details","text":"Notice lower bound i32 exported to R is NA_integer_ for now","title":"Details"},{"location":"reference/Expr_upper_lower_bound/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_upper_lower_bound/#examples","text":"pl$DataFrame(i32=1L,f64=1)$select(pl$all()$upper_bound()) pl$DataFrame(i32=1L,f64=1)$select(pl$all()$lower_bound())","title":"Examples"},{"location":"reference/Expr_value_counts/","text":"Expr_value_counts Value counts Description Count all unique values and create a struct mapping value to count. Format Method Usage Expr_value_counts(multithreaded = FALSE, sort = FALSE) Arguments Argument Description multithreaded Better to turn this off in the aggregation context, as it can lead to contention. sort Ensure the output is sorted from most values to least. Value Expr Examples df = pl$DataFrame(iris)$select(pl$col(\"Species\")$value_counts()) df df$unnest()$as_data_frame() #recommended to unnest structs before converting to R","title":"`Expr_value_counts`"},{"location":"reference/Expr_value_counts/#expr_value_counts","text":"Value counts","title":"Expr_value_counts"},{"location":"reference/Expr_value_counts/#description","text":"Count all unique values and create a struct mapping value to count.","title":"Description"},{"location":"reference/Expr_value_counts/#format","text":"Method","title":"Format"},{"location":"reference/Expr_value_counts/#usage","text":"Expr_value_counts(multithreaded = FALSE, sort = FALSE)","title":"Usage"},{"location":"reference/Expr_value_counts/#arguments","text":"Argument Description multithreaded Better to turn this off in the aggregation context, as it can lead to contention. sort Ensure the output is sorted from most values to least.","title":"Arguments"},{"location":"reference/Expr_value_counts/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_value_counts/#examples","text":"df = pl$DataFrame(iris)$select(pl$col(\"Species\")$value_counts()) df df$unnest()$as_data_frame() #recommended to unnest structs before converting to R","title":"Examples"},{"location":"reference/Expr_var/","text":"Expr_var Get Variance Description Get Variance Format a method Usage Expr_var(ddof = 1) Arguments Argument Description ddof integer in range [0;255] degrees of freedom Value Expr (f64 scalar) Examples pl$select(pl$lit(1:5)$var())","title":"`Expr_var`"},{"location":"reference/Expr_var/#expr_var","text":"Get Variance","title":"Expr_var"},{"location":"reference/Expr_var/#description","text":"Get Variance","title":"Description"},{"location":"reference/Expr_var/#format","text":"a method","title":"Format"},{"location":"reference/Expr_var/#usage","text":"Expr_var(ddof = 1)","title":"Usage"},{"location":"reference/Expr_var/#arguments","text":"Argument Description ddof integer in range [0;255] degrees of freedom","title":"Arguments"},{"location":"reference/Expr_var/#value","text":"Expr (f64 scalar)","title":"Value"},{"location":"reference/Expr_var/#examples","text":"pl$select(pl$lit(1:5)$var())","title":"Examples"},{"location":"reference/Expr_xor/","text":"Expr_xor Xor Description combine to boolean expresions with XOR Format An object of class character of length 1. Usage Expr_xor(other) Arguments Argument Description other literal or Robj which can become a literal Value Expr Examples pl$lit(TRUE)$xor(pl$lit(FALSE))","title":"`Expr_xor`"},{"location":"reference/Expr_xor/#expr_xor","text":"Xor","title":"Expr_xor"},{"location":"reference/Expr_xor/#description","text":"combine to boolean expresions with XOR","title":"Description"},{"location":"reference/Expr_xor/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Expr_xor/#usage","text":"Expr_xor(other)","title":"Usage"},{"location":"reference/Expr_xor/#arguments","text":"Argument Description other literal or Robj which can become a literal","title":"Arguments"},{"location":"reference/Expr_xor/#value","text":"Expr","title":"Value"},{"location":"reference/Expr_xor/#examples","text":"pl$lit(TRUE)$xor(pl$lit(FALSE))","title":"Examples"},{"location":"reference/GroupBy_agg/","text":"GroupBy_agg GroupBy Aggregate Description Aggregatete a DataFrame over a groupby Usage GroupBy_agg(...) Arguments Argument Description ... exprs to aggregate Value aggregated DataFrame Examples pl$DataFrame( list( foo = c(\"one\", \"two\", \"two\", \"one\", \"two\"), bar = c(5, 3, 2, 4, 1) ) )$groupby( \"foo\" )$agg( pl$col(\"bar\")$sum()$alias(\"bar_sum\"), pl$col(\"bar\")$mean()$alias(\"bar_tail_sum\") )","title":"`GroupBy_agg`"},{"location":"reference/GroupBy_agg/#groupby_agg","text":"GroupBy Aggregate","title":"GroupBy_agg"},{"location":"reference/GroupBy_agg/#description","text":"Aggregatete a DataFrame over a groupby","title":"Description"},{"location":"reference/GroupBy_agg/#usage","text":"GroupBy_agg(...)","title":"Usage"},{"location":"reference/GroupBy_agg/#arguments","text":"Argument Description ... exprs to aggregate","title":"Arguments"},{"location":"reference/GroupBy_agg/#value","text":"aggregated DataFrame","title":"Value"},{"location":"reference/GroupBy_agg/#examples","text":"pl$DataFrame( list( foo = c(\"one\", \"two\", \"two\", \"one\", \"two\"), bar = c(5, 3, 2, 4, 1) ) )$groupby( \"foo\" )$agg( pl$col(\"bar\")$sum()$alias(\"bar_sum\"), pl$col(\"bar\")$mean()$alias(\"bar_tail_sum\") )","title":"Examples"},{"location":"reference/GroupBy_as_data_frame/","text":"GroupBy_as_data_frame convert to data.frame Description convert to data.frame Usage GroupBy_as_data_frame(...) Arguments Argument Description ... any opt param passed to R as.data.frame Value R data.frame Examples pl$DataFrame(iris)$as_data_frame() #R-polars back and forth","title":"`GroupBy_as_data_frame`"},{"location":"reference/GroupBy_as_data_frame/#groupby_as_data_frame","text":"convert to data.frame","title":"GroupBy_as_data_frame"},{"location":"reference/GroupBy_as_data_frame/#description","text":"convert to data.frame","title":"Description"},{"location":"reference/GroupBy_as_data_frame/#usage","text":"GroupBy_as_data_frame(...)","title":"Usage"},{"location":"reference/GroupBy_as_data_frame/#arguments","text":"Argument Description ... any opt param passed to R as.data.frame","title":"Arguments"},{"location":"reference/GroupBy_as_data_frame/#value","text":"R data.frame","title":"Value"},{"location":"reference/GroupBy_as_data_frame/#examples","text":"pl$DataFrame(iris)$as_data_frame() #R-polars back and forth","title":"Examples"},{"location":"reference/GroupBy_first/","text":"GroupBy_first GroupBy First Description Reduce the groups to the first value. Usage GroupBy_first() Value aggregated DataFrame Examples df = pl$DataFrame( a = c(1, 2, 2, 3, 4, 5), b = c(0.5, 0.5, 4, 10, 13, 14), c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE), d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\") ) df$groupby(\"d\", maintain_order=TRUE)$first()","title":"`GroupBy_first`"},{"location":"reference/GroupBy_first/#groupby_first","text":"GroupBy First","title":"GroupBy_first"},{"location":"reference/GroupBy_first/#description","text":"Reduce the groups to the first value.","title":"Description"},{"location":"reference/GroupBy_first/#usage","text":"GroupBy_first()","title":"Usage"},{"location":"reference/GroupBy_first/#value","text":"aggregated DataFrame","title":"Value"},{"location":"reference/GroupBy_first/#examples","text":"df = pl$DataFrame( a = c(1, 2, 2, 3, 4, 5), b = c(0.5, 0.5, 4, 10, 13, 14), c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE), d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\") ) df$groupby(\"d\", maintain_order=TRUE)$first()","title":"Examples"},{"location":"reference/GroupBy_last/","text":"GroupBy_last GroupBy Last Description Reduce the groups to the last value. Usage GroupBy_last() Value aggregated DataFrame Examples df = pl$DataFrame( a = c(1, 2, 2, 3, 4, 5), b = c(0.5, 0.5, 4, 10, 13, 14), c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE), d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\") ) df$groupby(\"d\", maintain_order=TRUE)$last()","title":"`GroupBy_last`"},{"location":"reference/GroupBy_last/#groupby_last","text":"GroupBy Last","title":"GroupBy_last"},{"location":"reference/GroupBy_last/#description","text":"Reduce the groups to the last value.","title":"Description"},{"location":"reference/GroupBy_last/#usage","text":"GroupBy_last()","title":"Usage"},{"location":"reference/GroupBy_last/#value","text":"aggregated DataFrame","title":"Value"},{"location":"reference/GroupBy_last/#examples","text":"df = pl$DataFrame( a = c(1, 2, 2, 3, 4, 5), b = c(0.5, 0.5, 4, 10, 13, 14), c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE), d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\") ) df$groupby(\"d\", maintain_order=TRUE)$last()","title":"Examples"},{"location":"reference/GroupBy_max/","text":"GroupBy_max GroupBy Max Description Reduce the groups to the maximum value. Usage GroupBy_max() Value aggregated DataFrame Examples df = pl$DataFrame( a = c(1, 2, 2, 3, 4, 5), b = c(0.5, 0.5, 4, 10, 13, 14), c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE), d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\") ) df$groupby(\"d\", maintain_order=TRUE)$max()","title":"`GroupBy_max`"},{"location":"reference/GroupBy_max/#groupby_max","text":"GroupBy Max","title":"GroupBy_max"},{"location":"reference/GroupBy_max/#description","text":"Reduce the groups to the maximum value.","title":"Description"},{"location":"reference/GroupBy_max/#usage","text":"GroupBy_max()","title":"Usage"},{"location":"reference/GroupBy_max/#value","text":"aggregated DataFrame","title":"Value"},{"location":"reference/GroupBy_max/#examples","text":"df = pl$DataFrame( a = c(1, 2, 2, 3, 4, 5), b = c(0.5, 0.5, 4, 10, 13, 14), c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE), d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\") ) df$groupby(\"d\", maintain_order=TRUE)$max()","title":"Examples"},{"location":"reference/GroupBy_mean/","text":"GroupBy_mean GroupBy Mean Description Reduce the groups to the mean value. Usage GroupBy_mean() Value aggregated DataFrame Examples df = pl$DataFrame( a = c(1, 2, 2, 3, 4, 5), b = c(0.5, 0.5, 4, 10, 13, 14), c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE), d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\") ) df$groupby(\"d\", maintain_order=TRUE)$mean()","title":"`GroupBy_mean`"},{"location":"reference/GroupBy_mean/#groupby_mean","text":"GroupBy Mean","title":"GroupBy_mean"},{"location":"reference/GroupBy_mean/#description","text":"Reduce the groups to the mean value.","title":"Description"},{"location":"reference/GroupBy_mean/#usage","text":"GroupBy_mean()","title":"Usage"},{"location":"reference/GroupBy_mean/#value","text":"aggregated DataFrame","title":"Value"},{"location":"reference/GroupBy_mean/#examples","text":"df = pl$DataFrame( a = c(1, 2, 2, 3, 4, 5), b = c(0.5, 0.5, 4, 10, 13, 14), c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE), d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\") ) df$groupby(\"d\", maintain_order=TRUE)$mean()","title":"Examples"},{"location":"reference/GroupBy_median/","text":"GroupBy_median GroupBy Median Description Reduce the groups to the median value. Usage GroupBy_median() Value aggregated DataFrame Examples df = pl$DataFrame( a = c(1, 2, 2, 3, 4, 5), b = c(0.5, 0.5, 4, 10, 13, 14), c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE), d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\") ) df$groupby(\"d\", maintain_order=TRUE)$median()","title":"`GroupBy_median`"},{"location":"reference/GroupBy_median/#groupby_median","text":"GroupBy Median","title":"GroupBy_median"},{"location":"reference/GroupBy_median/#description","text":"Reduce the groups to the median value.","title":"Description"},{"location":"reference/GroupBy_median/#usage","text":"GroupBy_median()","title":"Usage"},{"location":"reference/GroupBy_median/#value","text":"aggregated DataFrame","title":"Value"},{"location":"reference/GroupBy_median/#examples","text":"df = pl$DataFrame( a = c(1, 2, 2, 3, 4, 5), b = c(0.5, 0.5, 4, 10, 13, 14), c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE), d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\") ) df$groupby(\"d\", maintain_order=TRUE)$median()","title":"Examples"},{"location":"reference/GroupBy_min/","text":"GroupBy_min GroupBy Min Description Reduce the groups to the minimum value. Usage GroupBy_min() Value aggregated DataFrame Examples df = pl$DataFrame( a = c(1, 2, 2, 3, 4, 5), b = c(0.5, 0.5, 4, 10, 13, 14), c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE), d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\") ) df$groupby(\"d\", maintain_order=TRUE)$min()","title":"`GroupBy_min`"},{"location":"reference/GroupBy_min/#groupby_min","text":"GroupBy Min","title":"GroupBy_min"},{"location":"reference/GroupBy_min/#description","text":"Reduce the groups to the minimum value.","title":"Description"},{"location":"reference/GroupBy_min/#usage","text":"GroupBy_min()","title":"Usage"},{"location":"reference/GroupBy_min/#value","text":"aggregated DataFrame","title":"Value"},{"location":"reference/GroupBy_min/#examples","text":"df = pl$DataFrame( a = c(1, 2, 2, 3, 4, 5), b = c(0.5, 0.5, 4, 10, 13, 14), c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE), d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\") ) df$groupby(\"d\", maintain_order=TRUE)$min()","title":"Examples"},{"location":"reference/GroupBy_null_count/","text":"GroupBy_null_count GroupBy null count Description Create a new DataFrame that shows the null counts per column. Usage GroupBy_null_count() Value DataFrame Examples x = mtcars x[1:10, 3:5] = NA pl$DataFrame(x)$groupby(\"cyl\")$null_count()","title":"`GroupBy_null_count`"},{"location":"reference/GroupBy_null_count/#groupby_null_count","text":"GroupBy null count","title":"GroupBy_null_count"},{"location":"reference/GroupBy_null_count/#description","text":"Create a new DataFrame that shows the null counts per column.","title":"Description"},{"location":"reference/GroupBy_null_count/#usage","text":"GroupBy_null_count()","title":"Usage"},{"location":"reference/GroupBy_null_count/#value","text":"DataFrame","title":"Value"},{"location":"reference/GroupBy_null_count/#examples","text":"x = mtcars x[1:10, 3:5] = NA pl$DataFrame(x)$groupby(\"cyl\")$null_count()","title":"Examples"},{"location":"reference/GroupBy_std/","text":"GroupBy_std GroupBy Std Description Reduce the groups to the standard deviation value. Usage GroupBy_std() Value aggregated DataFrame Examples df = pl$DataFrame( a = c(1, 2, 2, 3, 4, 5), b = c(0.5, 0.5, 4, 10, 13, 14), c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE), d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\") ) df$groupby(\"d\", maintain_order=TRUE)$std()","title":"`GroupBy_std`"},{"location":"reference/GroupBy_std/#groupby_std","text":"GroupBy Std","title":"GroupBy_std"},{"location":"reference/GroupBy_std/#description","text":"Reduce the groups to the standard deviation value.","title":"Description"},{"location":"reference/GroupBy_std/#usage","text":"GroupBy_std()","title":"Usage"},{"location":"reference/GroupBy_std/#value","text":"aggregated DataFrame","title":"Value"},{"location":"reference/GroupBy_std/#examples","text":"df = pl$DataFrame( a = c(1, 2, 2, 3, 4, 5), b = c(0.5, 0.5, 4, 10, 13, 14), c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE), d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\") ) df$groupby(\"d\", maintain_order=TRUE)$std()","title":"Examples"},{"location":"reference/GroupBy_sum/","text":"GroupBy_sum GroupBy Sum Description Reduce the groups to the sum value. Usage GroupBy_sum() Value aggregated DataFrame Examples df = pl$DataFrame( a = c(1, 2, 2, 3, 4, 5), b = c(0.5, 0.5, 4, 10, 13, 14), c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE), d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\") ) df$groupby(\"d\", maintain_order=TRUE)$sum()","title":"`GroupBy_sum`"},{"location":"reference/GroupBy_sum/#groupby_sum","text":"GroupBy Sum","title":"GroupBy_sum"},{"location":"reference/GroupBy_sum/#description","text":"Reduce the groups to the sum value.","title":"Description"},{"location":"reference/GroupBy_sum/#usage","text":"GroupBy_sum()","title":"Usage"},{"location":"reference/GroupBy_sum/#value","text":"aggregated DataFrame","title":"Value"},{"location":"reference/GroupBy_sum/#examples","text":"df = pl$DataFrame( a = c(1, 2, 2, 3, 4, 5), b = c(0.5, 0.5, 4, 10, 13, 14), c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE), d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\") ) df$groupby(\"d\", maintain_order=TRUE)$sum()","title":"Examples"},{"location":"reference/GroupBy_var/","text":"GroupBy_var GroupBy Var Description Reduce the groups to the variance value. Usage GroupBy_var() Value aggregated DataFrame Examples df = pl$DataFrame( a = c(1, 2, 2, 3, 4, 5), b = c(0.5, 0.5, 4, 10, 13, 14), c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE), d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\") ) df$groupby(\"d\", maintain_order=TRUE)$var()","title":"`GroupBy_var`"},{"location":"reference/GroupBy_var/#groupby_var","text":"GroupBy Var","title":"GroupBy_var"},{"location":"reference/GroupBy_var/#description","text":"Reduce the groups to the variance value.","title":"Description"},{"location":"reference/GroupBy_var/#usage","text":"GroupBy_var()","title":"Usage"},{"location":"reference/GroupBy_var/#value","text":"aggregated DataFrame","title":"Value"},{"location":"reference/GroupBy_var/#examples","text":"df = pl$DataFrame( a = c(1, 2, 2, 3, 4, 5), b = c(0.5, 0.5, 4, 10, 13, 14), c = c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE), d = c(\"Apple\", \"Orange\", \"Apple\", \"Apple\", \"Banana\", \"Banana\") ) df$groupby(\"d\", maintain_order=TRUE)$var()","title":"Examples"},{"location":"reference/LazyFrame_class/","text":"class Inner workings of the LazyFrame-class Description The LazyFrame -class is simply two environments of respectively the public and private methods/function calls to the polars rust side. The instanciated LazyFrame -object is an externalptr to a lowlevel rust polars LazyFrame object. The pointer address is the only statefullness of the LazyFrame object on the R side. Any other state resides on the rust side. The S3 method .DollarNames.LazyFrame exposes all public $foobar() -methods which are callable onto the object. Most methods return another LazyFrame -class instance or similar which allows for method chaining. This class system in lack of a better name could be called \"environment classes\" and is the same class system extendr provides, except here there is both a public and private set of methods. For implementation reasons, the private methods are external and must be called from polars:::.pr.$LazyFrame$methodname(), also all private methods must take any self as an argument, thus they are pure functions. Having the private methods as pure functions solved/simplified self-referential complications. DataFrame and LazyFrame can both be said to be a Frame . To convert use DataFrame_object$lazy() -> LazyFrame_object and LazyFrame_object$collect() -> DataFrame_object . This is quite similar to the lazy-collect syntax of the dplyrpackage to interact with database connections such as SQL variants. Most SQL databases would be able to perform the same otimizations as polars such Predicate Pushdown and Projection. However polars can intertact and optimize queries with both SQL DBs and other data sources such parquet files simultanously. (#TODO implement r-polars SQL ;) Details Check out the source code in R/LazyFrame__lazy.R how public methods are derived from private methods. Check out extendr-wrappers.R to see the extendr-auto-generated methods. These are moved to .pr and converted into pure external functions in after-wrappers.R. In zzz.R (named zzz to be last file sourced) the extendr-methods are removed and replaced by any function prefixed LazyFrame_ . Examples #see all exported methods ls(polars:::LazyFrame) #see all private methods (not intended for regular use) ls(polars:::.pr$LazyFrame) ## Practical example ## # First writing R iris dataset to disk, to illustrte a difference temp_filepath = tempfile() write.csv(iris, temp_filepath,row.names = FALSE) # Following example illustrates 2 ways to obtain a LazyFrame # The-Okay-way: convert an in-memory DataFrame to LazyFrame #eager in-mem R data.frame Rdf = read.csv(temp_filepath) #eager in-mem polars DataFrame Pdf = pl$DataFrame(Rdf) #lazy frame starting from in-mem DataFrame Ldf_okay = Pdf$lazy() #The-Best-Way: LazyFrame created directly from a data source is best... Ldf_best = pl$lazy_csv_reader(temp_filepath) # ... as if to e.g. filter the LazyFrame, that filtering also caleld predicate will be # pushed down in the executation stack to the csv_reader, and thereby only bringing into # memory the rows matching to filter. # apply filter: filter_expr = pl$col(\"Species\") == \"setosa\" #get only rows where Species is setosa Ldf_okay = Ldf_okay$filter(filter_expr) #overwrite LazyFrame with new Ldf_best = Ldf_best$filter(filter_expr) # the non optimized plans are similar, on entire in-mem csv, apply filter Ldf_okay$describe_plan() Ldf_best$describe_plan() # NOTE For Ldf_okay, the full time to load csv alrady paid when creating Rdf and Pdf #The optimized plan are quite different, Ldf_best will read csv and perform filter simultanously Ldf_okay$describe_optimized_plan() Ldf_best$describe_optimized_plan() #To acquire result in-mem use $colelct() Pdf_okay = Ldf_okay$collect() Pdf_best = Ldf_best$collect() #verify tables would be the same all.equal( Pdf_okay$as_data_frame(), Pdf_best$as_data_frame() ) #a user might write it as a one-liner like so: Pdf_best2 = pl$lazy_csv_reader(temp_filepath)$filter(pl$col(\"Species\") == \"setosa\")","title":"`class`"},{"location":"reference/LazyFrame_class/#class","text":"Inner workings of the LazyFrame-class","title":"class"},{"location":"reference/LazyFrame_class/#description","text":"The LazyFrame -class is simply two environments of respectively the public and private methods/function calls to the polars rust side. The instanciated LazyFrame -object is an externalptr to a lowlevel rust polars LazyFrame object. The pointer address is the only statefullness of the LazyFrame object on the R side. Any other state resides on the rust side. The S3 method .DollarNames.LazyFrame exposes all public $foobar() -methods which are callable onto the object. Most methods return another LazyFrame -class instance or similar which allows for method chaining. This class system in lack of a better name could be called \"environment classes\" and is the same class system extendr provides, except here there is both a public and private set of methods. For implementation reasons, the private methods are external and must be called from polars:::.pr.$LazyFrame$methodname(), also all private methods must take any self as an argument, thus they are pure functions. Having the private methods as pure functions solved/simplified self-referential complications. DataFrame and LazyFrame can both be said to be a Frame . To convert use DataFrame_object$lazy() -> LazyFrame_object and LazyFrame_object$collect() -> DataFrame_object . This is quite similar to the lazy-collect syntax of the dplyrpackage to interact with database connections such as SQL variants. Most SQL databases would be able to perform the same otimizations as polars such Predicate Pushdown and Projection. However polars can intertact and optimize queries with both SQL DBs and other data sources such parquet files simultanously. (#TODO implement r-polars SQL ;)","title":"Description"},{"location":"reference/LazyFrame_class/#details","text":"Check out the source code in R/LazyFrame__lazy.R how public methods are derived from private methods. Check out extendr-wrappers.R to see the extendr-auto-generated methods. These are moved to .pr and converted into pure external functions in after-wrappers.R. In zzz.R (named zzz to be last file sourced) the extendr-methods are removed and replaced by any function prefixed LazyFrame_ .","title":"Details"},{"location":"reference/LazyFrame_class/#examples","text":"#see all exported methods ls(polars:::LazyFrame) #see all private methods (not intended for regular use) ls(polars:::.pr$LazyFrame) ## Practical example ## # First writing R iris dataset to disk, to illustrte a difference temp_filepath = tempfile() write.csv(iris, temp_filepath,row.names = FALSE) # Following example illustrates 2 ways to obtain a LazyFrame # The-Okay-way: convert an in-memory DataFrame to LazyFrame #eager in-mem R data.frame Rdf = read.csv(temp_filepath) #eager in-mem polars DataFrame Pdf = pl$DataFrame(Rdf) #lazy frame starting from in-mem DataFrame Ldf_okay = Pdf$lazy() #The-Best-Way: LazyFrame created directly from a data source is best... Ldf_best = pl$lazy_csv_reader(temp_filepath) # ... as if to e.g. filter the LazyFrame, that filtering also caleld predicate will be # pushed down in the executation stack to the csv_reader, and thereby only bringing into # memory the rows matching to filter. # apply filter: filter_expr = pl$col(\"Species\") == \"setosa\" #get only rows where Species is setosa Ldf_okay = Ldf_okay$filter(filter_expr) #overwrite LazyFrame with new Ldf_best = Ldf_best$filter(filter_expr) # the non optimized plans are similar, on entire in-mem csv, apply filter Ldf_okay$describe_plan() Ldf_best$describe_plan() # NOTE For Ldf_okay, the full time to load csv alrady paid when creating Rdf and Pdf #The optimized plan are quite different, Ldf_best will read csv and perform filter simultanously Ldf_okay$describe_optimized_plan() Ldf_best$describe_optimized_plan() #To acquire result in-mem use $colelct() Pdf_okay = Ldf_okay$collect() Pdf_best = Ldf_best$collect() #verify tables would be the same all.equal( Pdf_okay$as_data_frame(), Pdf_best$as_data_frame() ) #a user might write it as a one-liner like so: Pdf_best2 = pl$lazy_csv_reader(temp_filepath)$filter(pl$col(\"Species\") == \"setosa\")","title":"Examples"},{"location":"reference/LazyFrame_collect/","text":"collect New DataFrame from LazyFrame_object$collect() Description collect DataFrame by lazy query Usage LazyFrame_collect() Value collected DataFrame Examples pl$DataFrame(iris)$lazy()$filter(pl$col(\"Species\")==\"setosa\")$collect()","title":"`collect`"},{"location":"reference/LazyFrame_collect/#collect","text":"New DataFrame from LazyFrame_object$collect()","title":"collect"},{"location":"reference/LazyFrame_collect/#description","text":"collect DataFrame by lazy query","title":"Description"},{"location":"reference/LazyFrame_collect/#usage","text":"LazyFrame_collect()","title":"Usage"},{"location":"reference/LazyFrame_collect/#value","text":"collected DataFrame","title":"Value"},{"location":"reference/LazyFrame_collect/#examples","text":"pl$DataFrame(iris)$lazy()$filter(pl$col(\"Species\")==\"setosa\")$collect()","title":"Examples"},{"location":"reference/LazyFrame_collect_background/","text":"collect_background New DataFrame from LazyFrame_object$collect() Description collect DataFrame by lazy query Usage LazyFrame_collect_background() Value collected DataFrame Examples pl$DataFrame(iris)$lazy()$filter(pl$col(\"Species\")==\"setosa\")$collect()","title":"`collect_background`"},{"location":"reference/LazyFrame_collect_background/#collect_background","text":"New DataFrame from LazyFrame_object$collect()","title":"collect_background"},{"location":"reference/LazyFrame_collect_background/#description","text":"collect DataFrame by lazy query","title":"Description"},{"location":"reference/LazyFrame_collect_background/#usage","text":"LazyFrame_collect_background()","title":"Usage"},{"location":"reference/LazyFrame_collect_background/#value","text":"collected DataFrame","title":"Value"},{"location":"reference/LazyFrame_collect_background/#examples","text":"pl$DataFrame(iris)$lazy()$filter(pl$col(\"Species\")==\"setosa\")$collect()","title":"Examples"},{"location":"reference/LazyFrame_describe_optimized_plan/","text":"describe_optimized_plan Print the optmized plan of LazyFrame Description select on a LazyFrame Usage LazyFrame_describe_optimized_plan()","title":"`describe_optimized_plan`"},{"location":"reference/LazyFrame_describe_optimized_plan/#describe_optimized_plan","text":"Print the optmized plan of LazyFrame","title":"describe_optimized_plan"},{"location":"reference/LazyFrame_describe_optimized_plan/#description","text":"select on a LazyFrame","title":"Description"},{"location":"reference/LazyFrame_describe_optimized_plan/#usage","text":"LazyFrame_describe_optimized_plan()","title":"Usage"},{"location":"reference/LazyFrame_describe_plan/","text":"describe_plan Print the non-optimized plan plan of LazyFrame Description select on a LazyFrame Format An object of class character of length 1. Usage LazyFrame_describe_plan","title":"`describe_plan`"},{"location":"reference/LazyFrame_describe_plan/#describe_plan","text":"Print the non-optimized plan plan of LazyFrame","title":"describe_plan"},{"location":"reference/LazyFrame_describe_plan/#description","text":"select on a LazyFrame","title":"Description"},{"location":"reference/LazyFrame_describe_plan/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/LazyFrame_describe_plan/#usage","text":"LazyFrame_describe_plan","title":"Usage"},{"location":"reference/LazyFrame_filter/","text":"filter Apply filter to LazyFrame Description Filter rows with an Expression definining a boolean column Format An object of class character of length 1. Usage LazyFrame_filter(expr) Arguments Argument Description expr one Expr or string naming a column Value A new LazyFrame object with add/modified column. Examples pl$DataFrame(iris)$lazy()$filter(pl$col(\"Species\")==\"setosa\")$collect()","title":"`filter`"},{"location":"reference/LazyFrame_filter/#filter","text":"Apply filter to LazyFrame","title":"filter"},{"location":"reference/LazyFrame_filter/#description","text":"Filter rows with an Expression definining a boolean column","title":"Description"},{"location":"reference/LazyFrame_filter/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/LazyFrame_filter/#usage","text":"LazyFrame_filter(expr)","title":"Usage"},{"location":"reference/LazyFrame_filter/#arguments","text":"Argument Description expr one Expr or string naming a column","title":"Arguments"},{"location":"reference/LazyFrame_filter/#value","text":"A new LazyFrame object with add/modified column.","title":"Value"},{"location":"reference/LazyFrame_filter/#examples","text":"pl$DataFrame(iris)$lazy()$filter(pl$col(\"Species\")==\"setosa\")$collect()","title":"Examples"},{"location":"reference/LazyFrame_first/","text":"first First Description Get the first row of the DataFrame. Format function Usage LazyFrame_first Value A new DataFrame object with applied filter. Examples pl$DataFrame(mtcars)$lazy()$first()$collect()","title":"`first`"},{"location":"reference/LazyFrame_first/#first","text":"First","title":"first"},{"location":"reference/LazyFrame_first/#description","text":"Get the first row of the DataFrame.","title":"Description"},{"location":"reference/LazyFrame_first/#format","text":"function","title":"Format"},{"location":"reference/LazyFrame_first/#usage","text":"LazyFrame_first","title":"Usage"},{"location":"reference/LazyFrame_first/#value","text":"A new DataFrame object with applied filter.","title":"Value"},{"location":"reference/LazyFrame_first/#examples","text":"pl$DataFrame(mtcars)$lazy()$first()$collect()","title":"Examples"},{"location":"reference/LazyFrame_groupby/","text":"groupby Lazy_groupby Description apply groupby on LazyFrame, return LazyGroupBy Usage LazyFrame_groupby(..., maintain_order = FALSE) Arguments Argument Description ... any single Expr or string naming a column maintain_order bool should an aggregate of groupby retain order of groups or FALSE = random, slightly faster? Value A new LazyGroupBy object with applied groups.","title":"`groupby`"},{"location":"reference/LazyFrame_groupby/#groupby","text":"Lazy_groupby","title":"groupby"},{"location":"reference/LazyFrame_groupby/#description","text":"apply groupby on LazyFrame, return LazyGroupBy","title":"Description"},{"location":"reference/LazyFrame_groupby/#usage","text":"LazyFrame_groupby(..., maintain_order = FALSE)","title":"Usage"},{"location":"reference/LazyFrame_groupby/#arguments","text":"Argument Description ... any single Expr or string naming a column maintain_order bool should an aggregate of groupby retain order of groups or FALSE = random, slightly faster?","title":"Arguments"},{"location":"reference/LazyFrame_groupby/#value","text":"A new LazyGroupBy object with applied groups.","title":"Value"},{"location":"reference/LazyFrame_join/","text":"join LazyFrame join Description join a LazyFrame Usage LazyFrame_join( other, left_on = NULL, right_on = NULL, on = NULL, how = c(\"inner\", \"left\", \"outer\", \"semi\", \"anti\", \"cross\"), suffix = \"_right\", allow_parallel = TRUE, force_parallel = FALSE ) Arguments Argument Description other LazyFrame left_on names of columns in self LazyFrame, order should match. Type, see on param. right_on names of columns in other LazyFrame, order should match. Type, see on param. on named columns as char vector of named columns, or list of expressions and/or strings. how a string selecting one of the following methods: inner, left, outer, semi, anti, cross suffix name to added right table allow_parallel bool force_parallel bool Value A new LazyFrame object with applied join.","title":"`join`"},{"location":"reference/LazyFrame_join/#join","text":"LazyFrame join","title":"join"},{"location":"reference/LazyFrame_join/#description","text":"join a LazyFrame","title":"Description"},{"location":"reference/LazyFrame_join/#usage","text":"LazyFrame_join( other, left_on = NULL, right_on = NULL, on = NULL, how = c(\"inner\", \"left\", \"outer\", \"semi\", \"anti\", \"cross\"), suffix = \"_right\", allow_parallel = TRUE, force_parallel = FALSE )","title":"Usage"},{"location":"reference/LazyFrame_join/#arguments","text":"Argument Description other LazyFrame left_on names of columns in self LazyFrame, order should match. Type, see on param. right_on names of columns in other LazyFrame, order should match. Type, see on param. on named columns as char vector of named columns, or list of expressions and/or strings. how a string selecting one of the following methods: inner, left, outer, semi, anti, cross suffix name to added right table allow_parallel bool force_parallel bool","title":"Arguments"},{"location":"reference/LazyFrame_join/#value","text":"A new LazyFrame object with applied join.","title":"Value"},{"location":"reference/LazyFrame_last/","text":"last Last Description Aggregate the columns in the DataFrame to their maximum value. Format function Usage LazyFrame_last Value A new LazyFrame object with applied aggregation. Examples pl$DataFrame(mtcars)$lazy()$last()$collect()","title":"`last`"},{"location":"reference/LazyFrame_last/#last","text":"Last","title":"last"},{"location":"reference/LazyFrame_last/#description","text":"Aggregate the columns in the DataFrame to their maximum value.","title":"Description"},{"location":"reference/LazyFrame_last/#format","text":"function","title":"Format"},{"location":"reference/LazyFrame_last/#usage","text":"LazyFrame_last","title":"Usage"},{"location":"reference/LazyFrame_last/#value","text":"A new LazyFrame object with applied aggregation.","title":"Value"},{"location":"reference/LazyFrame_last/#examples","text":"pl$DataFrame(mtcars)$lazy()$last()$collect()","title":"Examples"},{"location":"reference/LazyFrame_limit/","text":"limit Limits Description take limit of n rows of query Usage LazyFrame_limit(n) Arguments Argument Description n positive numeric or integer number not larger than 2^32 Details any number will converted to u32. Negative raises error Value A new LazyFrame object with applied filter. Examples pl$DataFrame(mtcars)$lazy()$limit(4)$collect()","title":"`limit`"},{"location":"reference/LazyFrame_limit/#limit","text":"Limits","title":"limit"},{"location":"reference/LazyFrame_limit/#description","text":"take limit of n rows of query","title":"Description"},{"location":"reference/LazyFrame_limit/#usage","text":"LazyFrame_limit(n)","title":"Usage"},{"location":"reference/LazyFrame_limit/#arguments","text":"Argument Description n positive numeric or integer number not larger than 2^32","title":"Arguments"},{"location":"reference/LazyFrame_limit/#details","text":"any number will converted to u32. Negative raises error","title":"Details"},{"location":"reference/LazyFrame_limit/#value","text":"A new LazyFrame object with applied filter.","title":"Value"},{"location":"reference/LazyFrame_limit/#examples","text":"pl$DataFrame(mtcars)$lazy()$limit(4)$collect()","title":"Examples"},{"location":"reference/LazyFrame_max/","text":"max Max Description Aggregate the columns in the DataFrame to their maximum value. Format function Usage LazyFrame_max Value A new LazyFrame object with applied aggregation. Examples pl$DataFrame(mtcars)$lazy()$max()$collect()","title":"`max`"},{"location":"reference/LazyFrame_max/#max","text":"Max","title":"max"},{"location":"reference/LazyFrame_max/#description","text":"Aggregate the columns in the DataFrame to their maximum value.","title":"Description"},{"location":"reference/LazyFrame_max/#format","text":"function","title":"Format"},{"location":"reference/LazyFrame_max/#usage","text":"LazyFrame_max","title":"Usage"},{"location":"reference/LazyFrame_max/#value","text":"A new LazyFrame object with applied aggregation.","title":"Value"},{"location":"reference/LazyFrame_max/#examples","text":"pl$DataFrame(mtcars)$lazy()$max()$collect()","title":"Examples"},{"location":"reference/LazyFrame_mean/","text":"mean Mean Description Aggregate the columns in the DataFrame to their mean value. Format function Usage LazyFrame_mean Value A new LazyFrame object with applied aggregation. Examples pl$DataFrame(mtcars)$lazy()$mean()$collect()","title":"`mean`"},{"location":"reference/LazyFrame_mean/#mean","text":"Mean","title":"mean"},{"location":"reference/LazyFrame_mean/#description","text":"Aggregate the columns in the DataFrame to their mean value.","title":"Description"},{"location":"reference/LazyFrame_mean/#format","text":"function","title":"Format"},{"location":"reference/LazyFrame_mean/#usage","text":"LazyFrame_mean","title":"Usage"},{"location":"reference/LazyFrame_mean/#value","text":"A new LazyFrame object with applied aggregation.","title":"Value"},{"location":"reference/LazyFrame_mean/#examples","text":"pl$DataFrame(mtcars)$lazy()$mean()$collect()","title":"Examples"},{"location":"reference/LazyFrame_median/","text":"median Median Description Aggregate the columns in the DataFrame to their median value. Format function Usage LazyFrame_median Value A new LazyFrame object with applied aggregation. Examples pl$DataFrame(mtcars)$lazy()$median()$collect()","title":"`median`"},{"location":"reference/LazyFrame_median/#median","text":"Median","title":"median"},{"location":"reference/LazyFrame_median/#description","text":"Aggregate the columns in the DataFrame to their median value.","title":"Description"},{"location":"reference/LazyFrame_median/#format","text":"function","title":"Format"},{"location":"reference/LazyFrame_median/#usage","text":"LazyFrame_median","title":"Usage"},{"location":"reference/LazyFrame_median/#value","text":"A new LazyFrame object with applied aggregation.","title":"Value"},{"location":"reference/LazyFrame_median/#examples","text":"pl$DataFrame(mtcars)$lazy()$median()$collect()","title":"Examples"},{"location":"reference/LazyFrame_min/","text":"min Min Description Aggregate the columns in the DataFrame to their minimum value. Format function Usage LazyFrame_min Value A new LazyFrame object with applied aggregation. Examples pl$DataFrame(mtcars)$lazy()$min()$collect()","title":"`min`"},{"location":"reference/LazyFrame_min/#min","text":"Min","title":"min"},{"location":"reference/LazyFrame_min/#description","text":"Aggregate the columns in the DataFrame to their minimum value.","title":"Description"},{"location":"reference/LazyFrame_min/#format","text":"function","title":"Format"},{"location":"reference/LazyFrame_min/#usage","text":"LazyFrame_min","title":"Usage"},{"location":"reference/LazyFrame_min/#value","text":"A new LazyFrame object with applied aggregation.","title":"Value"},{"location":"reference/LazyFrame_min/#examples","text":"pl$DataFrame(mtcars)$lazy()$min()$collect()","title":"Examples"},{"location":"reference/LazyFrame_print/","text":"print print LazyFrame internal method Description can be used i the middle of a method chain Format An object of class character of length 1. Usage LazyFrame_print(x) Arguments Argument Description x LazyFrame Value self Examples pl$DataFrame(iris)$lazy()$print()","title":"`print`"},{"location":"reference/LazyFrame_print/#print","text":"print LazyFrame internal method","title":"print"},{"location":"reference/LazyFrame_print/#description","text":"can be used i the middle of a method chain","title":"Description"},{"location":"reference/LazyFrame_print/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/LazyFrame_print/#usage","text":"LazyFrame_print(x)","title":"Usage"},{"location":"reference/LazyFrame_print/#arguments","text":"Argument Description x LazyFrame","title":"Arguments"},{"location":"reference/LazyFrame_print/#value","text":"self","title":"Value"},{"location":"reference/LazyFrame_print/#examples","text":"pl$DataFrame(iris)$lazy()$print()","title":"Examples"},{"location":"reference/LazyFrame_reverse/","text":"reverse Reverse Description Reverse the DataFrame. Format An object of class character of length 1. Usage LazyFrame_reverse Value LazyFrame Examples pl$DataFrame(mtcars)$lazy()$reverse()$collect()","title":"`reverse`"},{"location":"reference/LazyFrame_reverse/#reverse","text":"Reverse","title":"reverse"},{"location":"reference/LazyFrame_reverse/#description","text":"Reverse the DataFrame.","title":"Description"},{"location":"reference/LazyFrame_reverse/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/LazyFrame_reverse/#usage","text":"LazyFrame_reverse","title":"Usage"},{"location":"reference/LazyFrame_reverse/#value","text":"LazyFrame","title":"Value"},{"location":"reference/LazyFrame_reverse/#examples","text":"pl$DataFrame(mtcars)$lazy()$reverse()$collect()","title":"Examples"},{"location":"reference/LazyFrame_select/","text":"select Lazy_select Description select on a LazyFrame Usage LazyFrame_select(...) Arguments Argument Description ... any single Expr or string naming a column Value A new LazyFrame object with applied filter.","title":"`select`"},{"location":"reference/LazyFrame_select/#select","text":"Lazy_select","title":"select"},{"location":"reference/LazyFrame_select/#description","text":"select on a LazyFrame","title":"Description"},{"location":"reference/LazyFrame_select/#usage","text":"LazyFrame_select(...)","title":"Usage"},{"location":"reference/LazyFrame_select/#arguments","text":"Argument Description ... any single Expr or string naming a column","title":"Arguments"},{"location":"reference/LazyFrame_select/#value","text":"A new LazyFrame object with applied filter.","title":"Value"},{"location":"reference/LazyFrame_slice/","text":"slice Slice Description Get a slice of this DataFrame. Usage LazyFrame_slice(offset, length = NULL) Arguments Argument Description offset integer length integer or NULL Value DataFrame Examples pl$DataFrame(mtcars)$lazy()$slice(2, 4)$collect() pl$DataFrame(mtcars)$lazy()$slice(30)$collect() mtcars[2:6,]","title":"`slice`"},{"location":"reference/LazyFrame_slice/#slice","text":"Slice","title":"slice"},{"location":"reference/LazyFrame_slice/#description","text":"Get a slice of this DataFrame.","title":"Description"},{"location":"reference/LazyFrame_slice/#usage","text":"LazyFrame_slice(offset, length = NULL)","title":"Usage"},{"location":"reference/LazyFrame_slice/#arguments","text":"Argument Description offset integer length integer or NULL","title":"Arguments"},{"location":"reference/LazyFrame_slice/#value","text":"DataFrame","title":"Value"},{"location":"reference/LazyFrame_slice/#examples","text":"pl$DataFrame(mtcars)$lazy()$slice(2, 4)$collect() pl$DataFrame(mtcars)$lazy()$slice(30)$collect() mtcars[2:6,]","title":"Examples"},{"location":"reference/LazyFrame_std/","text":"std Std Description Aggregate the columns of this LazyFrame to their standard deviation values. Usage LazyFrame_std(ddof = 1) Arguments Argument Description ddof integer Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1. Value A new LazyFrame object with applied aggregation. Examples pl$DataFrame(mtcars)$lazy()$std()$collect()","title":"`std`"},{"location":"reference/LazyFrame_std/#std","text":"Std","title":"std"},{"location":"reference/LazyFrame_std/#description","text":"Aggregate the columns of this LazyFrame to their standard deviation values.","title":"Description"},{"location":"reference/LazyFrame_std/#usage","text":"LazyFrame_std(ddof = 1)","title":"Usage"},{"location":"reference/LazyFrame_std/#arguments","text":"Argument Description ddof integer Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1.","title":"Arguments"},{"location":"reference/LazyFrame_std/#value","text":"A new LazyFrame object with applied aggregation.","title":"Value"},{"location":"reference/LazyFrame_std/#examples","text":"pl$DataFrame(mtcars)$lazy()$std()$collect()","title":"Examples"},{"location":"reference/LazyFrame_sum/","text":"sum Sum Description Aggregate the columns of this DataFrame to their sum values. Format function Usage LazyFrame_sum Value LazyFrame Examples pl$DataFrame(mtcars)$lazy()$sum()$collect()","title":"`sum`"},{"location":"reference/LazyFrame_sum/#sum","text":"Sum","title":"sum"},{"location":"reference/LazyFrame_sum/#description","text":"Aggregate the columns of this DataFrame to their sum values.","title":"Description"},{"location":"reference/LazyFrame_sum/#format","text":"function","title":"Format"},{"location":"reference/LazyFrame_sum/#usage","text":"LazyFrame_sum","title":"Usage"},{"location":"reference/LazyFrame_sum/#value","text":"LazyFrame","title":"Value"},{"location":"reference/LazyFrame_sum/#examples","text":"pl$DataFrame(mtcars)$lazy()$sum()$collect()","title":"Examples"},{"location":"reference/LazyFrame_tail/","text":"tail Tail Description take last n rows of query Usage LazyFrame_tail(n) Arguments Argument Description n positive numeric or integer number not larger than 2^32 Details any number will converted to u32. Negative raises error Value A new LazyFrame object with applied filter. Examples pl$DataFrame(mtcars)$lazy()$tail(2)$collect()","title":"`tail`"},{"location":"reference/LazyFrame_tail/#tail","text":"Tail","title":"tail"},{"location":"reference/LazyFrame_tail/#description","text":"take last n rows of query","title":"Description"},{"location":"reference/LazyFrame_tail/#usage","text":"LazyFrame_tail(n)","title":"Usage"},{"location":"reference/LazyFrame_tail/#arguments","text":"Argument Description n positive numeric or integer number not larger than 2^32","title":"Arguments"},{"location":"reference/LazyFrame_tail/#details","text":"any number will converted to u32. Negative raises error","title":"Details"},{"location":"reference/LazyFrame_tail/#value","text":"A new LazyFrame object with applied filter.","title":"Value"},{"location":"reference/LazyFrame_tail/#examples","text":"pl$DataFrame(mtcars)$lazy()$tail(2)$collect()","title":"Examples"},{"location":"reference/LazyFrame_var/","text":"var Var Description Aggregate the columns of this LazyFrame to their variance values. Usage LazyFrame_var(ddof = 1) Arguments Argument Description ddof integer Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1. Value A new LazyFrame object with applied aggregation. Examples pl$DataFrame(mtcars)$lazy()$var()$collect()","title":"`var`"},{"location":"reference/LazyFrame_var/#var","text":"Var","title":"var"},{"location":"reference/LazyFrame_var/#description","text":"Aggregate the columns of this LazyFrame to their variance values.","title":"Description"},{"location":"reference/LazyFrame_var/#usage","text":"LazyFrame_var(ddof = 1)","title":"Usage"},{"location":"reference/LazyFrame_var/#arguments","text":"Argument Description ddof integer Delta Degrees of Freedom: the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1.","title":"Arguments"},{"location":"reference/LazyFrame_var/#value","text":"A new LazyFrame object with applied aggregation.","title":"Value"},{"location":"reference/LazyFrame_var/#examples","text":"pl$DataFrame(mtcars)$lazy()$var()$collect()","title":"Examples"},{"location":"reference/LazyFrame_with_column/","text":"with_column Lazy with column Description add or replace columns of LazyFrame Format An object of class character of length 1. Usage LazyFrame_with_column(expr) Arguments Argument Description expr one Expr or string naming a column Value A new LazyFrame object with add/modified column.","title":"`with_column`"},{"location":"reference/LazyFrame_with_column/#with_column","text":"Lazy with column","title":"with_column"},{"location":"reference/LazyFrame_with_column/#description","text":"add or replace columns of LazyFrame","title":"Description"},{"location":"reference/LazyFrame_with_column/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/LazyFrame_with_column/#usage","text":"LazyFrame_with_column(expr)","title":"Usage"},{"location":"reference/LazyFrame_with_column/#arguments","text":"Argument Description expr one Expr or string naming a column","title":"Arguments"},{"location":"reference/LazyFrame_with_column/#value","text":"A new LazyFrame object with add/modified column.","title":"Value"},{"location":"reference/LazyFrame_with_columns/","text":"with_columns Lazy with columns Description add or replace columns of LazyFrame Usage LazyFrame_with_columns(...) Arguments Argument Description ... any single Expr or string naming a column Value A new LazyFrame object with added/modified columns.","title":"`with_columns`"},{"location":"reference/LazyFrame_with_columns/#with_columns","text":"Lazy with columns","title":"with_columns"},{"location":"reference/LazyFrame_with_columns/#description","text":"add or replace columns of LazyFrame","title":"Description"},{"location":"reference/LazyFrame_with_columns/#usage","text":"LazyFrame_with_columns(...)","title":"Usage"},{"location":"reference/LazyFrame_with_columns/#arguments","text":"Argument Description ... any single Expr or string naming a column","title":"Arguments"},{"location":"reference/LazyFrame_with_columns/#value","text":"A new LazyFrame object with added/modified columns.","title":"Value"},{"location":"reference/LazyGroupBy_agg/","text":"LazyGroupBy_agg LazyGroupBy_agg Description aggregate a polar_lazy_groupby Usage LazyGroupBy_agg(...) Arguments Argument Description ... any Expr or string Value A new LazyFrame object.","title":"`LazyGroupBy_agg`"},{"location":"reference/LazyGroupBy_agg/#lazygroupby_agg","text":"LazyGroupBy_agg","title":"LazyGroupBy_agg"},{"location":"reference/LazyGroupBy_agg/#description","text":"aggregate a polar_lazy_groupby","title":"Description"},{"location":"reference/LazyGroupBy_agg/#usage","text":"LazyGroupBy_agg(...)","title":"Usage"},{"location":"reference/LazyGroupBy_agg/#arguments","text":"Argument Description ... any Expr or string","title":"Arguments"},{"location":"reference/LazyGroupBy_agg/#value","text":"A new LazyFrame object.","title":"Value"},{"location":"reference/LazyGroupBy_apply/","text":"LazyGroupBy_apply LazyGroupBy_apply Description one day this will apply Usage LazyGroupBy_apply(f) Arguments Argument Description f R function to apply Value A new LazyFrame object.","title":"`LazyGroupBy_apply`"},{"location":"reference/LazyGroupBy_apply/#lazygroupby_apply","text":"LazyGroupBy_apply","title":"LazyGroupBy_apply"},{"location":"reference/LazyGroupBy_apply/#description","text":"one day this will apply","title":"Description"},{"location":"reference/LazyGroupBy_apply/#usage","text":"LazyGroupBy_apply(f)","title":"Usage"},{"location":"reference/LazyGroupBy_apply/#arguments","text":"Argument Description f R function to apply","title":"Arguments"},{"location":"reference/LazyGroupBy_apply/#value","text":"A new LazyFrame object.","title":"Value"},{"location":"reference/LazyGroupBy_head/","text":"LazyGroupBy_head LazyGroupBy_head Description get n rows of head of group Usage LazyGroupBy_head(n = 1L) Arguments Argument Description n integer number of rows to get Value A new LazyFrame object.","title":"`LazyGroupBy_head`"},{"location":"reference/LazyGroupBy_head/#lazygroupby_head","text":"LazyGroupBy_head","title":"LazyGroupBy_head"},{"location":"reference/LazyGroupBy_head/#description","text":"get n rows of head of group","title":"Description"},{"location":"reference/LazyGroupBy_head/#usage","text":"LazyGroupBy_head(n = 1L)","title":"Usage"},{"location":"reference/LazyGroupBy_head/#arguments","text":"Argument Description n integer number of rows to get","title":"Arguments"},{"location":"reference/LazyGroupBy_head/#value","text":"A new LazyFrame object.","title":"Value"},{"location":"reference/LazyGroupBy_print/","text":"LazyGroupBy_print LazyGroupBy_print Description prints opague groupby, not much to show Usage LazyGroupBy_print()","title":"`LazyGroupBy_print`"},{"location":"reference/LazyGroupBy_print/#lazygroupby_print","text":"LazyGroupBy_print","title":"LazyGroupBy_print"},{"location":"reference/LazyGroupBy_print/#description","text":"prints opague groupby, not much to show","title":"Description"},{"location":"reference/LazyGroupBy_print/#usage","text":"LazyGroupBy_print()","title":"Usage"},{"location":"reference/LazyGroupBy_tail/","text":"LazyGroupBy_tail LazyGroupBy_tail Description get n tail rows of group Usage LazyGroupBy_tail(n = 1L) Arguments Argument Description n integer number of rows to get Value A new LazyFrame object.","title":"`LazyGroupBy_tail`"},{"location":"reference/LazyGroupBy_tail/#lazygroupby_tail","text":"LazyGroupBy_tail","title":"LazyGroupBy_tail"},{"location":"reference/LazyGroupBy_tail/#description","text":"get n tail rows of group","title":"Description"},{"location":"reference/LazyGroupBy_tail/#usage","text":"LazyGroupBy_tail(n = 1L)","title":"Usage"},{"location":"reference/LazyGroupBy_tail/#arguments","text":"Argument Description n integer number of rows to get","title":"Arguments"},{"location":"reference/LazyGroupBy_tail/#value","text":"A new LazyFrame object.","title":"Value"},{"location":"reference/Ok/","text":"Ok Wrap in Ok Description Wrap in Ok Usage Ok(x) Arguments Argument Description x any R object Value same R object wrapped in a Ok-result","title":"`Ok`"},{"location":"reference/Ok/#ok","text":"Wrap in Ok","title":"Ok"},{"location":"reference/Ok/#description","text":"Wrap in Ok","title":"Description"},{"location":"reference/Ok/#usage","text":"Ok(x)","title":"Usage"},{"location":"reference/Ok/#arguments","text":"Argument Description x any R object","title":"Arguments"},{"location":"reference/Ok/#value","text":"same R object wrapped in a Ok-result","title":"Value"},{"location":"reference/PolarsBackgroundHandle_is_exhausted/","text":"PolarsBackgroundHandle_is_exhausted PolarsBackgroundHandle Description PolarsBackgroundHandle Usage PolarsBackgroundHandle_is_exhausted() Value Bool Examples lazy_df = pl$DataFrame(iris[,1:3])$lazy()$select(pl$all()$first()) handle = lazy_df$collect_background() handle$is_exhausted() df = handle$join() handle$is_exhausted()","title":"`PolarsBackgroundHandle_is_exhausted`"},{"location":"reference/PolarsBackgroundHandle_is_exhausted/#polarsbackgroundhandle_is_exhausted","text":"PolarsBackgroundHandle","title":"PolarsBackgroundHandle_is_exhausted"},{"location":"reference/PolarsBackgroundHandle_is_exhausted/#description","text":"PolarsBackgroundHandle","title":"Description"},{"location":"reference/PolarsBackgroundHandle_is_exhausted/#usage","text":"PolarsBackgroundHandle_is_exhausted()","title":"Usage"},{"location":"reference/PolarsBackgroundHandle_is_exhausted/#value","text":"Bool","title":"Value"},{"location":"reference/PolarsBackgroundHandle_is_exhausted/#examples","text":"lazy_df = pl$DataFrame(iris[,1:3])$lazy()$select(pl$all()$first()) handle = lazy_df$collect_background() handle$is_exhausted() df = handle$join() handle$is_exhausted()","title":"Examples"},{"location":"reference/PolarsBackgroundHandle_join/","text":"PolarsBackgroundHandle_join PolarsBackgroundHandle Description PolarsBackgroundHandle Usage PolarsBackgroundHandle_join() Value DataFrame Examples lazy_df = pl$DataFrame(iris[,1:3])$lazy()$select(pl$all()$first()) handle = lazy_df$collect_background() df = handle$join()","title":"`PolarsBackgroundHandle_join`"},{"location":"reference/PolarsBackgroundHandle_join/#polarsbackgroundhandle_join","text":"PolarsBackgroundHandle","title":"PolarsBackgroundHandle_join"},{"location":"reference/PolarsBackgroundHandle_join/#description","text":"PolarsBackgroundHandle","title":"Description"},{"location":"reference/PolarsBackgroundHandle_join/#usage","text":"PolarsBackgroundHandle_join()","title":"Usage"},{"location":"reference/PolarsBackgroundHandle_join/#value","text":"DataFrame","title":"Value"},{"location":"reference/PolarsBackgroundHandle_join/#examples","text":"lazy_df = pl$DataFrame(iris[,1:3])$lazy()$select(pl$all()$first()) handle = lazy_df$collect_background() df = handle$join()","title":"Examples"},{"location":"reference/RField_name/","text":"RField_name get/set Field name Description get/set Field name Usage RField_name() Value name Examples field = pl$Field(\"Cities\",pl$Utf8) #get name / datatype field$name field$datatype #set + get values field$name = \"CityPoPulations\" #<- is fine too field$datatype = pl$UInt32 print(field)","title":"`RField_name`"},{"location":"reference/RField_name/#rfield_name","text":"get/set Field name","title":"RField_name"},{"location":"reference/RField_name/#description","text":"get/set Field name","title":"Description"},{"location":"reference/RField_name/#usage","text":"RField_name()","title":"Usage"},{"location":"reference/RField_name/#value","text":"name","title":"Value"},{"location":"reference/RField_name/#examples","text":"field = pl$Field(\"Cities\",pl$Utf8) #get name / datatype field$name field$datatype #set + get values field$name = \"CityPoPulations\" #<- is fine too field$datatype = pl$UInt32 print(field)","title":"Examples"},{"location":"reference/RField_print/","text":"RField_print Print a polars Field Description Print a polars Field Usage RField_print() Value self Examples print(pl$Field(\"foo\",pl$List(pl$UInt64)))","title":"`RField_print`"},{"location":"reference/RField_print/#rfield_print","text":"Print a polars Field","title":"RField_print"},{"location":"reference/RField_print/#description","text":"Print a polars Field","title":"Description"},{"location":"reference/RField_print/#usage","text":"RField_print()","title":"Usage"},{"location":"reference/RField_print/#value","text":"self","title":"Value"},{"location":"reference/RField_print/#examples","text":"print(pl$Field(\"foo\",pl$List(pl$UInt64)))","title":"Examples"},{"location":"reference/Series/","text":"Series Create new Series Description found in api as pl$Series named Series_constructor internally Arguments Argument Description x any vector name string Value Series Examples { pl$Series(1:4) }","title":"`Series`"},{"location":"reference/Series/#series","text":"Create new Series","title":"Series"},{"location":"reference/Series/#description","text":"found in api as pl$Series named Series_constructor internally","title":"Description"},{"location":"reference/Series/#arguments","text":"Argument Description x any vector name string","title":"Arguments"},{"location":"reference/Series/#value","text":"Series","title":"Value"},{"location":"reference/Series/#examples","text":"{ pl$Series(1:4) }","title":"Examples"},{"location":"reference/Series_abs/","text":"abs Take absolute value of Series Description Take absolute value of Series Usage Series_abs() Value Series Examples pl$Series(-2:2)$abs()","title":"`abs`"},{"location":"reference/Series_abs/#abs","text":"Take absolute value of Series","title":"abs"},{"location":"reference/Series_abs/#description","text":"Take absolute value of Series","title":"Description"},{"location":"reference/Series_abs/#usage","text":"Series_abs()","title":"Usage"},{"location":"reference/Series_abs/#value","text":"Series","title":"Value"},{"location":"reference/Series_abs/#examples","text":"pl$Series(-2:2)$abs()","title":"Examples"},{"location":"reference/Series_add/","text":"add add Series Description Series arithmetics Usage Series_add(other) list(list(\"+\"), list(\"Series\"))(s1, s2) Arguments Argument Description other Series or into Series s1 lhs Series s2 rhs Series or any into Series Value Series Examples pl$Series(1:3)$add(11:13) pl$Series(1:3)$add(pl$Series(11:13)) pl$Series(1:3)$add(1L) 1L + pl$Series(1:3) pl$Series(1:3) + 1L","title":"`add`"},{"location":"reference/Series_add/#add","text":"add Series","title":"add"},{"location":"reference/Series_add/#description","text":"Series arithmetics","title":"Description"},{"location":"reference/Series_add/#usage","text":"Series_add(other) list(list(\"+\"), list(\"Series\"))(s1, s2)","title":"Usage"},{"location":"reference/Series_add/#arguments","text":"Argument Description other Series or into Series s1 lhs Series s2 rhs Series or any into Series","title":"Arguments"},{"location":"reference/Series_add/#value","text":"Series","title":"Value"},{"location":"reference/Series_add/#examples","text":"pl$Series(1:3)$add(11:13) pl$Series(1:3)$add(pl$Series(11:13)) pl$Series(1:3)$add(1L) 1L + pl$Series(1:3) pl$Series(1:3) + 1L","title":"Examples"},{"location":"reference/Series_alias/","text":"alias Alias Description Change name of Series Format An object of class character of length 1. Usage Series_alias(name) Arguments Argument Description name a String as the new name Value Series Examples pl$Series(1:3,name = \"alice\")$alias(\"bob\")","title":"`alias`"},{"location":"reference/Series_alias/#alias","text":"Alias","title":"alias"},{"location":"reference/Series_alias/#description","text":"Change name of Series","title":"Description"},{"location":"reference/Series_alias/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Series_alias/#usage","text":"Series_alias(name)","title":"Usage"},{"location":"reference/Series_alias/#arguments","text":"Argument Description name a String as the new name","title":"Arguments"},{"location":"reference/Series_alias/#value","text":"Series","title":"Value"},{"location":"reference/Series_alias/#examples","text":"pl$Series(1:3,name = \"alice\")$alias(\"bob\")","title":"Examples"},{"location":"reference/Series_all/","text":"all Reduce Boolean Series with ALL Description Reduce Boolean Series with ALL Usage Series_all() Value bool Examples pl$Series(c(TRUE,TRUE,NA))$all()","title":"`all`"},{"location":"reference/Series_all/#all","text":"Reduce Boolean Series with ALL","title":"all"},{"location":"reference/Series_all/#description","text":"Reduce Boolean Series with ALL","title":"Description"},{"location":"reference/Series_all/#usage","text":"Series_all()","title":"Usage"},{"location":"reference/Series_all/#value","text":"bool","title":"Value"},{"location":"reference/Series_all/#examples","text":"pl$Series(c(TRUE,TRUE,NA))$all()","title":"Examples"},{"location":"reference/Series_any/","text":"any Reduce Boolean Series with ANY Description Reduce Boolean Series with ANY Usage Series_any() Value bool Examples pl$Series(c(TRUE,FALSE,NA))$any()","title":"`any`"},{"location":"reference/Series_any/#any","text":"Reduce Boolean Series with ANY","title":"any"},{"location":"reference/Series_any/#description","text":"Reduce Boolean Series with ANY","title":"Description"},{"location":"reference/Series_any/#usage","text":"Series_any()","title":"Usage"},{"location":"reference/Series_any/#value","text":"bool","title":"Value"},{"location":"reference/Series_any/#examples","text":"pl$Series(c(TRUE,FALSE,NA))$any()","title":"Examples"},{"location":"reference/Series_append/","text":"append append (default immutable) Description append two Series, see details for mutability Usage Series_append(other, immutable = TRUE) Arguments Argument Description other Series to append immutable bool should append be immutable, default TRUE as mutable operations should be avoided in plain R API's. Details if immutable = FLASE, the Series object will not behave as immutable. This mean appending to this Series will affect any variable pointing to this memory location. This will break normal scoping rules of R. Polars-clones are cheap. Mutable operations are likely never needed in any sense. Value Series Examples #default immutable behaviour, s_imut and s_imut_copy stay the same s_imut = pl$Series(1:3) s_imut_copy = s_imut s_new = s_imut$append(pl$Series(1:3)) identical(s_imut$to_r_vector(),s_imut_copy$to_r_vector()) #pypolars-like mutable behaviour,s_mut_copy become the same as s_new s_mut = pl$Series(1:3) s_mut_copy = s_mut #must deactivate this to allow to use immutable=FALSE pl$set_polars_options(strictly_immutable = FALSE) s_new = s_mut$append(pl$Series(1:3),immutable= FALSE) identical(s_new$to_r_vector(),s_mut_copy$to_r_vector())","title":"`append`"},{"location":"reference/Series_append/#append","text":"append (default immutable)","title":"append"},{"location":"reference/Series_append/#description","text":"append two Series, see details for mutability","title":"Description"},{"location":"reference/Series_append/#usage","text":"Series_append(other, immutable = TRUE)","title":"Usage"},{"location":"reference/Series_append/#arguments","text":"Argument Description other Series to append immutable bool should append be immutable, default TRUE as mutable operations should be avoided in plain R API's.","title":"Arguments"},{"location":"reference/Series_append/#details","text":"if immutable = FLASE, the Series object will not behave as immutable. This mean appending to this Series will affect any variable pointing to this memory location. This will break normal scoping rules of R. Polars-clones are cheap. Mutable operations are likely never needed in any sense.","title":"Details"},{"location":"reference/Series_append/#value","text":"Series","title":"Value"},{"location":"reference/Series_append/#examples","text":"#default immutable behaviour, s_imut and s_imut_copy stay the same s_imut = pl$Series(1:3) s_imut_copy = s_imut s_new = s_imut$append(pl$Series(1:3)) identical(s_imut$to_r_vector(),s_imut_copy$to_r_vector()) #pypolars-like mutable behaviour,s_mut_copy become the same as s_new s_mut = pl$Series(1:3) s_mut_copy = s_mut #must deactivate this to allow to use immutable=FALSE pl$set_polars_options(strictly_immutable = FALSE) s_new = s_mut$append(pl$Series(1:3),immutable= FALSE) identical(s_new$to_r_vector(),s_mut_copy$to_r_vector())","title":"Examples"},{"location":"reference/Series_apply/","text":"apply Apply every value with an R fun Description About as slow as regular non-vectorized R. Similar to using R sapply on a vector. Usage Series_apply( fun, datatype = NULL, strict_return_type = TRUE, allow_fail_eval = FALSE ) Arguments Argument Description fun r function, should take a scalar value as input and return one. datatype DataType of return value. Default NULL means same as input. strict_return_type bool, default TRUE: fail on wrong return type, FALSE: convert to polars Null allow_fail_eval bool, default FALSE: raise R fun error, TRUE: convert to polars Null Value Series Examples s = pl$Series(letters[1:5],\"ltrs\") f = \\(x) paste(x,\":\",as.integer(charToRaw(x))) s$apply(f,pl$Utf8) #same as pl$Series(sapply(s$to_r(),f),s$name)","title":"`apply`"},{"location":"reference/Series_apply/#apply","text":"Apply every value with an R fun","title":"apply"},{"location":"reference/Series_apply/#description","text":"About as slow as regular non-vectorized R. Similar to using R sapply on a vector.","title":"Description"},{"location":"reference/Series_apply/#usage","text":"Series_apply( fun, datatype = NULL, strict_return_type = TRUE, allow_fail_eval = FALSE )","title":"Usage"},{"location":"reference/Series_apply/#arguments","text":"Argument Description fun r function, should take a scalar value as input and return one. datatype DataType of return value. Default NULL means same as input. strict_return_type bool, default TRUE: fail on wrong return type, FALSE: convert to polars Null allow_fail_eval bool, default FALSE: raise R fun error, TRUE: convert to polars Null","title":"Arguments"},{"location":"reference/Series_apply/#value","text":"Series","title":"Value"},{"location":"reference/Series_apply/#examples","text":"s = pl$Series(letters[1:5],\"ltrs\") f = \\(x) paste(x,\":\",as.integer(charToRaw(x))) s$apply(f,pl$Utf8) #same as pl$Series(sapply(s$to_r(),f),s$name)","title":"Examples"},{"location":"reference/Series_arg_max/","text":"arg_max idx to max value Description idx to max value Format An object of class character of length 1. Usage Series_arg_max Value bool Examples pl$Series(c(5,1))$arg_max()","title":"`arg_max`"},{"location":"reference/Series_arg_max/#arg_max","text":"idx to max value","title":"arg_max"},{"location":"reference/Series_arg_max/#description","text":"idx to max value","title":"Description"},{"location":"reference/Series_arg_max/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Series_arg_max/#usage","text":"Series_arg_max","title":"Usage"},{"location":"reference/Series_arg_max/#value","text":"bool","title":"Value"},{"location":"reference/Series_arg_max/#examples","text":"pl$Series(c(5,1))$arg_max()","title":"Examples"},{"location":"reference/Series_arg_min/","text":"arg_min idx to min value Description idx to min value Format An object of class character of length 1. Usage Series_arg_min Value bool Examples pl$Series(c(5,1))$arg_min()","title":"`arg_min`"},{"location":"reference/Series_arg_min/#arg_min","text":"idx to min value","title":"arg_min"},{"location":"reference/Series_arg_min/#description","text":"idx to min value","title":"Description"},{"location":"reference/Series_arg_min/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Series_arg_min/#usage","text":"Series_arg_min","title":"Usage"},{"location":"reference/Series_arg_min/#value","text":"bool","title":"Value"},{"location":"reference/Series_arg_min/#examples","text":"pl$Series(c(5,1))$arg_min()","title":"Examples"},{"location":"reference/Series_arr/","text":"arr arr: list related methods on Series of dtype List Description Create an object namespace of all list related methods. See the individual method pages for full details Usage Series_arr() Value Expr Examples s = pl$Series(list(1:3,1:2,NULL)) s s$arr$first()","title":"`arr`"},{"location":"reference/Series_arr/#arr","text":"arr: list related methods on Series of dtype List","title":"arr"},{"location":"reference/Series_arr/#description","text":"Create an object namespace of all list related methods. See the individual method pages for full details","title":"Description"},{"location":"reference/Series_arr/#usage","text":"Series_arr()","title":"Usage"},{"location":"reference/Series_arr/#value","text":"Expr","title":"Value"},{"location":"reference/Series_arr/#examples","text":"s = pl$Series(list(1:3,1:2,NULL)) s s$arr$first()","title":"Examples"},{"location":"reference/Series_ceil/","text":"ceil Series_ceil Description Ceil of this Series Usage Series_ceil() Value bool Examples pl$Series(c(.5,1.999))$ceil()","title":"`ceil`"},{"location":"reference/Series_ceil/#ceil","text":"Series_ceil","title":"ceil"},{"location":"reference/Series_ceil/#description","text":"Ceil of this Series","title":"Description"},{"location":"reference/Series_ceil/#usage","text":"Series_ceil()","title":"Usage"},{"location":"reference/Series_ceil/#value","text":"bool","title":"Value"},{"location":"reference/Series_ceil/#examples","text":"pl$Series(c(.5,1.999))$ceil()","title":"Examples"},{"location":"reference/Series_chunk_lengths/","text":"chunk_lengths Lengths of Series memory chunks Description Get the Lengths of Series memory chunks as vector. Format An object of class character of length 1. Usage Series_chunk_lengths Value numeric vector. Length is number of chunks. Sum of lengths is equal to size of Series. Examples chunked_series = c(pl$Series(1:3),pl$Series(1:10)) chunked_series$chunk_lengths()","title":"`chunk_lengths`"},{"location":"reference/Series_chunk_lengths/#chunk_lengths","text":"Lengths of Series memory chunks","title":"chunk_lengths"},{"location":"reference/Series_chunk_lengths/#description","text":"Get the Lengths of Series memory chunks as vector.","title":"Description"},{"location":"reference/Series_chunk_lengths/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Series_chunk_lengths/#usage","text":"Series_chunk_lengths","title":"Usage"},{"location":"reference/Series_chunk_lengths/#value","text":"numeric vector. Length is number of chunks. Sum of lengths is equal to size of Series.","title":"Value"},{"location":"reference/Series_chunk_lengths/#examples","text":"chunked_series = c(pl$Series(1:3),pl$Series(1:10)) chunked_series$chunk_lengths()","title":"Examples"},{"location":"reference/Series_class/","text":"class Inner workings of the Series-class Description The Series -class is simply two environments of respectively the public and private methods/function calls to the polars rust side. The instanciated Series -object is an externalptr to a lowlevel rust polars Series object. The pointer address is the only statefullness of the Series object on the R side. Any other state resides on the rust side. The S3 method .DollarNames.Series exposes all public $foobar() -methods which are callable onto the object. Most methods return another Series -class instance or similar which allows for method chaining. This class system in lack of a better name could be called \"environment classes\" and is the same class system extendr provides, except here there is both a public and private set of methods. For implementation reasons, the private methods are external and must be called from polars:::.pr.$Series$methodname(), also all private methods must take any self as an argument, thus they are pure functions. Having the private methods as pure functions solved/simplified self-referential complications. Details Check out the source code in R/Series_frame.R how public methods are derived from private methods. Check out extendr-wrappers.R to see the extendr-auto-generated methods. These are moved to .pr and converted into pure external functions in after-wrappers.R. In zzz.R (named zzz to be last file sourced) the extendr-methods are removed and replaced by any function prefixed Series_ . Examples #see all exported methods ls(polars:::Series) #see all private methods (not intended for regular use) ls(polars:::.pr$Series) #make an object s = pl$Series(1:3) #use a public method/property s$shape #use a private method (mutable append not allowed in public api) s_copy = s .pr$Series$append_mut(s, pl$Series(5:1)) identical(s_copy$to_r(), s$to_r()) # s_copy was modified when s was modified","title":"`class`"},{"location":"reference/Series_class/#class","text":"Inner workings of the Series-class","title":"class"},{"location":"reference/Series_class/#description","text":"The Series -class is simply two environments of respectively the public and private methods/function calls to the polars rust side. The instanciated Series -object is an externalptr to a lowlevel rust polars Series object. The pointer address is the only statefullness of the Series object on the R side. Any other state resides on the rust side. The S3 method .DollarNames.Series exposes all public $foobar() -methods which are callable onto the object. Most methods return another Series -class instance or similar which allows for method chaining. This class system in lack of a better name could be called \"environment classes\" and is the same class system extendr provides, except here there is both a public and private set of methods. For implementation reasons, the private methods are external and must be called from polars:::.pr.$Series$methodname(), also all private methods must take any self as an argument, thus they are pure functions. Having the private methods as pure functions solved/simplified self-referential complications.","title":"Description"},{"location":"reference/Series_class/#details","text":"Check out the source code in R/Series_frame.R how public methods are derived from private methods. Check out extendr-wrappers.R to see the extendr-auto-generated methods. These are moved to .pr and converted into pure external functions in after-wrappers.R. In zzz.R (named zzz to be last file sourced) the extendr-methods are removed and replaced by any function prefixed Series_ .","title":"Details"},{"location":"reference/Series_class/#examples","text":"#see all exported methods ls(polars:::Series) #see all private methods (not intended for regular use) ls(polars:::.pr$Series) #make an object s = pl$Series(1:3) #use a public method/property s$shape #use a private method (mutable append not allowed in public api) s_copy = s .pr$Series$append_mut(s, pl$Series(5:1)) identical(s_copy$to_r(), s$to_r()) # s_copy was modified when s was modified","title":"Examples"},{"location":"reference/Series_clone/","text":"clone Clone a Series Description Rarely useful as Series are nearly 100% immutable Any modification of a Series should lead to a clone anyways. Format An object of class character of length 1. Usage Series_clone Value Series Examples s1 = pl$Series(1:3); s2 = s1$clone(); s3 = s1 pl$mem_address(s1) != pl$mem_address(s2) pl$mem_address(s1) == pl$mem_address(s3)","title":"`clone`"},{"location":"reference/Series_clone/#clone","text":"Clone a Series","title":"clone"},{"location":"reference/Series_clone/#description","text":"Rarely useful as Series are nearly 100% immutable Any modification of a Series should lead to a clone anyways.","title":"Description"},{"location":"reference/Series_clone/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Series_clone/#usage","text":"Series_clone","title":"Usage"},{"location":"reference/Series_clone/#value","text":"Series","title":"Value"},{"location":"reference/Series_clone/#examples","text":"s1 = pl$Series(1:3); s2 = s1$clone(); s3 = s1 pl$mem_address(s1) != pl$mem_address(s2) pl$mem_address(s1) == pl$mem_address(s3)","title":"Examples"},{"location":"reference/Series_compare/","text":"compare Compare Series Description compare two Series Usage Series_compare(other, op) list(list(\"==\"), list(\"Series\"))(s1, s2) list(list(\"!=\"), list(\"Series\"))(s1, s2) list(list(\"<\"), list(\"Series\"))(s1, s2) list(list(\">\"), list(\"Series\"))(s1, s2) list(list(\"<=\"), list(\"Series\"))(s1, s2) list(list(\">=\"), list(\"Series\"))(s1, s2) Arguments Argument Description other A Series or something a Series can be created from op the chosen operator a String either: 'equal', 'not_equal', 'lt', 'gt', 'lt_eq' or 'gt_eq' s1 lhs Series s2 rhs Series or any into Series Value Series Examples pl$Series(1:5) == pl$Series(c(1:3,NA_integer_,10L))","title":"`compare`"},{"location":"reference/Series_compare/#compare","text":"Compare Series","title":"compare"},{"location":"reference/Series_compare/#description","text":"compare two Series","title":"Description"},{"location":"reference/Series_compare/#usage","text":"Series_compare(other, op) list(list(\"==\"), list(\"Series\"))(s1, s2) list(list(\"!=\"), list(\"Series\"))(s1, s2) list(list(\"<\"), list(\"Series\"))(s1, s2) list(list(\">\"), list(\"Series\"))(s1, s2) list(list(\"<=\"), list(\"Series\"))(s1, s2) list(list(\">=\"), list(\"Series\"))(s1, s2)","title":"Usage"},{"location":"reference/Series_compare/#arguments","text":"Argument Description other A Series or something a Series can be created from op the chosen operator a String either: 'equal', 'not_equal', 'lt', 'gt', 'lt_eq' or 'gt_eq' s1 lhs Series s2 rhs Series or any into Series","title":"Arguments"},{"location":"reference/Series_compare/#value","text":"Series","title":"Value"},{"location":"reference/Series_compare/#examples","text":"pl$Series(1:5) == pl$Series(c(1:3,NA_integer_,10L))","title":"Examples"},{"location":"reference/Series_cumsum/","text":"cumsum Cumulative sum Description Get an array with the cumulative sum computed at every element. Usage Series_cumsum(reverse = FALSE) Arguments Argument Description reverse bool, default FALSE, if true roll over vector from back to forth Details Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues. Value Series Examples pl$Series(c(1:2,NA,3,NaN,4,Inf))$cumsum() pl$Series(c(1:2,NA,3,Inf,4,-Inf,5))$cumsum()","title":"`cumsum`"},{"location":"reference/Series_cumsum/#cumsum","text":"Cumulative sum","title":"cumsum"},{"location":"reference/Series_cumsum/#description","text":"Get an array with the cumulative sum computed at every element.","title":"Description"},{"location":"reference/Series_cumsum/#usage","text":"Series_cumsum(reverse = FALSE)","title":"Usage"},{"location":"reference/Series_cumsum/#arguments","text":"Argument Description reverse bool, default FALSE, if true roll over vector from back to forth","title":"Arguments"},{"location":"reference/Series_cumsum/#details","text":"Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues.","title":"Details"},{"location":"reference/Series_cumsum/#value","text":"Series","title":"Value"},{"location":"reference/Series_cumsum/#examples","text":"pl$Series(c(1:2,NA,3,NaN,4,Inf))$cumsum() pl$Series(c(1:2,NA,3,Inf,4,-Inf,5))$cumsum()","title":"Examples"},{"location":"reference/Series_div/","text":"div div Series Description Series arithmetics Usage Series_div(other) list(list(\"/\"), list(\"Series\"))(s1, s2) Arguments Argument Description other Series or into Series s1 lhs Series s2 rhs Series or any into Series Value Series Examples pl$Series(1:3)$div(11:13) pl$Series(1:3)$div(pl$Series(11:13)) pl$Series(1:3)$div(1L) 2L / pl$Series(1:3) pl$Series(1:3) / 2L","title":"`div`"},{"location":"reference/Series_div/#div","text":"div Series","title":"div"},{"location":"reference/Series_div/#description","text":"Series arithmetics","title":"Description"},{"location":"reference/Series_div/#usage","text":"Series_div(other) list(list(\"/\"), list(\"Series\"))(s1, s2)","title":"Usage"},{"location":"reference/Series_div/#arguments","text":"Argument Description other Series or into Series s1 lhs Series s2 rhs Series or any into Series","title":"Arguments"},{"location":"reference/Series_div/#value","text":"Series","title":"Value"},{"location":"reference/Series_div/#examples","text":"pl$Series(1:3)$div(11:13) pl$Series(1:3)$div(pl$Series(11:13)) pl$Series(1:3)$div(1L) 2L / pl$Series(1:3) pl$Series(1:3) / 2L","title":"Examples"},{"location":"reference/Series_dtype/","text":"dtype Get data type of Series Description Get data type of Series Get data type of Series Usage Series_dtype() Series_flags() Details property sorted flags are not settable, use set_sorted Value DataType DataType Examples pl$Series(1:4)$dtype pl$Series(c(1,2))$dtype pl$Series(letters)$dtype pl$Series(1:4)$sort()$flags","title":"`dtype`"},{"location":"reference/Series_dtype/#dtype","text":"Get data type of Series","title":"dtype"},{"location":"reference/Series_dtype/#description","text":"Get data type of Series Get data type of Series","title":"Description"},{"location":"reference/Series_dtype/#usage","text":"Series_dtype() Series_flags()","title":"Usage"},{"location":"reference/Series_dtype/#details","text":"property sorted flags are not settable, use set_sorted","title":"Details"},{"location":"reference/Series_dtype/#value","text":"DataType DataType","title":"Value"},{"location":"reference/Series_dtype/#examples","text":"pl$Series(1:4)$dtype pl$Series(c(1,2))$dtype pl$Series(letters)$dtype pl$Series(1:4)$sort()$flags","title":"Examples"},{"location":"reference/Series_expr/","text":"expr Any expr method on a Series Description Call an expression on a Series See the individual Expr method pages for full details Usage Series_expr() Details This is a shorthand of writing something like pl$DataFrame(s)$select(pl$col(\"sname\")$expr)$to_series(0) This subnamespace is experimental. Submit an issue if anything unexpected happend. Value Expr Examples s = pl$Series(list(1:3,1:2,NULL)) s$expr$first() s$expr$alias(\"alice\")","title":"`expr`"},{"location":"reference/Series_expr/#expr","text":"Any expr method on a Series","title":"expr"},{"location":"reference/Series_expr/#description","text":"Call an expression on a Series See the individual Expr method pages for full details","title":"Description"},{"location":"reference/Series_expr/#usage","text":"Series_expr()","title":"Usage"},{"location":"reference/Series_expr/#details","text":"This is a shorthand of writing something like pl$DataFrame(s)$select(pl$col(\"sname\")$expr)$to_series(0) This subnamespace is experimental. Submit an issue if anything unexpected happend.","title":"Details"},{"location":"reference/Series_expr/#value","text":"Expr","title":"Value"},{"location":"reference/Series_expr/#examples","text":"s = pl$Series(list(1:3,1:2,NULL)) s$expr$first() s$expr$alias(\"alice\")","title":"Examples"},{"location":"reference/Series_floor/","text":"floor Series_floor Description Floor of this Series Usage Series_floor() Value numeric Examples pl$Series(c(.5,1.999))$floor()","title":"`floor`"},{"location":"reference/Series_floor/#floor","text":"Series_floor","title":"floor"},{"location":"reference/Series_floor/#description","text":"Floor of this Series","title":"Description"},{"location":"reference/Series_floor/#usage","text":"Series_floor()","title":"Usage"},{"location":"reference/Series_floor/#value","text":"numeric","title":"Value"},{"location":"reference/Series_floor/#examples","text":"pl$Series(c(.5,1.999))$floor()","title":"Examples"},{"location":"reference/Series_is_numeric/","text":"is_numeric is_numeric Description return bool whether series is numeric Format method Usage Series_is_numeric() Details true of series dtype is member of pl$numeric_dtypes Value bool Examples pl$Series(1:4)$is_numeric() pl$Series(c(\"a\",\"b\",\"c\"))$is_numeric() pl$numeric_dtypes","title":"`is_numeric`"},{"location":"reference/Series_is_numeric/#is_numeric","text":"is_numeric","title":"is_numeric"},{"location":"reference/Series_is_numeric/#description","text":"return bool whether series is numeric","title":"Description"},{"location":"reference/Series_is_numeric/#format","text":"method","title":"Format"},{"location":"reference/Series_is_numeric/#usage","text":"Series_is_numeric()","title":"Usage"},{"location":"reference/Series_is_numeric/#details","text":"true of series dtype is member of pl$numeric_dtypes","title":"Details"},{"location":"reference/Series_is_numeric/#value","text":"bool","title":"Value"},{"location":"reference/Series_is_numeric/#examples","text":"pl$Series(1:4)$is_numeric() pl$Series(c(\"a\",\"b\",\"c\"))$is_numeric() pl$numeric_dtypes","title":"Examples"},{"location":"reference/Series_is_sorted/","text":"is_sorted is_sorted Description is_sorted Usage Series_is_sorted(reverse = FALSE, nulls_last = NULL) Arguments Argument Description reverse order sorted nulls_last bool where to keep nulls, default same as reverse Details property sorted flags are not settable, use set_sorted Value DataType Examples pl$Series(1:4)$sort()$is_sorted()","title":"`is_sorted`"},{"location":"reference/Series_is_sorted/#is_sorted","text":"is_sorted","title":"is_sorted"},{"location":"reference/Series_is_sorted/#description","text":"is_sorted","title":"Description"},{"location":"reference/Series_is_sorted/#usage","text":"Series_is_sorted(reverse = FALSE, nulls_last = NULL)","title":"Usage"},{"location":"reference/Series_is_sorted/#arguments","text":"Argument Description reverse order sorted nulls_last bool where to keep nulls, default same as reverse","title":"Arguments"},{"location":"reference/Series_is_sorted/#details","text":"property sorted flags are not settable, use set_sorted","title":"Details"},{"location":"reference/Series_is_sorted/#value","text":"DataType","title":"Value"},{"location":"reference/Series_is_sorted/#examples","text":"pl$Series(1:4)$sort()$is_sorted()","title":"Examples"},{"location":"reference/Series_len/","text":"len Series_len Description Length of this Series. Format An object of class character of length 1. Usage Series_len Value numeric Examples pl$Series(1:10)$len()","title":"`len`"},{"location":"reference/Series_len/#len","text":"Series_len","title":"len"},{"location":"reference/Series_len/#description","text":"Length of this Series.","title":"Description"},{"location":"reference/Series_len/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Series_len/#usage","text":"Series_len","title":"Usage"},{"location":"reference/Series_len/#value","text":"numeric","title":"Value"},{"location":"reference/Series_len/#examples","text":"pl$Series(1:10)$len()","title":"Examples"},{"location":"reference/Series_max/","text":"max max Description Reduce Series with max Format An object of class character of length 1. Usage Series_max Details Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before maxming to prevent overflow issues. Value Series Examples pl$Series(c(1:2,NA,3,5))$max() # a NA is dropped always pl$Series(c(1:2,NA,3,NaN,4,Inf))$max() # NaN carries / poisons pl$Series(c(1:2,3,Inf,4,-Inf,5))$max() # Inf-Inf is NaN","title":"`max`"},{"location":"reference/Series_max/#max","text":"max","title":"max"},{"location":"reference/Series_max/#description","text":"Reduce Series with max","title":"Description"},{"location":"reference/Series_max/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Series_max/#usage","text":"Series_max","title":"Usage"},{"location":"reference/Series_max/#details","text":"Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before maxming to prevent overflow issues.","title":"Details"},{"location":"reference/Series_max/#value","text":"Series","title":"Value"},{"location":"reference/Series_max/#examples","text":"pl$Series(c(1:2,NA,3,5))$max() # a NA is dropped always pl$Series(c(1:2,NA,3,NaN,4,Inf))$max() # NaN carries / poisons pl$Series(c(1:2,3,Inf,4,-Inf,5))$max() # Inf-Inf is NaN","title":"Examples"},{"location":"reference/Series_min/","text":"min min Description Reduce Series with min Format An object of class character of length 1. Usage Series_min Details Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before minming to prevent overflow issues. Value Series Examples pl$Series(c(1:2,NA,3,5))$min() # a NA is dropped always pl$Series(c(1:2,NA,3,NaN,4,Inf))$min() # NaN carries / poisons pl$Series(c(1:2,3,Inf,4,-Inf,5))$min() # Inf-Inf is NaN","title":"`min`"},{"location":"reference/Series_min/#min","text":"min","title":"min"},{"location":"reference/Series_min/#description","text":"Reduce Series with min","title":"Description"},{"location":"reference/Series_min/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Series_min/#usage","text":"Series_min","title":"Usage"},{"location":"reference/Series_min/#details","text":"Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before minming to prevent overflow issues.","title":"Details"},{"location":"reference/Series_min/#value","text":"Series","title":"Value"},{"location":"reference/Series_min/#examples","text":"pl$Series(c(1:2,NA,3,5))$min() # a NA is dropped always pl$Series(c(1:2,NA,3,NaN,4,Inf))$min() # NaN carries / poisons pl$Series(c(1:2,3,Inf,4,-Inf,5))$min() # Inf-Inf is NaN","title":"Examples"},{"location":"reference/Series_mul/","text":"mul mul Series Description Series arithmetics Usage Series_mul(other) list(list(\"*\"), list(\"Series\"))(s1, s2) Arguments Argument Description other Series or into Series s1 lhs Series s2 rhs Series or any into Series Value Series Examples pl$Series(1:3)$mul(11:13) pl$Series(1:3)$mul(pl$Series(11:13)) pl$Series(1:3)$mul(1L) 2L * pl$Series(1:3) pl$Series(1:3) * 2L","title":"`mul`"},{"location":"reference/Series_mul/#mul","text":"mul Series","title":"mul"},{"location":"reference/Series_mul/#description","text":"Series arithmetics","title":"Description"},{"location":"reference/Series_mul/#usage","text":"Series_mul(other) list(list(\"*\"), list(\"Series\"))(s1, s2)","title":"Usage"},{"location":"reference/Series_mul/#arguments","text":"Argument Description other Series or into Series s1 lhs Series s2 rhs Series or any into Series","title":"Arguments"},{"location":"reference/Series_mul/#value","text":"Series","title":"Value"},{"location":"reference/Series_mul/#examples","text":"pl$Series(1:3)$mul(11:13) pl$Series(1:3)$mul(pl$Series(11:13)) pl$Series(1:3)$mul(1L) 2L * pl$Series(1:3) pl$Series(1:3) * 2L","title":"Examples"},{"location":"reference/Series_name/","text":"name Property: Name Description Get name of Series Usage Series_name() Value String the name Examples pl$Series(1:3,name = \"alice\")$name","title":"`name`"},{"location":"reference/Series_name/#name","text":"Property: Name","title":"name"},{"location":"reference/Series_name/#description","text":"Get name of Series","title":"Description"},{"location":"reference/Series_name/#usage","text":"Series_name()","title":"Usage"},{"location":"reference/Series_name/#value","text":"String the name","title":"Value"},{"location":"reference/Series_name/#examples","text":"pl$Series(1:3,name = \"alice\")$name","title":"Examples"},{"location":"reference/Series_print/","text":"print Print Series Description Print Series Print Series Usage list(list(\"print\"), list(\"Series\"))(x, ...) Series_print() Arguments Argument Description x Series ... not used Value invisible(self) self Examples print(pl$Series(1:3)) pl$Series(1:3)","title":"`print`"},{"location":"reference/Series_print/#print","text":"Print Series","title":"print"},{"location":"reference/Series_print/#description","text":"Print Series Print Series","title":"Description"},{"location":"reference/Series_print/#usage","text":"list(list(\"print\"), list(\"Series\"))(x, ...) Series_print()","title":"Usage"},{"location":"reference/Series_print/#arguments","text":"Argument Description x Series ... not used","title":"Arguments"},{"location":"reference/Series_print/#value","text":"invisible(self) self","title":"Value"},{"location":"reference/Series_print/#examples","text":"print(pl$Series(1:3)) pl$Series(1:3)","title":"Examples"},{"location":"reference/Series_rem/","text":"rem rem Series Description Series arithmetics, remainder Usage Series_rem(other) Arguments Argument Description other Series or into Series Value Series Examples pl$Series(1:4)$rem(2L) pl$Series(1:3)$rem(pl$Series(11:13)) pl$Series(1:3)$rem(1L)","title":"`rem`"},{"location":"reference/Series_rem/#rem","text":"rem Series","title":"rem"},{"location":"reference/Series_rem/#description","text":"Series arithmetics, remainder","title":"Description"},{"location":"reference/Series_rem/#usage","text":"Series_rem(other)","title":"Usage"},{"location":"reference/Series_rem/#arguments","text":"Argument Description other Series or into Series","title":"Arguments"},{"location":"reference/Series_rem/#value","text":"Series","title":"Value"},{"location":"reference/Series_rem/#examples","text":"pl$Series(1:4)$rem(2L) pl$Series(1:3)$rem(pl$Series(11:13)) pl$Series(1:3)$rem(1L)","title":"Examples"},{"location":"reference/Series_rename/","text":"rename Rename a series Description Rename a series Format method Usage Series_rename(name, in_place = FALSE) Arguments Argument Description name string the new name in_place bool rename in-place, breaks immutability If true will throw an error unless this option has been set: pl$set_polars_options(strictly_immutable = FALSE) Value bool Examples pl$Series(1:4,\"bob\")$rename(\"alice\")","title":"`rename`"},{"location":"reference/Series_rename/#rename","text":"Rename a series","title":"rename"},{"location":"reference/Series_rename/#description","text":"Rename a series","title":"Description"},{"location":"reference/Series_rename/#format","text":"method","title":"Format"},{"location":"reference/Series_rename/#usage","text":"Series_rename(name, in_place = FALSE)","title":"Usage"},{"location":"reference/Series_rename/#arguments","text":"Argument Description name string the new name in_place bool rename in-place, breaks immutability If true will throw an error unless this option has been set: pl$set_polars_options(strictly_immutable = FALSE)","title":"Arguments"},{"location":"reference/Series_rename/#value","text":"bool","title":"Value"},{"location":"reference/Series_rename/#examples","text":"pl$Series(1:4,\"bob\")$rename(\"alice\")","title":"Examples"},{"location":"reference/Series_rep/","text":"rep duplicate and concatenate a series Description duplicate and concatenate a series Format method Usage Series_rep(n, rechunk = TRUE) Arguments Argument Description n number of times to repeat rechunk bool default true, reallocate object in memory. If FALSE the Series will take up less space, If TRUE calculations might be faster. Details This function in not implemented in pypolars Value bool Examples pl$Series(1:2,\"bob\")$rep(3)","title":"`rep`"},{"location":"reference/Series_rep/#rep","text":"duplicate and concatenate a series","title":"rep"},{"location":"reference/Series_rep/#description","text":"duplicate and concatenate a series","title":"Description"},{"location":"reference/Series_rep/#format","text":"method","title":"Format"},{"location":"reference/Series_rep/#usage","text":"Series_rep(n, rechunk = TRUE)","title":"Usage"},{"location":"reference/Series_rep/#arguments","text":"Argument Description n number of times to repeat rechunk bool default true, reallocate object in memory. If FALSE the Series will take up less space, If TRUE calculations might be faster.","title":"Arguments"},{"location":"reference/Series_rep/#details","text":"This function in not implemented in pypolars","title":"Details"},{"location":"reference/Series_rep/#value","text":"bool","title":"Value"},{"location":"reference/Series_rep/#examples","text":"pl$Series(1:2,\"bob\")$rep(3)","title":"Examples"},{"location":"reference/Series_series_equal/","text":"series_equal Are Series's equal? Description Check if series is equal with another Series. Format method Usage Series_series_equal(other, null_equal = FALSE, strict = FALSE) Arguments Argument Description other Series to compare with null_equal bool if TRUE, (Null==Null) is true and not Null/NA. Overridden by strict. strict bool if TRUE, do not allow similar DataType comparison. Overrides null_equal. Value bool Examples pl$Series(1:4,\"bob\")$series_equal(pl$Series(1:4))","title":"`series_equal`"},{"location":"reference/Series_series_equal/#series_equal","text":"Are Series's equal?","title":"series_equal"},{"location":"reference/Series_series_equal/#description","text":"Check if series is equal with another Series.","title":"Description"},{"location":"reference/Series_series_equal/#format","text":"method","title":"Format"},{"location":"reference/Series_series_equal/#usage","text":"Series_series_equal(other, null_equal = FALSE, strict = FALSE)","title":"Usage"},{"location":"reference/Series_series_equal/#arguments","text":"Argument Description other Series to compare with null_equal bool if TRUE, (Null==Null) is true and not Null/NA. Overridden by strict. strict bool if TRUE, do not allow similar DataType comparison. Overrides null_equal.","title":"Arguments"},{"location":"reference/Series_series_equal/#value","text":"bool","title":"Value"},{"location":"reference/Series_series_equal/#examples","text":"pl$Series(1:4,\"bob\")$series_equal(pl$Series(1:4))","title":"Examples"},{"location":"reference/Series_set_sorted/","text":"set_sorted Set sorted Description Set sorted Usage Series_set_sorted(reverse = FALSE, in_place = FALSE) Arguments Argument Description reverse bool if TRUE, signals series is Descendingly sorted, otherwise Ascendingly. in_place if TRUE, will set flag mutably and return NULL. Remember to use pl$set_polars_options(strictly_immutable = FALSE) otherwise an error will be thrown. If FALSE will return a cloned Series with set_flag which in the very most cases should be just fine. Value Series invisible Examples s = pl$Series(1:4)$set_sorted() s$flags","title":"`set_sorted`"},{"location":"reference/Series_set_sorted/#set_sorted","text":"Set sorted","title":"set_sorted"},{"location":"reference/Series_set_sorted/#description","text":"Set sorted","title":"Description"},{"location":"reference/Series_set_sorted/#usage","text":"Series_set_sorted(reverse = FALSE, in_place = FALSE)","title":"Usage"},{"location":"reference/Series_set_sorted/#arguments","text":"Argument Description reverse bool if TRUE, signals series is Descendingly sorted, otherwise Ascendingly. in_place if TRUE, will set flag mutably and return NULL. Remember to use pl$set_polars_options(strictly_immutable = FALSE) otherwise an error will be thrown. If FALSE will return a cloned Series with set_flag which in the very most cases should be just fine.","title":"Arguments"},{"location":"reference/Series_set_sorted/#value","text":"Series invisible","title":"Value"},{"location":"reference/Series_set_sorted/#examples","text":"s = pl$Series(1:4)$set_sorted() s$flags","title":"Examples"},{"location":"reference/Series_shape/","text":"shape Shape of series Description Shape of series Usage Series_shape() Value dimension vector of Series Examples identical(pl$Series(1:2)$shape, 2:1)","title":"`shape`"},{"location":"reference/Series_shape/#shape","text":"Shape of series","title":"shape"},{"location":"reference/Series_shape/#description","text":"Shape of series","title":"Description"},{"location":"reference/Series_shape/#usage","text":"Series_shape()","title":"Usage"},{"location":"reference/Series_shape/#value","text":"dimension vector of Series","title":"Value"},{"location":"reference/Series_shape/#examples","text":"identical(pl$Series(1:2)$shape, 2:1)","title":"Examples"},{"location":"reference/Series_sort/","text":"sort Sort this Series Description Sort this Series Usage Series_sort(reverse = FALSE, in_place = FALSE) Arguments Argument Description reverse bool reverse(descending) sort in_place bool sort mutable in-place, breaks immutability If true will throw an error unless this option has been set: pl$set_polars_options(strictly_immutable = FALSE) Value Series Examples pl$Series(c(1,NA,NaN,Inf,-Inf))$sort()","title":"`sort`"},{"location":"reference/Series_sort/#sort","text":"Sort this Series","title":"sort"},{"location":"reference/Series_sort/#description","text":"Sort this Series","title":"Description"},{"location":"reference/Series_sort/#usage","text":"Series_sort(reverse = FALSE, in_place = FALSE)","title":"Usage"},{"location":"reference/Series_sort/#arguments","text":"Argument Description reverse bool reverse(descending) sort in_place bool sort mutable in-place, breaks immutability If true will throw an error unless this option has been set: pl$set_polars_options(strictly_immutable = FALSE)","title":"Arguments"},{"location":"reference/Series_sort/#value","text":"Series","title":"Value"},{"location":"reference/Series_sort/#examples","text":"pl$Series(c(1,NA,NaN,Inf,-Inf))$sort()","title":"Examples"},{"location":"reference/Series_std/","text":"std Get the standard deviation of this Series. Description Get the standard deviation of this Series. Format method Usage Series_std(ddof = 1) Arguments Argument Description ddof \"Delta Degrees of Freedom\": the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1. Value bool Examples pl$Series(1:4,\"bob\")$std()","title":"`std`"},{"location":"reference/Series_std/#std","text":"Get the standard deviation of this Series.","title":"std"},{"location":"reference/Series_std/#description","text":"Get the standard deviation of this Series.","title":"Description"},{"location":"reference/Series_std/#format","text":"method","title":"Format"},{"location":"reference/Series_std/#usage","text":"Series_std(ddof = 1)","title":"Usage"},{"location":"reference/Series_std/#arguments","text":"Argument Description ddof \"Delta Degrees of Freedom\": the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1.","title":"Arguments"},{"location":"reference/Series_std/#value","text":"bool","title":"Value"},{"location":"reference/Series_std/#examples","text":"pl$Series(1:4,\"bob\")$std()","title":"Examples"},{"location":"reference/Series_sub/","text":"sub sub Series Description Series arithmetics Usage Series_sub(other) list(list(\"-\"), list(\"Series\"))(s1, s2) Arguments Argument Description other Series or into Series s1 lhs Series s2 rhs Series or any into Series Value Series Examples pl$Series(1:3)$sub(11:13) pl$Series(1:3)$sub(pl$Series(11:13)) pl$Series(1:3)$sub(1L) 1L - pl$Series(1:3) pl$Series(1:3) - 1L","title":"`sub`"},{"location":"reference/Series_sub/#sub","text":"sub Series","title":"sub"},{"location":"reference/Series_sub/#description","text":"Series arithmetics","title":"Description"},{"location":"reference/Series_sub/#usage","text":"Series_sub(other) list(list(\"-\"), list(\"Series\"))(s1, s2)","title":"Usage"},{"location":"reference/Series_sub/#arguments","text":"Argument Description other Series or into Series s1 lhs Series s2 rhs Series or any into Series","title":"Arguments"},{"location":"reference/Series_sub/#value","text":"Series","title":"Value"},{"location":"reference/Series_sub/#examples","text":"pl$Series(1:3)$sub(11:13) pl$Series(1:3)$sub(pl$Series(11:13)) pl$Series(1:3)$sub(1L) 1L - pl$Series(1:3) pl$Series(1:3) - 1L","title":"Examples"},{"location":"reference/Series_sum/","text":"sum Sum Description Reduce Series with sum Format An object of class character of length 1. Usage Series_sum Details Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues. Value Series Examples pl$Series(c(1:2,NA,3,5))$sum() # a NA is dropped always pl$Series(c(1:2,NA,3,NaN,4,Inf))$sum() # NaN carries / poisons pl$Series(c(1:2,3,Inf,4,-Inf,5))$sum() # Inf-Inf is NaN","title":"`sum`"},{"location":"reference/Series_sum/#sum","text":"Sum","title":"sum"},{"location":"reference/Series_sum/#description","text":"Reduce Series with sum","title":"Description"},{"location":"reference/Series_sum/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/Series_sum/#usage","text":"Series_sum","title":"Usage"},{"location":"reference/Series_sum/#details","text":"Dtypes in Int8, UInt8, Int16, UInt16 are cast to Int64 before summing to prevent overflow issues.","title":"Details"},{"location":"reference/Series_sum/#value","text":"Series","title":"Value"},{"location":"reference/Series_sum/#examples","text":"pl$Series(c(1:2,NA,3,5))$sum() # a NA is dropped always pl$Series(c(1:2,NA,3,NaN,4,Inf))$sum() # NaN carries / poisons pl$Series(c(1:2,3,Inf,4,-Inf,5))$sum() # Inf-Inf is NaN","title":"Examples"},{"location":"reference/Series_to_frames/","text":"to_frames Series to DataFrame Description Series to DataFrame Format method Usage Series_to_frame() Value Series Examples pl$Series(1:4,\"bob\")$to_frame()","title":"`to_frames`"},{"location":"reference/Series_to_frames/#to_frames","text":"Series to DataFrame","title":"to_frames"},{"location":"reference/Series_to_frames/#description","text":"Series to DataFrame","title":"Description"},{"location":"reference/Series_to_frames/#format","text":"method","title":"Format"},{"location":"reference/Series_to_frames/#usage","text":"Series_to_frame()","title":"Usage"},{"location":"reference/Series_to_frames/#value","text":"Series","title":"Value"},{"location":"reference/Series_to_frames/#examples","text":"pl$Series(1:4,\"bob\")$to_frame()","title":"Examples"},{"location":"reference/Series_to_lit/","text":"to_lit Series to Literal Description convert Series to literal to perform modification and return Usage Series_to_lit() Value Expr Examples ( pl$Series(list(1:1, 1:2, 1:3, 1:4)) $print() $to_lit() $arr$lengths() $sum() $cast(pl$dtypes$Int8) $lit_to_s() )","title":"`to_lit`"},{"location":"reference/Series_to_lit/#to_lit","text":"Series to Literal","title":"to_lit"},{"location":"reference/Series_to_lit/#description","text":"convert Series to literal to perform modification and return","title":"Description"},{"location":"reference/Series_to_lit/#usage","text":"Series_to_lit()","title":"Usage"},{"location":"reference/Series_to_lit/#value","text":"Expr","title":"Value"},{"location":"reference/Series_to_lit/#examples","text":"( pl$Series(list(1:1, 1:2, 1:3, 1:4)) $print() $to_lit() $arr$lengths() $sum() $cast(pl$dtypes$Int8) $lit_to_s() )","title":"Examples"},{"location":"reference/Series_to_r/","text":"to_r Get r vector/list Description return R list (if polars Series is list) or vector (any other polars Series type) return R vector (implicit unlist) return R list (implicit as.list) Usage Series_to_r() Series_to_r_vector() Series_to_r_list() Details Fun fact: Nested polars Series list must have same inner type, e.g. List(List(Int32)) Thus every leaf(non list type) will be placed on the same depth of the tree, and be the same type. Value R list or vector R vector R list Examples #make polars Series_Utf8 series_vec = pl$Series(letters[1:3]) #Series_non_list series_vec$to_r() #as vector because Series DataType is not list (is Utf8) series_vec$to_r_list() #implicit call as.list(), convert to list series_vec$to_r_vector() #implicit call unlist(), same as to_r() as already vector #make nested Series_list of Series_list of Series_Int32 #using Expr syntax because currently more complete translated series_list = pl$DataFrame(list(a=c(1:5,NA_integer_)))$select( pl$col(\"a\")$list()$list()$append( ( pl$col(\"a\")$head(2)$list()$append( pl$col(\"a\")$tail(1)$list() ) )$list() ) )$get_column(\"a\") # get series from DataFrame #Series_list series_list$to_r() #as list because Series DataType is list series_list$to_r_list() #implicit call as.list(), same as to_r() as already list series_list$to_r_vector() #implicit call unlist(), append into a vector # #","title":"`to_r`"},{"location":"reference/Series_to_r/#to_r","text":"Get r vector/list","title":"to_r"},{"location":"reference/Series_to_r/#description","text":"return R list (if polars Series is list) or vector (any other polars Series type) return R vector (implicit unlist) return R list (implicit as.list)","title":"Description"},{"location":"reference/Series_to_r/#usage","text":"Series_to_r() Series_to_r_vector() Series_to_r_list()","title":"Usage"},{"location":"reference/Series_to_r/#details","text":"Fun fact: Nested polars Series list must have same inner type, e.g. List(List(Int32)) Thus every leaf(non list type) will be placed on the same depth of the tree, and be the same type.","title":"Details"},{"location":"reference/Series_to_r/#value","text":"R list or vector R vector R list","title":"Value"},{"location":"reference/Series_to_r/#examples","text":"#make polars Series_Utf8 series_vec = pl$Series(letters[1:3]) #Series_non_list series_vec$to_r() #as vector because Series DataType is not list (is Utf8) series_vec$to_r_list() #implicit call as.list(), convert to list series_vec$to_r_vector() #implicit call unlist(), same as to_r() as already vector #make nested Series_list of Series_list of Series_Int32 #using Expr syntax because currently more complete translated series_list = pl$DataFrame(list(a=c(1:5,NA_integer_)))$select( pl$col(\"a\")$list()$list()$append( ( pl$col(\"a\")$head(2)$list()$append( pl$col(\"a\")$tail(1)$list() ) )$list() ) )$get_column(\"a\") # get series from DataFrame #Series_list series_list$to_r() #as list because Series DataType is list series_list$to_r_list() #implicit call as.list(), same as to_r() as already list series_list$to_r_vector() #implicit call unlist(), append into a vector # #","title":"Examples"},{"location":"reference/Series_value_count/","text":"value_count Value Counts as DataFrame Description Value Counts as DataFrame Usage Series_value_counts(sorted = TRUE, multithreaded = FALSE) Arguments Argument Description sorted bool, default TRUE: sort table by value; FALSE: random multithreaded bool, default FALSE, process multithreaded. Likely faster to have TRUE for a big Series. If called within an already multithreaded context such calling apply on a GroupBy with many groups, then likely slightly faster to leave FALSE. Value DataFrame Examples pl$Series(iris$Species,\"flower species\")$value_counts()","title":"`value_count`"},{"location":"reference/Series_value_count/#value_count","text":"Value Counts as DataFrame","title":"value_count"},{"location":"reference/Series_value_count/#description","text":"Value Counts as DataFrame","title":"Description"},{"location":"reference/Series_value_count/#usage","text":"Series_value_counts(sorted = TRUE, multithreaded = FALSE)","title":"Usage"},{"location":"reference/Series_value_count/#arguments","text":"Argument Description sorted bool, default TRUE: sort table by value; FALSE: random multithreaded bool, default FALSE, process multithreaded. Likely faster to have TRUE for a big Series. If called within an already multithreaded context such calling apply on a GroupBy with many groups, then likely slightly faster to leave FALSE.","title":"Arguments"},{"location":"reference/Series_value_count/#value","text":"DataFrame","title":"Value"},{"location":"reference/Series_value_count/#examples","text":"pl$Series(iris$Species,\"flower species\")$value_counts()","title":"Examples"},{"location":"reference/Series_var/","text":"var Get the standard deviation of this Series. Description Get the standard deviation of this Series. Format method Usage Series_var(ddof = 1) Arguments Argument Description ddof \"Delta Degrees of Freedom\": the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1. Value bool Examples pl$Series(1:4,\"bob\")$var()","title":"`var`"},{"location":"reference/Series_var/#var","text":"Get the standard deviation of this Series.","title":"var"},{"location":"reference/Series_var/#description","text":"Get the standard deviation of this Series.","title":"Description"},{"location":"reference/Series_var/#format","text":"method","title":"Format"},{"location":"reference/Series_var/#usage","text":"Series_var(ddof = 1)","title":"Usage"},{"location":"reference/Series_var/#arguments","text":"Argument Description ddof \"Delta Degrees of Freedom\": the divisor used in the calculation is N - ddof, where N represents the number of elements. By default ddof is 1.","title":"Arguments"},{"location":"reference/Series_var/#value","text":"bool","title":"Value"},{"location":"reference/Series_var/#examples","text":"pl$Series(1:4,\"bob\")$var()","title":"Examples"},{"location":"reference/aaaaaa/","text":"as_data_frame return polars DataFrame as R data.frame Description return polars DataFrame as R data.frame Usage DataFrame_as_data_frame(...) list(list(\"as.data.frame\"), list(\"DataFrame\"))(x, ...) Arguments Argument Description ... any params passed to as.data.frame x DataFrame Value data.frame data.frame Examples df = pl$DataFrame(iris[1:3,]) df$as_data_frame()","title":"`as_data_frame`"},{"location":"reference/aaaaaa/#as_data_frame","text":"return polars DataFrame as R data.frame","title":"as_data_frame"},{"location":"reference/aaaaaa/#description","text":"return polars DataFrame as R data.frame","title":"Description"},{"location":"reference/aaaaaa/#usage","text":"DataFrame_as_data_frame(...) list(list(\"as.data.frame\"), list(\"DataFrame\"))(x, ...)","title":"Usage"},{"location":"reference/aaaaaa/#arguments","text":"Argument Description ... any params passed to as.data.frame x DataFrame","title":"Arguments"},{"location":"reference/aaaaaa/#value","text":"data.frame data.frame","title":"Value"},{"location":"reference/aaaaaa/#examples","text":"df = pl$DataFrame(iris[1:3,]) df$as_data_frame()","title":"Examples"},{"location":"reference/all/","text":"all New Expr referring to all columns Description Not to mix up with Expr_object$all() which is a 'reduce Boolean columns by AND' method. Details last all() in example is this Expr method, the first pl$all() refers to \"all-columns\" and is an expression constructor Value Boolean literal Examples pl$DataFrame(list(all=c(TRUE,TRUE),some=c(TRUE,FALSE)))$select(pl$all()$all())","title":"`all`"},{"location":"reference/all/#all","text":"New Expr referring to all columns","title":"all"},{"location":"reference/all/#description","text":"Not to mix up with Expr_object$all() which is a 'reduce Boolean columns by AND' method.","title":"Description"},{"location":"reference/all/#details","text":"last all() in example is this Expr method, the first pl$all() refers to \"all-columns\" and is an expression constructor","title":"Details"},{"location":"reference/all/#value","text":"Boolean literal","title":"Value"},{"location":"reference/all/#examples","text":"pl$DataFrame(list(all=c(TRUE,TRUE),some=c(TRUE,FALSE)))$select(pl$all()$all())","title":"Examples"},{"location":"reference/and_then/","text":"and_then map an ok-value or pass on an err-value Description map an ok-value or pass on an err-value Usage and_then(x, f) Arguments Argument Description x any R object f a closure that takes the ok part as input Value same R object wrapped in a Err-result","title":"`and_then`"},{"location":"reference/and_then/#and_then","text":"map an ok-value or pass on an err-value","title":"and_then"},{"location":"reference/and_then/#description","text":"map an ok-value or pass on an err-value","title":"Description"},{"location":"reference/and_then/#usage","text":"and_then(x, f)","title":"Usage"},{"location":"reference/and_then/#arguments","text":"Argument Description x any R object f a closure that takes the ok part as input","title":"Arguments"},{"location":"reference/and_then/#value","text":"same R object wrapped in a Err-result","title":"Value"},{"location":"reference/arr_arg_max/","text":"arr_arg_max Arg max sublists Description Retrieve the index of the maximum value in every sublist. Format function Value Expr Examples df = pl$DataFrame(list(s = list(1:2,2:1))) df$select(pl$col(\"s\")$arr$arg_max())","title":"`arr_arg_max`"},{"location":"reference/arr_arg_max/#arr_arg_max","text":"Arg max sublists","title":"arr_arg_max"},{"location":"reference/arr_arg_max/#description","text":"Retrieve the index of the maximum value in every sublist.","title":"Description"},{"location":"reference/arr_arg_max/#format","text":"function","title":"Format"},{"location":"reference/arr_arg_max/#value","text":"Expr","title":"Value"},{"location":"reference/arr_arg_max/#examples","text":"df = pl$DataFrame(list(s = list(1:2,2:1))) df$select(pl$col(\"s\")$arr$arg_max())","title":"Examples"},{"location":"reference/arr_arg_min/","text":"arr_arg_min Arg min sublists Description Retrieve the index of the minimal value in every sublist. Format function Value Expr Examples df = pl$DataFrame(list(s = list(1:2,2:1))) df$select(pl$col(\"s\")$arr$arg_min())","title":"`arr_arg_min`"},{"location":"reference/arr_arg_min/#arr_arg_min","text":"Arg min sublists","title":"arr_arg_min"},{"location":"reference/arr_arg_min/#description","text":"Retrieve the index of the minimal value in every sublist.","title":"Description"},{"location":"reference/arr_arg_min/#format","text":"function","title":"Format"},{"location":"reference/arr_arg_min/#value","text":"Expr","title":"Value"},{"location":"reference/arr_arg_min/#examples","text":"df = pl$DataFrame(list(s = list(1:2,2:1))) df$select(pl$col(\"s\")$arr$arg_min())","title":"Examples"},{"location":"reference/arr_concat/","text":"arr_concat concat another list Description Concat the arrays in a Series dtype List in linear time. Format function Arguments Argument Description other Rlist, Expr or column of same tyoe as self. Value Expr Examples df = pl$DataFrame( a = list(\"a\",\"x\"), b = list(c(\"b\",\"c\"),c(\"y\",\"z\")) ) df$select(pl$col(\"a\")$arr$concat(pl$col(\"b\"))) df$select(pl$col(\"a\")$arr$concat(\"hello from R\")) df$select(pl$col(\"a\")$arr$concat(list(\"hello\",c(\"hello\",\"world\"))))","title":"`arr_concat`"},{"location":"reference/arr_concat/#arr_concat","text":"concat another list","title":"arr_concat"},{"location":"reference/arr_concat/#description","text":"Concat the arrays in a Series dtype List in linear time.","title":"Description"},{"location":"reference/arr_concat/#format","text":"function","title":"Format"},{"location":"reference/arr_concat/#arguments","text":"Argument Description other Rlist, Expr or column of same tyoe as self.","title":"Arguments"},{"location":"reference/arr_concat/#value","text":"Expr","title":"Value"},{"location":"reference/arr_concat/#examples","text":"df = pl$DataFrame( a = list(\"a\",\"x\"), b = list(c(\"b\",\"c\"),c(\"y\",\"z\")) ) df$select(pl$col(\"a\")$arr$concat(pl$col(\"b\"))) df$select(pl$col(\"a\")$arr$concat(\"hello from R\")) df$select(pl$col(\"a\")$arr$concat(list(\"hello\",c(\"hello\",\"world\"))))","title":"Examples"},{"location":"reference/arr_contains/","text":"arr_contains Sublists contains Description Check if sublists contain the given item. Format function Arguments Argument Description item any into Expr/literal Value Expr of a boolean mask Examples df = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) #NULL or integer() or list() df$select(pl$col(\"a\")$arr$contains(1L))","title":"`arr_contains`"},{"location":"reference/arr_contains/#arr_contains","text":"Sublists contains","title":"arr_contains"},{"location":"reference/arr_contains/#description","text":"Check if sublists contain the given item.","title":"Description"},{"location":"reference/arr_contains/#format","text":"function","title":"Format"},{"location":"reference/arr_contains/#arguments","text":"Argument Description item any into Expr/literal","title":"Arguments"},{"location":"reference/arr_contains/#value","text":"Expr of a boolean mask","title":"Value"},{"location":"reference/arr_contains/#examples","text":"df = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) #NULL or integer() or list() df$select(pl$col(\"a\")$arr$contains(1L))","title":"Examples"},{"location":"reference/arr_diff/","text":"arr_diff Diff sublists Description Calculate the n-th discrete difference of every sublist. Format function Arguments Argument Description n Number of slots to shift null_behavior choice \"ignore\"(default) \"drop\" Value Expr Examples df = pl$DataFrame(list(s = list(1:4,c(10L,2L,1L)))) df$select(pl$col(\"s\")$arr$diff())","title":"`arr_diff`"},{"location":"reference/arr_diff/#arr_diff","text":"Diff sublists","title":"arr_diff"},{"location":"reference/arr_diff/#description","text":"Calculate the n-th discrete difference of every sublist.","title":"Description"},{"location":"reference/arr_diff/#format","text":"function","title":"Format"},{"location":"reference/arr_diff/#arguments","text":"Argument Description n Number of slots to shift null_behavior choice \"ignore\"(default) \"drop\"","title":"Arguments"},{"location":"reference/arr_diff/#value","text":"Expr","title":"Value"},{"location":"reference/arr_diff/#examples","text":"df = pl$DataFrame(list(s = list(1:4,c(10L,2L,1L)))) df$select(pl$col(\"s\")$arr$diff())","title":"Examples"},{"location":"reference/arr_eval/","text":"arr_eval eval sublists (kinda like lapply) Description Run any polars expression against the lists' elements. Format function Arguments Argument Description Expr Expression to run. Note that you can select an element with pl$first() , or pl$col() parallel bool Run all expression parallel. Don't activate this blindly. Parallelism is worth it if there is enough work to do per thread. This likely should not be use in the groupby context, because we already parallel execution per group Value Expr Examples df = pl$DataFrame(a = list(c(1,8,3), b = c(4,5,2))) df$select(pl$all()$cast(pl$dtypes$Int64))$with_column( pl$concat_list(c(\"a\",\"b\"))$arr$eval(pl$element()$rank())$alias(\"rank\") )","title":"`arr_eval`"},{"location":"reference/arr_eval/#arr_eval","text":"eval sublists (kinda like lapply)","title":"arr_eval"},{"location":"reference/arr_eval/#description","text":"Run any polars expression against the lists' elements.","title":"Description"},{"location":"reference/arr_eval/#format","text":"function","title":"Format"},{"location":"reference/arr_eval/#arguments","text":"Argument Description Expr Expression to run. Note that you can select an element with pl$first() , or pl$col() parallel bool Run all expression parallel. Don't activate this blindly. Parallelism is worth it if there is enough work to do per thread. This likely should not be use in the groupby context, because we already parallel execution per group","title":"Arguments"},{"location":"reference/arr_eval/#value","text":"Expr","title":"Value"},{"location":"reference/arr_eval/#examples","text":"df = pl$DataFrame(a = list(c(1,8,3), b = c(4,5,2))) df$select(pl$all()$cast(pl$dtypes$Int64))$with_column( pl$concat_list(c(\"a\",\"b\"))$arr$eval(pl$element()$rank())$alias(\"rank\") )","title":"Examples"},{"location":"reference/arr_first/","text":"arr_first First in sublists Description Get the first value of the sublists. Format function Value Expr Examples df = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) #NULL or integer() or list() df$select(pl$col(\"a\")$arr$first())","title":"`arr_first`"},{"location":"reference/arr_first/#arr_first","text":"First in sublists","title":"arr_first"},{"location":"reference/arr_first/#description","text":"Get the first value of the sublists.","title":"Description"},{"location":"reference/arr_first/#format","text":"function","title":"Format"},{"location":"reference/arr_first/#value","text":"Expr","title":"Value"},{"location":"reference/arr_first/#examples","text":"df = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) #NULL or integer() or list() df$select(pl$col(\"a\")$arr$first())","title":"Examples"},{"location":"reference/arr_get/","text":"arr_get Get list Description Get the value by index in the sublists. Format function Usage list(list(\"[\"), list(\"ExprArrNameSpace\"))(x, index) Arguments Argument Description x ExprArrNameSpace index value to get Details [.ExprArrNameSpace used as e.g. pl$col(\"a\")$arr[0] same as pl$col(\"a\")$get(0) Value Expr Examples df = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) #NULL or integer() or list() df$select(pl$col(\"a\")$arr$get(0)) df$select(pl$col(\"a\")$arr$get(c(2,0,-1))) df = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) #NULL or integer() or list() df$select(pl$col(\"a\")$arr[0]) df$select(pl$col(\"a\")$arr[c(2,0,-1)])","title":"`arr_get`"},{"location":"reference/arr_get/#arr_get","text":"Get list","title":"arr_get"},{"location":"reference/arr_get/#description","text":"Get the value by index in the sublists.","title":"Description"},{"location":"reference/arr_get/#format","text":"function","title":"Format"},{"location":"reference/arr_get/#usage","text":"list(list(\"[\"), list(\"ExprArrNameSpace\"))(x, index)","title":"Usage"},{"location":"reference/arr_get/#arguments","text":"Argument Description x ExprArrNameSpace index value to get","title":"Arguments"},{"location":"reference/arr_get/#details","text":"[.ExprArrNameSpace used as e.g. pl$col(\"a\")$arr[0] same as pl$col(\"a\")$get(0)","title":"Details"},{"location":"reference/arr_get/#value","text":"Expr","title":"Value"},{"location":"reference/arr_get/#examples","text":"df = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) #NULL or integer() or list() df$select(pl$col(\"a\")$arr$get(0)) df$select(pl$col(\"a\")$arr$get(c(2,0,-1))) df = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) #NULL or integer() or list() df$select(pl$col(\"a\")$arr[0]) df$select(pl$col(\"a\")$arr[c(2,0,-1)])","title":"Examples"},{"location":"reference/arr_head/","text":"arr_head Heads of sublists Description head the first n values of every sublist. Format function Arguments Argument Description n Numeric or Expr, number of values to return for each sublist. Value Expr Examples df = pl$DataFrame(list(a = list(1:4, c(10L, 2L, 1L)))) df$select(pl$col(\"a\")$arr$head(2))","title":"`arr_head`"},{"location":"reference/arr_head/#arr_head","text":"Heads of sublists","title":"arr_head"},{"location":"reference/arr_head/#description","text":"head the first n values of every sublist.","title":"Description"},{"location":"reference/arr_head/#format","text":"function","title":"Format"},{"location":"reference/arr_head/#arguments","text":"Argument Description n Numeric or Expr, number of values to return for each sublist.","title":"Arguments"},{"location":"reference/arr_head/#value","text":"Expr","title":"Value"},{"location":"reference/arr_head/#examples","text":"df = pl$DataFrame(list(a = list(1:4, c(10L, 2L, 1L)))) df$select(pl$col(\"a\")$arr$head(2))","title":"Examples"},{"location":"reference/arr_join/","text":"arr_join Join sublists Description Join all string items in a sublist and place a separator between them. This errors if inner type of list != Utf8 . Format function Arguments Argument Description separator string to separate the items with Value Series of dtype Utf8 Examples df = pl$DataFrame(list(s = list(c(\"a\",\"b\",\"c\"), c(\"x\",\"y\")))) df$select(pl$col(\"s\")$arr$join(\" \"))","title":"`arr_join`"},{"location":"reference/arr_join/#arr_join","text":"Join sublists","title":"arr_join"},{"location":"reference/arr_join/#description","text":"Join all string items in a sublist and place a separator between them. This errors if inner type of list != Utf8 .","title":"Description"},{"location":"reference/arr_join/#format","text":"function","title":"Format"},{"location":"reference/arr_join/#arguments","text":"Argument Description separator string to separate the items with","title":"Arguments"},{"location":"reference/arr_join/#value","text":"Series of dtype Utf8","title":"Value"},{"location":"reference/arr_join/#examples","text":"df = pl$DataFrame(list(s = list(c(\"a\",\"b\",\"c\"), c(\"x\",\"y\")))) df$select(pl$col(\"s\")$arr$join(\" \"))","title":"Examples"},{"location":"reference/arr_last/","text":"arr_last Last in sublists Description Get the last value of the sublists. Format function Value Expr Examples df = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) #NULL or integer() or list() df$select(pl$col(\"a\")$arr$last())","title":"`arr_last`"},{"location":"reference/arr_last/#arr_last","text":"Last in sublists","title":"arr_last"},{"location":"reference/arr_last/#description","text":"Get the last value of the sublists.","title":"Description"},{"location":"reference/arr_last/#format","text":"function","title":"Format"},{"location":"reference/arr_last/#value","text":"Expr","title":"Value"},{"location":"reference/arr_last/#examples","text":"df = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) #NULL or integer() or list() df$select(pl$col(\"a\")$arr$last())","title":"Examples"},{"location":"reference/arr_lengths/","text":"arr_lengths Lengths arrays in list Description Get the length of the arrays as UInt32 Format function Value Expr Examples df = pl$DataFrame(list_of_strs = pl$Series(list(c(\"a\",\"b\"),\"c\"))) df$with_column(pl$col(\"list_of_strs\")$arr$lengths()$alias(\"list_of_strs_lengths\"))","title":"`arr_lengths`"},{"location":"reference/arr_lengths/#arr_lengths","text":"Lengths arrays in list","title":"arr_lengths"},{"location":"reference/arr_lengths/#description","text":"Get the length of the arrays as UInt32","title":"Description"},{"location":"reference/arr_lengths/#format","text":"function","title":"Format"},{"location":"reference/arr_lengths/#value","text":"Expr","title":"Value"},{"location":"reference/arr_lengths/#examples","text":"df = pl$DataFrame(list_of_strs = pl$Series(list(c(\"a\",\"b\"),\"c\"))) df$with_column(pl$col(\"list_of_strs\")$arr$lengths()$alias(\"list_of_strs_lengths\"))","title":"Examples"},{"location":"reference/arr_max/","text":"arr_max Max lists Description Compute the max value of the lists in the array. Format function Value Expr Examples df = pl$DataFrame(values = pl$Series(list(1L,2:3))) df$select(pl$col(\"values\")$arr$max())","title":"`arr_max`"},{"location":"reference/arr_max/#arr_max","text":"Max lists","title":"arr_max"},{"location":"reference/arr_max/#description","text":"Compute the max value of the lists in the array.","title":"Description"},{"location":"reference/arr_max/#format","text":"function","title":"Format"},{"location":"reference/arr_max/#value","text":"Expr","title":"Value"},{"location":"reference/arr_max/#examples","text":"df = pl$DataFrame(values = pl$Series(list(1L,2:3))) df$select(pl$col(\"values\")$arr$max())","title":"Examples"},{"location":"reference/arr_mean/","text":"arr_mean Mean of lists Description Compute the mean value of the lists in the array. Format function Value Expr Examples df = pl$DataFrame(values = pl$Series(list(1L,2:3))) df$select(pl$col(\"values\")$arr$mean())","title":"`arr_mean`"},{"location":"reference/arr_mean/#arr_mean","text":"Mean of lists","title":"arr_mean"},{"location":"reference/arr_mean/#description","text":"Compute the mean value of the lists in the array.","title":"Description"},{"location":"reference/arr_mean/#format","text":"function","title":"Format"},{"location":"reference/arr_mean/#value","text":"Expr","title":"Value"},{"location":"reference/arr_mean/#examples","text":"df = pl$DataFrame(values = pl$Series(list(1L,2:3))) df$select(pl$col(\"values\")$arr$mean())","title":"Examples"},{"location":"reference/arr_min/","text":"arr_min ' Min lists Description Compute the min value of the lists in the array. Format function Value Expr Examples df = pl$DataFrame(values = pl$Series(list(1L,2:3))) df$select(pl$col(\"values\")$arr$min())","title":"`arr_min`"},{"location":"reference/arr_min/#arr_min","text":"","title":"arr_min"},{"location":"reference/arr_min/#min-lists","text":"","title":"' Min lists"},{"location":"reference/arr_min/#description","text":"Compute the min value of the lists in the array.","title":"Description"},{"location":"reference/arr_min/#format","text":"function","title":"Format"},{"location":"reference/arr_min/#value","text":"Expr","title":"Value"},{"location":"reference/arr_min/#examples","text":"df = pl$DataFrame(values = pl$Series(list(1L,2:3))) df$select(pl$col(\"values\")$arr$min())","title":"Examples"},{"location":"reference/arr_reverse/","text":"arr_reverse Reverse list Description Reverse the arrays in the list. Format function Value Expr Examples df = pl$DataFrame(list( values = list(3:1, c(9L, 1:2)) )) df$select(pl$col(\"values\")$arr$reverse())","title":"`arr_reverse`"},{"location":"reference/arr_reverse/#arr_reverse","text":"Reverse list","title":"arr_reverse"},{"location":"reference/arr_reverse/#description","text":"Reverse the arrays in the list.","title":"Description"},{"location":"reference/arr_reverse/#format","text":"function","title":"Format"},{"location":"reference/arr_reverse/#value","text":"Expr","title":"Value"},{"location":"reference/arr_reverse/#examples","text":"df = pl$DataFrame(list( values = list(3:1, c(9L, 1:2)) )) df$select(pl$col(\"values\")$arr$reverse())","title":"Examples"},{"location":"reference/arr_shift/","text":"arr_shift Shift sublists Description Shift values by the given period. Format function Arguments Argument Description periods Value. Number of places to shift (may be negative). Value Expr Examples df = pl$DataFrame(list(s = list(1:4,c(10L,2L,1L)))) df$select(pl$col(\"s\")$arr$shift())","title":"`arr_shift`"},{"location":"reference/arr_shift/#arr_shift","text":"Shift sublists","title":"arr_shift"},{"location":"reference/arr_shift/#description","text":"Shift values by the given period.","title":"Description"},{"location":"reference/arr_shift/#format","text":"function","title":"Format"},{"location":"reference/arr_shift/#arguments","text":"Argument Description periods Value. Number of places to shift (may be negative).","title":"Arguments"},{"location":"reference/arr_shift/#value","text":"Expr","title":"Value"},{"location":"reference/arr_shift/#examples","text":"df = pl$DataFrame(list(s = list(1:4,c(10L,2L,1L)))) df$select(pl$col(\"s\")$arr$shift())","title":"Examples"},{"location":"reference/arr_slice/","text":"arr_slice Slice sublists Description Slice every sublist. Format function Arguments Argument Description offset value or Expr. Start index. Negative indexing is supported. length value or Expr. Length of the slice. If set to None (default), the slice is taken to the end of the list. Value Expr Examples df = pl$DataFrame(list(s = list(1:4,c(10L,2L,1L)))) df$select(pl$col(\"s\")$arr$slice(2))","title":"`arr_slice`"},{"location":"reference/arr_slice/#arr_slice","text":"Slice sublists","title":"arr_slice"},{"location":"reference/arr_slice/#description","text":"Slice every sublist.","title":"Description"},{"location":"reference/arr_slice/#format","text":"function","title":"Format"},{"location":"reference/arr_slice/#arguments","text":"Argument Description offset value or Expr. Start index. Negative indexing is supported. length value or Expr. Length of the slice. If set to None (default), the slice is taken to the end of the list.","title":"Arguments"},{"location":"reference/arr_slice/#value","text":"Expr","title":"Value"},{"location":"reference/arr_slice/#examples","text":"df = pl$DataFrame(list(s = list(1:4,c(10L,2L,1L)))) df$select(pl$col(\"s\")$arr$slice(2))","title":"Examples"},{"location":"reference/arr_sort/","text":"arr_sort Get list Description Get the value by index in the sublists. Format function Arguments Argument Description index numeric vector or Expr of length 1 or same length of Series. if length 1 pick same value from each sublist, if length as Series/column, pick by individual index across sublists. So index 0 would return the first item of every sublist and index -1 would return the last item of every sublist if an index is out of bounds, it will return a None . Value Expr Examples df = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) #NULL or integer() or list() df$select(pl$col(\"a\")$arr$get(0)) df$select(pl$col(\"a\")$arr$get(c(2,0,-1)))","title":"`arr_sort`"},{"location":"reference/arr_sort/#arr_sort","text":"Get list","title":"arr_sort"},{"location":"reference/arr_sort/#description","text":"Get the value by index in the sublists.","title":"Description"},{"location":"reference/arr_sort/#format","text":"function","title":"Format"},{"location":"reference/arr_sort/#arguments","text":"Argument Description index numeric vector or Expr of length 1 or same length of Series. if length 1 pick same value from each sublist, if length as Series/column, pick by individual index across sublists. So index 0 would return the first item of every sublist and index -1 would return the last item of every sublist if an index is out of bounds, it will return a None .","title":"Arguments"},{"location":"reference/arr_sort/#value","text":"Expr","title":"Value"},{"location":"reference/arr_sort/#examples","text":"df = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) #NULL or integer() or list() df$select(pl$col(\"a\")$arr$get(0)) df$select(pl$col(\"a\")$arr$get(c(2,0,-1)))","title":"Examples"},{"location":"reference/arr_sum/","text":"arr_sum Sum lists Description Sum all the lists in the array. Format function Value Expr Examples df = pl$DataFrame(values = pl$Series(list(1L,2:3))) df$select(pl$col(\"values\")$arr$sum())","title":"`arr_sum`"},{"location":"reference/arr_sum/#arr_sum","text":"Sum lists","title":"arr_sum"},{"location":"reference/arr_sum/#description","text":"Sum all the lists in the array.","title":"Description"},{"location":"reference/arr_sum/#format","text":"function","title":"Format"},{"location":"reference/arr_sum/#value","text":"Expr","title":"Value"},{"location":"reference/arr_sum/#examples","text":"df = pl$DataFrame(values = pl$Series(list(1L,2:3))) df$select(pl$col(\"values\")$arr$sum())","title":"Examples"},{"location":"reference/arr_tail/","text":"arr_tail Tails of sublists Description tail the first n values of every sublist. Format function Arguments Argument Description n Numeric or Expr, number of values to return for each sublist. Value Expr Examples df = pl$DataFrame(list(a = list(1:4, c(10L, 2L, 1L)))) df$select(pl$col(\"a\")$arr$tail(2))","title":"`arr_tail`"},{"location":"reference/arr_tail/#arr_tail","text":"Tails of sublists","title":"arr_tail"},{"location":"reference/arr_tail/#description","text":"tail the first n values of every sublist.","title":"Description"},{"location":"reference/arr_tail/#format","text":"function","title":"Format"},{"location":"reference/arr_tail/#arguments","text":"Argument Description n Numeric or Expr, number of values to return for each sublist.","title":"Arguments"},{"location":"reference/arr_tail/#value","text":"Expr","title":"Value"},{"location":"reference/arr_tail/#examples","text":"df = pl$DataFrame(list(a = list(1:4, c(10L, 2L, 1L)))) df$select(pl$col(\"a\")$arr$tail(2))","title":"Examples"},{"location":"reference/arr_take/","text":"arr_take take in sublists Description Get the take value of the sublists. Format function Value Expr Examples df = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) #NULL or integer() or list() idx = pl$Series(list(0:1,1L,1L)) df$select(pl$col(\"a\")$arr$take(99))","title":"`arr_take`"},{"location":"reference/arr_take/#arr_take","text":"take in sublists","title":"arr_take"},{"location":"reference/arr_take/#description","text":"Get the take value of the sublists.","title":"Description"},{"location":"reference/arr_take/#format","text":"function","title":"Format"},{"location":"reference/arr_take/#value","text":"Expr","title":"Value"},{"location":"reference/arr_take/#examples","text":"df = pl$DataFrame(list(a = list(3:1, NULL, 1:2))) #NULL or integer() or list() idx = pl$Series(list(0:1,1L,1L)) df$select(pl$col(\"a\")$arr$take(99))","title":"Examples"},{"location":"reference/arr_to_struct/","text":"arr_to_struct List to Struct Description List to Struct Format function Arguments Argument Description n_field_strategy Strategy to determine the number of fields of the struct. default = 'first_non_null' else 'max_width' name_generator an R function that takes a scalar column number and outputs a string value. The default NULL is equivalent to the R function (idx) paste0(\"field_\",idx) upper_bound upper_bound numeric A polars LazyFrame needs to know the schema at all time. The caller therefore must provide an upper_bound of struct fields that will be set. If this is incorrectly downstream operation may fail. For instance an all().sum() expression will look in the current schema to determine which columns to select. It is adviced to set this value in a lazy query. Value Expr Examples df = pl$DataFrame(list(a = list(1:3, 1:2))) df2 = df$select(pl$col(\"a\")$arr$to_struct( name_generator = \\(idx) paste0(\"hello_you_\",idx)) ) df2$unnest() df2$to_list()","title":"`arr_to_struct`"},{"location":"reference/arr_to_struct/#arr_to_struct","text":"List to Struct","title":"arr_to_struct"},{"location":"reference/arr_to_struct/#description","text":"List to Struct","title":"Description"},{"location":"reference/arr_to_struct/#format","text":"function","title":"Format"},{"location":"reference/arr_to_struct/#arguments","text":"Argument Description n_field_strategy Strategy to determine the number of fields of the struct. default = 'first_non_null' else 'max_width' name_generator an R function that takes a scalar column number and outputs a string value. The default NULL is equivalent to the R function (idx) paste0(\"field_\",idx) upper_bound upper_bound numeric A polars LazyFrame needs to know the schema at all time. The caller therefore must provide an upper_bound of struct fields that will be set. If this is incorrectly downstream operation may fail. For instance an all().sum() expression will look in the current schema to determine which columns to select. It is adviced to set this value in a lazy query.","title":"Arguments"},{"location":"reference/arr_to_struct/#value","text":"Expr","title":"Value"},{"location":"reference/arr_to_struct/#examples","text":"df = pl$DataFrame(list(a = list(1:3, 1:2))) df2 = df$select(pl$col(\"a\")$arr$to_struct( name_generator = \\(idx) paste0(\"hello_you_\",idx)) ) df2$unnest() df2$to_list()","title":"Examples"},{"location":"reference/arr_unique/","text":"arr_unique Unique list Description Get the unique/distinct values in the list. Format function Value Expr Examples df = pl$DataFrame(list(a = list(1, 1, 2))) df$select(pl$col(\"a\")$arr$unique())","title":"`arr_unique`"},{"location":"reference/arr_unique/#arr_unique","text":"Unique list","title":"arr_unique"},{"location":"reference/arr_unique/#description","text":"Get the unique/distinct values in the list.","title":"Description"},{"location":"reference/arr_unique/#format","text":"function","title":"Format"},{"location":"reference/arr_unique/#value","text":"Expr","title":"Value"},{"location":"reference/arr_unique/#examples","text":"df = pl$DataFrame(list(a = list(1, 1, 2))) df$select(pl$col(\"a\")$arr$unique())","title":"Examples"},{"location":"reference/c.Series/","text":"c.Series Immutable combine series Description Immutable combine series Usage list(list(\"c\"), list(\"Series\"))(x, ...) Arguments Argument Description x a Series ... Series(s) or any object into Series meaning pl$Series(object) returns a series Details append datatypes has to match. Combine does not rechunk. Read more about R vectors, Series and chunks in docs_translations : Value a combined Series Examples s = c(pl$Series(1:5),3:1,NA_integer_) s$chunk_lengths() #the series contain three unmerged chunks","title":"`c.Series`"},{"location":"reference/c.Series/#cseries","text":"Immutable combine series","title":"c.Series"},{"location":"reference/c.Series/#description","text":"Immutable combine series","title":"Description"},{"location":"reference/c.Series/#usage","text":"list(list(\"c\"), list(\"Series\"))(x, ...)","title":"Usage"},{"location":"reference/c.Series/#arguments","text":"Argument Description x a Series ... Series(s) or any object into Series meaning pl$Series(object) returns a series","title":"Arguments"},{"location":"reference/c.Series/#details","text":"append datatypes has to match. Combine does not rechunk. Read more about R vectors, Series and chunks in docs_translations :","title":"Details"},{"location":"reference/c.Series/#value","text":"a combined Series","title":"Value"},{"location":"reference/c.Series/#examples","text":"s = c(pl$Series(1:5),3:1,NA_integer_) s$chunk_lengths() #the series contain three unmerged chunks","title":"Examples"},{"location":"reference/cash-set-.DataFrame/","text":"$<-.DataFrame generic setter method Description set value of properties of DataFrames Usage list(list(\"$\"), list(\"DataFrame\"))(self, name) <- value Arguments Argument Description self DataFrame name name method/property to set value value to insert Details settable polars object properties may appear to be R objects, but they are not. See [[method_name]] example Value value Examples #For internal use #is only activated for following methods of DataFrame ls(polars:::DataFrame.property_setters) #specific use case for one object property 'columns' (names) df = pl$DataFrame(iris) #get values df$columns #set + get values df$columns = letters[1:5] #<- is fine too df$columns # Rstudio is not using the standard R code completion tool # and it will backtick any special characters. It is possible # to completely customize the R / Rstudio code completion except # it will trigger Rstudio to backtick any completion! Also R does # not support package isolated customization. #Concrete example if tabbing on 'df$' the raw R suggestion is df$columns<- #however Rstudio backticks it into df$`columns<-` #to make life simple, this is valid polars syntax also, and can be used in fast scripting df$`columns<-` = letters[5:1] #for stable code prefer e.g. df$columns = letters[5:1] #to see inside code of a property use the [[]] syntax instead df[[\"columns\"]] # to see property code, .pr is the internal polars api into rust polars polars:::DataFrame.property_setters$columns #and even more obscure to see setter code","title":"`$<-.DataFrame`"},{"location":"reference/cash-set-.DataFrame/#-dataframe","text":"generic setter method","title":"$&lt;-.DataFrame"},{"location":"reference/cash-set-.DataFrame/#description","text":"set value of properties of DataFrames","title":"Description"},{"location":"reference/cash-set-.DataFrame/#usage","text":"list(list(\"$\"), list(\"DataFrame\"))(self, name) <- value","title":"Usage"},{"location":"reference/cash-set-.DataFrame/#arguments","text":"Argument Description self DataFrame name name method/property to set value value to insert","title":"Arguments"},{"location":"reference/cash-set-.DataFrame/#details","text":"settable polars object properties may appear to be R objects, but they are not. See [[method_name]] example","title":"Details"},{"location":"reference/cash-set-.DataFrame/#value","text":"value","title":"Value"},{"location":"reference/cash-set-.DataFrame/#examples","text":"#For internal use #is only activated for following methods of DataFrame ls(polars:::DataFrame.property_setters) #specific use case for one object property 'columns' (names) df = pl$DataFrame(iris) #get values df$columns #set + get values df$columns = letters[1:5] #<- is fine too df$columns # Rstudio is not using the standard R code completion tool # and it will backtick any special characters. It is possible # to completely customize the R / Rstudio code completion except # it will trigger Rstudio to backtick any completion! Also R does # not support package isolated customization. #Concrete example if tabbing on 'df$' the raw R suggestion is df$columns<- #however Rstudio backticks it into df$`columns<-` #to make life simple, this is valid polars syntax also, and can be used in fast scripting df$`columns<-` = letters[5:1] #for stable code prefer e.g. df$columns = letters[5:1] #to see inside code of a property use the [[]] syntax instead df[[\"columns\"]] # to see property code, .pr is the internal polars api into rust polars polars:::DataFrame.property_setters$columns #and even more obscure to see setter code","title":"Examples"},{"location":"reference/check_no_missing_args/","text":"check_no_missing_args check_no_missing_args Description lifecycle: DEPRECATE Usage check_no_missing_args(fun, args, warn = TRUE) Arguments Argument Description fun target function to check incomming arguments for args list of args to check warn bool if TRUE throw warning when check fails Value true if args are correct","title":"`check_no_missing_args`"},{"location":"reference/check_no_missing_args/#check_no_missing_args","text":"check_no_missing_args","title":"check_no_missing_args"},{"location":"reference/check_no_missing_args/#description","text":"lifecycle: DEPRECATE","title":"Description"},{"location":"reference/check_no_missing_args/#usage","text":"check_no_missing_args(fun, args, warn = TRUE)","title":"Usage"},{"location":"reference/check_no_missing_args/#arguments","text":"Argument Description fun target function to check incomming arguments for args list of args to check warn bool if TRUE throw warning when check fails","title":"Arguments"},{"location":"reference/check_no_missing_args/#value","text":"true if args are correct","title":"Value"},{"location":"reference/check_tz_to_result/","text":"check_tz_to_result Verify correct time zone Description Verify correct time zone Usage check_tz_to_result(tz, allow_null = TRUE) Arguments Argument Description tz time zone string or NULL allow_null bool, if TRUE accept NULL Value a result object, with either a valid string or an Err Examples check_tz_to_result = polars:::check_tz_to_result # expose internal #return Ok check_tz_to_result(\"GMT\") check_tz_to_result(NULL) #return Err check_tz_to_result(\"Alice\") check_tz_to_result(42) check_tz_to_result(NULL, allow_null = FALSE)","title":"`check_tz_to_result`"},{"location":"reference/check_tz_to_result/#check_tz_to_result","text":"Verify correct time zone","title":"check_tz_to_result"},{"location":"reference/check_tz_to_result/#description","text":"Verify correct time zone","title":"Description"},{"location":"reference/check_tz_to_result/#usage","text":"check_tz_to_result(tz, allow_null = TRUE)","title":"Usage"},{"location":"reference/check_tz_to_result/#arguments","text":"Argument Description tz time zone string or NULL allow_null bool, if TRUE accept NULL","title":"Arguments"},{"location":"reference/check_tz_to_result/#value","text":"a result object, with either a valid string or an Err","title":"Value"},{"location":"reference/check_tz_to_result/#examples","text":"check_tz_to_result = polars:::check_tz_to_result # expose internal #return Ok check_tz_to_result(\"GMT\") check_tz_to_result(NULL) #return Err check_tz_to_result(\"Alice\") check_tz_to_result(42) check_tz_to_result(NULL, allow_null = FALSE)","title":"Examples"},{"location":"reference/clone_env_one_level_deep/","text":"clone_env_one_level_deep Clone env on level deep. Description Clone env on level deep. Usage clone_env_one_level_deep(env) Arguments Argument Description env an R environment. Details Sometimes used in polars to produce different hashmaps(environments) containing some of the same, but not all elements. environments are used for collections of methods and types. This function can be used to make a parallel collection pointing to some of the same types. Simply copying an environment, does apparently not spawn a new hashmap, and therefore the collections stay identical. Value shallow clone of R environment Examples fruit_env = new.env(parent = emptyenv()) fruit_env$banana = TRUE fruit_env$apple = FALSE env_1 = new.env(parent = emptyenv()) env_1$fruit_env = fruit_env env_naive_copy = env_1 env_shallow_clone = polars:::clone_env_one_level_deep(env_1) #modifying env_! env_1$minerals = new.env(parent = emptyenv()) env_1$fruit_env$apple = 42L #naive copy is fully identical to env_1, so copying it not much useful ls(env_naive_copy) #shallow copy env does not have minerals ls(env_shallow_clone) #however shallow clone does subscribe to changes to fruits as they were there # at time of cloning env_shallow_clone$fruit_env$apple","title":"`clone_env_one_level_deep`"},{"location":"reference/clone_env_one_level_deep/#clone_env_one_level_deep","text":"Clone env on level deep.","title":"clone_env_one_level_deep"},{"location":"reference/clone_env_one_level_deep/#description","text":"Clone env on level deep.","title":"Description"},{"location":"reference/clone_env_one_level_deep/#usage","text":"clone_env_one_level_deep(env)","title":"Usage"},{"location":"reference/clone_env_one_level_deep/#arguments","text":"Argument Description env an R environment.","title":"Arguments"},{"location":"reference/clone_env_one_level_deep/#details","text":"Sometimes used in polars to produce different hashmaps(environments) containing some of the same, but not all elements. environments are used for collections of methods and types. This function can be used to make a parallel collection pointing to some of the same types. Simply copying an environment, does apparently not spawn a new hashmap, and therefore the collections stay identical.","title":"Details"},{"location":"reference/clone_env_one_level_deep/#value","text":"shallow clone of R environment","title":"Value"},{"location":"reference/clone_env_one_level_deep/#examples","text":"fruit_env = new.env(parent = emptyenv()) fruit_env$banana = TRUE fruit_env$apple = FALSE env_1 = new.env(parent = emptyenv()) env_1$fruit_env = fruit_env env_naive_copy = env_1 env_shallow_clone = polars:::clone_env_one_level_deep(env_1) #modifying env_! env_1$minerals = new.env(parent = emptyenv()) env_1$fruit_env$apple = 42L #naive copy is fully identical to env_1, so copying it not much useful ls(env_naive_copy) #shallow copy env does not have minerals ls(env_shallow_clone) #however shallow clone does subscribe to changes to fruits as they were there # at time of cloning env_shallow_clone$fruit_env$apple","title":"Examples"},{"location":"reference/coalesce/","text":"coalesce Coalesce Description Folds the expressions from left to right, keeping the first non-null value. Folds the expressions from left to right, keeping the first non-null value. Arguments Argument Description ... is a: If one arg: Series or Expr, same as column$sum() string, same as pl$col(column)$sum() numeric, same as pl$lit(column)$sum() list of strings(column names) or exprressions to add up as expr1 + expr2 + expr3 + ... If several args, then wrapped in a list and handled as above. exprs | list of Expr or Series or strings or a mix, or a char vector Value Expr Expr Examples df = pl$DataFrame( a = NA_real_, b = c(1:2,NA_real_,NA_real_), c = c(1:3,NA_real_) ) #use coalesce to get first non Null value for each row, otherwise insert 99.9 df$with_column( pl$coalesce(\"a\", \"b\", \"c\", 99.9)$alias(\"d\") ) #Create lagged columns and collect them into a list. This mimics a rolling window. df = pl$DataFrame(A = c(1,2,9,2,13)) df$with_columns(lapply( 0:2, \\(i) pl$col(\"A\")$shift(i)$alias(paste0(\"A_lag_\",i)) ))$select( pl$concat_list(lapply(2:0,\\(i) pl$col(paste0(\"A_lag_\",i))))$alias( \"A_rolling\" ) ) #concat Expr a Series and an R obejct pl$concat_list(list( pl$lit(1:5), pl$Series(5:1), rep(0L,5) ))$alias(\"alice\")$lit_to_s()","title":"`coalesce`"},{"location":"reference/coalesce/#coalesce","text":"Coalesce","title":"coalesce"},{"location":"reference/coalesce/#description","text":"Folds the expressions from left to right, keeping the first non-null value. Folds the expressions from left to right, keeping the first non-null value.","title":"Description"},{"location":"reference/coalesce/#arguments","text":"Argument Description ... is a: If one arg: Series or Expr, same as column$sum() string, same as pl$col(column)$sum() numeric, same as pl$lit(column)$sum() list of strings(column names) or exprressions to add up as expr1 + expr2 + expr3 + ... If several args, then wrapped in a list and handled as above. exprs | list of Expr or Series or strings or a mix, or a char vector","title":"Arguments"},{"location":"reference/coalesce/#value","text":"Expr Expr","title":"Value"},{"location":"reference/coalesce/#examples","text":"df = pl$DataFrame( a = NA_real_, b = c(1:2,NA_real_,NA_real_), c = c(1:3,NA_real_) ) #use coalesce to get first non Null value for each row, otherwise insert 99.9 df$with_column( pl$coalesce(\"a\", \"b\", \"c\", 99.9)$alias(\"d\") ) #Create lagged columns and collect them into a list. This mimics a rolling window. df = pl$DataFrame(A = c(1,2,9,2,13)) df$with_columns(lapply( 0:2, \\(i) pl$col(\"A\")$shift(i)$alias(paste0(\"A_lag_\",i)) ))$select( pl$concat_list(lapply(2:0,\\(i) pl$col(paste0(\"A_lag_\",i))))$alias( \"A_rolling\" ) ) #concat Expr a Series and an R obejct pl$concat_list(list( pl$lit(1:5), pl$Series(5:1), rep(0L,5) ))$alias(\"alice\")$lit_to_s()","title":"Examples"},{"location":"reference/col/","text":"col Start Expression with a column Description Return an expression representing a column in a DataFrame. Arguments Argument Description name a single column by a string all columns by using a wildcard \"*\" multiple columns as vector of strings column by regular expression if the regex starts with ^ and ends with $ e.g. pl$DataFrame(iris)$select(pl$col(c(\"^Sepal.*$\"))) a single DataType or an R list of DataTypes, select any column of any such DataType Series of utf8 strings abiding to above options Value Column Exprression Examples df = pl$DataFrame(list(foo=1, bar=2L,foobar=\"3\")) #a single column by a string df$select(pl$col(\"foo\")) #all columns by wildcard df$select(pl$col(\"*\")) df$select(pl$all()) #multiple columns as vector of strings df$select(pl$col(c(\"foo\",\"bar\"))) #column by regular expression if the regex starts with `^` and ends with `$` df$select(pl$col(\"^foo.*$\")) #a single DataType df$select(pl$col(pl$dtypes$Float64)) # ... or an R list of DataTypes, select any column of any such DataType df$select(pl$col(list(pl$dtypes$Float64, pl$dtypes$Utf8))) # from Series of names df$select(pl$col(pl$Series(c(\"bar\",\"foobar\"))))","title":"`col`"},{"location":"reference/col/#col","text":"Start Expression with a column","title":"col"},{"location":"reference/col/#description","text":"Return an expression representing a column in a DataFrame.","title":"Description"},{"location":"reference/col/#arguments","text":"Argument Description name a single column by a string all columns by using a wildcard \"*\" multiple columns as vector of strings column by regular expression if the regex starts with ^ and ends with $ e.g. pl$DataFrame(iris)$select(pl$col(c(\"^Sepal.*$\"))) a single DataType or an R list of DataTypes, select any column of any such DataType Series of utf8 strings abiding to above options","title":"Arguments"},{"location":"reference/col/#value","text":"Column Exprression","title":"Value"},{"location":"reference/col/#examples","text":"df = pl$DataFrame(list(foo=1, bar=2L,foobar=\"3\")) #a single column by a string df$select(pl$col(\"foo\")) #all columns by wildcard df$select(pl$col(\"*\")) df$select(pl$all()) #multiple columns as vector of strings df$select(pl$col(c(\"foo\",\"bar\"))) #column by regular expression if the regex starts with `^` and ends with `$` df$select(pl$col(\"^foo.*$\")) #a single DataType df$select(pl$col(pl$dtypes$Float64)) # ... or an R list of DataTypes, select any column of any such DataType df$select(pl$col(list(pl$dtypes$Float64, pl$dtypes$Utf8))) # from Series of names df$select(pl$col(pl$Series(c(\"bar\",\"foobar\"))))","title":"Examples"},{"location":"reference/construct_DataTypeVector/","text":"construct_DataTypeVector construct data type vector Description lifecycle: Deprecate, move to rust side Usage construct_DataTypeVector(l) Arguments Argument Description l list of Expr or string Value extptr to rust vector of RPolarsDataType's","title":"`construct_DataTypeVector`"},{"location":"reference/construct_DataTypeVector/#construct_datatypevector","text":"construct data type vector","title":"construct_DataTypeVector"},{"location":"reference/construct_DataTypeVector/#description","text":"lifecycle: Deprecate, move to rust side","title":"Description"},{"location":"reference/construct_DataTypeVector/#usage","text":"construct_DataTypeVector(l)","title":"Usage"},{"location":"reference/construct_DataTypeVector/#arguments","text":"Argument Description l list of Expr or string","title":"Arguments"},{"location":"reference/construct_DataTypeVector/#value","text":"extptr to rust vector of RPolarsDataType's","title":"Value"},{"location":"reference/construct_ProtoExprArray/","text":"construct_ProtoExprArray construct proto Expr array from args Description construct proto Expr array from args Usage construct_ProtoExprArray(...) Arguments Argument Description ... any Expr or string Value ProtoExprArray object Examples polars:::construct_ProtoExprArray(pl$col(\"Species\"),\"Sepal.Width\")","title":"`construct_ProtoExprArray`"},{"location":"reference/construct_ProtoExprArray/#construct_protoexprarray","text":"construct proto Expr array from args","title":"construct_ProtoExprArray"},{"location":"reference/construct_ProtoExprArray/#description","text":"construct proto Expr array from args","title":"Description"},{"location":"reference/construct_ProtoExprArray/#usage","text":"construct_ProtoExprArray(...)","title":"Usage"},{"location":"reference/construct_ProtoExprArray/#arguments","text":"Argument Description ... any Expr or string","title":"Arguments"},{"location":"reference/construct_ProtoExprArray/#value","text":"ProtoExprArray object","title":"Value"},{"location":"reference/construct_ProtoExprArray/#examples","text":"polars:::construct_ProtoExprArray(pl$col(\"Species\"),\"Sepal.Width\")","title":"Examples"},{"location":"reference/docs_translations/","text":"docs_translations Translation definitions across python, R and polars. Description Comments for how the R and python world translates into polars: R and python are both high-level glue languages great for Data Science. Rust is a pedantic low-level language with similar use cases as C and C++. Polars is written in ~100k lines of rust and has a rust API. Py-polars the python API for polars, is implemented as an interface with the rust API. r-polars is very parallel to py-polars except it interfaces with R. The performance and behavior are unexpectedly quite similar as the 'engine' is the exact same rust code and data structures. Format info","title":"`docs_translations`"},{"location":"reference/docs_translations/#docs_translations","text":"Translation definitions across python, R and polars.","title":"docs_translations"},{"location":"reference/docs_translations/#description","text":"","title":"Description"},{"location":"reference/docs_translations/#comments-for-how-the-r-and-python-world-translates-into-polars","text":"R and python are both high-level glue languages great for Data Science. Rust is a pedantic low-level language with similar use cases as C and C++. Polars is written in ~100k lines of rust and has a rust API. Py-polars the python API for polars, is implemented as an interface with the rust API. r-polars is very parallel to py-polars except it interfaces with R. The performance and behavior are unexpectedly quite similar as the 'engine' is the exact same rust code and data structures.","title":"Comments for how the R and python world translates into polars:"},{"location":"reference/docs_translations/#format","text":"info","title":"Format"},{"location":"reference/dot-DollarNames.DataFrame/","text":".DollarNames.DataFrame auto complete $-access into a polars object Description called by the interactive R session internally Usage list(list(\".DollarNames\"), list(\"DataFrame\"))(x, pattern = \"\") Arguments Argument Description x DataFrame pattern code-stump as string to auto-complete","title":"`.DollarNames.DataFrame`"},{"location":"reference/dot-DollarNames.DataFrame/#dollarnamesdataframe","text":"auto complete $-access into a polars object","title":".DollarNames.DataFrame"},{"location":"reference/dot-DollarNames.DataFrame/#description","text":"called by the interactive R session internally","title":"Description"},{"location":"reference/dot-DollarNames.DataFrame/#usage","text":"list(list(\".DollarNames\"), list(\"DataFrame\"))(x, pattern = \"\")","title":"Usage"},{"location":"reference/dot-DollarNames.DataFrame/#arguments","text":"Argument Description x DataFrame pattern code-stump as string to auto-complete","title":"Arguments"},{"location":"reference/dot-DollarNames.Expr/","text":".DollarNames.Expr auto complete $-access into a polars object Description called by the interactive R session internally Usage list(list(\".DollarNames\"), list(\"Expr\"))(x, pattern = \"\") Arguments Argument Description x Expr pattern code-stump as string to auto-complete","title":"`.DollarNames.Expr`"},{"location":"reference/dot-DollarNames.Expr/#dollarnamesexpr","text":"auto complete $-access into a polars object","title":".DollarNames.Expr"},{"location":"reference/dot-DollarNames.Expr/#description","text":"called by the interactive R session internally","title":"Description"},{"location":"reference/dot-DollarNames.Expr/#usage","text":"list(list(\".DollarNames\"), list(\"Expr\"))(x, pattern = \"\")","title":"Usage"},{"location":"reference/dot-DollarNames.Expr/#arguments","text":"Argument Description x Expr pattern code-stump as string to auto-complete","title":"Arguments"},{"location":"reference/dot-DollarNames.GroupBy/","text":".DollarNames.GroupBy auto complete $-access into a polars object Description called by the interactive R session internally Usage list(list(\".DollarNames\"), list(\"GroupBy\"))(x, pattern = \"\") Arguments Argument Description x GroupBy pattern code-stump as string to auto-complete","title":"`.DollarNames.GroupBy`"},{"location":"reference/dot-DollarNames.GroupBy/#dollarnamesgroupby","text":"auto complete $-access into a polars object","title":".DollarNames.GroupBy"},{"location":"reference/dot-DollarNames.GroupBy/#description","text":"called by the interactive R session internally","title":"Description"},{"location":"reference/dot-DollarNames.GroupBy/#usage","text":"list(list(\".DollarNames\"), list(\"GroupBy\"))(x, pattern = \"\")","title":"Usage"},{"location":"reference/dot-DollarNames.GroupBy/#arguments","text":"Argument Description x GroupBy pattern code-stump as string to auto-complete","title":"Arguments"},{"location":"reference/dot-DollarNames.LazyFrame/","text":".DollarNames.LazyFrame auto complete $-access into a polars object Description called by the interactive R session internally Usage list(list(\".DollarNames\"), list(\"LazyFrame\"))(x, pattern = \"\") Arguments Argument Description x LazyFrame pattern code-stump as string to auto-complete","title":"`.DollarNames.LazyFrame`"},{"location":"reference/dot-DollarNames.LazyFrame/#dollarnameslazyframe","text":"auto complete $-access into a polars object","title":".DollarNames.LazyFrame"},{"location":"reference/dot-DollarNames.LazyFrame/#description","text":"called by the interactive R session internally","title":"Description"},{"location":"reference/dot-DollarNames.LazyFrame/#usage","text":"list(list(\".DollarNames\"), list(\"LazyFrame\"))(x, pattern = \"\")","title":"Usage"},{"location":"reference/dot-DollarNames.LazyFrame/#arguments","text":"Argument Description x LazyFrame pattern code-stump as string to auto-complete","title":"Arguments"},{"location":"reference/dot-DollarNames.PolarsBackgroundHandle/","text":".DollarNames.PolarsBackgroundHandle auto complete $-access into a polars object Description called by the interactive R session internally Usage list(list(\".DollarNames\"), list(\"PolarsBackgroundHandle\"))(x, pattern = \"\") Arguments Argument Description x LazyFrame pattern code-stump as string to auto-complete","title":"`.DollarNames.PolarsBackgroundHandle`"},{"location":"reference/dot-DollarNames.PolarsBackgroundHandle/#dollarnamespolarsbackgroundhandle","text":"auto complete $-access into a polars object","title":".DollarNames.PolarsBackgroundHandle"},{"location":"reference/dot-DollarNames.PolarsBackgroundHandle/#description","text":"called by the interactive R session internally","title":"Description"},{"location":"reference/dot-DollarNames.PolarsBackgroundHandle/#usage","text":"list(list(\".DollarNames\"), list(\"PolarsBackgroundHandle\"))(x, pattern = \"\")","title":"Usage"},{"location":"reference/dot-DollarNames.PolarsBackgroundHandle/#arguments","text":"Argument Description x LazyFrame pattern code-stump as string to auto-complete","title":"Arguments"},{"location":"reference/dot-DollarNames.Series/","text":".DollarNames.Series auto complete $-access into a polars object Description called by the interactive R session internally Usage list(list(\".DollarNames\"), list(\"Series\"))(x, pattern = \"\") Arguments Argument Description x Series pattern code-stump as string to auto-complete","title":"`.DollarNames.Series`"},{"location":"reference/dot-DollarNames.Series/#dollarnamesseries","text":"auto complete $-access into a polars object","title":".DollarNames.Series"},{"location":"reference/dot-DollarNames.Series/#description","text":"called by the interactive R session internally","title":"Description"},{"location":"reference/dot-DollarNames.Series/#usage","text":"list(list(\".DollarNames\"), list(\"Series\"))(x, pattern = \"\")","title":"Usage"},{"location":"reference/dot-DollarNames.Series/#arguments","text":"Argument Description x Series pattern code-stump as string to auto-complete","title":"Arguments"},{"location":"reference/dot-DollarNames.VecDataFrame/","text":".DollarNames.VecDataFrame auto complete $-access into a polars object Description called by the interactive R session internally Usage list(list(\".DollarNames\"), list(\"VecDataFrame\"))(x, pattern = \"\") Arguments Argument Description x VecDataFrame pattern code-stump as string to auto-complete","title":"`.DollarNames.VecDataFrame`"},{"location":"reference/dot-DollarNames.VecDataFrame/#dollarnamesvecdataframe","text":"auto complete $-access into a polars object","title":".DollarNames.VecDataFrame"},{"location":"reference/dot-DollarNames.VecDataFrame/#description","text":"called by the interactive R session internally","title":"Description"},{"location":"reference/dot-DollarNames.VecDataFrame/#usage","text":"list(list(\".DollarNames\"), list(\"VecDataFrame\"))(x, pattern = \"\")","title":"Usage"},{"location":"reference/dot-DollarNames.VecDataFrame/#arguments","text":"Argument Description x VecDataFrame pattern code-stump as string to auto-complete","title":"Arguments"},{"location":"reference/dot-DollarNames.When/","text":".DollarNames.When auto complete $-access into a polars object Description called by the interactive R session internally Usage list(list(\".DollarNames\"), list(\"When\"))(x, pattern = \"\") Arguments Argument Description x When pattern code-stump as string to auto-complete","title":"`.DollarNames.When`"},{"location":"reference/dot-DollarNames.When/#dollarnameswhen","text":"auto complete $-access into a polars object","title":".DollarNames.When"},{"location":"reference/dot-DollarNames.When/#description","text":"called by the interactive R session internally","title":"Description"},{"location":"reference/dot-DollarNames.When/#usage","text":"list(list(\".DollarNames\"), list(\"When\"))(x, pattern = \"\")","title":"Usage"},{"location":"reference/dot-DollarNames.When/#arguments","text":"Argument Description x When pattern code-stump as string to auto-complete","title":"Arguments"},{"location":"reference/dot-DollarNames.WhenThen/","text":".DollarNames.WhenThen auto complete $-access into a polars object Description called by the interactive R session internally Usage list(list(\".DollarNames\"), list(\"WhenThen\"))(x, pattern = \"\") Arguments Argument Description x WhenThen pattern code-stump as string to auto-complete","title":"`.DollarNames.WhenThen`"},{"location":"reference/dot-DollarNames.WhenThen/#dollarnameswhenthen","text":"auto complete $-access into a polars object","title":".DollarNames.WhenThen"},{"location":"reference/dot-DollarNames.WhenThen/#description","text":"called by the interactive R session internally","title":"Description"},{"location":"reference/dot-DollarNames.WhenThen/#usage","text":"list(list(\".DollarNames\"), list(\"WhenThen\"))(x, pattern = \"\")","title":"Usage"},{"location":"reference/dot-DollarNames.WhenThen/#arguments","text":"Argument Description x WhenThen pattern code-stump as string to auto-complete","title":"Arguments"},{"location":"reference/dot-DollarNames.WhenThenThen/","text":".DollarNames.WhenThenThen auto complete $-access into a polars object Description called by the interactive R session internally Usage list(list(\".DollarNames\"), list(\"WhenThenThen\"))(x, pattern = \"\") Arguments Argument Description x WhenThenThen pattern code-stump as string to auto-complete","title":"`.DollarNames.WhenThenThen`"},{"location":"reference/dot-DollarNames.WhenThenThen/#dollarnameswhenthenthen","text":"auto complete $-access into a polars object","title":".DollarNames.WhenThenThen"},{"location":"reference/dot-DollarNames.WhenThenThen/#description","text":"called by the interactive R session internally","title":"Description"},{"location":"reference/dot-DollarNames.WhenThenThen/#usage","text":"list(list(\".DollarNames\"), list(\"WhenThenThen\"))(x, pattern = \"\")","title":"Usage"},{"location":"reference/dot-DollarNames.WhenThenThen/#arguments","text":"Argument Description x WhenThenThen pattern code-stump as string to auto-complete","title":"Arguments"},{"location":"reference/dot-pr/","text":".pr polars-API: private calls to rust-polars Description .pr Original extendr bindings converted into pure functions Format An object of class environment of length 16. Usage .pr Examples #.pr$DataFrame$print() is an external function where self is passed as arg polars:::.pr$DataFrame$print(self = pl$DataFrame(iris)) polars:::print_env(.pr,\".pr the collection of private method calls to rust-polars\")","title":"`.pr`"},{"location":"reference/dot-pr/#pr","text":"polars-API: private calls to rust-polars","title":".pr"},{"location":"reference/dot-pr/#description","text":".pr Original extendr bindings converted into pure functions","title":"Description"},{"location":"reference/dot-pr/#format","text":"An object of class environment of length 16.","title":"Format"},{"location":"reference/dot-pr/#usage","text":".pr","title":"Usage"},{"location":"reference/dot-pr/#examples","text":"#.pr$DataFrame$print() is an external function where self is passed as arg polars:::.pr$DataFrame$print(self = pl$DataFrame(iris)) polars:::print_env(.pr,\".pr the collection of private method calls to rust-polars\")","title":"Examples"},{"location":"reference/element/","text":"element an element in 'eval'-expr Description Alias for an element in evaluated in an eval expression. Value Expr Examples pl$lit(1:5)$cumulative_eval(pl$element()$first()-pl$element()$last() ** 2)$to_r()","title":"`element`"},{"location":"reference/element/#element","text":"an element in 'eval'-expr","title":"element"},{"location":"reference/element/#description","text":"Alias for an element in evaluated in an eval expression.","title":"Description"},{"location":"reference/element/#value","text":"Expr","title":"Value"},{"location":"reference/element/#examples","text":"pl$lit(1:5)$cumulative_eval(pl$element()$first()-pl$element()$last() ** 2)$to_r()","title":"Examples"},{"location":"reference/extendr_method_to_pure_functions/","text":"extendr_method_to_pure_functions extendr methods into pure functions Description self is a global of extendr wrapper methods this function copies the function into a new environment and modify formals to have a self argument Usage extendr_method_to_pure_functions(env) Arguments Argument Description env environment object output from extendr-wrappers.R classes Value env of pure function calls to rust","title":"`extendr_method_to_pure_functions`"},{"location":"reference/extendr_method_to_pure_functions/#extendr_method_to_pure_functions","text":"extendr methods into pure functions","title":"extendr_method_to_pure_functions"},{"location":"reference/extendr_method_to_pure_functions/#description","text":"self is a global of extendr wrapper methods this function copies the function into a new environment and modify formals to have a self argument","title":"Description"},{"location":"reference/extendr_method_to_pure_functions/#usage","text":"extendr_method_to_pure_functions(env)","title":"Usage"},{"location":"reference/extendr_method_to_pure_functions/#arguments","text":"Argument Description env environment object output from extendr-wrappers.R classes","title":"Arguments"},{"location":"reference/extendr_method_to_pure_functions/#value","text":"env of pure function calls to rust","title":"Value"},{"location":"reference/extra_auto_completion/","text":"extra_auto_completion Extra polars auto completion Description Extra polars auto completion Arguments Argument Description activate bool default TRUE, enable chained auto-completion Details polars always supports auto completetion via .DollarNames. However chained methods like x$a()$b()$? are not supported vi .DollarNames. This feature experimental and not perfect. Any feedback is appreciated. Currently does not play that nice with Rstudio, as Rstudio backtick quotes any custom suggestions. Examples #auto completion via .DollarNames method e = pl$lit(42) # to autocomplete pl$lit(42) save to variable # then write `e$` and press tab to see available methods # polars has experimental auto completetion for chain of methods if all on the same line pl$extra_auto_completion() #first activate feature (this will 'annoy' the Rstudio auto-completer) pl$lit(42)$lit_to_s() # add a $ and press tab 1-3 times pl$extra_auto_completion(activate = FALSE) #deactivate","title":"`extra_auto_completion`"},{"location":"reference/extra_auto_completion/#extra_auto_completion","text":"Extra polars auto completion","title":"extra_auto_completion"},{"location":"reference/extra_auto_completion/#description","text":"Extra polars auto completion","title":"Description"},{"location":"reference/extra_auto_completion/#arguments","text":"Argument Description activate bool default TRUE, enable chained auto-completion","title":"Arguments"},{"location":"reference/extra_auto_completion/#details","text":"polars always supports auto completetion via .DollarNames. However chained methods like x$a()$b()$? are not supported vi .DollarNames. This feature experimental and not perfect. Any feedback is appreciated. Currently does not play that nice with Rstudio, as Rstudio backtick quotes any custom suggestions.","title":"Details"},{"location":"reference/extra_auto_completion/#examples","text":"#auto completion via .DollarNames method e = pl$lit(42) # to autocomplete pl$lit(42) save to variable # then write `e$` and press tab to see available methods # polars has experimental auto completetion for chain of methods if all on the same line pl$extra_auto_completion() #first activate feature (this will 'annoy' the Rstudio auto-completer) pl$lit(42)$lit_to_s() # add a $ and press tab 1-3 times pl$extra_auto_completion(activate = FALSE) #deactivate","title":"Examples"},{"location":"reference/filter-open-paren-close-paren/","text":"filter() filter DataFrame Description DataFrame$filter(bool_expr) Usage DataFrame_filter(bool_expr) Arguments Argument Description bool_expr Polars expression which will evaluate to a bool pl$Series Value filtered DataFrame Examples pl$DataFrame(iris)$lazy()$filter(pl$col(\"Sepal.Length\") > 5)$collect()","title":"`filter()`"},{"location":"reference/filter-open-paren-close-paren/#filter","text":"filter DataFrame","title":"filter()"},{"location":"reference/filter-open-paren-close-paren/#description","text":"DataFrame$filter(bool_expr)","title":"Description"},{"location":"reference/filter-open-paren-close-paren/#usage","text":"DataFrame_filter(bool_expr)","title":"Usage"},{"location":"reference/filter-open-paren-close-paren/#arguments","text":"Argument Description bool_expr Polars expression which will evaluate to a bool pl$Series","title":"Arguments"},{"location":"reference/filter-open-paren-close-paren/#value","text":"filtered DataFrame","title":"Value"},{"location":"reference/filter-open-paren-close-paren/#examples","text":"pl$DataFrame(iris)$lazy()$filter(pl$col(\"Sepal.Length\") > 5)$collect()","title":"Examples"},{"location":"reference/get_method_usages/","text":"get_method_usages Generate autocompletion suggestions for object Description Generate autocompletion suggestions for object Usage get_method_usages(env, pattern = \"\") Arguments Argument Description env environment to extract usages from pattern string passed to ls(pattern) to subset methods by pattern Details used internally for auto completion in .DollarNames methods Value method usages Examples polars:::get_method_usages(polars:::DataFrame, pattern=\"col\")","title":"`get_method_usages`"},{"location":"reference/get_method_usages/#get_method_usages","text":"Generate autocompletion suggestions for object","title":"get_method_usages"},{"location":"reference/get_method_usages/#description","text":"Generate autocompletion suggestions for object","title":"Description"},{"location":"reference/get_method_usages/#usage","text":"get_method_usages(env, pattern = \"\")","title":"Usage"},{"location":"reference/get_method_usages/#arguments","text":"Argument Description env environment to extract usages from pattern string passed to ls(pattern) to subset methods by pattern","title":"Arguments"},{"location":"reference/get_method_usages/#details","text":"used internally for auto completion in .DollarNames methods","title":"Details"},{"location":"reference/get_method_usages/#value","text":"method usages","title":"Value"},{"location":"reference/get_method_usages/#examples","text":"polars:::get_method_usages(polars:::DataFrame, pattern=\"col\")","title":"Examples"},{"location":"reference/is_DataFrame_data_input/","text":"is_DataFrame_data_input Validate data input for create Dataframe with pl$DataFrame Description The Dataframe constructors accepts data.frame inheritors or list of vectors and/or Series. Usage is_DataFrame_data_input(x) Arguments Argument Description x any R object to test if suitable as input to DataFrame Value bool Examples polars:::is_DataFrame_data_input(iris) polars:::is_DataFrame_data_input(list(1:5,pl$Series(1:5),letters[1:5]))","title":"`is_DataFrame_data_input`"},{"location":"reference/is_DataFrame_data_input/#is_dataframe_data_input","text":"Validate data input for create Dataframe with pl$DataFrame","title":"is_DataFrame_data_input"},{"location":"reference/is_DataFrame_data_input/#description","text":"The Dataframe constructors accepts data.frame inheritors or list of vectors and/or Series.","title":"Description"},{"location":"reference/is_DataFrame_data_input/#usage","text":"is_DataFrame_data_input(x)","title":"Usage"},{"location":"reference/is_DataFrame_data_input/#arguments","text":"Argument Description x any R object to test if suitable as input to DataFrame","title":"Arguments"},{"location":"reference/is_DataFrame_data_input/#value","text":"bool","title":"Value"},{"location":"reference/is_DataFrame_data_input/#examples","text":"polars:::is_DataFrame_data_input(iris) polars:::is_DataFrame_data_input(list(1:5,pl$Series(1:5),letters[1:5]))","title":"Examples"},{"location":"reference/is_err/","text":"is_err check if x ss a result and an err Description check if x ss a result and an err Usage is_err(x) Arguments Argument Description x R object which could be a rust-like result of a list with two elements, ok and err Value bool if is a result object which is an err","title":"`is_err`"},{"location":"reference/is_err/#is_err","text":"check if x ss a result and an err","title":"is_err"},{"location":"reference/is_err/#description","text":"check if x ss a result and an err","title":"Description"},{"location":"reference/is_err/#usage","text":"is_err(x)","title":"Usage"},{"location":"reference/is_err/#arguments","text":"Argument Description x R object which could be a rust-like result of a list with two elements, ok and err","title":"Arguments"},{"location":"reference/is_err/#value","text":"bool if is a result object which is an err","title":"Value"},{"location":"reference/is_ok/","text":"is_ok check if x ss a result and an ok Description check if x ss a result and an ok Usage is_ok(x) Arguments Argument Description x R object which could be a rust-like result of a list with two elements, ok and err Value bool if is a result object which is an ok","title":"`is_ok`"},{"location":"reference/is_ok/#is_ok","text":"check if x ss a result and an ok","title":"is_ok"},{"location":"reference/is_ok/#description","text":"check if x ss a result and an ok","title":"Description"},{"location":"reference/is_ok/#usage","text":"is_ok(x)","title":"Usage"},{"location":"reference/is_ok/#arguments","text":"Argument Description x R object which could be a rust-like result of a list with two elements, ok and err","title":"Arguments"},{"location":"reference/is_ok/#value","text":"bool if is a result object which is an ok","title":"Value"},{"location":"reference/is_polars_dtype/","text":"is_polars_dtype chek if x is a valid RPolarsDataType Description chek if x is a valid RPolarsDataType Usage is_polars_dtype(x, include_unknown = FALSE) Arguments Argument Description x a candidate Value a list DataType with an inner DataType Examples polars:::is_polars_dtype(pl$Int64)","title":"`is_polars_dtype`"},{"location":"reference/is_polars_dtype/#is_polars_dtype","text":"chek if x is a valid RPolarsDataType","title":"is_polars_dtype"},{"location":"reference/is_polars_dtype/#description","text":"chek if x is a valid RPolarsDataType","title":"Description"},{"location":"reference/is_polars_dtype/#usage","text":"is_polars_dtype(x, include_unknown = FALSE)","title":"Usage"},{"location":"reference/is_polars_dtype/#arguments","text":"Argument Description x a candidate","title":"Arguments"},{"location":"reference/is_polars_dtype/#value","text":"a list DataType with an inner DataType","title":"Value"},{"location":"reference/is_polars_dtype/#examples","text":"polars:::is_polars_dtype(pl$Int64)","title":"Examples"},{"location":"reference/is_result/","text":"is_result check if z is a result Description check if z is a result Usage is_result(x) Arguments Argument Description x R object which could be a rust-like result of a list with two elements, ok and err Details both ok and err being NULL encodes ok-value NULL. No way to encode an err-value NULL If both ok and err has value then this is an invalid result Value bool if is a result object","title":"`is_result`"},{"location":"reference/is_result/#is_result","text":"check if z is a result","title":"is_result"},{"location":"reference/is_result/#description","text":"check if z is a result","title":"Description"},{"location":"reference/is_result/#usage","text":"is_result(x)","title":"Usage"},{"location":"reference/is_result/#arguments","text":"Argument Description x R object which could be a rust-like result of a list with two elements, ok and err","title":"Arguments"},{"location":"reference/is_result/#details","text":"both ok and err being NULL encodes ok-value NULL. No way to encode an err-value NULL If both ok and err has value then this is an invalid result","title":"Details"},{"location":"reference/is_result/#value","text":"bool if is a result object","title":"Value"},{"location":"reference/is_schema/","text":"is_schema check if schema Description check if schema Format function Usage is_schema(x) Arguments Argument Description x objet to test if schema Value bool Examples polars:::is_schema(pl$DataFrame(iris)$schema) pl$is_schema(pl$DataFrame(iris)$schema) polars:::is_schema(list(\"alice\",\"bob\"))","title":"`is_schema`"},{"location":"reference/is_schema/#is_schema","text":"check if schema","title":"is_schema"},{"location":"reference/is_schema/#description","text":"check if schema","title":"Description"},{"location":"reference/is_schema/#format","text":"function","title":"Format"},{"location":"reference/is_schema/#usage","text":"is_schema(x)","title":"Usage"},{"location":"reference/is_schema/#arguments","text":"Argument Description x objet to test if schema","title":"Arguments"},{"location":"reference/is_schema/#value","text":"bool","title":"Value"},{"location":"reference/is_schema/#examples","text":"polars:::is_schema(pl$DataFrame(iris)$schema) pl$is_schema(pl$DataFrame(iris)$schema) polars:::is_schema(list(\"alice\",\"bob\"))","title":"Examples"},{"location":"reference/l_to_vdf/","text":"l_to_vdf DataFrame-list to rust vector of DataFrame Description lifecycle: DEPRECATE, imple on rust side as a function Usage l_to_vdf(l) Arguments Argument Description l list of DataFrame Value VecDataFrame","title":"`l_to_vdf`"},{"location":"reference/l_to_vdf/#l_to_vdf","text":"DataFrame-list to rust vector of DataFrame","title":"l_to_vdf"},{"location":"reference/l_to_vdf/#description","text":"lifecycle: DEPRECATE, imple on rust side as a function","title":"Description"},{"location":"reference/l_to_vdf/#usage","text":"l_to_vdf(l)","title":"Usage"},{"location":"reference/l_to_vdf/#arguments","text":"Argument Description l list of DataFrame","title":"Arguments"},{"location":"reference/l_to_vdf/#value","text":"VecDataFrame","title":"Value"},{"location":"reference/lazy_csv_reader/","text":"lazy_csv_reader new LazyFrame from csv Description will scan the csv when collect(), not now Usage lazy_csv_reader( path, sep = \",\", has_header = TRUE, ignore_errors = FALSE, skip_rows = 0, n_rows = NULL, cache = FALSE, overwrite_dtype = NULL, low_memory = FALSE, comment_char = NULL, quote_char = \"\\\"\", null_values = NULL, infer_schema_length = 100, skip_rows_after_header = 0, encoding = \"utf8\", row_count_name = NULL, row_count_offset = 0, parse_dates = FALSE ) csv_reader(...) Arguments Argument Description path string, Path to a file sep Single char to use as delimiter in the file. has_header bool, indicate if the first row of dataset is a header or not. If set to False, column names will be autogenerated in the following format: column_x, with x being an enumeration over every column in the dataset starting at 1. ignore_errors bool, try to keep reading lines if some lines yield errors. First try infer_schema_length=0 to read all columns as pl.Utf8 to check which values might cause an issue. skip_rows integer, Start reading after skip_rows lines. The header will be parsed at this offset. n_rows int (NULL is disable),Stop reading from CSV file after reading n_rows. cache bool, cache the result after reading. overwrite_dtype (NULL is disable) named list of dtypes OR dtype-names, where name points to a column. Can overwrite dtypes during inference. Supported types so far are: name low_memory bool, reduce memory usage in expense of performance comment_char (NULL is disable) Single byte character that indicates the start of a comment line, for instance #. quote_char (NULL is disable) Single byte character used for csv quoting, default = \". Set to None to turn off special handling and escaping of quotes. null_values (NULL is disable) Values to interpret as null values. You can provide a String : All values equal to this string will be null. Unnamed char vector: A null value per column. Named char vector. A mapping from (names)column to a null value string(values). infer_schema_length Maximum number of rows to read to infer the column types. If set to 0, all columns will be read as UTF-8. If NULL , a full table scan will be done (slow). skip_rows_after_header bool Skip this number of rows when the header is parsed. encoding either \"utf8\" or \"utf8-lossy\". Lossy means that invalid utf8 values are replaced with \"?\" characters. row_count_name String(NULL is disable), name of a added row count column row_count_offset integer, Offset to start the row_count column (only used if the name is set). parse_dates bool Try to automatically parse dates. If this does not succeed, the column remains of data type pl.Utf8. ... any argument passed to lazy_csv_reader Details Read a file from path into a polars lazy frame. Not yet supporting eol_char and with_column_names Value lazyframe DataFrame Examples my_file = tempfile() write.csv(iris,my_file) lazy_frame = polars:::lazy_csv_reader(path=my_file) lazy_frame$collect() unlink(my_file)","title":"`lazy_csv_reader`"},{"location":"reference/lazy_csv_reader/#lazy_csv_reader","text":"new LazyFrame from csv","title":"lazy_csv_reader"},{"location":"reference/lazy_csv_reader/#description","text":"will scan the csv when collect(), not now","title":"Description"},{"location":"reference/lazy_csv_reader/#usage","text":"lazy_csv_reader( path, sep = \",\", has_header = TRUE, ignore_errors = FALSE, skip_rows = 0, n_rows = NULL, cache = FALSE, overwrite_dtype = NULL, low_memory = FALSE, comment_char = NULL, quote_char = \"\\\"\", null_values = NULL, infer_schema_length = 100, skip_rows_after_header = 0, encoding = \"utf8\", row_count_name = NULL, row_count_offset = 0, parse_dates = FALSE ) csv_reader(...)","title":"Usage"},{"location":"reference/lazy_csv_reader/#arguments","text":"Argument Description path string, Path to a file sep Single char to use as delimiter in the file. has_header bool, indicate if the first row of dataset is a header or not. If set to False, column names will be autogenerated in the following format: column_x, with x being an enumeration over every column in the dataset starting at 1. ignore_errors bool, try to keep reading lines if some lines yield errors. First try infer_schema_length=0 to read all columns as pl.Utf8 to check which values might cause an issue. skip_rows integer, Start reading after skip_rows lines. The header will be parsed at this offset. n_rows int (NULL is disable),Stop reading from CSV file after reading n_rows. cache bool, cache the result after reading. overwrite_dtype (NULL is disable) named list of dtypes OR dtype-names, where name points to a column. Can overwrite dtypes during inference. Supported types so far are: name low_memory bool, reduce memory usage in expense of performance comment_char (NULL is disable) Single byte character that indicates the start of a comment line, for instance #. quote_char (NULL is disable) Single byte character used for csv quoting, default = \". Set to None to turn off special handling and escaping of quotes. null_values (NULL is disable) Values to interpret as null values. You can provide a String : All values equal to this string will be null. Unnamed char vector: A null value per column. Named char vector. A mapping from (names)column to a null value string(values). infer_schema_length Maximum number of rows to read to infer the column types. If set to 0, all columns will be read as UTF-8. If NULL , a full table scan will be done (slow). skip_rows_after_header bool Skip this number of rows when the header is parsed. encoding either \"utf8\" or \"utf8-lossy\". Lossy means that invalid utf8 values are replaced with \"?\" characters. row_count_name String(NULL is disable), name of a added row count column row_count_offset integer, Offset to start the row_count column (only used if the name is set). parse_dates bool Try to automatically parse dates. If this does not succeed, the column remains of data type pl.Utf8. ... any argument passed to lazy_csv_reader","title":"Arguments"},{"location":"reference/lazy_csv_reader/#details","text":"Read a file from path into a polars lazy frame. Not yet supporting eol_char and with_column_names","title":"Details"},{"location":"reference/lazy_csv_reader/#value","text":"lazyframe DataFrame","title":"Value"},{"location":"reference/lazy_csv_reader/#examples","text":"my_file = tempfile() write.csv(iris,my_file) lazy_frame = polars:::lazy_csv_reader(path=my_file) lazy_frame$collect() unlink(my_file)","title":"Examples"},{"location":"reference/length.Series/","text":"length.Series Length of series Description Length of series Usage list(list(\"length\"), list(\"Series\"))(x) Arguments Argument Description x a Series Value the length as a double","title":"`length.Series`"},{"location":"reference/length.Series/#lengthseries","text":"Length of series","title":"length.Series"},{"location":"reference/length.Series/#description","text":"Length of series","title":"Description"},{"location":"reference/length.Series/#usage","text":"list(list(\"length\"), list(\"Series\"))(x)","title":"Usage"},{"location":"reference/length.Series/#arguments","text":"Argument Description x a Series","title":"Arguments"},{"location":"reference/length.Series/#value","text":"the length as a double","title":"Value"},{"location":"reference/macro_add_syntax_check_to/","text":"macro_add_syntax_check_to add syntax verification to class Description add syntax verification to class Usage macro_add_syntax_check_to_class(Class_name) Arguments Argument Description Class_name string name of env class Details this function overrides dollarclass method of a extendr env_class to run first verify_method_call() to check for syntax error and return more user friendly error if issues All R functions coined 'macro'-functions use eval(parse()) but only at package build time to solve some tricky self-referential problem. If possible to deprecate a macro in a clean way , go ahead. see zzz.R for usage examples Value dollarsign method with syntax verification Seealso verify_method_call","title":"`macro_add_syntax_check_to`"},{"location":"reference/macro_add_syntax_check_to/#macro_add_syntax_check_to","text":"add syntax verification to class","title":"macro_add_syntax_check_to"},{"location":"reference/macro_add_syntax_check_to/#description","text":"add syntax verification to class","title":"Description"},{"location":"reference/macro_add_syntax_check_to/#usage","text":"macro_add_syntax_check_to_class(Class_name)","title":"Usage"},{"location":"reference/macro_add_syntax_check_to/#arguments","text":"Argument Description Class_name string name of env class","title":"Arguments"},{"location":"reference/macro_add_syntax_check_to/#details","text":"this function overrides dollarclass method of a extendr env_class to run first verify_method_call() to check for syntax error and return more user friendly error if issues All R functions coined 'macro'-functions use eval(parse()) but only at package build time to solve some tricky self-referential problem. If possible to deprecate a macro in a clean way , go ahead. see zzz.R for usage examples","title":"Details"},{"location":"reference/macro_add_syntax_check_to/#value","text":"dollarsign method with syntax verification","title":"Value"},{"location":"reference/macro_add_syntax_check_to/#seealso","text":"verify_method_call","title":"Seealso"},{"location":"reference/macro_add_syntax_check_to_class/","text":"macro_add_syntax_check_to_class add syntax verification to class Description add syntax verification to class Usage macro_add_syntax_check_to_class(Class_name) Arguments Argument Description Class_name string name of env class Details this function overrides dollarclass method of a extendr env_class to run first verify_method_call() to check for syntax error and return more user friendly error if issues All R functions coined 'macro'-functions use eval(parse()) but only at package build time to solve some tricky self-referential problem. If possible to deprecate a macro in a clean way , go ahead. see zzz.R for usage examples Value dollarsign method with syntax verification Seealso verify_method_call","title":"`macro_add_syntax_check_to_class`"},{"location":"reference/macro_add_syntax_check_to_class/#macro_add_syntax_check_to_class","text":"add syntax verification to class","title":"macro_add_syntax_check_to_class"},{"location":"reference/macro_add_syntax_check_to_class/#description","text":"add syntax verification to class","title":"Description"},{"location":"reference/macro_add_syntax_check_to_class/#usage","text":"macro_add_syntax_check_to_class(Class_name)","title":"Usage"},{"location":"reference/macro_add_syntax_check_to_class/#arguments","text":"Argument Description Class_name string name of env class","title":"Arguments"},{"location":"reference/macro_add_syntax_check_to_class/#details","text":"this function overrides dollarclass method of a extendr env_class to run first verify_method_call() to check for syntax error and return more user friendly error if issues All R functions coined 'macro'-functions use eval(parse()) but only at package build time to solve some tricky self-referential problem. If possible to deprecate a macro in a clean way , go ahead. see zzz.R for usage examples","title":"Details"},{"location":"reference/macro_add_syntax_check_to_class/#value","text":"dollarsign method with syntax verification","title":"Value"},{"location":"reference/macro_add_syntax_check_to_class/#seealso","text":"verify_method_call","title":"Seealso"},{"location":"reference/macro_new_subnamespace/","text":"macro_new_subnamespace Macro - New subnamespace Description Bundle class methods into an environment (subname space) Usage macro_new_subnamespace(class_pattern, subclass_env = NULL, remove_f = TRUE) Arguments Argument Description class_pattern regex to select functions subclass_env optional subclass of remove_f drop sourced functions from package ns after bundling into sub ns Details This function is used to emulate py-polars subnamespace-methods All R functions coined 'macro_'-functions use eval(parse()) but only at package build time to solve some tricky self-referential problem. If possible to deprecate a macro in a clean way , go ahead. Value A function which returns a subclass environment of bundled class functions. Examples #macro_new_subnamespace() is not exported, export for this toy example #macro_new_subnamespace = polars:::macro_new_subnamespace ##define some new methods prefixed 'MyClass_' #MyClass_add2 = function() self + 2 #MyClass_mul2 = function() self * 2 ##grab any sourced function prefixed 'MyClass_' #my_class_sub_ns = macro_new_subnamespace(\"^MyClass_\", \"myclass_sub_ns\") #here adding sub-namespace as a expr-class property/method during session-time, #which only is for this demo. #instead sourced method like Expr_arr() at package build time instead #env = polars:::Expr #get env of the Expr Class #env$my_sub_ns = method_as_property(function() { #add a property/method # my_class_sub_ns(self) #}) #rm(env) #optional clean up #add user defined S3 method the subclass 'myclass_sub_ns' #print.myclass_sub_ns = function(x, ...) { #add ... even if not used # print(\"hello world, I'm myclass_sub_ns\") # print(\"methods in sub namespace are:\") # print(ls(x)) # } #test # e = pl$lit(1:5) #make an Expr #print(e$my_sub_ns) #inspect #e$my_sub_ns$add2() #use the sub namespace #e$my_sub_ns$mul2()","title":"`macro_new_subnamespace`"},{"location":"reference/macro_new_subnamespace/#macro_new_subnamespace","text":"Macro - New subnamespace","title":"macro_new_subnamespace"},{"location":"reference/macro_new_subnamespace/#description","text":"Bundle class methods into an environment (subname space)","title":"Description"},{"location":"reference/macro_new_subnamespace/#usage","text":"macro_new_subnamespace(class_pattern, subclass_env = NULL, remove_f = TRUE)","title":"Usage"},{"location":"reference/macro_new_subnamespace/#arguments","text":"Argument Description class_pattern regex to select functions subclass_env optional subclass of remove_f drop sourced functions from package ns after bundling into sub ns","title":"Arguments"},{"location":"reference/macro_new_subnamespace/#details","text":"This function is used to emulate py-polars subnamespace-methods All R functions coined 'macro_'-functions use eval(parse()) but only at package build time to solve some tricky self-referential problem. If possible to deprecate a macro in a clean way , go ahead.","title":"Details"},{"location":"reference/macro_new_subnamespace/#value","text":"A function which returns a subclass environment of bundled class functions.","title":"Value"},{"location":"reference/macro_new_subnamespace/#examples","text":"#macro_new_subnamespace() is not exported, export for this toy example #macro_new_subnamespace = polars:::macro_new_subnamespace ##define some new methods prefixed 'MyClass_' #MyClass_add2 = function() self + 2 #MyClass_mul2 = function() self * 2 ##grab any sourced function prefixed 'MyClass_' #my_class_sub_ns = macro_new_subnamespace(\"^MyClass_\", \"myclass_sub_ns\") #here adding sub-namespace as a expr-class property/method during session-time, #which only is for this demo. #instead sourced method like Expr_arr() at package build time instead #env = polars:::Expr #get env of the Expr Class #env$my_sub_ns = method_as_property(function() { #add a property/method # my_class_sub_ns(self) #}) #rm(env) #optional clean up #add user defined S3 method the subclass 'myclass_sub_ns' #print.myclass_sub_ns = function(x, ...) { #add ... even if not used # print(\"hello world, I'm myclass_sub_ns\") # print(\"methods in sub namespace are:\") # print(ls(x)) # } #test # e = pl$lit(1:5) #make an Expr #print(e$my_sub_ns) #inspect #e$my_sub_ns$add2() #use the sub namespace #e$my_sub_ns$mul2()","title":"Examples"},{"location":"reference/map/","text":"map map an Err part of Result Description map an Err part of Result Usage map(x, f) Arguments Argument Description x any R object f a closure that takes the ok part as input Value same R object wrapped in a Err-result","title":"`map`"},{"location":"reference/map/#map","text":"map an Err part of Result","title":"map"},{"location":"reference/map/#description","text":"map an Err part of Result","title":"Description"},{"location":"reference/map/#usage","text":"map(x, f)","title":"Usage"},{"location":"reference/map/#arguments","text":"Argument Description x any R object f a closure that takes the ok part as input","title":"Arguments"},{"location":"reference/map/#value","text":"same R object wrapped in a Err-result","title":"Value"},{"location":"reference/map_err/","text":"map_err map an Err part of Result Description map an Err part of Result Usage map_err(x, f) Arguments Argument Description x any R object f a closure that takes the err part as input Value same R object wrapped in a Err-result","title":"`map_err`"},{"location":"reference/map_err/#map_err","text":"map an Err part of Result","title":"map_err"},{"location":"reference/map_err/#description","text":"map an Err part of Result","title":"Description"},{"location":"reference/map_err/#usage","text":"map_err(x, f)","title":"Usage"},{"location":"reference/map_err/#arguments","text":"Argument Description x any R object f a closure that takes the err part as input","title":"Arguments"},{"location":"reference/map_err/#value","text":"same R object wrapped in a Err-result","title":"Value"},{"location":"reference/max/","text":"max max across expressions / literals / Series Description Folds the expressions from left to right, keeping the first non-null value. Arguments Argument Description ... is a: If one arg: Series or Expr, same as column$sum() string, same as pl$col(column)$sum() numeric, same as pl$lit(column)$sum() list of strings(column names) or exprressions to add up as expr1 + expr2 + expr3 + ... If several args, then wrapped in a list and handled as above. Value Expr Examples df = pl$DataFrame( a = NA_real_, b = c(1:2,NA_real_,NA_real_), c = c(1:3,NA_real_) ) #use coalesce to get first non Null value for each row, otherwise insert 99.9 df$with_column( pl$coalesce(\"a\", \"b\", \"c\", 99.9)$alias(\"d\") )","title":"`max`"},{"location":"reference/max/#max","text":"max across expressions / literals / Series","title":"max"},{"location":"reference/max/#description","text":"Folds the expressions from left to right, keeping the first non-null value.","title":"Description"},{"location":"reference/max/#arguments","text":"Argument Description ... is a: If one arg: Series or Expr, same as column$sum() string, same as pl$col(column)$sum() numeric, same as pl$lit(column)$sum() list of strings(column names) or exprressions to add up as expr1 + expr2 + expr3 + ... If several args, then wrapped in a list and handled as above.","title":"Arguments"},{"location":"reference/max/#value","text":"Expr","title":"Value"},{"location":"reference/max/#examples","text":"df = pl$DataFrame( a = NA_real_, b = c(1:2,NA_real_,NA_real_), c = c(1:3,NA_real_) ) #use coalesce to get first non Null value for each row, otherwise insert 99.9 df$with_column( pl$coalesce(\"a\", \"b\", \"c\", 99.9)$alias(\"d\") )","title":"Examples"},{"location":"reference/mem_address/","text":"mem_address Get Memory Address Description mimics pl$mem_address Arguments Argument Description robj an R object Value String of mem address Examples pl$mem_address(pl$Series(1:3))","title":"`mem_address`"},{"location":"reference/mem_address/#mem_address","text":"Get Memory Address","title":"mem_address"},{"location":"reference/mem_address/#description","text":"mimics pl$mem_address","title":"Description"},{"location":"reference/mem_address/#arguments","text":"Argument Description robj an R object","title":"Arguments"},{"location":"reference/mem_address/#value","text":"String of mem address","title":"Value"},{"location":"reference/mem_address/#examples","text":"pl$mem_address(pl$Series(1:3))","title":"Examples"},{"location":"reference/method_as_property/","text":"method_as_property Give a class method property behavior Description Internal function, see use in source Usage method_as_property(f, setter = FALSE) Arguments Argument Description f a function setter bool, if true a property method can be modified by user Value function subclassed into c(\"property\",\"function\") or c(\"setter\",\"property\",\"function\")","title":"`method_as_property`"},{"location":"reference/method_as_property/#method_as_property","text":"Give a class method property behavior","title":"method_as_property"},{"location":"reference/method_as_property/#description","text":"Internal function, see use in source","title":"Description"},{"location":"reference/method_as_property/#usage","text":"method_as_property(f, setter = FALSE)","title":"Usage"},{"location":"reference/method_as_property/#arguments","text":"Argument Description f a function setter bool, if true a property method can be modified by user","title":"Arguments"},{"location":"reference/method_as_property/#value","text":"function subclassed into c(\"property\",\"function\") or c(\"setter\",\"property\",\"function\")","title":"Value"},{"location":"reference/min/","text":"min min across expressions / literals / Series Description Folds the expressions from left to right, keeping the first non-null value. Arguments Argument Description ... is a: If one arg: Series or Expr, same as column$sum() string, same as pl$col(column)$sum() numeric, same as pl$lit(column)$sum() list of strings(column names) or exprressions to add up as expr1 + expr2 + expr3 + ... If several args, then wrapped in a list and handled as above. Value Expr Examples df = pl$DataFrame( a = NA_real_, b = c(2:1,NA_real_,NA_real_), c = c(1:3,NA_real_), d = c(1:2,NA_real_,-Inf) ) #use min to get first non Null value for each row, otherwise insert 99.9 df$with_column( pl$min(\"a\", \"b\", \"c\", 99.9)$alias(\"d\") )","title":"`min`"},{"location":"reference/min/#min","text":"min across expressions / literals / Series","title":"min"},{"location":"reference/min/#description","text":"Folds the expressions from left to right, keeping the first non-null value.","title":"Description"},{"location":"reference/min/#arguments","text":"Argument Description ... is a: If one arg: Series or Expr, same as column$sum() string, same as pl$col(column)$sum() numeric, same as pl$lit(column)$sum() list of strings(column names) or exprressions to add up as expr1 + expr2 + expr3 + ... If several args, then wrapped in a list and handled as above.","title":"Arguments"},{"location":"reference/min/#value","text":"Expr","title":"Value"},{"location":"reference/min/#examples","text":"df = pl$DataFrame( a = NA_real_, b = c(2:1,NA_real_,NA_real_), c = c(1:3,NA_real_), d = c(1:2,NA_real_,-Inf) ) #use min to get first non Null value for each row, otherwise insert 99.9 df$with_column( pl$min(\"a\", \"b\", \"c\", 99.9)$alias(\"d\") )","title":"Examples"},{"location":"reference/move_env_elements/","text":"move_env_elements Move environment elements from one env to another Description Move environment elements from one env to another Usage move_env_elements(from_env, to_env, element_names, remove = TRUE) Arguments Argument Description from_env env from to_env env to element_names names of elements to move, if named names, then name of name is to_env name remove bool, actually remove element in from_env","title":"`move_env_elements`"},{"location":"reference/move_env_elements/#move_env_elements","text":"Move environment elements from one env to another","title":"move_env_elements"},{"location":"reference/move_env_elements/#description","text":"Move environment elements from one env to another","title":"Description"},{"location":"reference/move_env_elements/#usage","text":"move_env_elements(from_env, to_env, element_names, remove = TRUE)","title":"Usage"},{"location":"reference/move_env_elements/#arguments","text":"Argument Description from_env env from to_env env to element_names names of elements to move, if named names, then name of name is to_env name remove bool, actually remove element in from_env","title":"Arguments"},{"location":"reference/nanoarrow/","text":"nanoarrow polars to nanoarrow and arrow Description Conversion via native apache arrow array stream (fast), THIS REQUIRES \u00b4nanoarrow\u00b4 Usage as_nanoarrow_array_stream.DataFrame(x, ..., schema = NULL) infer_nanoarrow_schema.DataFrame(x, ...) as_arrow_table.DataFrame(x, ...) as_record_batch_reader.DataFrame(x, ..., schema = NULL) Arguments Argument Description x a polars DataFrame ... not used right now schema must stay at default value NULL Details The following functions enable conversion to nanoarrow and arrow . Conversion kindly provided by \"paleolimbot / Dewey Dunnington\" Author of nanoarrow . Currently these conversions are the fastest way to convert from polars to R. Value a nanoarrow array stream a nanoarrow array schema an arrow table an arrow record batch reader Examples library(nanoarrow) df = pl$DataFrame(mtcars) nanoarrow_array_stream = as_nanoarrow_array_stream(df) rdf = as.data.frame(nanoarrow_array_stream) print(head(rdf)) nanoarrow_array_schema = infer_nanoarrow_schema(df) print(nanoarrow_array_schema) library(arrow) arrow_table = as_arrow_table(df) print(arrow_table) arrow_record_batch_reader = as_record_batch_reader(df) #requires arrow print(arrow_record_batch_reader)","title":"`nanoarrow`"},{"location":"reference/nanoarrow/#nanoarrow","text":"polars to nanoarrow and arrow","title":"nanoarrow"},{"location":"reference/nanoarrow/#description","text":"Conversion via native apache arrow array stream (fast), THIS REQUIRES \u00b4nanoarrow\u00b4","title":"Description"},{"location":"reference/nanoarrow/#usage","text":"as_nanoarrow_array_stream.DataFrame(x, ..., schema = NULL) infer_nanoarrow_schema.DataFrame(x, ...) as_arrow_table.DataFrame(x, ...) as_record_batch_reader.DataFrame(x, ..., schema = NULL)","title":"Usage"},{"location":"reference/nanoarrow/#arguments","text":"Argument Description x a polars DataFrame ... not used right now schema must stay at default value NULL","title":"Arguments"},{"location":"reference/nanoarrow/#details","text":"The following functions enable conversion to nanoarrow and arrow . Conversion kindly provided by \"paleolimbot / Dewey Dunnington\" Author of nanoarrow . Currently these conversions are the fastest way to convert from polars to R.","title":"Details"},{"location":"reference/nanoarrow/#value","text":"a nanoarrow array stream a nanoarrow array schema an arrow table an arrow record batch reader","title":"Value"},{"location":"reference/nanoarrow/#examples","text":"library(nanoarrow) df = pl$DataFrame(mtcars) nanoarrow_array_stream = as_nanoarrow_array_stream(df) rdf = as.data.frame(nanoarrow_array_stream) print(head(rdf)) nanoarrow_array_schema = infer_nanoarrow_schema(df) print(nanoarrow_array_schema) library(arrow) arrow_table = as_arrow_table(df) print(arrow_table) arrow_record_batch_reader = as_record_batch_reader(df) #requires arrow print(arrow_record_batch_reader)","title":"Examples"},{"location":"reference/ncol.DataFrame/","text":"ncol.DataFrame The Number of Columns of a DataFrame Description The Number of Columns of a DataFrame Usage ncol.DataFrame(x) Arguments Argument Description x DataFrame Value Integer","title":"`ncol.DataFrame`"},{"location":"reference/ncol.DataFrame/#ncoldataframe","text":"The Number of Columns of a DataFrame","title":"ncol.DataFrame"},{"location":"reference/ncol.DataFrame/#description","text":"The Number of Columns of a DataFrame","title":"Description"},{"location":"reference/ncol.DataFrame/#usage","text":"ncol.DataFrame(x)","title":"Usage"},{"location":"reference/ncol.DataFrame/#arguments","text":"Argument Description x DataFrame","title":"Arguments"},{"location":"reference/ncol.DataFrame/#value","text":"Integer","title":"Value"},{"location":"reference/ncol.LazyFrame/","text":"ncol.LazyFrame The Number of Columns of a LazyFrame Description The Number of Columns of a LazyFrame Usage ncol.LazyFrame(x) Arguments Argument Description x LazyFrame Value Integer","title":"`ncol.LazyFrame`"},{"location":"reference/ncol.LazyFrame/#ncollazyframe","text":"The Number of Columns of a LazyFrame","title":"ncol.LazyFrame"},{"location":"reference/ncol.LazyFrame/#description","text":"The Number of Columns of a LazyFrame","title":"Description"},{"location":"reference/ncol.LazyFrame/#usage","text":"ncol.LazyFrame(x)","title":"Usage"},{"location":"reference/ncol.LazyFrame/#arguments","text":"Argument Description x LazyFrame","title":"Arguments"},{"location":"reference/ncol.LazyFrame/#value","text":"Integer","title":"Value"},{"location":"reference/nrow.DataFrame/","text":"nrow.DataFrame The Number of Rows of a DataFrame Description The Number of Rows of a DataFrame Usage nrow.DataFrame(x) Arguments Argument Description x DataFrame Value Integer","title":"`nrow.DataFrame`"},{"location":"reference/nrow.DataFrame/#nrowdataframe","text":"The Number of Rows of a DataFrame","title":"nrow.DataFrame"},{"location":"reference/nrow.DataFrame/#description","text":"The Number of Rows of a DataFrame","title":"Description"},{"location":"reference/nrow.DataFrame/#usage","text":"nrow.DataFrame(x)","title":"Usage"},{"location":"reference/nrow.DataFrame/#arguments","text":"Argument Description x DataFrame","title":"Arguments"},{"location":"reference/nrow.DataFrame/#value","text":"Integer","title":"Value"},{"location":"reference/nrow.LazyFrame/","text":"nrow.LazyFrame The Number of Rows of a LazyFrame Description The Number of Rows of a LazyFrame Usage nrow.LazyFrame(x) Arguments Argument Description x LazyFrame Value Integer","title":"`nrow.LazyFrame`"},{"location":"reference/nrow.LazyFrame/#nrowlazyframe","text":"The Number of Rows of a LazyFrame","title":"nrow.LazyFrame"},{"location":"reference/nrow.LazyFrame/#description","text":"The Number of Rows of a LazyFrame","title":"Description"},{"location":"reference/nrow.LazyFrame/#usage","text":"nrow.LazyFrame(x)","title":"Usage"},{"location":"reference/nrow.LazyFrame/#arguments","text":"Argument Description x LazyFrame","title":"Arguments"},{"location":"reference/nrow.LazyFrame/#value","text":"Integer","title":"Value"},{"location":"reference/object/","text":"object Any polars class object is made of this Description One SEXP of Rtype: \"externalptr\" + a class attribute Format An object of class character of length 1. Usage object Details object$method() calls are facilitated by a $.ClassName - s3method see 'R/after-wrappers.R' Code completion is facilitted by .DollarNames.ClassName -s3method see e.g. 'R/dataframe__frame.R' Implementation of property-methods as DataFrame_columns() and syntax checking is an extension to $.ClassName See function macro_add_syntax_check_to_class(). Examples #all a polars object is made of: some_polars_object = pl$DataFrame(iris) str(some_polars_object) #External Pointer tagged with a class attribute.","title":"`object`"},{"location":"reference/object/#object","text":"Any polars class object is made of this","title":"object"},{"location":"reference/object/#description","text":"One SEXP of Rtype: \"externalptr\" + a class attribute","title":"Description"},{"location":"reference/object/#format","text":"An object of class character of length 1.","title":"Format"},{"location":"reference/object/#usage","text":"object","title":"Usage"},{"location":"reference/object/#details","text":"object$method() calls are facilitated by a $.ClassName - s3method see 'R/after-wrappers.R' Code completion is facilitted by .DollarNames.ClassName -s3method see e.g. 'R/dataframe__frame.R' Implementation of property-methods as DataFrame_columns() and syntax checking is an extension to $.ClassName See function macro_add_syntax_check_to_class().","title":"Details"},{"location":"reference/object/#examples","text":"#all a polars object is made of: some_polars_object = pl$DataFrame(iris) str(some_polars_object) #External Pointer tagged with a class attribute.","title":"Examples"},{"location":"reference/or_else/","text":"or_else map an Err part of Result Description map an Err part of Result Usage or_else(x, f) Arguments Argument Description x any R object f a closure that takes the ok part as input, must return a result itself Value same R object wrapped in a Err-result","title":"`or_else`"},{"location":"reference/or_else/#or_else","text":"map an Err part of Result","title":"or_else"},{"location":"reference/or_else/#description","text":"map an Err part of Result","title":"Description"},{"location":"reference/or_else/#usage","text":"or_else(x, f)","title":"Usage"},{"location":"reference/or_else/#arguments","text":"Argument Description x any R object f a closure that takes the ok part as input, must return a result itself","title":"Arguments"},{"location":"reference/or_else/#value","text":"same R object wrapped in a Err-result","title":"Value"},{"location":"reference/pcase/","text":"pcase Simple SQL CASE WHEN implementation for R Description Inspired by data.table::fcase + dplyr::case_when. Used instead of base::switch internally. Usage pcase(..., or_else = NULL) Arguments Argument Description ... odd arugments are bool statements, a next even argument is returned if prior bool statement is the first true or_else return this if no bool statements were true Details Lifecycle: perhaps replace with something written in rust to speed up a bit Value any return given first true bool statement otherwise value of or_else Examples n = 7 polars:::pcase( n<5,\"nope\", n>6,\"yeah\", or_else = stopf(\"failed to have a case for n=%s\",n) )","title":"`pcase`"},{"location":"reference/pcase/#pcase","text":"Simple SQL CASE WHEN implementation for R","title":"pcase"},{"location":"reference/pcase/#description","text":"Inspired by data.table::fcase + dplyr::case_when. Used instead of base::switch internally.","title":"Description"},{"location":"reference/pcase/#usage","text":"pcase(..., or_else = NULL)","title":"Usage"},{"location":"reference/pcase/#arguments","text":"Argument Description ... odd arugments are bool statements, a next even argument is returned if prior bool statement is the first true or_else return this if no bool statements were true","title":"Arguments"},{"location":"reference/pcase/#details","text":"Lifecycle: perhaps replace with something written in rust to speed up a bit","title":"Details"},{"location":"reference/pcase/#value","text":"any return given first true bool statement otherwise value of or_else","title":"Value"},{"location":"reference/pcase/#examples","text":"n = 7 polars:::pcase( n<5,\"nope\", n>6,\"yeah\", or_else = stopf(\"failed to have a case for n=%s\",n) )","title":"Examples"},{"location":"reference/pl-cash-from_arrow/","text":"pl$from_arrow pl$from_arrow Description import Arrow Table or Array Arguments Argument Description data arrow Table or Array or ChunkedArray rechunk bool rewrite in one array per column, Implemented for ChunkedArray Array is already contiguous. Not implemented for Table. C schema named list of DataTypes or char vec of names. Same length as arrow table. If schema names or types do not match arrow table, the columns will be renamed/recasted. NULL default is to import columns as is. Takes no effect for Array or ChunkedArray schema_overrides named list of DataTypes. Name some columns to recast by the DataType. Takes not effect for Array or ChunkedArray Value DataFrame or Series Examples pl$from_arrow( data = arrow::arrow_table(iris), schema_overrides = list(Sepal.Length=pl$Float32, Species = pl$Utf8) ) char_schema = names(iris) char_schema[1] = \"Alice\" pl$from_arrow( data = arrow::arrow_table(iris), schema = char_schema )","title":"`pl$from_arrow`"},{"location":"reference/pl-cash-from_arrow/#plfrom_arrow","text":"pl$from_arrow","title":"pl$from_arrow"},{"location":"reference/pl-cash-from_arrow/#description","text":"import Arrow Table or Array","title":"Description"},{"location":"reference/pl-cash-from_arrow/#arguments","text":"Argument Description data arrow Table or Array or ChunkedArray rechunk bool rewrite in one array per column, Implemented for ChunkedArray Array is already contiguous. Not implemented for Table. C schema named list of DataTypes or char vec of names. Same length as arrow table. If schema names or types do not match arrow table, the columns will be renamed/recasted. NULL default is to import columns as is. Takes no effect for Array or ChunkedArray schema_overrides named list of DataTypes. Name some columns to recast by the DataType. Takes not effect for Array or ChunkedArray","title":"Arguments"},{"location":"reference/pl-cash-from_arrow/#value","text":"DataFrame or Series","title":"Value"},{"location":"reference/pl-cash-from_arrow/#examples","text":"pl$from_arrow( data = arrow::arrow_table(iris), schema_overrides = list(Sepal.Length=pl$Float32, Species = pl$Utf8) ) char_schema = names(iris) char_schema[1] = \"Alice\" pl$from_arrow( data = arrow::arrow_table(iris), schema = char_schema )","title":"Examples"},{"location":"reference/pl/","text":"pl The complete polars public API. Description pl -object is a environment of all public functions and class constructors. Public functions are not exported as a normal package as it would be huge namespace collision with base:: and other functions. All object-methods are accessed with object$method() via the new class functions. Having all functions in an namespace is similar to the rust- and python- polars api. Format An object of class environment of length 57. Usage pl Details If someone do not particularly like the letter combination pl , they are free to bind the environment to another variable name as simon_says = pl or even do attach(pl) Examples #how to use polars via `pl` pl$col(\"colname\")$sum() / pl$lit(42L) #expression ~ chain-method / literal-expression #pl inventory polars:::print_env(pl,\"polars public functions\") #all accessible classes and their public methods polars:::print_env( polars:::pl_pub_class_env, \"polars public class methods, access via object$method()\" )","title":"`pl`"},{"location":"reference/pl/#pl","text":"The complete polars public API.","title":"pl"},{"location":"reference/pl/#description","text":"pl -object is a environment of all public functions and class constructors. Public functions are not exported as a normal package as it would be huge namespace collision with base:: and other functions. All object-methods are accessed with object$method() via the new class functions. Having all functions in an namespace is similar to the rust- and python- polars api.","title":"Description"},{"location":"reference/pl/#format","text":"An object of class environment of length 57.","title":"Format"},{"location":"reference/pl/#usage","text":"pl","title":"Usage"},{"location":"reference/pl/#details","text":"If someone do not particularly like the letter combination pl , they are free to bind the environment to another variable name as simon_says = pl or even do attach(pl)","title":"Details"},{"location":"reference/pl/#examples","text":"#how to use polars via `pl` pl$col(\"colname\")$sum() / pl$lit(42L) #expression ~ chain-method / literal-expression #pl inventory polars:::print_env(pl,\"polars public functions\") #all accessible classes and their public methods polars:::print_env( polars:::pl_pub_class_env, \"polars public class methods, access via object$method()\" )","title":"Examples"},{"location":"reference/pl_Datetime/","text":"pl_Datetime Create Datetime DataType Description Datetime DataType constructor Format function Arguments Argument Description tu string option either \"ms\", \"us\" or \"ns\" tz string the Time Zone, see details Details all allowed TimeZone designations can be found in base::OlsonNames() Value Datetime DataType Examples pl$Datetime(\"ns\",\"Pacific/Samoa\")","title":"`pl_Datetime`"},{"location":"reference/pl_Datetime/#pl_datetime","text":"Create Datetime DataType","title":"pl_Datetime"},{"location":"reference/pl_Datetime/#description","text":"Datetime DataType constructor","title":"Description"},{"location":"reference/pl_Datetime/#format","text":"function","title":"Format"},{"location":"reference/pl_Datetime/#arguments","text":"Argument Description tu string option either \"ms\", \"us\" or \"ns\" tz string the Time Zone, see details","title":"Arguments"},{"location":"reference/pl_Datetime/#details","text":"all allowed TimeZone designations can be found in base::OlsonNames()","title":"Details"},{"location":"reference/pl_Datetime/#value","text":"Datetime DataType","title":"Value"},{"location":"reference/pl_Datetime/#examples","text":"pl$Datetime(\"ns\",\"Pacific/Samoa\")","title":"Examples"},{"location":"reference/pl_Field/","text":"pl_Field Create Field Description Create Field Arguments Argument Description name string name datatype DataType Details A Field is not a DataType but a name + DataType Fields are used in Structs-datatypes and Schemas to represent everything of the Series/Column except the raw values. Value a list DataType with an inner DataType Examples #make a struct pl$Field(\"city_names\",pl$Utf8) # find any DataType bundled pl$dtypes print(pl$dtypes)","title":"`pl_Field`"},{"location":"reference/pl_Field/#pl_field","text":"Create Field","title":"pl_Field"},{"location":"reference/pl_Field/#description","text":"Create Field","title":"Description"},{"location":"reference/pl_Field/#arguments","text":"Argument Description name string name datatype DataType","title":"Arguments"},{"location":"reference/pl_Field/#details","text":"A Field is not a DataType but a name + DataType Fields are used in Structs-datatypes and Schemas to represent everything of the Series/Column except the raw values.","title":"Details"},{"location":"reference/pl_Field/#value","text":"a list DataType with an inner DataType","title":"Value"},{"location":"reference/pl_Field/#examples","text":"#make a struct pl$Field(\"city_names\",pl$Utf8) # find any DataType bundled pl$dtypes print(pl$dtypes)","title":"Examples"},{"location":"reference/pl_List/","text":"pl_List Create List DataType Description Create List DataType Format function Arguments Argument Description datatype an inner DataType Value a list DataType with an inner DataType Examples pl$List(pl$List(pl$Boolean))","title":"`pl_List`"},{"location":"reference/pl_List/#pl_list","text":"Create List DataType","title":"pl_List"},{"location":"reference/pl_List/#description","text":"Create List DataType","title":"Description"},{"location":"reference/pl_List/#format","text":"function","title":"Format"},{"location":"reference/pl_List/#arguments","text":"Argument Description datatype an inner DataType","title":"Arguments"},{"location":"reference/pl_List/#value","text":"a list DataType with an inner DataType","title":"Value"},{"location":"reference/pl_List/#examples","text":"pl$List(pl$List(pl$Boolean))","title":"Examples"},{"location":"reference/pl_PTime/","text":"pl_PTime Store Time in R Description Store Time in R Arguments Argument Description x an integer or double vector of n epochs since midnight OR a char vector of char times passed to as.POSIXct converted to seconds. tu timeunit either \"s\",\"ms\",\"us\",\"ns\" fmt a format string passed to as.POSIXct format via ... Details PTime should probably be replaced with package nanotime or similar. base R is missing encoding of Time since midnight \"s\" \"ms\", \"us\" and \"ns\". The latter \"ns\" is the standard for the polars Time type. Use PTime to convert R doubles and integers and use as input to polars functions which needs a time. Loosely inspired by data.table::ITime which is i32 only. PTime must support polars native timeunit is nanoseconds. The R double(float64) can imitate a i64 ns with full precision within the full range of 24 hours. PTime does not have a time zone and always prints the time as is no matter local machine time zone. An essential difference between R and polars is R prints POSIXct/lt without a timezone in local time. Polars prints Datetime without a timezone label as is (GMT). For POSIXct/lt taged with a timexone(tzone) and Datetime with a timezone(tz) the behavior is the same conversion is intuitive. It appears behavior of R timezones is subject to change a bit in R 4.3.0, see polars unit test test-expr_datetime.R/\"pl$date_range Date lazy/eager\". Value a PTime vector either double or integer, with class \"PTime\" and attribute \"tu\" being either \"s\",\"ms\",\"us\" or \"ns\" Examples #make PTime in all time units pl$PTime(runif(5)*3600*24*1E0, tu = \"s\") pl$PTime(runif(5)*3600*24*1E3, tu = \"ms\") pl$PTime(runif(5)*3600*24*1E6, tu = \"us\") pl$PTime(runif(5)*3600*24*1E9, tu = \"ns\") pl$PTime(\"23:59:59\") pl$Series(pl$PTime(runif(5)*3600*24*1E0, tu = \"s\")) pl$lit(pl$PTime(\"23:59:59\"))$lit_to_s() pl$lit(pl$PTime(\"23:59:59\"))$to_r()","title":"`pl_PTime`"},{"location":"reference/pl_PTime/#pl_ptime","text":"Store Time in R","title":"pl_PTime"},{"location":"reference/pl_PTime/#description","text":"Store Time in R","title":"Description"},{"location":"reference/pl_PTime/#arguments","text":"Argument Description x an integer or double vector of n epochs since midnight OR a char vector of char times passed to as.POSIXct converted to seconds. tu timeunit either \"s\",\"ms\",\"us\",\"ns\" fmt a format string passed to as.POSIXct format via ...","title":"Arguments"},{"location":"reference/pl_PTime/#details","text":"PTime should probably be replaced with package nanotime or similar. base R is missing encoding of Time since midnight \"s\" \"ms\", \"us\" and \"ns\". The latter \"ns\" is the standard for the polars Time type. Use PTime to convert R doubles and integers and use as input to polars functions which needs a time. Loosely inspired by data.table::ITime which is i32 only. PTime must support polars native timeunit is nanoseconds. The R double(float64) can imitate a i64 ns with full precision within the full range of 24 hours. PTime does not have a time zone and always prints the time as is no matter local machine time zone. An essential difference between R and polars is R prints POSIXct/lt without a timezone in local time. Polars prints Datetime without a timezone label as is (GMT). For POSIXct/lt taged with a timexone(tzone) and Datetime with a timezone(tz) the behavior is the same conversion is intuitive. It appears behavior of R timezones is subject to change a bit in R 4.3.0, see polars unit test test-expr_datetime.R/\"pl$date_range Date lazy/eager\".","title":"Details"},{"location":"reference/pl_PTime/#value","text":"a PTime vector either double or integer, with class \"PTime\" and attribute \"tu\" being either \"s\",\"ms\",\"us\" or \"ns\"","title":"Value"},{"location":"reference/pl_PTime/#examples","text":"#make PTime in all time units pl$PTime(runif(5)*3600*24*1E0, tu = \"s\") pl$PTime(runif(5)*3600*24*1E3, tu = \"ms\") pl$PTime(runif(5)*3600*24*1E6, tu = \"us\") pl$PTime(runif(5)*3600*24*1E9, tu = \"ns\") pl$PTime(\"23:59:59\") pl$Series(pl$PTime(runif(5)*3600*24*1E0, tu = \"s\")) pl$lit(pl$PTime(\"23:59:59\"))$lit_to_s() pl$lit(pl$PTime(\"23:59:59\"))$to_r()","title":"Examples"},{"location":"reference/pl_Struct/","text":"pl_Struct Create Struct DataType Description Struct DataType Constructor Format function Arguments Argument Description datatype an inner DataType Value a list DataType with an inner DataType Examples # create a Struct-DataType pl$List(pl$List(pl$Boolean)) # Find any DataType via pl$dtypes print(pl$dtypes)","title":"`pl_Struct`"},{"location":"reference/pl_Struct/#pl_struct","text":"Create Struct DataType","title":"pl_Struct"},{"location":"reference/pl_Struct/#description","text":"Struct DataType Constructor","title":"Description"},{"location":"reference/pl_Struct/#format","text":"function","title":"Format"},{"location":"reference/pl_Struct/#arguments","text":"Argument Description datatype an inner DataType","title":"Arguments"},{"location":"reference/pl_Struct/#value","text":"a list DataType with an inner DataType","title":"Value"},{"location":"reference/pl_Struct/#examples","text":"# create a Struct-DataType pl$List(pl$List(pl$Boolean)) # Find any DataType via pl$dtypes print(pl$dtypes)","title":"Examples"},{"location":"reference/pl_concat/","text":"pl_concat Concat polars objects Description Concat polars objects Arguments Argument Description l list of DataFrame, or Series, LazyFrame or Expr rechunk perform a rechunk at last how choice of bind direction \"vertical\"(rbind) \"horizontal\"(cbind) \"diagnoal\" diagonally parallel BOOL default TRUE, only used for LazyFrames Value DataFrame, or Series, LazyFrame or Expr Examples #vertical l_ver = lapply(1:10, function(i) { l_internal = list( a = 1:5, b = letters[1:5] ) pl$DataFrame(l_internal) }) pl$concat(l_ver, how=\"vertical\") #horizontal l_hor = lapply(1:10, function(i) { l_internal = list( 1:5, letters[1:5] ) names(l_internal) = paste0(c(\"a\",\"b\"),i) pl$DataFrame(l_internal) }) pl$concat(l_hor, how = \"horizontal\") #diagonal pl$concat(l_hor, how = \"diagonal\")","title":"`pl_concat`"},{"location":"reference/pl_concat/#pl_concat","text":"Concat polars objects","title":"pl_concat"},{"location":"reference/pl_concat/#description","text":"Concat polars objects","title":"Description"},{"location":"reference/pl_concat/#arguments","text":"Argument Description l list of DataFrame, or Series, LazyFrame or Expr rechunk perform a rechunk at last how choice of bind direction \"vertical\"(rbind) \"horizontal\"(cbind) \"diagnoal\" diagonally parallel BOOL default TRUE, only used for LazyFrames","title":"Arguments"},{"location":"reference/pl_concat/#value","text":"DataFrame, or Series, LazyFrame or Expr","title":"Value"},{"location":"reference/pl_concat/#examples","text":"#vertical l_ver = lapply(1:10, function(i) { l_internal = list( a = 1:5, b = letters[1:5] ) pl$DataFrame(l_internal) }) pl$concat(l_ver, how=\"vertical\") #horizontal l_hor = lapply(1:10, function(i) { l_internal = list( 1:5, letters[1:5] ) names(l_internal) = paste0(c(\"a\",\"b\"),i) pl$DataFrame(l_internal) }) pl$concat(l_hor, how = \"horizontal\") #diagonal pl$concat(l_hor, how = \"diagonal\")","title":"Examples"},{"location":"reference/pl_date_range/","text":"pl_date_range new date_range Description new date_range Arguments Argument Description low POSIXt or Date preferably with time_zone or double or integer high POSIXt or Date preferably with time_zone or double or integer. If high is and interval are missing, then single datetime is constructed. interval string pl_duration or R difftime. Can be missing if high is missing also. lazy bool, if TRUE return expression closed option one of 'both'(default), 'left', 'none' or 'right' name name of series time_unit option string (\"ns\" \"us\" \"ms\") duration of one int64 value on polars side time_zone optional string describing a timezone. Details If param time_zone is not defined the Series will have no time zone. NOTICE: R POSIXt without defined timezones(tzone/tz), so called naive datetimes, are counter intuitive in R. It is recommended to always set the timezone of low and high. If not output will vary between local machine timezone, R and polars. In R/r-polars it is perfectly fine to mix timezones of params time_zone, low and high. Value a datetime Examples # All in GMT, straight forward, no mental confusion s_gmt = pl$date_range( as.POSIXct(\"2022-01-01\",tz = \"GMT\"), as.POSIXct(\"2022-01-02\",tz = \"GMT\"), interval = \"6h\", time_unit = \"ms\", time_zone = \"GMT\" ) s_gmt s_gmt$to_r() #printed same way in R and polars becuase tagged with a time_zone/tzone # polars assumes any input in GMT if time_zone = NULL, set GMT on low high to see same print s_null = pl$date_range( as.POSIXct(\"2022-01-01\",tz = \"GMT\"), as.POSIXct(\"2022-01-02\",tz = \"GMT\"), interval = \"6h\", time_unit = \"ms\", time_zone = NULL ) s_null$to_r() #back to R POSIXct. R prints non tzone tagged POSIXct in local timezone. #Any mixing of timezones is fine, just set them all, and it works as expected. t1 = as.POSIXct(\"2022-01-01\", tz = \"Etc/GMT+2\") t2 = as.POSIXct(\"2022-01-01 08:00:00\", tz = \"Etc/GMT-2\") s_mix = pl$date_range(low = t1, high = t2, interval = \"1h\", time_unit = \"ms\", time_zone = \"CET\") s_mix s_mix$to_r() #use of ISOdate t1 = ISOdate(2022,1,1,0) #preset GMT t2 = ISOdate(2022,1,2,0) #preset GMT pl$date_range(t1,t2,interval = \"4h\", time_unit = \"ms\", time_zone = \"GMT\")","title":"`pl_date_range`"},{"location":"reference/pl_date_range/#pl_date_range","text":"new date_range","title":"pl_date_range"},{"location":"reference/pl_date_range/#description","text":"new date_range","title":"Description"},{"location":"reference/pl_date_range/#arguments","text":"Argument Description low POSIXt or Date preferably with time_zone or double or integer high POSIXt or Date preferably with time_zone or double or integer. If high is and interval are missing, then single datetime is constructed. interval string pl_duration or R difftime. Can be missing if high is missing also. lazy bool, if TRUE return expression closed option one of 'both'(default), 'left', 'none' or 'right' name name of series time_unit option string (\"ns\" \"us\" \"ms\") duration of one int64 value on polars side time_zone optional string describing a timezone.","title":"Arguments"},{"location":"reference/pl_date_range/#details","text":"If param time_zone is not defined the Series will have no time zone. NOTICE: R POSIXt without defined timezones(tzone/tz), so called naive datetimes, are counter intuitive in R. It is recommended to always set the timezone of low and high. If not output will vary between local machine timezone, R and polars. In R/r-polars it is perfectly fine to mix timezones of params time_zone, low and high.","title":"Details"},{"location":"reference/pl_date_range/#value","text":"a datetime","title":"Value"},{"location":"reference/pl_date_range/#examples","text":"# All in GMT, straight forward, no mental confusion s_gmt = pl$date_range( as.POSIXct(\"2022-01-01\",tz = \"GMT\"), as.POSIXct(\"2022-01-02\",tz = \"GMT\"), interval = \"6h\", time_unit = \"ms\", time_zone = \"GMT\" ) s_gmt s_gmt$to_r() #printed same way in R and polars becuase tagged with a time_zone/tzone # polars assumes any input in GMT if time_zone = NULL, set GMT on low high to see same print s_null = pl$date_range( as.POSIXct(\"2022-01-01\",tz = \"GMT\"), as.POSIXct(\"2022-01-02\",tz = \"GMT\"), interval = \"6h\", time_unit = \"ms\", time_zone = NULL ) s_null$to_r() #back to R POSIXct. R prints non tzone tagged POSIXct in local timezone. #Any mixing of timezones is fine, just set them all, and it works as expected. t1 = as.POSIXct(\"2022-01-01\", tz = \"Etc/GMT+2\") t2 = as.POSIXct(\"2022-01-01 08:00:00\", tz = \"Etc/GMT-2\") s_mix = pl$date_range(low = t1, high = t2, interval = \"1h\", time_unit = \"ms\", time_zone = \"CET\") s_mix s_mix$to_r() #use of ISOdate t1 = ISOdate(2022,1,1,0) #preset GMT t2 = ISOdate(2022,1,2,0) #preset GMT pl$date_range(t1,t2,interval = \"4h\", time_unit = \"ms\", time_zone = \"GMT\")","title":"Examples"},{"location":"reference/pl_select/","text":"pl_select Select from an empty DataFrame Description Select from an empty DataFrame Format method Details param ... expressions passed to select pl$select is a shorthand for pl$DataFrame(list())$select NB param of this function Value DataFrame Examples pl$select( pl$lit(1:4)$alias(\"ints\"), pl$lit(letters[1:4])$alias(\"letters\") )","title":"`pl_select`"},{"location":"reference/pl_select/#pl_select","text":"Select from an empty DataFrame","title":"pl_select"},{"location":"reference/pl_select/#description","text":"Select from an empty DataFrame","title":"Description"},{"location":"reference/pl_select/#format","text":"method","title":"Format"},{"location":"reference/pl_select/#details","text":"param ... expressions passed to select pl$select is a shorthand for pl$DataFrame(list())$select NB param of this function","title":"Details"},{"location":"reference/pl_select/#value","text":"DataFrame","title":"Value"},{"location":"reference/pl_select/#examples","text":"pl$select( pl$lit(1:4)$alias(\"ints\"), pl$lit(letters[1:4])$alias(\"letters\") )","title":"Examples"},{"location":"reference/polars_options/","text":"strictly_immutable polars options Description get, set, reset polars options Arguments Argument Description strictly_immutable bool, default = TRUE, keep polars strictly immutable. Polars/arrow is in general pro \"immutable objects\". However pypolars API has some minor exceptions. All settable property elements of classes are mutable. Why?, I guess python just do not have strong stance on immutability. R strongly suggests immutable objects, so why not make polars strictly immutable where little performance costs? However, if to mimic pypolars as much as possible, set this to FALSE. named_exprs bool, default = FALSE, allow named exprs in e.g. select, with_columns, groupby, join. a named expresion will be extended with $alias(name) wildcards or expression producing multiple are problematic due to name collision the related option in py-polars is currently called 'pl.Config.with_columns_kwargs' and only allow named exprs in with_columns (or potentially any method derived there of) no_messages bool, default = FALSE, turn of messages do_not_repeat_call bool, default = FALSE, turn of messages ... any options to modify return_replaced_options return previous state of modified options Convenient for temporarily swapping of options during testing. Details who likes polars package messages? use this option to turn them off. do not print the call causing the error in error messages modifing list takes no effect, pass it to pl$set_polars_options get/set/resest interact with internal env polars:::polars_optenv setting an options may be rejected if not passing opt_requirements Value current settings as list current settings as list list named by options of requirement function input must satisfy Examples #rename columns by naming expression, experimental requires option named_exprs = TRUE pl$set_polars_options(named_exprs = TRUE) pl$DataFrame(iris)$with_columns( pl$col(\"Sepal.Length\")$abs(), #not named expr will keep name \"Sepal.Length\" SW_add_2 = (pl$col(\"Sepal.Width\")+2) ) pl$get_polars_options() pl$set_polars_options(strictly_immutable = FALSE) pl$get_polars_options() #setting strictly_immutable = 42 will be rejected as tryCatch( pl$set_polars_options(strictly_immutable = 42), error= function(e) print(e) ) #reset options like this pl$reset_polars_options() #use get_polars_opt_requirements() to requirements pl$get_polars_opt_requirements()","title":"`strictly_immutable`"},{"location":"reference/polars_options/#strictly_immutable","text":"polars options","title":"strictly_immutable"},{"location":"reference/polars_options/#description","text":"get, set, reset polars options","title":"Description"},{"location":"reference/polars_options/#arguments","text":"Argument Description strictly_immutable bool, default = TRUE, keep polars strictly immutable. Polars/arrow is in general pro \"immutable objects\". However pypolars API has some minor exceptions. All settable property elements of classes are mutable. Why?, I guess python just do not have strong stance on immutability. R strongly suggests immutable objects, so why not make polars strictly immutable where little performance costs? However, if to mimic pypolars as much as possible, set this to FALSE. named_exprs bool, default = FALSE, allow named exprs in e.g. select, with_columns, groupby, join. a named expresion will be extended with $alias(name) wildcards or expression producing multiple are problematic due to name collision the related option in py-polars is currently called 'pl.Config.with_columns_kwargs' and only allow named exprs in with_columns (or potentially any method derived there of) no_messages bool, default = FALSE, turn of messages do_not_repeat_call bool, default = FALSE, turn of messages ... any options to modify return_replaced_options return previous state of modified options Convenient for temporarily swapping of options during testing.","title":"Arguments"},{"location":"reference/polars_options/#details","text":"who likes polars package messages? use this option to turn them off. do not print the call causing the error in error messages modifing list takes no effect, pass it to pl$set_polars_options get/set/resest interact with internal env polars:::polars_optenv setting an options may be rejected if not passing opt_requirements","title":"Details"},{"location":"reference/polars_options/#value","text":"current settings as list current settings as list list named by options of requirement function input must satisfy","title":"Value"},{"location":"reference/polars_options/#examples","text":"#rename columns by naming expression, experimental requires option named_exprs = TRUE pl$set_polars_options(named_exprs = TRUE) pl$DataFrame(iris)$with_columns( pl$col(\"Sepal.Length\")$abs(), #not named expr will keep name \"Sepal.Length\" SW_add_2 = (pl$col(\"Sepal.Width\")+2) ) pl$get_polars_options() pl$set_polars_options(strictly_immutable = FALSE) pl$get_polars_options() #setting strictly_immutable = 42 will be rejected as tryCatch( pl$set_polars_options(strictly_immutable = 42), error= function(e) print(e) ) #reset options like this pl$reset_polars_options() #use get_polars_opt_requirements() to requirements pl$get_polars_opt_requirements()","title":"Examples"},{"location":"reference/polars_runtime_flags/","text":"polars_runtime_flags internal keeping of state at runtime Description This environment is used internally for the package to remember what has been going on. Currently only used to throw one-time warnings() Format An object of class environment of length 0. Usage runtime_state","title":"`polars_runtime_flags`"},{"location":"reference/polars_runtime_flags/#polars_runtime_flags","text":"internal keeping of state at runtime","title":"polars_runtime_flags"},{"location":"reference/polars_runtime_flags/#description","text":"This environment is used internally for the package to remember what has been going on. Currently only used to throw one-time warnings()","title":"Description"},{"location":"reference/polars_runtime_flags/#format","text":"An object of class environment of length 0.","title":"Format"},{"location":"reference/polars_runtime_flags/#usage","text":"runtime_state","title":"Usage"},{"location":"reference/prepare_alpha/","text":"prepare_alpha preapare alpha Description internal function for emw_x expressions Usage prepare_alpha(com = NULL, span = NULL, half_life = NULL, alpha = NULL) Arguments Argument Description com numeric or NULL span numeric or NULL half_life numeric or NULL alpha numeric or NULL Value numeric","title":"`prepare_alpha`"},{"location":"reference/prepare_alpha/#prepare_alpha","text":"preapare alpha","title":"prepare_alpha"},{"location":"reference/prepare_alpha/#description","text":"internal function for emw_x expressions","title":"Description"},{"location":"reference/prepare_alpha/#usage","text":"prepare_alpha(com = NULL, span = NULL, half_life = NULL, alpha = NULL)","title":"Usage"},{"location":"reference/prepare_alpha/#arguments","text":"Argument Description com numeric or NULL span numeric or NULL half_life numeric or NULL alpha numeric or NULL","title":"Arguments"},{"location":"reference/prepare_alpha/#value","text":"numeric","title":"Value"},{"location":"reference/print-open-paren-close-paren/","text":"print() s3 method print DataFrame Description s3 method print DataFrame Usage list(list(\"print\"), list(\"DataFrame\"))(x, ...) Arguments Argument Description x DataFrame ... not used Value self Examples pl$DataFrame(iris)","title":"`print()`"},{"location":"reference/print-open-paren-close-paren/#print","text":"s3 method print DataFrame","title":"print()"},{"location":"reference/print-open-paren-close-paren/#description","text":"s3 method print DataFrame","title":"Description"},{"location":"reference/print-open-paren-close-paren/#usage","text":"list(list(\"print\"), list(\"DataFrame\"))(x, ...)","title":"Usage"},{"location":"reference/print-open-paren-close-paren/#arguments","text":"Argument Description x DataFrame ... not used","title":"Arguments"},{"location":"reference/print-open-paren-close-paren/#value","text":"self","title":"Value"},{"location":"reference/print-open-paren-close-paren/#examples","text":"pl$DataFrame(iris)","title":"Examples"},{"location":"reference/print.Expr/","text":"print.Expr Print expr Description Print expr Usage list(list(\"print\"), list(\"Expr\"))(x, ...) Arguments Argument Description x Expr ... not used Value self Examples pl$col(\"some_column\")$sum()$over(\"some_other_column\")","title":"`print.Expr`"},{"location":"reference/print.Expr/#printexpr","text":"Print expr","title":"print.Expr"},{"location":"reference/print.Expr/#description","text":"Print expr","title":"Description"},{"location":"reference/print.Expr/#usage","text":"list(list(\"print\"), list(\"Expr\"))(x, ...)","title":"Usage"},{"location":"reference/print.Expr/#arguments","text":"Argument Description x Expr ... not used","title":"Arguments"},{"location":"reference/print.Expr/#value","text":"self","title":"Value"},{"location":"reference/print.Expr/#examples","text":"pl$col(\"some_column\")$sum()$over(\"some_other_column\")","title":"Examples"},{"location":"reference/print.GroupBy/","text":"print.GroupBy print GroupBy Description print GroupBy Usage list(list(\"print\"), list(\"GroupBy\"))(x, ...) Arguments Argument Description x DataFrame ... not used Value self Examples pl$DataFrame(iris)$groupby(\"Species\")","title":"`print.GroupBy`"},{"location":"reference/print.GroupBy/#printgroupby","text":"print GroupBy","title":"print.GroupBy"},{"location":"reference/print.GroupBy/#description","text":"print GroupBy","title":"Description"},{"location":"reference/print.GroupBy/#usage","text":"list(list(\"print\"), list(\"GroupBy\"))(x, ...)","title":"Usage"},{"location":"reference/print.GroupBy/#arguments","text":"Argument Description x DataFrame ... not used","title":"Arguments"},{"location":"reference/print.GroupBy/#value","text":"self","title":"Value"},{"location":"reference/print.GroupBy/#examples","text":"pl$DataFrame(iris)$groupby(\"Species\")","title":"Examples"},{"location":"reference/print.LazyFrame/","text":"print.LazyFrame print LazyFrame s3 method Description print LazyFrame s3 method Usage list(list(\"print\"), list(\"LazyFrame\"))(x, ...) Arguments Argument Description x DataFrame ... not used Value self Examples print(pl$DataFrame(iris)$lazy())","title":"`print.LazyFrame`"},{"location":"reference/print.LazyFrame/#printlazyframe","text":"print LazyFrame s3 method","title":"print.LazyFrame"},{"location":"reference/print.LazyFrame/#description","text":"print LazyFrame s3 method","title":"Description"},{"location":"reference/print.LazyFrame/#usage","text":"list(list(\"print\"), list(\"LazyFrame\"))(x, ...)","title":"Usage"},{"location":"reference/print.LazyFrame/#arguments","text":"Argument Description x DataFrame ... not used","title":"Arguments"},{"location":"reference/print.LazyFrame/#value","text":"self","title":"Value"},{"location":"reference/print.LazyFrame/#examples","text":"print(pl$DataFrame(iris)$lazy())","title":"Examples"},{"location":"reference/print.LazyGroupBy/","text":"print.LazyGroupBy print LazyGroupBy Description print LazyGroupBy Usage list(list(\"print\"), list(\"LazyGroupBy\"))(x, ...) Arguments Argument Description x LazyGroupBy ... not used Value self","title":"`print.LazyGroupBy`"},{"location":"reference/print.LazyGroupBy/#printlazygroupby","text":"print LazyGroupBy","title":"print.LazyGroupBy"},{"location":"reference/print.LazyGroupBy/#description","text":"print LazyGroupBy","title":"Description"},{"location":"reference/print.LazyGroupBy/#usage","text":"list(list(\"print\"), list(\"LazyGroupBy\"))(x, ...)","title":"Usage"},{"location":"reference/print.LazyGroupBy/#arguments","text":"Argument Description x LazyGroupBy ... not used","title":"Arguments"},{"location":"reference/print.LazyGroupBy/#value","text":"self","title":"Value"},{"location":"reference/print.PTime/","text":"print.PTime print PTime Description print PTime Usage list(list(\"print\"), list(\"PTime\"))(x, ...) Arguments Argument Description x a PTime vector ... not used Value invisible x","title":"`print.PTime`"},{"location":"reference/print.PTime/#printptime","text":"print PTime","title":"print.PTime"},{"location":"reference/print.PTime/#description","text":"print PTime","title":"Description"},{"location":"reference/print.PTime/#usage","text":"list(list(\"print\"), list(\"PTime\"))(x, ...)","title":"Usage"},{"location":"reference/print.PTime/#arguments","text":"Argument Description x a PTime vector ... not used","title":"Arguments"},{"location":"reference/print.PTime/#value","text":"invisible x","title":"Value"},{"location":"reference/print.PolarsBackgroundHandle/","text":"print.PolarsBackgroundHandle print LazyFrame s3 method Description print LazyFrame s3 method Usage list(list(\"print\"), list(\"PolarsBackgroundHandle\"))(x, ...) Arguments Argument Description x DataFrame ... not used Value self Examples lazy_df = pl$DataFrame(iris[,1:3])$lazy()$select(pl$all()$first()) handle = lazy_df$collect_background() handle$is_exhausted() df = handle$join() handle$is_exhausted()","title":"`print.PolarsBackgroundHandle`"},{"location":"reference/print.PolarsBackgroundHandle/#printpolarsbackgroundhandle","text":"print LazyFrame s3 method","title":"print.PolarsBackgroundHandle"},{"location":"reference/print.PolarsBackgroundHandle/#description","text":"print LazyFrame s3 method","title":"Description"},{"location":"reference/print.PolarsBackgroundHandle/#usage","text":"list(list(\"print\"), list(\"PolarsBackgroundHandle\"))(x, ...)","title":"Usage"},{"location":"reference/print.PolarsBackgroundHandle/#arguments","text":"Argument Description x DataFrame ... not used","title":"Arguments"},{"location":"reference/print.PolarsBackgroundHandle/#value","text":"self","title":"Value"},{"location":"reference/print.PolarsBackgroundHandle/#examples","text":"lazy_df = pl$DataFrame(iris[,1:3])$lazy()$select(pl$all()$first()) handle = lazy_df$collect_background() handle$is_exhausted() df = handle$join() handle$is_exhausted()","title":"Examples"},{"location":"reference/print.RField/","text":"print.RField Print a polars Field Description Print a polars Field Usage list(list(\"print\"), list(\"RField\"))(x, ...) Arguments Argument Description x DataType ... not used Value self Examples print(pl$Field(\"foo\",pl$List(pl$UInt64)))","title":"`print.RField`"},{"location":"reference/print.RField/#printrfield","text":"Print a polars Field","title":"print.RField"},{"location":"reference/print.RField/#description","text":"Print a polars Field","title":"Description"},{"location":"reference/print.RField/#usage","text":"list(list(\"print\"), list(\"RField\"))(x, ...)","title":"Usage"},{"location":"reference/print.RField/#arguments","text":"Argument Description x DataType ... not used","title":"Arguments"},{"location":"reference/print.RField/#value","text":"self","title":"Value"},{"location":"reference/print.RField/#examples","text":"print(pl$Field(\"foo\",pl$List(pl$UInt64)))","title":"Examples"},{"location":"reference/print.RPolarsDataType/","text":"print.RPolarsDataType print a polars datatype Description print a polars datatype Usage list(list(\"print\"), list(\"RPolarsDataType\"))(x, ...) Arguments Argument Description x DataType ... not used Value self Examples pl$dtypes$Boolean #implicit print","title":"`print.RPolarsDataType`"},{"location":"reference/print.RPolarsDataType/#printrpolarsdatatype","text":"print a polars datatype","title":"print.RPolarsDataType"},{"location":"reference/print.RPolarsDataType/#description","text":"print a polars datatype","title":"Description"},{"location":"reference/print.RPolarsDataType/#usage","text":"list(list(\"print\"), list(\"RPolarsDataType\"))(x, ...)","title":"Usage"},{"location":"reference/print.RPolarsDataType/#arguments","text":"Argument Description x DataType ... not used","title":"Arguments"},{"location":"reference/print.RPolarsDataType/#value","text":"self","title":"Value"},{"location":"reference/print.RPolarsDataType/#examples","text":"pl$dtypes$Boolean #implicit print","title":"Examples"},{"location":"reference/print.When/","text":"print.When print When Description print When Usage list(list(\"print\"), list(\"When\"))(x, ...) Arguments Argument Description x When object ... not used Value self Examples print(pl$when(pl$col(\"a\")>2))","title":"`print.When`"},{"location":"reference/print.When/#printwhen","text":"print When","title":"print.When"},{"location":"reference/print.When/#description","text":"print When","title":"Description"},{"location":"reference/print.When/#usage","text":"list(list(\"print\"), list(\"When\"))(x, ...)","title":"Usage"},{"location":"reference/print.When/#arguments","text":"Argument Description x When object ... not used","title":"Arguments"},{"location":"reference/print.When/#value","text":"self","title":"Value"},{"location":"reference/print.When/#examples","text":"print(pl$when(pl$col(\"a\")>2))","title":"Examples"},{"location":"reference/print.WhenThen/","text":"print.WhenThen print When Description print When Usage list(list(\"print\"), list(\"WhenThen\"))(x, ...) Arguments Argument Description x When object ... not used Value self Examples print(pl$when(pl$col(\"a\")>2)$then(pl$lit(\"more than two\")))","title":"`print.WhenThen`"},{"location":"reference/print.WhenThen/#printwhenthen","text":"print When","title":"print.WhenThen"},{"location":"reference/print.WhenThen/#description","text":"print When","title":"Description"},{"location":"reference/print.WhenThen/#usage","text":"list(list(\"print\"), list(\"WhenThen\"))(x, ...)","title":"Usage"},{"location":"reference/print.WhenThen/#arguments","text":"Argument Description x When object ... not used","title":"Arguments"},{"location":"reference/print.WhenThen/#value","text":"self","title":"Value"},{"location":"reference/print.WhenThen/#examples","text":"print(pl$when(pl$col(\"a\")>2)$then(pl$lit(\"more than two\")))","title":"Examples"},{"location":"reference/print.WhenThenThen/","text":"print.WhenThenThen print When Description print When Usage list(list(\"print\"), list(\"WhenThenThen\"))(x, ...) Arguments Argument Description x When object ... not used Value self Examples # print(pl$when(pl$col(\"a\")>2)$then(pl$lit(\"more than two\"))$when(pl$col(\"b\")<5))","title":"`print.WhenThenThen`"},{"location":"reference/print.WhenThenThen/#printwhenthenthen","text":"print When","title":"print.WhenThenThen"},{"location":"reference/print.WhenThenThen/#description","text":"print When","title":"Description"},{"location":"reference/print.WhenThenThen/#usage","text":"list(list(\"print\"), list(\"WhenThenThen\"))(x, ...)","title":"Usage"},{"location":"reference/print.WhenThenThen/#arguments","text":"Argument Description x When object ... not used","title":"Arguments"},{"location":"reference/print.WhenThenThen/#value","text":"self","title":"Value"},{"location":"reference/print.WhenThenThen/#examples","text":"# print(pl$when(pl$col(\"a\")>2)$then(pl$lit(\"more than two\"))$when(pl$col(\"b\")<5))","title":"Examples"},{"location":"reference/print_env/","text":"print_env print recursively an environment, used in some documentation Description print recursively an environment, used in some documentation Usage print_env(api, name, max_depth = 10) Arguments Argument Description api env name name of env max_depth numeric/int max levels to recursive iterate through","title":"`print_env`"},{"location":"reference/print_env/#print_env","text":"print recursively an environment, used in some documentation","title":"print_env"},{"location":"reference/print_env/#description","text":"print recursively an environment, used in some documentation","title":"Description"},{"location":"reference/print_env/#usage","text":"print_env(api, name, max_depth = 10)","title":"Usage"},{"location":"reference/print_env/#arguments","text":"Argument Description api env name name of env max_depth numeric/int max levels to recursive iterate through","title":"Arguments"},{"location":"reference/pstop/","text":"pstop Internal preferred function to throw errors Description DEPRECATED USE stopf instead Usage pstop(err, call = sys.call(1L)) Arguments Argument Description err error msg string call calling context Value throws an error Examples f = function() polars:::pstop(\"this aint right!!\") tryCatch(f(), error = \\(e) as.character(e))","title":"`pstop`"},{"location":"reference/pstop/#pstop","text":"Internal preferred function to throw errors","title":"pstop"},{"location":"reference/pstop/#description","text":"DEPRECATED USE stopf instead","title":"Description"},{"location":"reference/pstop/#usage","text":"pstop(err, call = sys.call(1L))","title":"Usage"},{"location":"reference/pstop/#arguments","text":"Argument Description err error msg string call calling context","title":"Arguments"},{"location":"reference/pstop/#value","text":"throws an error","title":"Value"},{"location":"reference/pstop/#examples","text":"f = function() polars:::pstop(\"this aint right!!\") tryCatch(f(), error = \\(e) as.character(e))","title":"Examples"},{"location":"reference/read_csv_/","text":"read_csv_ high level csv_reader, will download if path is url Description high level csv_reader, will download if path is url Usage read_csv_(path, lazy = FALSE, reuse_downloaded = TRUE, ...) Arguments Argument Description path file or url lazy bool default FALSE, read csv lazy reuse_downloaded bool default TRUE, cache url downloaded files in session an reuse ... arguments forwarded to csv_reader or lazy_csv_reader Value polars_DataFrame or polars_lazy_DataFrame Examples df = pl$read_csv(\"https://j.mp/iriscsv\")","title":"`read_csv_`"},{"location":"reference/read_csv_/#read_csv_","text":"high level csv_reader, will download if path is url","title":"read_csv_"},{"location":"reference/read_csv_/#description","text":"high level csv_reader, will download if path is url","title":"Description"},{"location":"reference/read_csv_/#usage","text":"read_csv_(path, lazy = FALSE, reuse_downloaded = TRUE, ...)","title":"Usage"},{"location":"reference/read_csv_/#arguments","text":"Argument Description path file or url lazy bool default FALSE, read csv lazy reuse_downloaded bool default TRUE, cache url downloaded files in session an reuse ... arguments forwarded to csv_reader or lazy_csv_reader","title":"Arguments"},{"location":"reference/read_csv_/#value","text":"polars_DataFrame or polars_lazy_DataFrame","title":"Value"},{"location":"reference/read_csv_/#examples","text":"df = pl$read_csv(\"https://j.mp/iriscsv\")","title":"Examples"},{"location":"reference/replace_private_with_pub_methods/","text":"replace_private_with_pub_methods replace private class-methods with public Description extendr places the naked internal calls to rust in env-classes. This function can be used to delete them and replaces them with the public methods. Which are any function matching pattern typically '^CLASSNAME' e.g. '^DataFrame_' or '^Series_'. Likely only used in zzz.R Usage replace_private_with_pub_methods( env, class_pattern, keep = c(), remove_f = FALSE ) Arguments Argument Description env class envrionment to modify. Envs are mutable so no return needed class_pattern a regex string matching declared public functions of that class keep list of unmentioned methods to keep in public api remove_f bool if true, will move methods, not copy Value side effects only","title":"`replace_private_with_pub_methods`"},{"location":"reference/replace_private_with_pub_methods/#replace_private_with_pub_methods","text":"replace private class-methods with public","title":"replace_private_with_pub_methods"},{"location":"reference/replace_private_with_pub_methods/#description","text":"extendr places the naked internal calls to rust in env-classes. This function can be used to delete them and replaces them with the public methods. Which are any function matching pattern typically '^CLASSNAME' e.g. '^DataFrame_' or '^Series_'. Likely only used in zzz.R","title":"Description"},{"location":"reference/replace_private_with_pub_methods/#usage","text":"replace_private_with_pub_methods( env, class_pattern, keep = c(), remove_f = FALSE )","title":"Usage"},{"location":"reference/replace_private_with_pub_methods/#arguments","text":"Argument Description env class envrionment to modify. Envs are mutable so no return needed class_pattern a regex string matching declared public functions of that class keep list of unmentioned methods to keep in public api remove_f bool if true, will move methods, not copy","title":"Arguments"},{"location":"reference/replace_private_with_pub_methods/#value","text":"side effects only","title":"Value"},{"location":"reference/restruct_list/","text":"restruct_list restruct list Description lifecycle:: Deprecate Restruct an object where structs where previously unnested Usage restruct_list(l) Arguments Argument Description l list Details It was much easier impl export unnested struct from polars. This function restructs exported unnested structs. This function should be repalced with rust code writing this output directly before nesting. This hack relies on rust uses the tag \"is_struct\" to mark what should be re-structed. Value restructed list","title":"`restruct_list`"},{"location":"reference/restruct_list/#restruct_list","text":"restruct list","title":"restruct_list"},{"location":"reference/restruct_list/#description","text":"lifecycle:: Deprecate Restruct an object where structs where previously unnested","title":"Description"},{"location":"reference/restruct_list/#usage","text":"restruct_list(l)","title":"Usage"},{"location":"reference/restruct_list/#arguments","text":"Argument Description l list","title":"Arguments"},{"location":"reference/restruct_list/#details","text":"It was much easier impl export unnested struct from polars. This function restructs exported unnested structs. This function should be repalced with rust code writing this output directly before nesting. This hack relies on rust uses the tag \"is_struct\" to mark what should be re-structed.","title":"Details"},{"location":"reference/restruct_list/#value","text":"restructed list","title":"Value"},{"location":"reference/same_outer_datatype/","text":"same_outer_datatype check if x is a valid RPolarsDataType Description check if x is a valid RPolarsDataType Arguments Argument Description lhs an RPolarsDataType rhs an RPolarsDataType Value bool TRUE if outer datatype is the same. Examples # TRUE pl$same_outer_dt(pl$Datetime(\"us\"),pl$Datetime(\"ms\")) pl$same_outer_dt(pl$List(pl$Int64),pl$List(pl$Float32)) #FALSE pl$same_outer_dt(pl$Int64,pl$Float64)","title":"`same_outer_datatype`"},{"location":"reference/same_outer_datatype/#same_outer_datatype","text":"check if x is a valid RPolarsDataType","title":"same_outer_datatype"},{"location":"reference/same_outer_datatype/#description","text":"check if x is a valid RPolarsDataType","title":"Description"},{"location":"reference/same_outer_datatype/#arguments","text":"Argument Description lhs an RPolarsDataType rhs an RPolarsDataType","title":"Arguments"},{"location":"reference/same_outer_datatype/#value","text":"bool TRUE if outer datatype is the same.","title":"Value"},{"location":"reference/same_outer_datatype/#examples","text":"# TRUE pl$same_outer_dt(pl$Datetime(\"us\"),pl$Datetime(\"ms\")) pl$same_outer_dt(pl$List(pl$Int64),pl$List(pl$Float32)) #FALSE pl$same_outer_dt(pl$Int64,pl$Float64)","title":"Examples"},{"location":"reference/scan_arrow_ipc/","text":"scan_arrow_ipc Import data in Apache Arrow IPC format Description Import data in Apache Arrow IPC format Usage scan_arrow_ipc( path, n_rows = NULL, cache = TRUE, rechunk = TRUE, row_count_name = NULL, row_count_offset = 0L, memmap = TRUE ) Arguments Argument Description path string, path n_rows integer, limit rows to scan cache bool, use cache rechunk bool, rechunk reorganize memory layout, potentially make future operations faster, however perform reallocation now. row_count_name NULL or string, if a string add a rowcount column named by this string row_count_offset integer, the rowcount column can be offst by this value memmap bool, mapped memory Details Create new LazyFrame from Apache Arrow IPC file or stream Value LazyFrame","title":"`scan_arrow_ipc`"},{"location":"reference/scan_arrow_ipc/#scan_arrow_ipc","text":"Import data in Apache Arrow IPC format","title":"scan_arrow_ipc"},{"location":"reference/scan_arrow_ipc/#description","text":"Import data in Apache Arrow IPC format","title":"Description"},{"location":"reference/scan_arrow_ipc/#usage","text":"scan_arrow_ipc( path, n_rows = NULL, cache = TRUE, rechunk = TRUE, row_count_name = NULL, row_count_offset = 0L, memmap = TRUE )","title":"Usage"},{"location":"reference/scan_arrow_ipc/#arguments","text":"Argument Description path string, path n_rows integer, limit rows to scan cache bool, use cache rechunk bool, rechunk reorganize memory layout, potentially make future operations faster, however perform reallocation now. row_count_name NULL or string, if a string add a rowcount column named by this string row_count_offset integer, the rowcount column can be offst by this value memmap bool, mapped memory","title":"Arguments"},{"location":"reference/scan_arrow_ipc/#details","text":"Create new LazyFrame from Apache Arrow IPC file or stream","title":"Details"},{"location":"reference/scan_arrow_ipc/#value","text":"LazyFrame","title":"Value"},{"location":"reference/scan_parquet/","text":"scan_parquet new LazyFrame from parquet file Description new LazyFrame from parquet file Usage scan_parquet( file, n_rows = NULL, cache = TRUE, parallel = c(\"Auto\", \"None\", \"Columns\", \"RowGroups\"), rechunk = TRUE, row_count_name = NULL, row_count_offset = 0L, low_memory = FALSE ) Arguments Argument Description file string filepath n_rows limit rows to scan cache bool use cache parallel String either Auto, None, Columns or RowGroups. The way to parralize the scan. rechunk bool rechunk reorganize memory layout, potentially make future operations faster , however perform reallocation now. row_count_name NULL or string, if a string add a rowcount column named by this string row_count_offset integer, the rowcount column can be offst by this value low_memory bool, try reduce memory footprint Value LazyFrame Examples #TODO write parquet example","title":"`scan_parquet`"},{"location":"reference/scan_parquet/#scan_parquet","text":"new LazyFrame from parquet file","title":"scan_parquet"},{"location":"reference/scan_parquet/#description","text":"new LazyFrame from parquet file","title":"Description"},{"location":"reference/scan_parquet/#usage","text":"scan_parquet( file, n_rows = NULL, cache = TRUE, parallel = c(\"Auto\", \"None\", \"Columns\", \"RowGroups\"), rechunk = TRUE, row_count_name = NULL, row_count_offset = 0L, low_memory = FALSE )","title":"Usage"},{"location":"reference/scan_parquet/#arguments","text":"Argument Description file string filepath n_rows limit rows to scan cache bool use cache parallel String either Auto, None, Columns or RowGroups. The way to parralize the scan. rechunk bool rechunk reorganize memory layout, potentially make future operations faster , however perform reallocation now. row_count_name NULL or string, if a string add a rowcount column named by this string row_count_offset integer, the rowcount column can be offst by this value low_memory bool, try reduce memory footprint","title":"Arguments"},{"location":"reference/scan_parquet/#value","text":"LazyFrame","title":"Value"},{"location":"reference/scan_parquet/#examples","text":"#TODO write parquet example","title":"Examples"},{"location":"reference/str_string/","text":"str_string Simple viewer of an R object based on str() Description Simple viewer of an R object based on str() Usage str_string(x, collapse = \" \") Arguments Argument Description x object to view. collapse word to glue possible multilines with Value string Examples polars:::str_string(list(a=42,c(1,2,3,NA)))","title":"`str_string`"},{"location":"reference/str_string/#str_string","text":"Simple viewer of an R object based on str()","title":"str_string"},{"location":"reference/str_string/#description","text":"Simple viewer of an R object based on str()","title":"Description"},{"location":"reference/str_string/#usage","text":"str_string(x, collapse = \" \")","title":"Usage"},{"location":"reference/str_string/#arguments","text":"Argument Description x object to view. collapse word to glue possible multilines with","title":"Arguments"},{"location":"reference/str_string/#value","text":"string","title":"Value"},{"location":"reference/str_string/#examples","text":"polars:::str_string(list(a=42,c(1,2,3,NA)))","title":"Examples"},{"location":"reference/struct/","text":"struct struct Description Collect several columns into a Series of dtype Struct. Arguments Argument Description exprs Columns/Expressions to collect into a Struct. eager Evaluate immediately. schema Optional schema named list that explicitly defines the struct field dtypes. Each name must match a column name wrapped in the struct. Can only be used to cast some or all dtypes, not to change the names. NULL means to include keep columns into the struct by their current DataType. If a column is not included in the schema it is removed from the final struct. Details pl$struct creates Expr or Series of DataType Struct() pl$Struct creates the DataType Struct() In polars a schema is a named list of DataTypes. #' A schema describes e.g. a DataFrame. More formally schemas consist of Fields. A Field is an object describing the name and DataType of a column/Series, but same same. A struct is a DataFrame wrapped into a Series, the DataType is Struct, and each sub-datatype within are Fields. In a dynamic language schema and a Struct (the DataType) are quite the same, except schemas describe DataFrame and Struct's describe some Series. Value Eager=FALSE: Expr of Series with dtype Struct | Eager=TRUE: Series with dtype Struct Examples #isolated expression to wrap all columns in a struct aliased 'my_struct' pl$struct(pl$all())$alias(\"my_struct\") #wrap all column into on column/Series df = pl$DataFrame( int = 1:2, str = c(\"a\", \"b\"), bool = c(TRUE, NA), list = list(1:2, 3L) )$select( pl$struct(pl$all())$alias(\"my_struct\") ) print(df) print(df$schema) #returns a schema, a named list containing one element a Struct named my_struct # wrap two columns in a struct and provide a schema to set all or some DataTypes by name e1 = pl$struct( pl$col(c(\"int\",\"str\")), schema = list(int=pl$Int64, str=pl$Utf8) )$alias(\"my_struct\") # same result as e.g. wrapping the columns in a struct and casting afterwards e2 = pl$struct( list(pl$col(\"int\"),pl$col(\"str\")) )$cast( pl$Struct(int=pl$Int64,str=pl$Utf8) )$alias(\"my_struct\") df = pl$DataFrame( int = 1:2, str = c(\"a\", \"b\"), bool = c(TRUE, NA), list = list(1:2, 3L) ) #verify equality in R identical(df$select(e1)$to_list(),df$select(e2)$to_list()) df$select(e2) df$select(e2)$as_data_frame()","title":"`struct`"},{"location":"reference/struct/#struct","text":"struct","title":"struct"},{"location":"reference/struct/#description","text":"Collect several columns into a Series of dtype Struct.","title":"Description"},{"location":"reference/struct/#arguments","text":"Argument Description exprs Columns/Expressions to collect into a Struct. eager Evaluate immediately. schema Optional schema named list that explicitly defines the struct field dtypes. Each name must match a column name wrapped in the struct. Can only be used to cast some or all dtypes, not to change the names. NULL means to include keep columns into the struct by their current DataType. If a column is not included in the schema it is removed from the final struct.","title":"Arguments"},{"location":"reference/struct/#details","text":"pl$struct creates Expr or Series of DataType Struct() pl$Struct creates the DataType Struct() In polars a schema is a named list of DataTypes. #' A schema describes e.g. a DataFrame. More formally schemas consist of Fields. A Field is an object describing the name and DataType of a column/Series, but same same. A struct is a DataFrame wrapped into a Series, the DataType is Struct, and each sub-datatype within are Fields. In a dynamic language schema and a Struct (the DataType) are quite the same, except schemas describe DataFrame and Struct's describe some Series.","title":"Details"},{"location":"reference/struct/#value","text":"Eager=FALSE: Expr of Series with dtype Struct | Eager=TRUE: Series with dtype Struct","title":"Value"},{"location":"reference/struct/#examples","text":"#isolated expression to wrap all columns in a struct aliased 'my_struct' pl$struct(pl$all())$alias(\"my_struct\") #wrap all column into on column/Series df = pl$DataFrame( int = 1:2, str = c(\"a\", \"b\"), bool = c(TRUE, NA), list = list(1:2, 3L) )$select( pl$struct(pl$all())$alias(\"my_struct\") ) print(df) print(df$schema) #returns a schema, a named list containing one element a Struct named my_struct # wrap two columns in a struct and provide a schema to set all or some DataTypes by name e1 = pl$struct( pl$col(c(\"int\",\"str\")), schema = list(int=pl$Int64, str=pl$Utf8) )$alias(\"my_struct\") # same result as e.g. wrapping the columns in a struct and casting afterwards e2 = pl$struct( list(pl$col(\"int\"),pl$col(\"str\")) )$cast( pl$Struct(int=pl$Int64,str=pl$Utf8) )$alias(\"my_struct\") df = pl$DataFrame( int = 1:2, str = c(\"a\", \"b\"), bool = c(TRUE, NA), list = list(1:2, 3L) ) #verify equality in R identical(df$select(e1)$to_list(),df$select(e2)$to_list()) df$select(e2) df$select(e2)$as_data_frame()","title":"Examples"},{"location":"reference/sum/","text":"sum sum across expressions / literals / Series Description syntactic sugar for starting a expression with sum Arguments Argument Description ... is a: If one arg: Series or Expr, same as column$sum() string, same as pl$col(column)$sum() numeric, same as pl$lit(column)$sum() list of strings(column names) or exprressions to add up as expr1 + expr2 + expr3 + ... If several args, then wrapped in a list and handled as above. Value Expr Examples #column as string pl$DataFrame(iris)$select(pl$sum(\"Petal.Width\")) #column as Expr (prefer pl$col(\"Petal.Width\")$sum()) pl$DataFrame(iris)$select(pl$sum(pl$col(\"Petal.Width\"))) #column as numeric pl$DataFrame()$select(pl$sum(1:5)) #column as list pl$DataFrame(a=1:2,b=3:4,c=5:6)$with_column(pl$sum(list(\"a\",\"c\"))) pl$DataFrame(a=1:2,b=3:4,c=5:6)$with_column(pl$sum(list(\"a\",\"c\", 42L))) #three eqivalent lines pl$DataFrame(a=1:2,b=3:4,c=5:6)$with_column(pl$sum(list(\"a\",\"c\", pl$sum(list(\"a\",\"b\",\"c\"))))) pl$DataFrame(a=1:2,b=3:4,c=5:6)$with_column(pl$sum(list(pl$col(\"a\")+pl$col(\"b\"),\"c\"))) pl$DataFrame(a=1:2,b=3:4,c=5:6)$with_column(pl$sum(list(\"*\")))","title":"`sum`"},{"location":"reference/sum/#sum","text":"sum across expressions / literals / Series","title":"sum"},{"location":"reference/sum/#description","text":"syntactic sugar for starting a expression with sum","title":"Description"},{"location":"reference/sum/#arguments","text":"Argument Description ... is a: If one arg: Series or Expr, same as column$sum() string, same as pl$col(column)$sum() numeric, same as pl$lit(column)$sum() list of strings(column names) or exprressions to add up as expr1 + expr2 + expr3 + ... If several args, then wrapped in a list and handled as above.","title":"Arguments"},{"location":"reference/sum/#value","text":"Expr","title":"Value"},{"location":"reference/sum/#examples","text":"#column as string pl$DataFrame(iris)$select(pl$sum(\"Petal.Width\")) #column as Expr (prefer pl$col(\"Petal.Width\")$sum()) pl$DataFrame(iris)$select(pl$sum(pl$col(\"Petal.Width\"))) #column as numeric pl$DataFrame()$select(pl$sum(1:5)) #column as list pl$DataFrame(a=1:2,b=3:4,c=5:6)$with_column(pl$sum(list(\"a\",\"c\"))) pl$DataFrame(a=1:2,b=3:4,c=5:6)$with_column(pl$sum(list(\"a\",\"c\", 42L))) #three eqivalent lines pl$DataFrame(a=1:2,b=3:4,c=5:6)$with_column(pl$sum(list(\"a\",\"c\", pl$sum(list(\"a\",\"b\",\"c\"))))) pl$DataFrame(a=1:2,b=3:4,c=5:6)$with_column(pl$sum(list(pl$col(\"a\")+pl$col(\"b\"),\"c\"))) pl$DataFrame(a=1:2,b=3:4,c=5:6)$with_column(pl$sum(list(\"*\")))","title":"Examples"},{"location":"reference/to_list/","text":"to_list return polars DataFrame as R lit of vectors Description return polars DataFrame as R lit of vectors Usage DataFrame_to_list(unnest_structs = TRUE) Arguments Argument Description unnest_structs bool default true, as calling $unnest() on any struct column Details This implementation for simplicity reasons relies on unnesting all structs before exporting to R. unnest_structs = FALSE, the previous struct columns will be re- nested. A struct in a R is a lists of lists, where each row is a list of values. Such a structure is not very typical or efficient in R. Value R list of vectors Examples pl$DataFrame(iris)$to_list()","title":"`to_list`"},{"location":"reference/to_list/#to_list","text":"return polars DataFrame as R lit of vectors","title":"to_list"},{"location":"reference/to_list/#description","text":"return polars DataFrame as R lit of vectors","title":"Description"},{"location":"reference/to_list/#usage","text":"DataFrame_to_list(unnest_structs = TRUE)","title":"Usage"},{"location":"reference/to_list/#arguments","text":"Argument Description unnest_structs bool default true, as calling $unnest() on any struct column","title":"Arguments"},{"location":"reference/to_list/#details","text":"This implementation for simplicity reasons relies on unnesting all structs before exporting to R. unnest_structs = FALSE, the previous struct columns will be re- nested. A struct in a R is a lists of lists, where each row is a list of values. Such a structure is not very typical or efficient in R.","title":"Details"},{"location":"reference/to_list/#value","text":"R list of vectors","title":"Value"},{"location":"reference/to_list/#examples","text":"pl$DataFrame(iris)$to_list()","title":"Examples"},{"location":"reference/unAsIs/","text":"unAsIs Reverts wrapping in I Description Reverts wrapping in I Usage unAsIs(X) Arguments Argument Description X any Robj wrapped in `I()`` Details https://stackoverflow.com/questions/12865218/getting-rid-of-asis-class-attribute Value X without any AsIs subclass","title":"`unAsIs`"},{"location":"reference/unAsIs/#unasis","text":"Reverts wrapping in I","title":"unAsIs"},{"location":"reference/unAsIs/#description","text":"Reverts wrapping in I","title":"Description"},{"location":"reference/unAsIs/#usage","text":"unAsIs(X)","title":"Usage"},{"location":"reference/unAsIs/#arguments","text":"Argument Description X any Robj wrapped in `I()``","title":"Arguments"},{"location":"reference/unAsIs/#details","text":"https://stackoverflow.com/questions/12865218/getting-rid-of-asis-class-attribute","title":"Details"},{"location":"reference/unAsIs/#value","text":"X without any AsIs subclass","title":"Value"},{"location":"reference/unwrap/","text":"unwrap rust-like unwrapping of result. Useful to keep error handling on the R side. Description rust-like unwrapping of result. Useful to keep error handling on the R side. Usage unwrap(result, context = NULL, call = sys.call(1L)) Arguments Argument Description result a list here either element ok or err is NULL, or both if ok is litteral NULL context a msg to prefix a raised error with call context of error or string Value the ok-element of list , or a error will be thrown Examples structure(list(ok = \"foo\", err = NULL), class = \"extendr_result\") tryCatch( unwrap( structure( list(ok = NULL, err = \"something happen on the rust side\"), class = \"extendr_result\" ) ), error = function(err) as.character(err) )","title":"`unwrap`"},{"location":"reference/unwrap/#unwrap","text":"rust-like unwrapping of result. Useful to keep error handling on the R side.","title":"unwrap"},{"location":"reference/unwrap/#description","text":"rust-like unwrapping of result. Useful to keep error handling on the R side.","title":"Description"},{"location":"reference/unwrap/#usage","text":"unwrap(result, context = NULL, call = sys.call(1L))","title":"Usage"},{"location":"reference/unwrap/#arguments","text":"Argument Description result a list here either element ok or err is NULL, or both if ok is litteral NULL context a msg to prefix a raised error with call context of error or string","title":"Arguments"},{"location":"reference/unwrap/#value","text":"the ok-element of list , or a error will be thrown","title":"Value"},{"location":"reference/unwrap/#examples","text":"structure(list(ok = \"foo\", err = NULL), class = \"extendr_result\") tryCatch( unwrap( structure( list(ok = NULL, err = \"something happen on the rust side\"), class = \"extendr_result\" ) ), error = function(err) as.character(err) )","title":"Examples"},{"location":"reference/verify_method_call/","text":"verify_method_call Verify user selected method/attribute exists Description internal function to check method call of env_classes Usage verify_method_call( Class_env, Method_name, call = sys.call(1L), class_name = NULL ) Arguments Argument Description Class_env env_class object (the classes created by extendr-wrappers.R) Method_name name of method requested by user call context to throw user error, just use default class_name NULLs Value invisible(NULL)","title":"`verify_method_call`"},{"location":"reference/verify_method_call/#verify_method_call","text":"Verify user selected method/attribute exists","title":"verify_method_call"},{"location":"reference/verify_method_call/#description","text":"internal function to check method call of env_classes","title":"Description"},{"location":"reference/verify_method_call/#usage","text":"verify_method_call( Class_env, Method_name, call = sys.call(1L), class_name = NULL )","title":"Usage"},{"location":"reference/verify_method_call/#arguments","text":"Argument Description Class_env env_class object (the classes created by extendr-wrappers.R) Method_name name of method requested by user call context to throw user error, just use default class_name NULLs","title":"Arguments"},{"location":"reference/verify_method_call/#value","text":"invisible(NULL)","title":"Value"},{"location":"reference/when_then_otherwise/","text":"when_then_otherwise when-then-otherwise Expr Description Start a \u201cwhen, then, otherwise\u201d expression. Arguments Argument Description predicate Into Expr into a boolean mask to branch by expr Into Expr value to insert in when() or otherwise() Details For the impl nerds: pl$when returns a whenthen object and whenthen returns whenthenthen, except for otherwise(), which will terminate and return an Expr. Otherwise may fail to return an Expr if e.g. two consecutive when(x)$when(y) Value Expr Examples df = pl$DataFrame(mtcars) wtt = pl$when(pl$col(\"cyl\")<=4)$then(\"<=4cyl\")$ when(pl$col(\"cyl\")<=6)$then(\"<=6cyl\")$ otherwise(\">6cyl\")$alias(\"cyl_groups\") print(wtt) df$with_columns(wtt)","title":"`when_then_otherwise`"},{"location":"reference/when_then_otherwise/#when_then_otherwise","text":"when-then-otherwise Expr","title":"when_then_otherwise"},{"location":"reference/when_then_otherwise/#description","text":"Start a \u201cwhen, then, otherwise\u201d expression.","title":"Description"},{"location":"reference/when_then_otherwise/#arguments","text":"Argument Description predicate Into Expr into a boolean mask to branch by expr Into Expr value to insert in when() or otherwise()","title":"Arguments"},{"location":"reference/when_then_otherwise/#details","text":"For the impl nerds: pl$when returns a whenthen object and whenthen returns whenthenthen, except for otherwise(), which will terminate and return an Expr. Otherwise may fail to return an Expr if e.g. two consecutive when(x)$when(y)","title":"Details"},{"location":"reference/when_then_otherwise/#value","text":"Expr","title":"Value"},{"location":"reference/when_then_otherwise/#examples","text":"df = pl$DataFrame(mtcars) wtt = pl$when(pl$col(\"cyl\")<=4)$then(\"<=4cyl\")$ when(pl$col(\"cyl\")<=6)$then(\"<=6cyl\")$ otherwise(\">6cyl\")$alias(\"cyl_groups\") print(wtt) df$with_columns(wtt)","title":"Examples"},{"location":"reference/wrap_e/","text":"wrap_e wrap as literal Description wrap as literal Usage wrap_e(e, str_to_lit = TRUE) Arguments Argument Description e an Expr(polars) or any R expression Details used internally to ensure an object is an expression Value Expr Examples pl$col(\"foo\") < 5","title":"`wrap_e`"},{"location":"reference/wrap_e/#wrap_e","text":"wrap as literal","title":"wrap_e"},{"location":"reference/wrap_e/#description","text":"wrap as literal","title":"Description"},{"location":"reference/wrap_e/#usage","text":"wrap_e(e, str_to_lit = TRUE)","title":"Usage"},{"location":"reference/wrap_e/#arguments","text":"Argument Description e an Expr(polars) or any R expression","title":"Arguments"},{"location":"reference/wrap_e/#details","text":"used internally to ensure an object is an expression","title":"Details"},{"location":"reference/wrap_e/#value","text":"Expr","title":"Value"},{"location":"reference/wrap_e/#examples","text":"pl$col(\"foo\") < 5","title":"Examples"},{"location":"reference/wrap_e_result/","text":"wrap_e_result wrap as Expression capture ok/err as result Description wrap as Expression capture ok/err as result Usage wrap_e_result(e, str_to_lit = TRUE, argname = NULL) Arguments Argument Description e an Expr(polars) or any R expression str_to_lit bool should string become a column name or not, then a literal string argname if error, blame argument of this name Details used internally to ensure an object is an expression and to catch any error Value Expr Examples pl$col(\"foo\") < 5","title":"`wrap_e_result`"},{"location":"reference/wrap_e_result/#wrap_e_result","text":"wrap as Expression capture ok/err as result","title":"wrap_e_result"},{"location":"reference/wrap_e_result/#description","text":"wrap as Expression capture ok/err as result","title":"Description"},{"location":"reference/wrap_e_result/#usage","text":"wrap_e_result(e, str_to_lit = TRUE, argname = NULL)","title":"Usage"},{"location":"reference/wrap_e_result/#arguments","text":"Argument Description e an Expr(polars) or any R expression str_to_lit bool should string become a column name or not, then a literal string argname if error, blame argument of this name","title":"Arguments"},{"location":"reference/wrap_e_result/#details","text":"used internally to ensure an object is an expression and to catch any error","title":"Details"},{"location":"reference/wrap_e_result/#value","text":"Expr","title":"Value"},{"location":"reference/wrap_e_result/#examples","text":"pl$col(\"foo\") < 5","title":"Examples"},{"location":"reference/wrap_elist_result/","text":"wrap_elist_result wrap_elist_result Description make sure all elementsof a list is wrapped as Expr Capture any conversion error in the result Usage wrap_elist_result(elist, str_to_lit = TRUE) Arguments Argument Description elist a list Expr or any R object Into list(list(\"html\"), list(list(\" \"))) (passable to pl$lit) Details Used internally to ensure an object is a list of expression The output is wrapped in a result, which can contain an ok or err value. Value Expr Examples polars:::wrap_elist_result(list(pl$lit(42),42,1:3))","title":"`wrap_elist_result`"},{"location":"reference/wrap_elist_result/#wrap_elist_result","text":"wrap_elist_result","title":"wrap_elist_result"},{"location":"reference/wrap_elist_result/#description","text":"make sure all elementsof a list is wrapped as Expr Capture any conversion error in the result","title":"Description"},{"location":"reference/wrap_elist_result/#usage","text":"wrap_elist_result(elist, str_to_lit = TRUE)","title":"Usage"},{"location":"reference/wrap_elist_result/#arguments","text":"Argument Description elist a list Expr or any R object Into list(list(\"html\"), list(list(\" \"))) (passable to pl$lit)","title":"Arguments"},{"location":"reference/wrap_elist_result/#details","text":"Used internally to ensure an object is a list of expression The output is wrapped in a result, which can contain an ok or err value.","title":"Details"},{"location":"reference/wrap_elist_result/#value","text":"Expr","title":"Value"},{"location":"reference/wrap_elist_result/#examples","text":"polars:::wrap_elist_result(list(pl$lit(42),42,1:3))","title":"Examples"},{"location":"reference/wrap_proto_schema/","text":"wrap_proto_schema wrap proto schema Description wrap proto schema Format function Usage wrap_proto_schema(x) Arguments Argument Description x either schema, or incomplete schema where dataType can be NULL or schema is just char vec, implicitly the same as if all DataType are NULL, mean undefinesd. Value bool Examples polars:::wrap_proto_schema(c(\"alice\",\"bob\")) polars:::wrap_proto_schema(list(\"alice\"=pl$Int64,\"bob\"=NULL))","title":"`wrap_proto_schema`"},{"location":"reference/wrap_proto_schema/#wrap_proto_schema","text":"wrap proto schema","title":"wrap_proto_schema"},{"location":"reference/wrap_proto_schema/#description","text":"wrap proto schema","title":"Description"},{"location":"reference/wrap_proto_schema/#format","text":"function","title":"Format"},{"location":"reference/wrap_proto_schema/#usage","text":"wrap_proto_schema(x)","title":"Usage"},{"location":"reference/wrap_proto_schema/#arguments","text":"Argument Description x either schema, or incomplete schema where dataType can be NULL or schema is just char vec, implicitly the same as if all DataType are NULL, mean undefinesd.","title":"Arguments"},{"location":"reference/wrap_proto_schema/#value","text":"bool","title":"Value"},{"location":"reference/wrap_proto_schema/#examples","text":"polars:::wrap_proto_schema(c(\"alice\",\"bob\")) polars:::wrap_proto_schema(list(\"alice\"=pl$Int64,\"bob\"=NULL))","title":"Examples"},{"location":"reference/wrap_s/","text":"wrap_s Wrap as Series Description input is either already a Series of will be passed to the Series constructor Usage wrap_s(x) Arguments Argument Description x a Series or something-turned-into-Series Value Series","title":"`wrap_s`"},{"location":"reference/wrap_s/#wrap_s","text":"Wrap as Series","title":"wrap_s"},{"location":"reference/wrap_s/#description","text":"input is either already a Series of will be passed to the Series constructor","title":"Description"},{"location":"reference/wrap_s/#usage","text":"wrap_s(x)","title":"Usage"},{"location":"reference/wrap_s/#arguments","text":"Argument Description x a Series or something-turned-into-Series","title":"Arguments"},{"location":"reference/wrap_s/#value","text":"Series","title":"Value"}]}