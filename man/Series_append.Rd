% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/series__series.R
\name{Series_append}
\alias{Series_append}
\title{Append two Series}
\usage{
Series_append(other, immutable = TRUE)
}
\arguments{
\item{other}{Series to append.}

\item{immutable}{Should the \code{other} Series be immutable? Default is \code{TRUE}.}
}
\value{
\link[=Series_class]{Series}
}
\description{
Append two Series
}
\details{
If \code{immutable = FALSE}, the Series object will not behave as immutable. This
means that appending to this Series will affect any variable pointing to this
memory location. This will break normal scoping rules of R. Setting
\code{immutable = FALSE} is discouraged as it can have undesirable side effects
and cloning Polars Series is a cheap operation.
}
\examples{
\dontshow{if (requireNamespace("withr", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# default immutable behavior, s_imut and s_imut_copy stay the same
s_imut = as_polars_series(1:3)
s_imut_copy = s_imut
s_new = s_imut$append(as_polars_series(1:3))
s_new

# the original Series didn't change
s_imut
s_imut_copy

# enabling mutable behavior requires setting a global option
withr::with_options(
  list(polars.strictly_immutable = FALSE),
  {
    s_mut = as_polars_series(1:3)
    s_mut_copy = s_mut
    s_new = s_mut$append(as_polars_series(1:3), immutable = FALSE)
    print(s_new)

    # the original Series also changed since it's mutable
    print(s_mut)
    print(s_mut_copy)
  }
)
\dontshow{\}) # examplesIf}
}
