% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expr__datetime.R
\name{ExprDT_replace_time_zone}
\alias{ExprDT_replace_time_zone}
\alias{(Expr)$dt$replace_time_zone}
\title{Replace time zone}
\usage{
ExprDT_replace_time_zone(
  time_zone,
  ...,
  ambiguous = "raise",
  non_existent = "raise"
)
}
\arguments{
\item{time_zone}{\code{NULL} or string time zone from \code{\link[base:timezones]{base::OlsonNames()}}}

\item{...}{Ignored.}

\item{ambiguous}{Determine how to deal with ambiguous datetimes:
\itemize{
\item \code{"raise"} (default): throw an error
\item \code{"earliest"}: use the earliest datetime
\item \code{"latest"}: use the latest datetime
\item \code{"null"}: return a null value
}}

\item{non_existent}{Determine how to deal with non-existent datetimes:
\itemize{
\item \code{"raise"} (default): throw an error
\item \code{"null"}: return a null value
}}
}
\value{
Expr of i64
}
\description{
Cast time zone for a Series of type Datetime. This is different from
\code{\link[=ExprDT_convert_time_zone]{$convert_time_zone()}} as it will also modify the
underlying timestamp. Use to correct a wrong time zone annotation. This will
change the corresponding global timepoint.
}
\examples{
df1 = pl$DataFrame(
  london_timezone = pl$date_range(
    as.POSIXct("2020-03-01", tz = "UTC"),
    as.POSIXct("2020-07-01", tz = "UTC"),
    "1mo"
  )$dt$convert_time_zone("Europe/London")
)

df1$select(
  "london_timezone",
  London_to_Amsterdam = pl$col("london_timezone")$dt$replace_time_zone("Europe/Amsterdam")
)

# You can use `ambiguous` to deal with ambiguous datetimes:
dates = c(
  "2018-10-28 01:30",
  "2018-10-28 02:00",
  "2018-10-28 02:30",
  "2018-10-28 02:00"
)
df2 = pl$DataFrame(
  ts = as_polars_series(dates)$str$strptime(pl$Datetime("us")),
  ambiguous = c("earliest", "earliest", "latest", "latest")
)

df2$with_columns(
  ts_localized = pl$col("ts")$dt$replace_time_zone(
    "Europe/Brussels",
    ambiguous = pl$col("ambiguous")
  )
)
}
\keyword{ExprDT}
