% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions__whenthen.R
\name{Expr_when_then_otherwise}
\alias{Expr_when_then_otherwise}
\alias{when}
\alias{then}
\alias{otherwise}
\alias{When}
\alias{Then}
\alias{ChainedWhen}
\alias{ChainedThen}
\title{when-then-otherwise Expr}
\arguments{
\item{condition}{Into Expr into a boolean mask to branch by. Strings interpreted as column.}

\item{statement}{Into Expr value to insert in when() or otherwise().
Strings interpreted as column.}
}
\value{
Expr
}
\description{
Start a “when, then, otherwise” expression.
}
\details{
when-then-otherwise is similar to R \code{ifelse()}. \code{pl$when(condition)} takes a condition as input
this will an polars \verb{<Expr>} which renderes to a Boolean column. Then it is chained with a
\verb{$then(statement)} when arg statement is an \verb{<Expr>} which produces a column with values if
idealy all Boolean are true. Then finally an \verb{$otherwise(statement)} with values if false.
\verb{$otherwise()} returns an \code{Expr} which will mix the \verb{$then()} statement with the \verb{$otherwise()}
as given by the when-condition.

State-machine details below. The state machine consists of 4 classes \verb{<When>}, \verb{<Then>},
\verb{<ChainedWhen>} & \verb{<ChainedThen>} and a starter function \code{pl$when()} and the final expression
class  a polars \verb{<Expr>}.

\code{pl$when}return a \verb{<When>} object.
\verb{pl$when(condition) -> <When>}

\verb{<When>} has a single public method \verb{$then(statement)}
\verb{<When>$then(statement) -> <Then>}

#the follow objects and methods are
\verb{<Then>$when(condition) -> <ChainedWhen>}
\verb{<Then>$otherwise(statement) -> <Expr>}
\verb{<ChainedWhen>$then(statement) -> <ChainedThen>}
\verb{<ChainedThen>$when(condition) -> <Expr>}
\verb{<ChainedThen>$otherwise(statement) -> <Expr>}

This statemachine ensures only syntacticly allowed methods are availble at any specific place in
a nested when-then-otherwise expression.
}
\examples{
df = pl$DataFrame(mtcars)
wtt =
  pl$when(pl$col("cyl") <= 4)$then(pl$lit("<=4cyl"))$
    when(pl$col("cyl") <= 6)$then(pl$lit("<=6cyl"))$
    otherwise(pl$lit(">6cyl"))$alias("cyl_groups")
print(wtt)
df$with_columns(wtt)
}
\keyword{Expr}
