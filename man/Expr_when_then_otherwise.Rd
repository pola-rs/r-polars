% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions__whenthen.R
\name{Expr_when_then_otherwise}
\alias{Expr_when_then_otherwise}
\alias{pl_when}
\alias{when}
\alias{then}
\alias{otherwise}
\alias{When}
\alias{Then}
\alias{ChainedWhen}
\alias{ChainedThen}
\alias{When_then}
\alias{Then_when}
\alias{Then_otherwise}
\alias{ChainedWhen_then}
\alias{ChainedThen_when}
\alias{ChainedThen_otherwise}
\title{Make a then-when-otherwise expression}
\usage{
pl_when(...)

When_then(statement)

Then_when(...)

Then_otherwise(statement)

ChainedWhen_then(statement)

ChainedThen_when(...)

ChainedThen_otherwise(statement)
}
\arguments{
\item{...}{Expr or something coercible to an Expr into a boolean mask to
branch by.}

\item{statement}{Expr or something coercible to an Expr value to insert in
when() or otherwise(). Strings interpreted as column.}
}
\value{
an polars object, see details.
}
\description{
\code{when-then-otherwise} is similar to R \code{\link[=ifelse]{ifelse()}}. This has to start with
\verb{pl$when(<condition>)$then(<value if condition>)}. From there, it can:
\itemize{
\item be chained to an \verb{$otherwise()} statement that specifies the Expr to apply
to the rows where the condition is \code{FALSE};
\item or be chained to other \verb{$when()$then()} to specify more cases, and then use
\verb{$otherwise()} when you arrive at the end of your chain.
Note that one difference with the Python implementation is that we \emph{must}
end the chain with an \verb{$otherwise()} statement.
}
}
\details{
If you want to use the class of those \code{when-then-otherwise} statement, note
that there are 6 different classes corresponding to the different steps:
\itemize{
\item \code{pl$when()}returns a \code{When} object,
\item \code{pl$then()}returns a \code{Then} object,
\item \verb{<Then>$otherwise()}returns an \link[=Expr_class]{Expression} object,
\item \verb{<Then>$when()}returns a \code{ChainedWhen} object,
\item \verb{<ChainedWhen>$then()}returns a \code{ChainedThen} object,
\item \verb{<ChainedThen>$otherwise()}returns an \link[=Expr_class]{Expression} object.
}
}
\examples{
df = pl$DataFrame(foo = c(1, 3, 4), bar = c(3, 4, 0))

# Add a column with the value 1, where column "foo" > 2 and the value -1
# where it isnâ€™t.
df$with_columns(
  val = pl$when(pl$col("foo") > 2)$then(1)$otherwise(-1)
)

# With multiple when-then chained:
df$with_columns(
  val = pl$when(pl$col("foo") > 2)
  $then(1)
  $when(pl$col("bar") > 2)
  $then(4)
  $otherwise(-1)
)

# Pass multiple predicates, each of which must be met:
df$with_columns(
  val = pl$when(
    pl$col("bar") > 0,
    pl$col("foo") \%\% 2 != 0
  )
  $then(99)
  $otherwise(-1)
)
}
