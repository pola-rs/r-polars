% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lazyframe__lazy.R
\name{LazyFrame_fetch}
\alias{LazyFrame_fetch}
\title{Fetch \code{n} rows of a LazyFrame}
\usage{
LazyFrame_fetch(
  n_rows = 500,
  type_coercion = TRUE,
  predicate_pushdown = TRUE,
  projection_pushdown = TRUE,
  simplify_expression = TRUE,
  slice_pushdown = TRUE,
  comm_subplan_elim = TRUE,
  comm_subexpr_elim = TRUE,
  no_optimization = FALSE,
  streaming = FALSE
)
}
\arguments{
\item{n_rows}{Integer. Maximum number of rows to fetch.}

\item{type_coercion}{Boolean. Coerce types such that operations succeed and
run on minimal required memory.}

\item{predicate_pushdown}{Boolean. Applies filters as early as possible / at
scan level.}

\item{projection_pushdown}{Boolean. Applies filters as early as possible / at
scan level.}

\item{simplify_expression}{Boolean. Cache subtrees/file scans that are used
by multiple subtrees in the query plan.}

\item{slice_pushdown}{Boolean. Only load the required slice from the scan
level. Don't materialize sliced outputs (e.g. \code{join$head(10)}).}

\item{comm_subplan_elim}{Boolean. Will try to cache branching subplans that
occur on self-joins or unions.}

\item{comm_subexpr_elim}{Boolean. Common subexpressions will be cached and
reused.}

\item{no_optimization}{Boolean. Turn off the following optimizations:
predicate_pushdown = FALSE
projection_pushdown = FALSE
slice_pushdown = FALSE
common_subplan_elimination = FALSE}

\item{streaming}{Boolean. Run parts of the query in a streaming fashion
(this is in an alpha state).}
}
\value{
A DataFrame of maximum n_rows
}
\description{
This is similar to \verb{$collect()} but limit the number of rows to collect. It
is mostly useful to check that a query works as expected.
}
\details{
\verb{$fetch()} does not guarantee the final number of rows in the DataFrame output.
It only guarantees that \code{n} rows are used at the beginning of the query.
Filters, join operations and a lower number of rows available in the scanned
file influence the final number of rows.
}
\examples{

# fetch 3 rows
pl$LazyFrame(iris)$fetch(3)

# this fetch-query returns 4 rows, because we started with 3 and appended one
# row in the query (see section 'Details')
pl$LazyFrame(iris)$select(pl$col("Species")$append("flora gigantica, alien"))$fetch(3)
}
\seealso{
\itemize{
\item \code{\link[=LazyFrame_collect]{$collect()}} - regular collect.
\item \code{\link[=LazyFrame_profile]{$profile()}} - returns as \verb{$collect()} but also table with each operation
profiled.
\item \code{\link[=LazyFrame_collect_in_background]{$collect_in_background()}} - non-blocking collect returns
a future handle. Can also just be used via \verb{$collect(collect_in_background = TRUE)}.
}
}
\keyword{LazyFrame}
