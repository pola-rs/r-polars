% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lazyframe__lazy.R
\name{LazyFrame_fetch}
\alias{LazyFrame_fetch}
\title{Fetch}
\usage{
LazyFrame_fetch(
  n_rows = 500,
  type_coercion = TRUE,
  predicate_pushdown = TRUE,
  projection_pushdown = TRUE,
  simplify_expression = TRUE,
  slice_pushdown = TRUE,
  common_subplan_elimination = TRUE,
  no_optimization = FALSE,
  streaming = FALSE
)
}
\arguments{
\item{n_rows}{number (\verb{Into<usize>}) of rows to fetch at maximum.}

\item{type_coercion}{Boolean. Coerce types such that operations succeed and
run on minimal required memory.}

\item{predicate_pushdown}{Boolean. Applies filters as early as possible / at
scan level.}

\item{projection_pushdown}{Boolean. Applies filters as early as possible / at
scan level.}

\item{simplify_expression}{Boolean. Cache subtrees/file scans that are used
by multiple subtrees in the query plan.}

\item{slice_pushdown}{Boolean. Only load the required slice from the scan
level. Don't materialize sliced outputs (e.g. \code{join$head(10)}).}

\item{common_subplan_elimination}{Boolean. Cache subtrees/file scans that
are used by multiple subtrees in the query plan.}

\item{no_optimization}{Boolean. Turn off the following optimizations:
predicate_pushdown = FALSE
projection_pushdown = FALSE
slice_pushdown = FALSE
common_subplan_elimination = FALSE}

\item{streaming}{Boolean. Run parts of the query in a streaming fashion
(this is in an alpha state).}
}
\value{
A DataFrame of maximum n_rows
}
\description{
limit number of rows at scan level for fast trying a query
}
\details{
Collect a small number of rows for debugging purposes.
Fetch is like the \code{\link[=LazyFrame_collect]{$collect()}} operation, but it overwrites the number of
rows read by every scan operation. This is a utility that helps debug a query on a smaller number
of rows. Note that the fetch does not guarantee the final number of rows in the DataFrame. Filter
, join operations and a lower number of rows available in the scanned file influence the final
number of rows.
}
\examples{

# fetch 3
pl$LazyFrame(iris)$fetch(3)

# this fetch-query returns 4 and not 3 entries, see details.
pl$LazyFrame(iris)$select(pl$col("Species")$append("flora gigantica, alien"))$fetch(3)
}
\seealso{
\itemize{
\item \code{\link[=LazyFrame_collect]{$collect()}} - regular collect.
\item \code{\link[=LazyFrame_profile]{$profile()}} - returns as \verb{$collect()} but also table with each operation
profiled.
\item \code{\link[=LazyFrame_collect_in_background]{$collect_in_background()}} - non-blocking collect returns
a future handle. Can also just be used via \verb{$collect(collect_in_background = TRUE)}.
}
}
\keyword{LazyFrame}
