% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lazyframe__lazy.R
\name{LazyFrame_collect}
\alias{LazyFrame_collect}
\title{Collect a query into a DataFrame}
\usage{
LazyFrame_collect(
  ...,
  type_coercion = TRUE,
  predicate_pushdown = TRUE,
  projection_pushdown = TRUE,
  simplify_expression = TRUE,
  slice_pushdown = TRUE,
  comm_subplan_elim = TRUE,
  comm_subexpr_elim = TRUE,
  cluster_with_columns = TRUE,
  streaming = FALSE,
  no_optimization = FALSE,
  inherit_optimization = FALSE,
  collect_in_background = FALSE
)
}
\arguments{
\item{...}{Ignored.}

\item{type_coercion}{Logical. Coerce types such that operations succeed and
run on minimal required memory.}

\item{predicate_pushdown}{Logical. Applies filters as early as possible at
scan level.}

\item{projection_pushdown}{Logical. Select only the columns that are needed
at the scan level.}

\item{simplify_expression}{Logical. Various optimizations, such as constant
folding and replacing expensive operations with faster alternatives.}

\item{slice_pushdown}{Logical. Only load the required slice from the scan
level. Don't materialize sliced outputs (e.g. \code{join$head(10)}).}

\item{comm_subplan_elim}{Logical. Will try to cache branching subplans that
occur on self-joins or unions.}

\item{comm_subexpr_elim}{Logical. Common subexpressions will be cached and
reused.}

\item{cluster_with_columns}{Combine sequential independent calls to
\code{\link[=DataFrame_with_columns]{with_columns()}}.}

\item{streaming}{Logical. Run parts of the query in a streaming fashion
(this is in an alpha state).}

\item{no_optimization}{Logical. Sets the following parameters to \code{FALSE}:
\code{predicate_pushdown}, \code{projection_pushdown}, \code{slice_pushdown},
\code{comm_subplan_elim}, \code{comm_subexpr_elim}, \code{cluster_with_columns}.}

\item{inherit_optimization}{Logical. Use existing optimization settings
regardless the settings specified in this function call.}

\item{collect_in_background}{Logical. Detach this query from R session.
Computation will start in background. Get a handle which later can be converted
into the resulting DataFrame. Useful in interactive mode to not lock R session.}
}
\value{
A \code{DataFrame}
}
\description{
\verb{$collect()} performs the query on the LazyFrame. It returns a
DataFrame
}
\details{
Note: use \verb{$fetch(n)} if you want to run your query on the first \code{n} rows only.
This can be a huge time saver in debugging queries.
}
\examples{
pl$LazyFrame(iris)$filter(pl$col("Species") == "setosa")$collect()
}
\seealso{
\itemize{
\item \code{\link[=LazyFrame_fetch]{$fetch()}} - fast limited query check
\item \code{\link[=LazyFrame_profile]{$profile()}} - same as \verb{$collect()} but also returns
a table with each operation profiled.
\item \code{\link[=LazyFrame_collect_in_background]{$collect_in_background()}} - non-blocking
collect returns a future handle. Can also just be used via
\verb{$collect(collect_in_background = TRUE)}.
\item \code{\link[=LazyFrame_sink_parquet]{$sink_parquet()}} streams query to a parquet file.
\item \code{\link[=LazyFrame_sink_ipc]{$sink_ipc()}} streams query to a arrow file.
}
}
\keyword{DataFrame_new}
\keyword{LazyFrame}
