% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lazyframe-frame.R
\name{lazyframe__with_columns_seq}
\alias{lazyframe__with_columns_seq}
\title{Modify/append column(s) of a LazyFrame}
\usage{
lazyframe__with_columns_seq(...)
}
\arguments{
\item{...}{<\code{\link[rlang:dyn-dots]{dynamic-dots}}>
Name-value pairs of objects to be converted to polars \link[=Expr]{expressions}
by the \code{\link[=as_polars_expr]{as_polars_expr()}} function.
Characters are parsed as column names, other non-expression inputs are parsed as
\link[=pl__lit]{literals}. Each name will be used as the expression name.}
}
\value{
A polars \link{LazyFrame}
}
\description{
This will run all expression sequentially instead of in parallel. Use this
only when the work per expression is cheap.

Add columns or modify existing ones with expressions. This is similar to
\code{dplyr::mutate()} as it keeps unmentioned columns (unlike \verb{$select()}).

However, unlike \code{dplyr::mutate()}, one cannot use new variables in subsequent
expressions in the same \verb{$with_columns_seq()}call. For instance, if you create a
variable \code{x}, you will only be able to use it in another \verb{$with_columns_seq()}
or \verb{$select()} call.
}
\examples{
# Pass an expression to add it as a new column.
lf <- pl$LazyFrame(
  a = 1:4,
  b = c(0.5, 4, 10, 13),
  c = c(TRUE, TRUE, FALSE, TRUE),
)
lf$with_columns_seq((pl$col("a")^2)$alias("a^2"))$collect()

# Added columns will replace existing columns with the same name.
lf$with_columns_seq(a = pl$col("a")$cast(pl$Float64))$collect()

# Multiple columns can be added
lf$with_columns_seq(
  (pl$col("a")^2)$alias("a^2"),
  (pl$col("b") / 2)$alias("b/2"),
  (pl$col("c")$not())$alias("not c"),
)$collect()

# Name expression instead of `$alias()`
lf$with_columns_seq(
  `a^2` = pl$col("a")^2,
  `b/2` = pl$col("b") / 2,
  `not c` = pl$col("c")$not(),
)$collect()
}
