% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dataframe__frame.R
\name{DataFrame_with_columns_seq}
\alias{DataFrame_with_columns_seq}
\title{Modify/append column(s)}
\usage{
DataFrame_with_columns_seq(...)
}
\arguments{
\item{...}{Any expressions or string column name, or same wrapped in a list.
If first and only element is a list, it is unwrapped as a list of args.}
}
\value{
A DataFrame
}
\description{
Add columns or modify existing ones with expressions. This is
the equivalent of \code{dplyr::mutate()} as it keeps unmentioned columns (unlike
\verb{$select()}).

This will run all expression sequentially instead of in parallel. Use this
when the work per expression is cheap. Otherwise, \verb{$with_columns()} should be
preferred.
}
\examples{
pl$DataFrame(iris)$with_columns_seq(
  pl$col("Sepal.Length")$abs()$alias("abs_SL"),
  (pl$col("Sepal.Length") + 2)$alias("add_2_SL")
)

# same query
l_expr = list(
  pl$col("Sepal.Length")$abs()$alias("abs_SL"),
  (pl$col("Sepal.Length") + 2)$alias("add_2_SL")
)
pl$DataFrame(iris)$with_columns_seq(l_expr)

pl$DataFrame(iris)$with_columns_seq(
  pl$col("Sepal.Length")$abs(), # not named expr will keep name "Sepal.Length"
  SW_add_2 = (pl$col("Sepal.Width") + 2)
)
}
