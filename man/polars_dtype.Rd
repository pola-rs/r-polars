% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/datatypes-classes.R
\name{polars_dtype}
\alias{polars_dtype}
\alias{DataType}
\alias{pl__Decimal}
\alias{pl__Datetime}
\alias{pl__Duration}
\alias{pl__Categorical}
\alias{pl__Enum}
\alias{pl__Array}
\alias{pl__List}
\alias{pl__Struct}
\title{Polars DataType class (\code{polars_dtype})}
\usage{
pl__Decimal(precision = NULL, scale = 0L)

pl__Datetime(time_unit = c("us", "ns", "ms"), time_zone = NULL)

pl__Duration(time_unit = c("us", "ns", "ms"))

pl__Categorical(ordering = deprecated())

pl__Enum(categories)

pl__Array(inner, shape)

pl__List(inner)

pl__Struct(...)
}
\arguments{
\item{precision}{Single integer or \code{NULL} (default), maximum number of digits in each number.
If \code{NULL}, the precision is inferred.}

\item{scale}{Single integer or \code{NULL}. Number of digits to the right of the decimal point
in each number. The default is \code{0}.}

\item{time_unit}{One of \code{"us"} (default, microseconds),
\code{"ns"} (nanoseconds) or \code{"ms"}(milliseconds). Representing the unit of time.}

\item{time_zone}{A string or \code{NULL} (default). Representing the timezone.}

\item{ordering}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}}
One of \code{"lexical"} or \code{"physical"}.
This argument is deprecated and ignored.
Always behaves as if \code{"lexical"} was passed.}

\item{categories}{A character vector.
Should not contain \code{NA} values and all values should be unique.}

\item{inner}{A polars data type object.}

\item{shape}{A integer-ish vector, representing the shape of the Array.}

\item{...}{<\code{\link[rlang:dyn-dots]{dynamic-dots}}>
Name-value pairs of polars data type.
Each pair represents a field of the Struct.}
}
\description{
Polars supports a variety of data types that fall broadly under the following categories:
\itemize{
\item Numeric data types: signed integers, unsigned integers, floating point numbers, and decimals.
\item Nested data types: lists, structs, and arrays.
\item Temporal: dates, datetimes, times, and time deltas.
\item Miscellaneous: strings, binary data, Booleans, categoricals, and enums.
}

All types support missing values represented by the special value \code{null}.
This is not to be conflated with the special value \code{NaN} in floating number data types;
see the section about floating point numbers for more information.
}
\details{
\subsection{Full data types table}{\tabular{ll}{
   Type(s) \tab Details \cr
   \code{Boolean} \tab Boolean type that is bit packed efficiently. \cr
   \code{Int8}, \code{Int16}, \code{Int32}, \code{Int64} \tab Varying-precision signed integer types. \cr
   \code{UInt8}, \code{UInt16}, \code{UInt32}, \code{UInt64} \tab Varying-precision unsigned integer types. \cr
   \code{Float32}, \code{Float64} \tab Varying-precision signed floating point numbers. \cr
   \code{Decimal} \ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}} \tab Decimal 128-bit type with optional precision and non-negative scale. \cr
   \code{String} \tab Variable length UTF-8 encoded string data, typically Human-readable. \cr
   \code{Binary} \tab Stores arbitrary, varying length raw binary data. \cr
   \code{Date} \tab Represents a calendar date. \cr
   \code{Time} \tab Represents a time of day. \cr
   \code{Datetime} \tab Represents a calendar date and time of day. \cr
   \code{Duration} \tab Represents a time duration. \cr
   \code{Array} \tab Arrays with a known, fixed shape per series; akin to numpy arrays. \cr
   \code{List} \tab Homogeneous 1D container with variable length. \cr
   \code{Categorical} \tab Efficient encoding of string data where the categories are inferred at runtime. \cr
   \code{Enum} \ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}} \tab Efficient ordered encoding of a set of predetermined string categories. \cr
   \code{Struct} \tab Composite product type that can store multiple fields. \cr
   \code{Null} \tab Represents null values. \cr
}

}
}
\examples{
pl$Int8
pl$Int16
pl$Int32
pl$Int64
pl$UInt8
pl$UInt16
pl$UInt32
pl$UInt64
pl$Float32
pl$Float64
pl$Decimal(scale = 2)
pl$String
pl$Binary
pl$Date
pl$Time
pl$Datetime()
pl$Duration()
pl$Array(pl$Int32, c(2, 3))
pl$List(pl$Int32)
pl$Categorical()
pl$Enum(c("a", "b", "c"))
pl$Struct(a = pl$Int32, b = pl$String)
pl$Null
pl$Unknown
}
