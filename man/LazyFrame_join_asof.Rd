% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lazyframe__lazy.R
\name{LazyFrame_join_asof}
\alias{LazyFrame_join_asof}
\title{Perform joins on nearest keys}
\usage{
LazyFrame_join_asof(
  other,
  ...,
  left_on = NULL,
  right_on = NULL,
  on = NULL,
  by_left = NULL,
  by_right = NULL,
  by = NULL,
  strategy = c("backward", "forward", "nearest"),
  suffix = "_right",
  tolerance = NULL,
  allow_parallel = TRUE,
  force_parallel = FALSE
)
}
\arguments{
\item{other}{LazyFrame}

\item{...}{Not used, blocks use of further positional arguments}

\item{left_on, right_on}{Same as \code{on} but only for the left or the right
DataFrame. They must have the same length.}

\item{on}{Either a vector of column names or a list of expressions and/or
strings. Use \code{left_on} and \code{right_on} if the column names to match on are
different between the two DataFrames.}

\item{by_left, by_right}{Same as \code{by} but only for the left or the right
table. They must have the same length.}

\item{by}{Join on these columns before performing asof join. Either a vector
of column names or a list of expressions and/or strings. Use \code{left_by} and
\code{right_by} if the column names to match on are different between the two
tables.}

\item{strategy}{Strategy for where to find match:
\itemize{
\item "backward" (default): search for the last row in the right table whose \code{on}
key is less than or equal to the left key.
\item "forward": search for the first row in the right table whose \code{on} key is
greater than or equal to the left key.
\item "nearest": search for the last row in the right table whose value is nearest
to the left key. String keys are not currently supported for a nearest
search.
}}

\item{suffix}{Suffix to add to duplicated column names.}

\item{tolerance}{Numeric tolerance. By setting this the join will only be done if the near
keys are within this distance. If an asof join is done on columns of dtype
"Date", "Datetime", "Duration" or "Time", use the Polars duration string language.
About the language, see the \verb{Polars duration string language} section for details.

There may be a circumstance where R types are not sufficient to express a
numeric tolerance. In that case, you can use the expression syntax like
\code{tolerance = pl$lit(42)$cast(pl$Uint64)}}

\item{allow_parallel}{Allow the physical plan to optionally evaluate the
computation of both DataFrames up to the join in parallel.}

\item{force_parallel}{Force the physical plan to evaluate the computation of
both DataFrames up to the join in parallel.}
}
\description{
This is similar to a left-join except that we match on nearest key rather
than equal keys.
}
\details{
Both tables (DataFrames or LazyFrames) must be sorted by the asof_join key.
}
\section{Polars duration string language}{

Polars duration string language is a simple representation of
durations. It is used in many Polars functions that accept durations.

It has the following format:
\itemize{
\item 1ns (1 nanosecond)
\item 1us (1 microsecond)
\item 1ms (1 millisecond)
\item 1s (1 second)
\item 1m (1 minute)
\item 1h (1 hour)
\item 1d (1 calendar day)
\item 1w (1 calendar week)
\item 1mo (1 calendar month)
\item 1q (1 calendar quarter)
\item 1y (1 calendar year)
}

Or combine them: \code{"3d12h4m25s"} # 3 days, 12 hours, 4 minutes, and 25 seconds

By "calendar day", we mean the corresponding time on the next day
(which may not be 24 hours, due to daylight savings).
Similarly for "calendar week", "calendar month", "calendar quarter", and "calendar year".
}

\examples{
#
# create two LazyFrame to join asof
gdp = pl$LazyFrame(
  date = as.Date(c("2015-1-1", "2016-1-1", "2017-5-1", "2018-1-1", "2019-1-1")),
  gdp = c(4321, 4164, 4411, 4566, 4696),
  group = c("b", "a", "a", "b", "b")
)

pop = pl$LazyFrame(
  date = as.Date(c("2016-5-12", "2017-5-12", "2018-5-12", "2019-5-12")),
  population = c(82.19, 82.66, 83.12, 83.52),
  group = c("b", "b", "a", "a")
)

# optional make sure tables are already sorted with "on" join-key
gdp = gdp$sort("date")
pop = pop$sort("date")


# Left-join_asof LazyFrame pop with gdp on "date"
# Look backward in gdp to find closest matching date
pop$join_asof(gdp, on = "date", strategy = "backward")$collect()

# .... and forward
pop$join_asof(gdp, on = "date", strategy = "forward")$collect()

# join by a group: "only look within groups"
pop$join_asof(gdp, on = "date", by = "group", strategy = "backward")$collect()

# only look 2 weeks and 2 days back
pop$join_asof(gdp, on = "date", strategy = "backward", tolerance = "2w2d")$collect()

# only look 11 days back (numeric tolerance depends on polars type, <date> is in days)
pop$join_asof(gdp, on = "date", strategy = "backward", tolerance = 11)$collect()
}
