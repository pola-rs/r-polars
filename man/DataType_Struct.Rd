% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/datatype.R
\name{DataType_Struct}
\alias{DataType_Struct}
\title{Create Struct DataType}
\usage{
DataType_Struct(...)
}
\arguments{
\item{...}{RPolarsDataType objects}
}
\value{
a list DataType with an inner DataType
}
\description{
One can create a \code{Struct} data type with \code{pl$Struct()}. There are also
multiple ways to create columns of data type \code{Struct} in a \code{DataFrame} or
a \code{Series}, see the examples.
}
\examples{
# create a Struct-DataType
pl$Struct(pl$Boolean)
pl$Struct(foo = pl$Int32, bar = pl$Float64)

# check if an element is any kind of Struct()
test = pl$Struct(pl$UInt64)
pl$same_outer_dt(test, pl$Struct())

# `test` is a type of Struct, but it doesn't mean it is equal to an empty Struct
test == pl$Struct()

# The way to create a `Series` of type `Struct` is a bit convoluted as it involves
# `data.frame()`, `list()`, and `I()`:
as_polars_series(
  data.frame(a = 1:2, b = I(list(c("x", "y"), "z")))
)

# A slightly simpler way would be via `tibble::tibble()` or
# `data.table::data.table()`:
if (requireNamespace("tibble", quietly = TRUE)) {
  as_polars_series(
    tibble::tibble(a = 1:2, b = list(c("x", "y"), "z"))
  )
}

# Finally, one can use `pl$struct()` to convert existing columns or `Series`
# to a `Struct`:
x = pl$DataFrame(
  a = 1:2,
  b = list(c("x", "y"), "z")
)

out = x$select(pl$struct(c("a", "b")))
out

out$schema
}
