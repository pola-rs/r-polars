% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expr__string.R
\name{ExprStr_find}
\alias{ExprStr_find}
\title{Return the index position of the first substring matching a pattern}
\usage{
ExprStr_find(pattern, ..., literal = FALSE, strict = TRUE)
}
\arguments{
\item{pattern}{A character or something can be coerced to a string \link[=Expr_class]{Expr}
of a valid regex pattern, compatible with the \href{https://docs.rs/regex/latest/regex/}{regex crate}.}

\item{...}{Ignored.}

\item{literal}{Logical. If \code{TRUE} (default), treat \code{pattern} as a literal string,
not as a regular expression.}

\item{strict}{Logical. If \code{TRUE} (default), raise an error if the underlying pattern is
not a valid regex, otherwise mask out with a null value.}
}
\value{
An Expr of data type UInt32
}
\description{
Return the index position of the first substring matching a pattern
}
\details{
To modify regular expression behaviour (such as case-sensitivity)
with flags, use the inline \code{(?iLmsuxU)} syntax. See the regex crateâ€™s section
on \href{https://docs.rs/regex/latest/regex/#grouping-and-flags}{grouping and flags}
for additional information about the use of inline expression modifiers.
}
\examples{
pl$DataFrame(s = c("AAA", "aAa", "aaa"))$with_columns(
  default_match = pl$col("s")$str$find("Aa"),
  insensitive_match = pl$col("s")$str$find("(?i)Aa")
)
}
\seealso{
\itemize{
\item \code{\link[=ExprStr_starts_with]{$str$start_with()}}: Check if string values
start with a substring.
\item \code{\link[=ExprStr_ends_with]{$str$ends_with()}}: Check if string values end
with a substring.
\item \code{\link[=ExprStr_contains]{$str$contains()}}: Check if string contains a substring
that matches a pattern.
}
}
