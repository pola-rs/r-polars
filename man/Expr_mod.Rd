% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expr__expr.R
\name{Expr_mod}
\alias{Expr_mod}
\alias{\%\%.RPolarsExpr}
\title{Modulo two expressions}
\usage{
Expr_mod(other)

\method{\%\%}{RPolarsExpr}(e1, e2)
}
\arguments{
\item{other}{Literal or object that can be converted to a literal}

\item{e1}{Expr only}

\item{e2}{Expr or anything that can be converted to a literal}
}
\value{
Expr
}
\description{
The RHS can either be an Expr or an object that can be converted to a literal
(e.g an integer).
}
\details{
Currently, the modulo operator behaves differently than in R,
and not guaranteed \code{x == (x \%\% y) + y * (x \%/\% y)}.
}
\examples{
pl$select(pl$lit(-1:12) \%\% 3)$to_series()$to_vector()

# The example is **NOT** equivalent to the followings:
-1:12 \%\% 3
pl$select(-1:12 \%\% 3)$to_series()$to_vector()

# Not guaranteed `x == (x \%\% y) + y * (x \%/\% y)`
x = pl$lit(-1:12)
y = pl$lit(3)
pl$select(x == (x \%\% y) + y * (x \%/\% y))
}
