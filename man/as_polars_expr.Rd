% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as_polars_expr.R
\name{as_polars_expr}
\alias{as_polars_expr}
\alias{as_polars_expr.default}
\alias{as_polars_expr.polars_expr}
\alias{as_polars_expr.character}
\alias{as_polars_expr.raw}
\alias{as_polars_expr.NULL}
\title{Create a Polars expression from an R object}
\usage{
as_polars_expr(x, ...)

\method{as_polars_expr}{default}(x, ..., keep_series = FALSE)

\method{as_polars_expr}{polars_expr}(x, ..., structify = NULL)

\method{as_polars_expr}{character}(x, ..., as_lit = FALSE)

\method{as_polars_expr}{raw}(x, ..., raw_as_binary = TRUE)

\method{as_polars_expr}{`NULL`}(x, ...)
}
\arguments{
\item{x}{An R object.}

\item{...}{Additional arguments passed to the methods.}

\item{keep_series}{A logical value indicating whether to treat the object as a \link{Series} or
scalar value. If \code{TRUE}, the output is ensured to be a \link{Series} literal even if
the length of the object is \code{1}.}

\item{structify}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}}
A logical. If \code{TRUE}, convert multi-column expressions to a single struct
expression by calling \code{\link[=pl__struct]{pl$struct()}}. Otherwise (default), done nothing.
Deprecated since polars 1.1.0.}

\item{as_lit}{A logical value indicating whether to treat vector as literal values or not.
This argument is always set to \code{TRUE} when calling this function from \code{\link[=pl__lit]{pl$lit()}},
and expects to return literal values. See examples for details.}

\item{raw_as_binary}{A logical value indicating whether to convert \link{raw} vector to
a \link[=DataType]{Binary} type scalar. If \code{TRUE} (default), the output is a \link[=DataType]{Binary}
type scalar instead of \link[=DataType]{UInt8} type literal.}
}
\value{
A polars \link{expression}
}
\description{
The \code{\link[=as_polars_expr]{as_polars_expr()}} function creates a polars \link{expression} from various R objects.
This function is used internally by various polars functions that accept \link[=Expr]{expressions}.
In most cases, users should use \code{\link[=pl__lit]{pl$lit()}} instead of this function, which is
a shorthand for \code{as_polars_expr(x, as_lit = TRUE)}.
(In other words, this function can be considered as an internal implementation to realize
the \code{lit} function of the Polars API in other languages.)
}
\details{
Because R objects are typically mapped to \link{Series}, this function often calls
\code{\link[=as_polars_series]{as_polars_series()}} internally.
However, unlike R, Polars has scalars of length 1, so if an R object is converted to
a \link{Series} of length 1, this function get the first value of the Series
and convert it to a scalar literal.
If you want to implement your own conversion from an R class to a Polars object,
define an S3 method for \code{\link[=as_polars_series]{as_polars_series()}} instead of this function.
\subsection{Default S3 method}{

Create a \link{Series} by calling \code{\link[=as_polars_series]{as_polars_series()}} and then convert that \link{Series} to an \link{Expr}.
If the length of the \link{Series} is \code{1}, it will be converted to a scalar value.

Additional arguments \code{...} are passed to \code{\link[=as_polars_series]{as_polars_series()}}.
}

\subsection{S3 method for \link{character}}{

If the \code{as_lit} argument is \code{FALSE} (default), this function will call \code{\link[=pl__col]{pl$col()}} and
the character vector is treated as column names.
Otherwise, the default method is called.
}

\subsection{S3 method for \link{raw}}{

If the \code{raw_as_binary} argument is \code{TRUE} (default), the raw vector is converted to
a \link[=DataType]{Binary} type scalar. Otherwise, the default method is called.
}

\subsection{S3 method for \code{NULL}}{

\code{NULL} is converted to a Null type \code{null} literal.
}
}
\examples{
# character
## as_lit = FALSE (default)
as_polars_expr("a") # Same as `pl$col("a")`
as_polars_expr(c("a", "b")) # Same as `pl$col("a", "b")`

## as_lit = TRUE
as_polars_expr(character(0), as_lit = TRUE)
as_polars_expr("a", as_lit = TRUE)
as_polars_expr(NA_character_, as_lit = TRUE)
as_polars_expr(c("a", "b"), as_lit = TRUE)

# raw
as_polars_expr(as.raw(1))
as_polars_expr(as.raw(1), raw_as_binary = FALSE)
as_polars_expr(charToRaw("foo"))
as_polars_expr(charToRaw("foo"), raw_as_binary = FALSE)

# NULL
as_polars_expr(NULL)

# default method (for integer)
as_polars_expr(integer(0))
as_polars_expr(1L)
as_polars_expr(NA_integer_)
as_polars_expr(c(1L, 2L))

# default method (for double)
as_polars_expr(double(0))
as_polars_expr(1)
as_polars_expr(NA_real_)
as_polars_expr(c(1, 2))

# default method (for list)
as_polars_expr(list())
as_polars_expr(list(1))
as_polars_expr(list(1, 2))

# default method (for Date)
as_polars_expr(as.Date(integer(0)))
as_polars_expr(as.Date("2021-01-01"))
as_polars_expr(as.Date(c("2021-01-01", "2021-01-02")))

# default method (for Series)
as_polars_series(1) |>
  as_polars_expr()

# polars_expr
as_polars_expr(pl$col("a", "b"))
}
\seealso{
\itemize{
\item \code{\link[=as_polars_series]{as_polars_series()}}: R -> Polars type mapping is mostly defined by this function.
}
}
