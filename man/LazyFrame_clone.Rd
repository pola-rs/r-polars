% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lazyframe__lazy.R
\name{LazyFrame_clone}
\alias{LazyFrame_clone}
\title{Clone a LazyFrame}
\usage{
LazyFrame_clone()
}
\value{
A LazyFrame
}
\description{
This makes a very cheap deep copy/clone of an existing
\code{\link[=LazyFrame_class]{LazyFrame}}. Rarely useful as \code{LazyFrame}s are nearly 100\%
immutable. Any modification of a \code{LazyFrame} should lead to a clone anyways,
but this can be useful when dealing with attributes (see examples).
}
\examples{
df1 = pl$LazyFrame(iris)

# Make a function to take a LazyFrame, add an attribute, and return a LazyFrame
give_attr = function(data) {
  attr(data, "created_on") = "2024-01-29"
  data
}
df2 = give_attr(df1)

# Problem: the original LazyFrame also gets the attribute while it shouldn't!
attributes(df1)

# Use $clone() inside the function to avoid that
give_attr = function(data) {
  data = data$clone()
  attr(data, "created_on") = "2024-01-29"
  data
}
df1 = pl$LazyFrame(iris)
df2 = give_attr(df1)

# now, the original LazyFrame doesn't get this attribute
attributes(df1)
}
