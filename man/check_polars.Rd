% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check_polars.R
\name{check_polars}
\alias{check_polars}
\alias{is_polars}
\alias{is_polars_df}
\alias{is_polars_dtype}
\alias{is_polars_dtype_expr}
\alias{is_polars_expr}
\alias{is_polars_lf}
\alias{is_polars_selector}
\alias{is_polars_series}
\alias{is_polars_partitioning_scheme}
\alias{is_list_of_polars_dtype}
\alias{check_polars_df}
\alias{check_polars_dtype}
\alias{check_polars_dtype_expr}
\alias{check_polars_expr}
\alias{check_polars_lf}
\alias{check_polars_selector}
\alias{check_polars_series}
\alias{check_polars_partitioning_scheme}
\alias{check_list_of_polars_dtype}
\title{Check if the object is a polars object}
\usage{
is_polars_df(x)

is_polars_dtype(x)

is_polars_dtype_expr(x, ...)

is_polars_expr(x, ...)

is_polars_lf(x)

is_polars_selector(x, ...)

is_polars_series(x)

is_polars_partitioning_scheme(x)

is_list_of_polars_dtype(x, n = NULL)

check_polars_df(
  x,
  ...,
  allow_null = FALSE,
  arg = caller_arg(x),
  call = caller_env()
)

check_polars_dtype(
  x,
  ...,
  allow_null = FALSE,
  arg = caller_arg(x),
  call = caller_env()
)

check_polars_dtype_expr(
  x,
  ...,
  allow_null = FALSE,
  arg = caller_arg(x),
  call = caller_env()
)

check_polars_expr(
  x,
  ...,
  allow_null = FALSE,
  arg = caller_arg(x),
  call = caller_env()
)

check_polars_lf(
  x,
  ...,
  allow_null = FALSE,
  arg = caller_arg(x),
  call = caller_env()
)

check_polars_selector(
  x,
  ...,
  allow_null = FALSE,
  arg = caller_arg(x),
  call = caller_env()
)

check_polars_series(
  x,
  ...,
  allow_null = FALSE,
  arg = caller_arg(x),
  call = caller_env()
)

check_polars_partitioning_scheme(
  x,
  ...,
  allow_null = FALSE,
  arg = caller_arg(x),
  call = caller_env()
)

check_list_of_polars_dtype(
  x,
  ...,
  allow_null = FALSE,
  arg = caller_arg(x),
  call = caller_env()
)
}
\arguments{
\item{x}{An object to check.}

\item{...}{Arguments passed to \code{\link[rlang:abort]{rlang::abort()}}.}

\item{n}{Expected length of a vector.}

\item{allow_null}{If \code{TRUE}, \code{NULL} is allowed as a valid input.}

\item{arg}{An argument name as a string. This argument
will be mentioned in error messages as the input that is at the
origin of a problem.}

\item{call}{The execution environment of a currently
running function, e.g. \code{caller_env()}. The function will be
mentioned in error messages as the source of the error. See the
\code{call} argument of \code{\link[rlang:abort]{abort()}} for more information.}
}
\value{
\itemize{
\item \verb{is_polars_*} functions return \code{TRUE} or \code{FALSE}.
\item \verb{check_polars_*} functions return \code{NULL} invisibly if the input is valid.
}
}
\description{
Functions to check if the object is a polars object.
\verb{is_*} functions return \code{TRUE} of \code{FALSE} depending on the class of the object.
\verb{check_*} functions throw an informative error if the object is not the correct class.
Suffixes are corresponding to the polars object classes:
\itemize{
\item \verb{*_df}: For \link[=DataFrame]{polars data frames}.
\item \verb{*_dtype}: For \link[=DataType]{polars data types}.
\item \verb{*_dtype_expr}:  \ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}} For polars data type expressions.
\item \verb{*_expr}: For \link[=Expr]{polars expressions}.
\item \verb{*_lf}: For \link[=LazyFrame]{polars lazy frames}.
\item \verb{*_partitioning_scheme}: For \link[=polars_partitioning_scheme]{polars partitioning schemes}.
\item \verb{*_selector}: For \link[=cs]{polars selectors}.
\item \verb{*_series}: For \link[=Series]{polars series}.
}
}
\details{
\verb{check_polars_*} functions are derived from the \code{standalone-types-check} functions
from the \link[rlang:rlang-package]{rlang} package
(Can be installed with \code{usethis::use_standalone("r-lib/rlang", file = "types-check")}).
}
\examples{
is_polars_df(as_polars_df(mtcars))
is_polars_df(mtcars)

# Use `check_polars_*` functions in a function
# to ensure the input is a polars object
sample_func <- function(x) {
  check_polars_df(x)
  TRUE
}

sample_func(as_polars_df(mtcars))
try(sample_func(mtcars))
}
\seealso{
\itemize{
\item \code{\link[=infer_polars_dtype]{infer_polars_dtype()}}: Check if the object can be converted to a \link{Series}.
}
}
