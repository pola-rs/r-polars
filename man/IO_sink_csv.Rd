% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lazyframe__lazy.R
\name{LazyFrame_sink_csv}
\alias{LazyFrame_sink_csv}
\title{Stream the output of a query to a CSV file}
\usage{
LazyFrame_sink_csv(
  path,
  include_bom = FALSE,
  include_header = TRUE,
  separator = ",",
  line_terminator = "\\n",
  quote = "\\"",
  batch_size = 1024,
  datetime_format = NULL,
  date_format = NULL,
  time_format = NULL,
  float_precision = NULL,
  null_values = "",
  quote_style = "necessary",
  maintain_order = TRUE,
  type_coercion = TRUE,
  predicate_pushdown = TRUE,
  projection_pushdown = TRUE,
  simplify_expression = TRUE,
  slice_pushdown = TRUE,
  no_optimization = FALSE,
  inherit_optimization = FALSE
)
}
\arguments{
\item{path}{File path to which the result should be written.}

\item{include_bom}{Whether to include UTF-8 BOM (byte order mark) in the CSV
output.}

\item{include_header}{Whether to include header in the CSV output.}

\item{separator}{Separate CSV fields with this symbol.}

\item{line_terminator}{String used to end each row.}

\item{quote}{Byte to use as quoting character.}

\item{batch_size}{Number of rows that will be processed per thread.}

\item{datetime_format}{A format string, with the specifiers defined by the
chrono Rust crate. If no format specified, the default fractional-second
precision is inferred from the maximum timeunit found in the frameâ€™s Datetime
cols (if any).}

\item{date_format}{A format string, with the specifiers defined by the chrono
Rust crate.}

\item{time_format}{A format string, with the specifiers defined by the chrono
Rust crate.}

\item{float_precision}{Number of decimal places to write, applied to both
Float32 and Float64 datatypes.}

\item{null_values}{A string representing null values (defaulting to the empty
string).}

\item{quote_style}{Determines the quoting strategy used.
\itemize{
\item \code{"necessary"} (default): This puts quotes around fields only when necessary.
They are necessary when fields contain a quote, delimiter or record
terminator. Quotes are also necessary when writing an empty record (which
is indistinguishable from a record with one empty field). This is the
default.
\item \code{"always"}: This puts quotes around every field.
\item \code{"non_numeric"}: This puts quotes around all fields that are non-numeric.
Namely, when writing a field that does not parse as a valid float or integer,
then quotes will be used even if they aren`t strictly necessary.
\item \code{"never"}: This never puts quotes around fields, even if that results in
invalid CSV data (e.g. by not quoting strings containing the separator).
}}

\item{maintain_order}{Maintain the order in which data is processed. Setting
this to \code{FALSE} will be slightly faster.}

\item{type_coercion}{Boolean. Coerce types such that operations succeed and
run on minimal required memory.}

\item{predicate_pushdown}{Boolean. Applies filters as early as possible at
scan level.}

\item{projection_pushdown}{Boolean. Select only the columns that are needed
at the scan level.}

\item{simplify_expression}{Boolean. Various optimizations, such as constant
folding and replacing expensive operations with faster alternatives.}

\item{slice_pushdown}{Boolean. Only load the required slice from the scan
level. Don't materialize sliced outputs (e.g. \code{join$head(10)}).}

\item{no_optimization}{Boolean. Sets the following parameters to \code{FALSE}:
\code{predicate_pushdown}, \code{projection_pushdown}, \code{slice_pushdown},
\code{comm_subplan_elim}, \code{comm_subexpr_elim}.}

\item{inherit_optimization}{Boolean. Use existing optimization settings
regardless the settings specified in this function call.}
}
\description{
This writes the output of a query directly to a CSV file without collecting
it in the R session first. This is useful if the output of the query is still
larger than RAM as it would crash the R session if it was collected into R.
}
\examples{
# sink table 'mtcars' from mem to CSV
tmpf = tempfile()
pl$LazyFrame(mtcars)$sink_csv(tmpf)

# stream a query end-to-end
tmpf2 = tempfile()
pl$scan_csv(tmpf)$select(pl$col("cyl") * 2)$sink_csv(tmpf2)

# load parquet directly into a DataFrame / memory
pl$scan_csv(tmpf2)$collect()
}
