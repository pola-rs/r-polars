% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as_polars.R
\name{as_polars_df}
\alias{as_polars_df}
\alias{as_polars_df.default}
\alias{as_polars_df.data.frame}
\alias{as_polars_df.RPolarsDataFrame}
\alias{as_polars_df.RPolarsGroupBy}
\alias{as_polars_df.RPolarsRollingGroupBy}
\alias{as_polars_df.RPolarsDynamicGroupBy}
\alias{as_polars_df.RPolarsSeries}
\alias{as_polars_df.RPolarsLazyFrame}
\alias{as_polars_df.RPolarsLazyGroupBy}
\alias{as_polars_df.ArrowTabular}
\alias{as_polars_df.nanoarrow_array_stream}
\title{To polars DataFrame}
\usage{
as_polars_df(x, ...)

\method{as_polars_df}{default}(x, ...)

\method{as_polars_df}{data.frame}(x, ..., rownames = NULL, make_names_unique = TRUE)

\method{as_polars_df}{RPolarsDataFrame}(x, ...)

\method{as_polars_df}{RPolarsGroupBy}(x, ...)

\method{as_polars_df}{RPolarsRollingGroupBy}(x, ...)

\method{as_polars_df}{RPolarsDynamicGroupBy}(x, ...)

\method{as_polars_df}{RPolarsSeries}(x, ...)

\method{as_polars_df}{RPolarsLazyFrame}(
  x,
  n_rows = Inf,
  ...,
  type_coercion = TRUE,
  predicate_pushdown = TRUE,
  projection_pushdown = TRUE,
  simplify_expression = TRUE,
  slice_pushdown = TRUE,
  comm_subplan_elim = TRUE,
  comm_subexpr_elim = TRUE,
  streaming = FALSE,
  no_optimization = FALSE,
  inherit_optimization = FALSE,
  collect_in_background = FALSE
)

\method{as_polars_df}{RPolarsLazyGroupBy}(x, ...)

\method{as_polars_df}{ArrowTabular}(x, ..., rechunk = TRUE, schema = NULL, schema_overrides = NULL)

\method{as_polars_df}{nanoarrow_array_stream}(x, ...)
}
\arguments{
\item{x}{Object to convert to a polars DataFrame.}

\item{...}{Additional arguments passed to methods.}

\item{rownames}{How to treat existing row names of a data frame:
\itemize{
\item \code{NULL}: Remove row names. This is the default.
\item A string: The name of a new column, which will contain the row names.
If \code{x} already has a column with that name, an error is thrown.
}}

\item{make_names_unique}{A logical flag to replace duplicated column names
with unique names. If \code{FALSE} and there are duplicated column names, an
error is thrown.}

\item{n_rows}{Number of rows to fetch. Defaults to \code{Inf}, meaning all rows.}

\item{type_coercion}{Boolean. Coerce types such that operations succeed and
run on minimal required memory.}

\item{predicate_pushdown}{Boolean. Applies filters as early as possible at
scan level.}

\item{projection_pushdown}{Boolean. Select only the columns that are needed
at the scan level.}

\item{simplify_expression}{Boolean. Various optimizations, such as constant
folding and replacing expensive operations with faster alternatives.}

\item{slice_pushdown}{Boolean. Only load the required slice from the scan
level. Don't materialize sliced outputs (e.g. \code{join$head(10)}).}

\item{comm_subplan_elim}{Boolean. Will try to cache branching subplans that
occur on self-joins or unions.}

\item{comm_subexpr_elim}{Boolean. Common subexpressions will be cached and
reused.}

\item{streaming}{Boolean. Run parts of the query in a streaming fashion
(this is in an alpha state).}

\item{no_optimization}{Boolean. Sets the following parameters to \code{FALSE}:
\code{predicate_pushdown}, \code{projection_pushdown}, \code{slice_pushdown},
\code{comm_subplan_elim}, \code{comm_subexpr_elim}.}

\item{inherit_optimization}{Boolean. Use existing optimization settings
regardless the settings specified in this function call.}

\item{collect_in_background}{Boolean. Detach this query from R session.
Computation will start in background. Get a handle which later can be converted
into the resulting DataFrame. Useful in interactive mode to not lock R session.}

\item{rechunk}{A logical flag (default \code{TRUE}).
Make sure that all data of each column is in contiguous memory.}

\item{schema}{named list of DataTypes, or character vector of column names.
Should be the same length as the number of columns of \code{x}.
If schema names or types do not match \code{x}, the columns will be renamed/recast.
If \code{NULL} (default), convert columns as is.}

\item{schema_overrides}{named list of DataTypes. Cast some columns to the DataType.}
}
\value{
a \link[=DataFrame_class]{DataFrame}
}
\description{
\code{\link[=as_polars_df]{as_polars_df()}} is a generic function that converts an R object to a
polars DataFrame. It is basically a wrapper for \link[=pl_DataFrame]{pl$DataFrame()},
but has special implementations for Apache Arrow-based objects such as
polars \link[=LazyFrame_class]{LazyFrame} and \link[arrow:Table-class]{arrow::Table}.
}
\details{
For \link[=LazyFrame_class]{LazyFrame} objects, this function is a shortcut for
\link[=LazyFrame_collect]{$collect()} or \link[=LazyFrame_fetch]{$fetch()}, depending on
whether the number of rows to fetch is infinite or not.
}
\examples{
\dontshow{if (requireNamespace("arrow", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# Convert the row names of a data frame to a column
as_polars_df(mtcars, rownames = "car")

# Convert an arrow Table to a polars DataFrame
at = arrow::arrow_table(x = 1:5, y = 6:10)
as_polars_df(at)

# Convert an arrow Table, with renaming all columns
as_polars_df(
  at,
  schema = c("a", "b")
)

# Convert an arrow Table, with renaming and casting all columns
as_polars_df(
  at,
  schema = list(a = pl$Int64, b = pl$String)
)

# Convert an arrow Table, with renaming and casting some columns
as_polars_df(
  at,
  schema_overrides = list(y = pl$String) # cast some columns
)

# Create a polars DataFrame from a data.frame
lf = as_polars_df(mtcars)$lazy()

# Collect all rows from the LazyFrame
as_polars_df(lf)

# Fetch 5 rows from the LazyFrame
as_polars_df(lf, 5)
\dontshow{\}) # examplesIf}
}
