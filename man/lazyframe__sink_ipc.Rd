% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/output-ipc.R
\name{lazyframe__sink_ipc}
\alias{lazyframe__sink_ipc}
\alias{lazyframe__lazy_sink_ipc}
\title{Evaluate the query in streaming mode and write to Arrow IPC File Format}
\usage{
lazyframe__sink_ipc(
  path,
  ...,
  compression = c("zstd", "lz4", "uncompressed"),
  compat_level = c("newest", "oldest"),
  maintain_order = TRUE,
  type_coercion = TRUE,
  `_type_check` = TRUE,
  predicate_pushdown = TRUE,
  projection_pushdown = TRUE,
  simplify_expression = TRUE,
  slice_pushdown = TRUE,
  no_optimization = FALSE,
  storage_options = NULL,
  retries = 2,
  sync_on_close = c("none", "data", "all"),
  mkdir = FALSE,
  engine = c("auto", "in-memory", "streaming"),
  collapse_joins = deprecated()
)

lazyframe__lazy_sink_ipc(
  path,
  ...,
  compression = c("zstd", "lz4", "uncompressed"),
  compat_level = c("newest", "oldest"),
  maintain_order = TRUE,
  type_coercion = TRUE,
  `_type_check` = TRUE,
  predicate_pushdown = TRUE,
  projection_pushdown = TRUE,
  simplify_expression = TRUE,
  slice_pushdown = TRUE,
  no_optimization = FALSE,
  storage_options = NULL,
  retries = 2,
  sync_on_close = c("none", "data", "all"),
  mkdir = FALSE,
  collapse_joins = deprecated()
)
}
\arguments{
\item{path}{A character. File path to which the file should be written.}

\item{...}{These dots are for future extensions and must be empty.}

\item{compression}{Determines the compression algorithm.
Must be one of:
\itemize{
\item \code{"uncompressed"} or \code{NULL}: Write an uncompressed Arrow file.
\item \code{"lz4"}: Fast compression/decompression.
\item \code{"zstd"} (default): Good compression performance.
}}

\item{compat_level}{Determines the compatibility level when exporting
Polars' internal data structures. When specifying a new compatibility level,
Polars exports its internal data structures that might not be interpretable by
other Arrow implementations. The level can be specified as the name
(e.g., \code{"newest"}) or as a scalar integer (Currently, \code{0} or \code{1} is supported).
\itemize{
\item \code{"newest"} \ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}} (default):
Use the highest level, currently same as \code{1} (Low compatibility).
\item \code{"oldest"}: Same as \code{0} (High compatibility).
}}

\item{maintain_order}{Maintain the order in which data is processed. Setting
this to \code{FALSE} will be slightly faster.}

\item{type_coercion}{A logical, indicates type coercion optimization.}

\item{_type_check}{For internal use only.}

\item{predicate_pushdown}{A logical, indicates predicate pushdown optimization.}

\item{projection_pushdown}{A logical, indicates projection pushdown optimization.}

\item{simplify_expression}{A logical, indicates simplify expression optimization.}

\item{slice_pushdown}{A logical, indicates slice pushdown optimization.}

\item{no_optimization}{A logical. If \code{TRUE}, turn off (certain) optimizations.}

\item{storage_options}{Named vector containing options that indicate how to
connect to a cloud provider. The cloud providers currently supported are
AWS, GCP, and Azure.
See supported keys here:
\itemize{
\item \href{https://docs.rs/object_store/latest/object_store/aws/enum.AmazonS3ConfigKey.html}{aws}
\item \href{https://docs.rs/object_store/latest/object_store/gcp/enum.GoogleConfigKey.html}{gcp}
\item \href{https://docs.rs/object_store/latest/object_store/azure/enum.AzureConfigKey.html}{azure}
\item Hugging Face (\verb{hf://}): Accepts an API key under the token parameter
\code{c(token = YOUR_TOKEN)} or by setting the \code{HF_TOKEN} environment
variable.
}

If \code{storage_options} is not provided, Polars will try to infer the
information from environment variables.}

\item{retries}{Number of retries if accessing a cloud instance fails.}

\item{sync_on_close}{Sync to disk when before closing a file. Must be one of:
\itemize{
\item \code{"none"}: does not sync;
\item \code{"data"}: syncs the file contents;
\item \code{"all"}: syncs the file contents and metadata.
}}

\item{mkdir}{Recursively create all the directories in the path.}

\item{engine}{The engine name to use for processing the query.
One of the followings:
\itemize{
\item \code{"auto"} (default): Select the engine automatically.
The \code{"in-memory"} engine will be selected for most cases.
\item \code{"in-memory"}: Use the in-memory engine.
\item \code{"streaming"}: \ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}} Use the (new) streaming engine.
}}

\item{collapse_joins}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}}
Use \code{predicate_pushdown} instead.}
}
\value{
\itemize{
\item \verb{<lazyframe>$sink_*()} returns \code{NULL} invisibly.
\item \verb{<lazyframe>$lazy_sink_*()} returns a new \link{LazyFrame}.
}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

This allows streaming results that are larger than RAM to be written to disk.
\itemize{
\item \verb{<lazyframe>$lazy_sink_*()} don't write directly to the output file(s) until
\code{\link[=lazyframe__collect]{$collect()}} is called.
This is useful if you want to save a query to review or run later.
\item \verb{<lazyframe>$sink_*()} write directly to the output file(s) (they are shortcuts for
\verb{<lazyframe>$lazy_sink_*()$collect()}).
}
}
\examples{
tmpf <- tempfile(fileext = ".arrow")
as_polars_lf(mtcars)$sink_ipc(tmpf)

pl$read_ipc(tmpf)
}
