% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expr-list.R
\name{expr_list_to_struct}
\alias{expr_list_to_struct}
\title{Convert the Series of type List to a Series of type Struct}
\usage{
expr_list_to_struct(
  n_field_strategy = deprecated(),
  fields = NULL,
  upper_bound = NULL
)
}
\arguments{
\item{n_field_strategy}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}}
Ignored.}

\item{fields}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
\code{NULL} (default) or character vector of field names, or a function that
takes an integer index and returns character.
If the name and number of the desired fields is known in advance,
character vector of field names can be given, which will be assigned by index.
Otherwise, to dynamically assign field names, a custom function can be used;
if neither are set, fields will be \code{field_0}, \code{field_1}...
See the examples for details.}

\item{upper_bound}{Single positive integer value or \code{NULL} (default).
A \link[=Expr]{polars expression} needs to be able to evaluate the output datatype at all
times, so the caller must provide an upper bound of the number of struct
fields that will be created if \code{fields} is not a character vector of field names.}
}
\value{
A polars \link{expression}
}
\description{
Convert the Series of type List to a Series of type Struct
}
\details{
It is recommended to set \code{upper_bound} to the correct output size
of the struct. If this is not set, Polars will not know the output type of
this operation and will set it to \code{Unknown} which can lead to errors because
Polars is not able to resolve the query.

For performance reasons, the length of the first non-null sublist is used to
determine the number of output fields by default.
If the sublists can be of different lengths then \code{n_field_strategy="max_width"}
must be used to obtain the expected result.
}
\examples{
df <- pl$DataFrame(n = list(c(0, 1), c(0, 1, 2)))

# Convert list to struct with default field name assignment:

# This will become a struct with 2 fields.
df$select(pl$col("n")$list$to_struct(upper_bound = 2))$unnest("n")

# Convert list to struct with field name assignment by
# function/index:
df$select(
  pl$col("n")$list$to_struct(
    fields = \(idx) paste0("n", idx + 1),
    upper_bound = 2
  )
)$unnest("n")

# Convert list to struct with field name assignment by
# index from a list of names:
df$select(pl$col("n")$list$to_struct(
  fields = c("one", "two", "three"))
)$unnest("n")
}
