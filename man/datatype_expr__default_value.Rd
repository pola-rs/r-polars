% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/datatype-expr-expr.R
\name{datatype_expr__default_value}
\alias{datatype_expr__default_value}
\title{Get a default value of a specific type}
\usage{
datatype_expr__default_value(
  n = 1,
  ...,
  numeric_to_one = FALSE,
  num_list_values = 0
)
}
\arguments{
\item{n}{Number of values in the output.}

\item{...}{These dots are for future extensions and must be empty.}

\item{numeric_to_one}{Use \code{1} instead of \code{0} as the default value for numeric
types.}

\item{num_list_values}{The amount of values a list contains.}
}
\value{
A polars \link{expression}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
Get a default value of a specific type:
\itemize{
\item Integers and floats are their zero value as default, unless otherwise
specified;
\item Temporals are a physical zero as default;
\item \code{pl$Decimal} is zero as default;
\item \code{pl$String} and \code{pl$Binary} are an empty string;
\item \code{pl$List} is an empty list, unless otherwise specified;
\item \code{pl$Array} is the inner default value repeated over the shape;
\item \code{pl$Struct} is the inner default value for all fields;
\item \code{pl$Enum} is the first category if it exists;
\item \code{pl$Null} and \code{pl$Categorical} are \code{null}.
}
}
\details{
Because R objects are typically mapped to \link{Series}, this function often calls
\code{\link[=as_polars_series]{as_polars_series()}} internally.
However, unlike R, Polars has scalars of length 1, so if an R object is converted to
a \link{Series} of length 1, this function get the first value of the Series
and convert it to a scalar literal.
If you want to implement your own conversion from an R class to a Polars object,
define an S3 method for \code{\link[=as_polars_series]{as_polars_series()}} instead of this function.
\subsection{Default S3 method}{

Create a \link{Series} by calling \code{\link[=as_polars_series]{as_polars_series()}} and then convert that \link{Series} to an \link{Expr}.
If the length of the \link{Series} is \code{1}, it will be converted to a scalar value.

Additional arguments \code{...} are passed to \code{\link[=as_polars_series]{as_polars_series()}}.
}

\subsection{S3 method for \link{character}}{

If the \code{as_lit} argument is \code{FALSE} (default), this function will call \code{\link[=pl__col]{pl$col()}} and
the character vector is treated as column names.
Otherwise, the default method is called.
}

\subsection{S3 method for \link{raw}}{

If the \code{raw_as_binary} argument is \code{TRUE} (default), the raw vector is converted to
a \link[=DataType]{Binary} type scalar. Otherwise, the default method is called.
}

\subsection{S3 method for \code{NULL}}{

\code{NULL} is converted to a Null type \code{null} literal.
}
}
\examples{
uint32 <- pl$UInt32$to_dtype_expr()
string <- pl$String$to_dtype_expr()
array <- pl$Array(pl$Float64, 2)$to_dtype_expr()

pl$select(
  uint32_default = uint32$default_value(),
  uint32_default_bis = uint32$default_value(numeric_to_one = TRUE),
  string_default = string$default_value(),
  array_default = array$default_value()
)

# Return more values with `n`
pl$select(uint32_default = uint32$default_value(n = 3))

# Customize the number of default values in a list with `num_list_values`
l <- pl$List(pl$Float64)$to_dtype_expr()
pl$select(
  list_default = l$default_value(),
  list_default_bis = l$default_value(num_list_values = 3),
)
}
\seealso{
\itemize{
\item \code{\link[=as_polars_series]{as_polars_series()}}: R -> Polars type mapping is mostly defined by this function.
}
}
