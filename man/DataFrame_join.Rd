% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dataframe__frame.R
\name{DataFrame_join}
\alias{DataFrame_join}
\title{Join DataFrames}
\usage{
DataFrame_join(
  other,
  left_on = NULL,
  right_on = NULL,
  on = NULL,
  how = c("inner", "left", "outer", "semi", "anti", "cross"),
  suffix = "_right",
  allow_parallel = TRUE,
  force_parallel = FALSE
)
}
\arguments{
\item{other}{DataFrame}

\item{left_on, right_on}{Same as \code{on} but only for the left or the right
DataFrame. They must have the same length.}

\item{on}{Either a vector of column names or a list of expressions and/or
strings. Use \code{left_on} and \code{right_on} if the column names to match on are
different between the two DataFrames.}

\item{how}{One of the following methods: "inner", "left", "outer", "semi",
"anti", "cross".}

\item{suffix}{Suffix to add to duplicated column names.}

\item{allow_parallel}{Boolean.}

\item{force_parallel}{Boolean.}
}
\value{
DataFrame
}
\description{
This function can do both mutating joins (adding columns based on matching
observations, for example with \code{how = "left"}) and filtering joins (keeping
observations based on matching observations, for example with \code{how = "inner"}).
}
\examples{
# inner join by default
df1 = pl$DataFrame(list(key = 1:3, payload = c("f", "i", NA)))
df2 = pl$DataFrame(list(key = c(3L, 4L, 5L, NA_integer_)))
df1$join(other = df2, on = "key")

# cross join
df1 = pl$DataFrame(x = letters[1:3])
df2 = pl$DataFrame(y = 1:4)
df1$join(other = df2, how = "cross")
}
\keyword{DataFrame}
