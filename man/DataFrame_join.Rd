% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dataframe__frame.R
\name{DataFrame_join}
\alias{DataFrame_join}
\title{Join DataFrames}
\usage{
DataFrame_join(
  other,
  on = NULL,
  how = c("inner", "left", "full", "semi", "anti", "cross"),
  ...,
  left_on = NULL,
  right_on = NULL,
  suffix = "_right",
  validate = "m:m",
  join_nulls = FALSE,
  allow_parallel = TRUE,
  force_parallel = FALSE,
  coalesce = NULL
)
}
\arguments{
\item{other}{DataFrame to join with.}

\item{on}{Either a vector of column names or a list of expressions and/or
strings. Use \code{left_on} and \code{right_on} if the column names to match on are
different between the two DataFrames.}

\item{how}{One of the following methods: "inner", "left", "full", "semi",
"anti", "cross".}

\item{...}{Ignored.}

\item{left_on, right_on}{Same as \code{on} but only for the left or the right
DataFrame. They must have the same length.}

\item{suffix}{Suffix to add to duplicated column names.}

\item{validate}{Checks if join is of specified type:
\itemize{
\item \code{"m:m"} (default): many-to-many, doesn't perform any checks;
\item \code{"1:1"}: one-to-one, check if join keys are unique in both left and right
datasets;
\item \code{"1:m"}: one-to-many, check if join keys are unique in left dataset
\item \code{"m:1"}: many-to-one, check if join keys are unique in right dataset
}

Note that this is currently not supported by the streaming engine, and is
only supported when joining by single columns.}

\item{join_nulls}{Join on null values. By default null values will never
produce matches.}

\item{allow_parallel}{Allow the physical plan to optionally evaluate the
computation of both DataFrames up to the join in parallel.}

\item{force_parallel}{Force the physical plan to evaluate the computation of
both DataFrames up to the join in parallel.}

\item{coalesce}{Coalescing behavior (merging of join columns).
\itemize{
\item \code{NULL}: join specific.
\item \code{TRUE}: Always coalesce join columns.
\item \code{FALSE}: Never coalesce join columns.
}}
}
\value{
DataFrame
}
\description{
This function can do both mutating joins (adding columns based on matching
observations, for example with \code{how = "left"}) and filtering joins (keeping
observations based on matching observations, for example with \code{how = "inner"}).
}
\examples{
# inner join by default
df1 = pl$DataFrame(list(key = 1:3, payload = c("f", "i", NA)))
df2 = pl$DataFrame(list(key = c(3L, 4L, 5L, NA_integer_)))
df1$join(other = df2, on = "key")

# cross join
df1 = pl$DataFrame(x = letters[1:3])
df2 = pl$DataFrame(y = 1:4)
df1$join(other = df2, how = "cross")
}
\keyword{DataFrame}
