% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dataframe__frame.R
\name{DataFrame_rolling}
\alias{DataFrame_rolling}
\title{Create rolling groups based on a date/time or integer column}
\usage{
DataFrame_rolling(
  index_column,
  ...,
  period,
  offset = NULL,
  closed = "right",
  group_by = NULL
)
}
\arguments{
\item{index_column}{Column used to group based on the time window. Often of
type Date/Datetime. This column must be sorted in ascending order (or, if \code{by}
is specified, then it must be sorted in ascending order within each group). In
case of a rolling group by on indices, dtype needs to be either Int32 or Int64.
Note that Int32 gets temporarily cast to Int64, so if performance matters use
an Int64 column.}

\item{...}{Ignored.}

\item{period}{A character representing the length of the window,
must be non-negative. See the \verb{Polars duration string language} section
for details.}

\item{offset}{A character representing the offset of the window,
or \code{NULL} (default). If \code{NULL}, \code{-period} is used.
See the \verb{Polars duration string language} section for details.}

\item{closed}{Define which sides of the temporal interval are closed
(inclusive). This can be either \code{"left"}, \code{"right"}, \code{"both"} or \code{"none"}.}

\item{group_by}{Also group by this column/these columns.}
}
\value{
A \link[=RollingGroupBy_class]{RollingGroupBy} object
}
\description{
If you have a time series \verb{<t_0, t_1, ..., t_n>}, then by default the windows
created will be:
\itemize{
\item (t_0 - period, t_0]
\item (t_1 - period, t_1]
\item …
\item (t_n - period, t_n]
}

whereas if you pass a non-default offset, then the windows will be:
\itemize{
\item (t_0 + offset, t_0 + offset + period]
\item (t_1 + offset, t_1 + offset + period]
\item …
\item (t_n + offset, t_n + offset + period]
}
}
\details{
In case of a rolling operation on an integer column, the windows are defined
by:
\itemize{
\item "1i" # length 1
\item "10i" # length 10
}
}
\section{Polars duration string language}{

Polars duration string language is a simple representation of
durations. It is used in many Polars functions that accept durations.

It has the following format:
\itemize{
\item 1ns (1 nanosecond)
\item 1us (1 microsecond)
\item 1ms (1 millisecond)
\item 1s (1 second)
\item 1m (1 minute)
\item 1h (1 hour)
\item 1d (1 calendar day)
\item 1w (1 calendar week)
\item 1mo (1 calendar month)
\item 1q (1 calendar quarter)
\item 1y (1 calendar year)
}

Or combine them: \code{"3d12h4m25s"} # 3 days, 12 hours, 4 minutes, and 25 seconds

By "calendar day", we mean the corresponding time on the next day
(which may not be 24 hours, due to daylight savings).
Similarly for "calendar week", "calendar month", "calendar quarter", and "calendar year".
}

\examples{
date = c(
  "2020-01-01 13:45:48",
  "2020-01-01 16:42:13",
  "2020-01-01 16:45:09",
  "2020-01-02 18:12:48",
  "2020-01-03 19:45:32",
  "2020-01-08 23:16:43"
)
df = pl$DataFrame(dt = date, a = c(3, 7, 5, 9, 2, 1))$with_columns(
  pl$col("dt")$str$strptime(pl$Datetime())$set_sorted()
)

df$rolling(index_column = "dt", period = "2d")$agg(
  sum_a = pl$sum("a"),
  min_a = pl$min("a"),
  max_a = pl$max("a")
)
}
\seealso{
\itemize{
\item \code{\link[=DataFrame_group_by_dynamic]{<DataFrame>$group_by_dynamic()}}
}
}
