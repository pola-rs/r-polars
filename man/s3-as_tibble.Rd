% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dataframe-s3-tibble.R, R/lazyframe-s3-tibble.R
\name{as_tibble.polars_data_frame}
\alias{as_tibble.polars_data_frame}
\alias{as_tibble.polars_lazy_frame}
\title{Export the polars object as a tibble data frame}
\usage{
\method{as_tibble}{polars_data_frame}(
  x,
  ...,
  .name_repair = c("check_unique", "unique", "universal", "minimal", "unique_quiet",
    "universal_quiet"),
  uint8 = c("integer", "raw"),
  int64 = c("double", "character", "integer", "integer64"),
  date = c("Date", "IDate"),
  time = c("hms", "ITime"),
  decimal = c("double", "character"),
  as_clock_class = FALSE,
  ambiguous = c("raise", "earliest", "latest", "null"),
  non_existent = c("raise", "null")
)

\method{as_tibble}{polars_lazy_frame}(
  x,
  ...,
  .name_repair = c("check_unique", "unique", "universal", "minimal", "unique_quiet",
    "universal_quiet"),
  uint8 = c("integer", "raw"),
  int64 = c("double", "character", "integer", "integer64"),
  date = c("Date", "IDate"),
  time = c("hms", "ITime"),
  decimal = c("double", "character"),
  as_clock_class = FALSE,
  ambiguous = c("raise", "earliest", "latest", "null"),
  non_existent = c("raise", "null")
)
}
\arguments{
\item{x}{A polars object}

\item{...}{Passed to \code{\link[=as_polars_df]{as_polars_df()}}.}

\item{.name_repair}{Treatment of problematic column names:
\itemize{
\item \code{"minimal"}: No name repair or checks, beyond basic existence,
\item \code{"unique"}: Make sure names are unique and not empty,
\item \code{"check_unique"}: (default value), no name repair, but check they are
\code{unique},
\item \code{"universal"}: Make the names \code{unique} and syntactic
\item \code{"unique_quiet"}: Same as \code{"unique"}, but "quiet"
\item \code{"universal_quiet"}: Same as \code{"universal"}, but "quiet"
\item a function: apply custom name repair (e.g., \code{.name_repair = make.names}
for names in the style of base R).
\item A purrr-style anonymous function, see \code{\link[rlang:as_function]{rlang::as_function()}}
}

This argument is passed on as \code{repair} to \code{\link[vctrs:vec_as_names]{vctrs::vec_as_names()}}.
See there for more details on these terms and the strategies used
to enforce them.}

\item{uint8}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
Determine how to convert Polars' UInt8 type values to R type.
One of the followings:
\itemize{
\item \code{"integer"} (default): Convert to the R's \link{integer} type.
\item \code{"raw"}: Convert to the R's \link{raw} type.
If the value is \code{null}, export as \code{00}.
}}

\item{int64}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
Determine how to convert Polars' Int64, UInt32, or UInt64 type values to R type.
One of the followings:
\itemize{
\item \code{"double"} (default): Convert to the R's \link{double} type.
Accuracy may be degraded.
\item \code{"character"}: Convert to the R's \link{character} type.
\item \code{"integer"}: Convert to the R's \link{integer} type.
If the value is out of the range of R's integer type, export as \link{NA_integer_}.
\item \code{"integer64"}: Convert to the \link[bit64:bit64-package]{bit64::integer64} class.
The \link[bit64:bit64-package]{bit64} package must be installed.
If the value is out of the range of \link[bit64:bit64-package]{bit64::integer64}, export as \link[bit64:as.integer64.character]{bit64::NA_integer64_}.
}}

\item{date}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
Determine how to convert Polars' Date type values to R class.
One of the followings:
\itemize{
\item \code{"Date"} (default): Convert to the R's \link{Date} class.
\item \code{"IDate"}: Convert to the \link[data.table:IDateTime]{data.table::IDate} class.
}}

\item{time}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
Determine how to convert Polars' Time type values to R class.
One of the followings:
\itemize{
\item \code{"hms"} (default): Convert to the \link[hms:hms]{hms::hms} class.
If the \link[hms:hms-package]{hms} package is not installed, a warning will be shown.
\item \code{"ITime"}: Convert to the \link[data.table:IDateTime]{data.table::ITime} class.
The \link[data.table:data.table]{data.table} package must be installed.
}}

\item{decimal}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
Determine how to convert Polars' Decimal type values to R type.
One of the followings:
\itemize{
\item \code{"double"} (default): Convert to the R's \link{double} type.
\item \code{"character"}: Convert to the R's \link{character} type.
}}

\item{as_clock_class}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
A logical value indicating whether to export datetimes and duration as
the \link[clock:clock-package]{clock} package's classes.
\itemize{
\item \code{FALSE} (default): Duration values are exported as \link{difftime}
and datetime values are exported as \link{POSIXct}.
Accuracy may be degraded.
\item \code{TRUE}: Duration values are exported as \link[clock:duration-helper]{clock_duration},
datetime without timezone values are exported as \link[clock:as_naive_time]{clock_naive_time},
and datetime with timezone values are exported as \link[clock:as_zoned_time]{clock_zoned_time}.
For this case, the \link[clock:clock-package]{clock} package must be installed.
Accuracy will be maintained.
}}

\item{ambiguous}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
Determine how to deal with ambiguous datetimes.
Only applicable when \code{as_clock_class} is set to \code{FALSE} and
datetime without timezone values are exported as \link{POSIXct}.
Character vector or \link{expression} containing the followings:
\itemize{
\item \code{"raise"} (default): Throw an error
\item \code{"earliest"}: Use the earliest datetime
\item \code{"latest"}: Use the latest datetime
\item \code{"null"}: Return a \code{NA} value
}}

\item{non_existent}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
Determine how to deal with non-existent datetimes.
Only applicable when \code{as_clock_class} is set to \code{FALSE} and
datetime without timezone values are exported as \link{POSIXct}.
One of the followings:
\itemize{
\item \code{"raise"} (default): Throw an error
\item \code{"null"}: Return a \code{NA} value
}}
}
\value{
A \link[tibble:tbl_df-class]{tibble}
}
\description{
This S3 method is basically a shortcut of
\code{\link[=series__to_r_vector]{as_polars_df(x, ...)$to_struct()$to_r_vector(struct = "tibble")}}.
Additionally, you can check or repair the column names by specifying the \code{.name_repair} argument.
Because polars \link{DataFrame} allows empty column name, which is not generally valid column name
in R data frame.
}
\examples{
\dontshow{if (requireNamespace("tibble", quietly = TRUE)) withAutoprint(\{ # examplesIf}
# Polars DataFrame may have empty column name
df <- pl$DataFrame(x = 1:2, c("a", "b"))
df

# Without checking or repairing the column names
tibble::as_tibble(df, .name_repair = "minimal")
tibble::as_tibble(df$lazy(), .name_repair = "minimal")

# You can make that unique
tibble::as_tibble(df, .name_repair = "unique")
tibble::as_tibble(df$lazy(), .name_repair = "unique")
\dontshow{\}) # examplesIf}
}
\seealso{
\itemize{
\item \code{\link[=as.data.frame.polars_data_frame]{as.data.frame(<polars_object>)}}:
Export the polars object as a basic data frame.
}
}
