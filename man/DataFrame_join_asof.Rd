% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dataframe__frame.R
\name{DataFrame_join_asof}
\alias{DataFrame_join_asof}
\title{Perform joins on nearest keys}
\usage{
DataFrame_join_asof(
  other,
  ...,
  left_on = NULL,
  right_on = NULL,
  on = NULL,
  by_left = NULL,
  by_right = NULL,
  by = NULL,
  strategy = c("backward", "forward", "nearest"),
  suffix = "_right",
  tolerance = NULL,
  allow_parallel = TRUE,
  force_parallel = FALSE
)
}
\arguments{
\item{other}{DataFrame or LazyFrame}

\item{...}{Not used, blocks use of further positional arguments}

\item{left_on, right_on}{Same as \code{on} but only for the left or the right
DataFrame. They must have the same length.}

\item{on}{Either a vector of column names or a list of expressions and/or
strings. Use \code{left_on} and \code{right_on} if the column names to match on are
different between the two DataFrames.}

\item{by_left, by_right}{Same as \code{by} but only for the left or the right
table. They must have the same length.}

\item{by}{Join on these columns before performing asof join. Either a vector
of column names or a list of expressions and/or strings. Use \code{left_by} and
\code{right_by} if the column names to match on are different between the two
tables.}

\item{strategy}{Strategy for where to find match:
\itemize{
\item "backward" (default): search for the last row in the right table whose \code{on}
key is less than or equal to the left key.
\item "forward": search for the first row in the right table whose \code{on} key is
greater than or equal to the left key.
\item "nearest": search for the last row in the right table whose value is nearest
to the left key. String keys are not currently supported for a nearest
search.
}}

\item{suffix}{Suffix to add to duplicated column names.}

\item{tolerance}{Numeric tolerance. By setting this the join will only be done if the near
keys are within this distance. If an asof join is done on columns of dtype
"Date", "Datetime", "Duration" or "Time" you can use the following values:

\if{html}{\out{<div class="sourceCode">}}\preformatted{- 1ns   (1 nanosecond)
- 1us   (1 microsecond)
- 1ms   (1 millisecond)
- 1s    (1 second)
- 1m    (1 minute)
- 1h    (1 hour)
- 1d    (1 day)
- 1w    (1 week)
- 1mo   (1 calendar month) // currently not available, as interval is not fixed
- 1y    (1 calendar year)  // currently not available, as interval is not fixed
- 1i    (1 index count)
}\if{html}{\out{</div>}}

Or combine them: "3d12h4m25s" # 3 days, 12 hours, 4 minutes, and 25 seconds

There may be a circumstance where R types are not sufficient to express a
numeric tolerance. In that case, you can use the expression syntax like
\code{tolerance = pl$lit(42)$cast(pl$Uint64)}}

\item{allow_parallel}{Allow the physical plan to optionally evaluate the
computation of both DataFrames up to the join in parallel.}

\item{force_parallel}{Force the physical plan to evaluate the computation of
both DataFrames up to the join in parallel.}
}
\value{
New joined DataFrame
}
\description{
This is similar to a left-join except that we match on nearest key rather
than equal keys.
}
\details{
Both tables (DataFrames or LazyFrames) must be sorted by the asof_join key.
}
\examples{
# create two DataFrames to join asof
gdp = pl$DataFrame(
  date = as.Date(c("2015-1-1", "2016-1-1", "2017-5-1", "2018-1-1", "2019-1-1")),
  gdp = c(4321, 4164, 4411, 4566, 4696),
  group = c("b", "a", "a", "b", "b")
)

pop = pl$DataFrame(
  date = as.Date(c("2016-5-12", "2017-5-12", "2018-5-12", "2019-5-12")),
  population = c(82.19, 82.66, 83.12, 83.52),
  group = c("b", "b", "a", "a")
)

# optional make sure tables are already sorted with "on" join-key
gdp = gdp$sort("date")
pop = pop$sort("date")

# Left-join_asof DataFrame pop with gdp on "date"
# Look backward in gdp to find closest matching date
pop$join_asof(gdp, on = "date", strategy = "backward")

# .... and forward
pop$join_asof(gdp, on = "date", strategy = "forward")

# join by a group: "only look within within group"
pop$join_asof(gdp, on = "date", by = "group", strategy = "backward")

# only look 2 weeks and 2 days back
pop$join_asof(gdp, on = "date", strategy = "backward", tolerance = "2w2d")

# only look 11 days back (numeric tolerance depends on polars type, <date> is in days)
pop$join_asof(gdp, on = "date", strategy = "backward", tolerance = 11)
}
\keyword{DataFrame}
