% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dataframe__frame.R
\name{DataFrame_to_list}
\alias{DataFrame_to_list}
\title{Return Polars DataFrame as a list of vectors}
\usage{
DataFrame_to_list(
  unnest_structs = TRUE,
  ...,
  int64_conversion = polars_options()$int64_conversion
)
}
\arguments{
\item{unnest_structs}{Logical. If \code{TRUE} (default), then \verb{$unnest()} is applied
on any struct column.}

\item{...}{Any args pased to \code{as.data.frame()}.}

\item{int64_conversion}{How should Int64 values be handled when converting a
polars object to R?
\itemize{
\item \code{"double"} (default) converts the integer values to double.
\item \code{"bit64"} uses \code{bit64::as.integer64()} to do the conversion (requires
the package \code{bit64} to be attached).
\item \code{"string"} converts Int64 values to character.
}}
}
\value{
R list of vectors
}
\description{
Return Polars DataFrame as a list of vectors
}
\details{
For simplicity reasons, this implementation relies on unnesting all structs
before exporting to R. If \code{unnest_structs = FALSE}, then \code{struct} columns
will be returned as nested lists, where each row is a list of values. Such a
structure is not very typical or efficient in R.
}
\section{Conversion to R data types considerations}{

When converting Polars objects, such as \link[=DataFrame_class]{DataFrames}
to R objects, for example via the \code{\link[=as.data.frame.RPolarsDataFrame]{as.data.frame()}} generic function,
each type in the Polars object is converted to an R type.
In some cases, an error may occur because the conversion is not appropriate.
In particular, there is a high possibility of an error when converting
a \link[=DataType_Datetime]{Datetime} type without a time zone.
A \link[=DataType_Datetime]{Datetime} type without a time zone in Polars is converted
to the \link{POSIXct} type in R, which takes into account the time zone in which
the R session is running (which can be checked with the \code{\link[=Sys.timezone]{Sys.timezone()}}
function). In this case, if ambiguous times are included, a conversion error
will occur. In such cases, change the session time zone using
\code{\link[base:Sys.setenv]{Sys.setenv(TZ = "UTC")}} and then perform the conversion, or use the
\code{\link[=ExprDT_replace_time_zone]{$dt$replace_time_zone()}} method on the Datetime type column to
explicitly specify the time zone before conversion.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{# Due to daylight savings, clocks were turned forward 1 hour on Sunday, March 8, 2020, 2:00:00 am
# so this particular date-time doesn't exist
non_existent_time = as_polars_series("2020-03-08 02:00:00")$str$strptime(pl$Datetime(), "\%F \%T")

withr::with_envvar(
  new = c(TZ = "America/New_York"),
  \{
    tryCatch(
      # This causes an error due to the time zone (the `TZ` env var is affected).
      as.vector(non_existent_time),
      error = function(e) e
    )
  \}
)
#> <error: in to_r: ComputeError(ErrString("datetime '2020-03-08 02:00:00' is non-existent in time zone 'America/New_York'. You may be able to use `non_existent='null'` to return `null` in this case.")) When calling: devtools::document()>

withr::with_envvar(
  new = c(TZ = "America/New_York"),
  \{
    # This is safe.
    as.vector(non_existent_time$dt$replace_time_zone("UTC"))
  \}
)
#> [1] "2020-03-08 02:00:00 UTC"
}\if{html}{\out{</div>}}
}

\examples{
pl$DataFrame(iris)$to_list()
}
\seealso{
\itemize{
\item \code{\link[=DataFrame_get_columns]{<DataFrame>$get_columns()}}:
Similar to this method but returns a list of \link[=Series_class]{Series} instead of vectors.
}
}
