% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lazyframe__lazy.R
\name{LazyFrame_to_dot}
\alias{LazyFrame_to_dot}
\title{Plot the query plan}
\usage{
LazyFrame_to_dot(
  ...,
  optimized = TRUE,
  type_coercion = TRUE,
  predicate_pushdown = TRUE,
  projection_pushdown = TRUE,
  simplify_expression = TRUE,
  slice_pushdown = TRUE,
  comm_subplan_elim = TRUE,
  comm_subexpr_elim = TRUE,
  cluster_with_columns = TRUE,
  streaming = FALSE
)
}
\arguments{
\item{...}{Not used..}

\item{optimized}{Optimize the query plan.}

\item{type_coercion}{Logical. Coerce types such that operations succeed and
run on minimal required memory.}

\item{predicate_pushdown}{Logical. Applies filters as early as possible at
scan level.}

\item{projection_pushdown}{Logical. Select only the columns that are needed
at the scan level.}

\item{simplify_expression}{Logical. Various optimizations, such as constant
folding and replacing expensive operations with faster alternatives.}

\item{slice_pushdown}{Logical. Only load the required slice from the scan
level. Don't materialize sliced outputs (e.g. \code{join$head(10)}).}

\item{comm_subplan_elim}{Logical. Will try to cache branching subplans that
occur on self-joins or unions.}

\item{comm_subexpr_elim}{Logical. Common subexpressions will be cached and
reused.}

\item{cluster_with_columns}{Combine sequential independent calls to
\code{\link[=DataFrame_with_columns]{with_columns()}}.}

\item{streaming}{Logical. Run parts of the query in a streaming fashion
(this is in an alpha state).}
}
\value{
A character vector
}
\description{
This only returns the "dot" output that can be passed to other packages, such
as \code{DiagrammeR::grViz()}.
}
\examples{
lf = pl$LazyFrame(
  a = c("a", "b", "a", "b", "b", "c"),
  b = 1:6,
  c = 6:1
)

query = lf$group_by("a", maintain_order = TRUE)$agg(
  pl$all()$sum()
)$sort(
  "a"
)

query$to_dot() |> cat()

# You could print the graph by using DiagrammeR for example, with
# query$to_dot() |> DiagrammeR::grViz().
}
