% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/series__series.R
\name{Series_to_r}
\alias{Series_to_r}
\alias{Series_to_vector}
\alias{Series_to_r_list}
\title{Get r vector/list}
\usage{
Series_to_r(int64_conversion = polars_options()$int64_conversion)

Series_to_vector(int64_conversion = polars_options()$int64_conversion)

Series_to_r_list(int64_conversion = polars_options()$int64_conversion)
}
\arguments{
\item{int64_conversion}{How should Int64 values be handled when converting a
polars object to R?
\itemize{
\item \code{"double"} (default) converts the integer values to double.
\item \code{"bit64"} uses \code{bit64::as.integer64()} to do the conversion (requires
the package \code{bit64} to be attached).
\item \code{"string"} converts Int64 values to character.
}}
}
\value{
R list or vector

R vector

R list
}
\description{
return R list (if polars Series is list)  or vector (any other polars Series type)

return R vector (implicit unlist)

return R list (implicit as.list)
}
\details{
Fun fact: Nested polars Series list must have same inner type, e.g. List(List(Int32))
Thus every leaf(non list type) will be placed on the same depth of the tree, and be the same type.
}
\section{Conversion to R data types considerations}{

When converting Polars objects, such as \link[=DataFrame_class]{DataFrames}
to R objects, for example via the \code{\link[=as.data.frame.RPolarsDataFrame]{as.data.frame()}} generic function,
each type in the Polars object is converted to an R type.
In some cases, an error may occur because the conversion is not appropriate.
In particular, there is a high possibility of an error when converting
a \link[=DataType_Datetime]{Datetime} type without a time zone.
A \link[=DataType_Datetime]{Datetime} type without a time zone in Polars is converted
to the \link{POSIXct} type in R, which takes into account the time zone in which
the R session is running (which can be checked with the \code{\link[=Sys.timezone]{Sys.timezone()}}
function). In this case, if ambiguous times are included, a conversion error
will occur. In such cases, change the session time zone using
\code{\link[base:Sys.setenv]{Sys.setenv(TZ = "UTC")}} and then perform the conversion, or use the
\code{\link[=ExprDT_replace_time_zone]{$dt$replace_time_zone()}} method on the Datetime type column to
explicitly specify the time zone before conversion.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{# Due to daylight savings, clocks were turned forward 1 hour on Sunday, March 8, 2020, 2:00:00 am
# so this particular date-time doesn't exist
non_existent_time = pl$Series("2020-03-08 02:00:00")$str$strptime(pl$Datetime(), "\%F \%T")

withr::with_envvar(
  new = c(TZ = "America/New_York"),
  \{
    tryCatch(
      # This causes an error due to the time zone (the `TZ` env var is affected).
      as.vector(non_existent_time),
      error = function(e) e
    )
  \}
)
#> <error: in to_r: ComputeError(ErrString("datetime '2020-03-08 02:00:00' is non-existent in time zone 'America/New_York'. Non-existent datetimes are not yet supported")) When calling: devtools::document()>

withr::with_envvar(
  new = c(TZ = "America/New_York"),
  \{
    # This is safe.
    as.vector(non_existent_time$dt$replace_time_zone("UTC"))
  \}
)
#> [1] "2020-03-08 02:00:00 UTC"
}\if{html}{\out{</div>}}
}

\examples{

series_vec = pl$Series(letters[1:3])

# Series_non_list
series_vec$to_r() # as vector because Series DataType is not list (is String)
series_vec$to_r_list() # implicit call as.list(), convert to list
series_vec$to_vector() # implicit call unlist(), same as to_r() as already vector


# make nested Series_list of Series_list of Series_Int32
# using Expr syntax because currently more complete translated
series_list = pl$DataFrame(list(a = c(1:5, NA_integer_)))$select(
  pl$col("a")$implode()$implode()$append(
    (
      pl$col("a")$head(2)$implode()$append(
        pl$col("a")$tail(1)$implode()
      )
    )$implode()
  )
)$get_column("a") # get series from DataFrame

# Series_list
series_list$to_r() # as list because Series DataType is list
series_list$to_r_list() # implicit call as.list(), same as to_r() as already list
series_list$to_vector() # implicit call unlist(), append into a vector
#
}
\keyword{=}
\keyword{Series}
\keyword{pl$Series(letters[1:3])}
\keyword{series_vec}
\keyword{series_vec$to_vector()}
