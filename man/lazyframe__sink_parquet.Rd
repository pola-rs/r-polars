% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lazyframe-utils.R, R/output-parquet.R
\name{parquet_statistics}
\alias{parquet_statistics}
\alias{lazyframe__sink_parquet}
\alias{lazyframe__lazy_sink_parquet}
\title{Evaluate the query in streaming mode and write to a Parquet file}
\usage{
parquet_statistics(
  ...,
  min = TRUE,
  max = TRUE,
  distinct_count = TRUE,
  null_count = TRUE
)

lazyframe__sink_parquet(
  path,
  ...,
  compression = c("lz4", "uncompressed", "snappy", "gzip", "lzo", "brotli", "zstd"),
  compression_level = NULL,
  statistics = TRUE,
  row_group_size = NULL,
  data_page_size = NULL,
  maintain_order = TRUE,
  type_coercion = TRUE,
  `_type_check` = TRUE,
  predicate_pushdown = TRUE,
  projection_pushdown = TRUE,
  simplify_expression = TRUE,
  slice_pushdown = TRUE,
  no_optimization = FALSE,
  storage_options = NULL,
  retries = 2,
  sync_on_close = c("none", "data", "all"),
  mkdir = FALSE,
  engine = c("auto", "in-memory", "streaming"),
  collapse_joins = deprecated()
)

lazyframe__lazy_sink_parquet(
  path,
  ...,
  compression = c("lz4", "uncompressed", "snappy", "gzip", "lzo", "brotli", "zstd"),
  compression_level = NULL,
  statistics = TRUE,
  row_group_size = NULL,
  data_page_size = NULL,
  maintain_order = TRUE,
  type_coercion = TRUE,
  `_type_check` = TRUE,
  predicate_pushdown = TRUE,
  projection_pushdown = TRUE,
  simplify_expression = TRUE,
  slice_pushdown = TRUE,
  no_optimization = FALSE,
  storage_options = NULL,
  retries = 2,
  sync_on_close = c("none", "data", "all"),
  mkdir = FALSE,
  collapse_joins = deprecated()
)
}
\arguments{
\item{...}{These dots are for future extensions and must be empty.}

\item{min}{Include stats on the minimum values in the column.}

\item{max}{Include stats on the maximum values in the column.}

\item{distinct_count}{Include stats on the number of distinct values in the
column.}

\item{null_count}{Include stats on the number of null values in the column.}

\item{path}{A character. File path to which the file should be written.}

\item{compression}{The compression method. Must be one of:
\itemize{
\item \code{"lz4"}: fast compression/decompression.
\item \code{"uncompressed"}
\item \code{"snappy"}: this guarantees that the parquet file will be compatible with
older parquet readers.
\item \code{"gzip"}
\item \code{"lzo"}
\item \code{"brotli"}
\item \code{"zstd"}: good compression performance.
}}

\item{compression_level}{\code{NULL} or integer. The level of compression to use.
Only used if method is one of \code{"gzip"}, \code{"brotli"}, or \code{"zstd"}. Higher
compression means smaller files on disk:
\itemize{
\item \code{"gzip"}: min-level: 0, max-level: 10.
\item \code{"brotli"}: min-level: 0, max-level: 11.
\item \code{"zstd"}: min-level: 1, max-level: 22.
}}

\item{statistics}{Whether statistics should be written to the Parquet
headers. Possible values:
\itemize{
\item \code{TRUE}: enable default set of statistics (default). Some statistics may be
disabled.
\item \code{FALSE}: disable all statistics
\item \code{"full"}: calculate and write all available statistics
\item A list created via \code{\link[=parquet_statistics]{parquet_statistics()}} to specify which statistics to
include.
}}

\item{row_group_size}{Size of the row groups in number of rows. If \code{NULL}
(default), the chunks of the DataFrame are used. Writing in smaller chunks
may reduce memory pressure and improve writing speeds.}

\item{data_page_size}{Size of the data page in bytes. If \code{NULL} (default), it
is set to 1024^2 bytes.}

\item{maintain_order}{Maintain the order in which data is processed. Setting
this to \code{FALSE} will be slightly faster.}

\item{type_coercion}{A logical, indicates type coercion optimization.}

\item{_type_check}{For internal use only.}

\item{predicate_pushdown}{A logical, indicates predicate pushdown optimization.}

\item{projection_pushdown}{A logical, indicates projection pushdown optimization.}

\item{simplify_expression}{A logical, indicates simplify expression optimization.}

\item{slice_pushdown}{A logical, indicates slice pushdown optimization.}

\item{no_optimization}{A logical. If \code{TRUE}, turn off (certain) optimizations.}

\item{storage_options}{Named vector containing options that indicate how to
connect to a cloud provider. The cloud providers currently supported are
AWS, GCP, and Azure.
See supported keys here:
\itemize{
\item \href{https://docs.rs/object_store/latest/object_store/aws/enum.AmazonS3ConfigKey.html}{aws}
\item \href{https://docs.rs/object_store/latest/object_store/gcp/enum.GoogleConfigKey.html}{gcp}
\item \href{https://docs.rs/object_store/latest/object_store/azure/enum.AzureConfigKey.html}{azure}
\item Hugging Face (\verb{hf://}): Accepts an API key under the token parameter
\code{c(token = YOUR_TOKEN)} or by setting the \code{HF_TOKEN} environment
variable.
}

If \code{storage_options} is not provided, Polars will try to infer the
information from environment variables.}

\item{retries}{Number of retries if accessing a cloud instance fails.}

\item{sync_on_close}{Sync to disk when before closing a file. Must be one of:
\itemize{
\item \code{"none"}: does not sync;
\item \code{"data"}: syncs the file contents;
\item \code{"all"}: syncs the file contents and metadata.
}}

\item{mkdir}{Recursively create all the directories in the path.}

\item{engine}{The engine name to use for processing the query.
One of the followings:
\itemize{
\item \code{"auto"} (default): Select the engine automatically.
The \code{"in-memory"} engine will be selected for most cases.
\item \code{"in-memory"}: Use the in-memory engine.
\item \code{"streaming"}: \ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}} Use the (new) streaming engine.
}}

\item{collapse_joins}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}}
Use \code{predicate_pushdown} instead.}
}
\value{
\itemize{
\item \verb{<lazyframe>$sink_*()} returns \code{NULL} invisibly.
\item \verb{<lazyframe>$lazy_sink_*()} returns a new \link{LazyFrame}.
}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

This allows streaming results that are larger than RAM to be written to disk.
\itemize{
\item \verb{<lazyframe>$lazy_sink_*()} don't write directly to the output file(s) until
\code{\link[=lazyframe__collect]{$collect()}} is called.
This is useful if you want to save a query to review or run later.
\item \verb{<lazyframe>$sink_*()} write directly to the output file(s) (they are shortcuts for
\verb{<lazyframe>$lazy_sink_*()$collect()}).
}
}
\examples{
# Sink table 'mtcars' from mem to parquet
tmpf <- tempfile()
as_polars_lf(mtcars)$sink_parquet(tmpf)

# Create a query that can be run in streaming end-to-end
tmpf2 <- tempfile()
lf <- pl$scan_parquet(tmpf)$select(pl$col("cyl") * 2)$lazy_sink_parquet(tmpf2)
lf$explain() |>
  cat()

# Execute the query and write to disk
lf$collect()

# Load parquet directly into a DataFrame / memory
pl$read_parquet(tmpf2)
}
