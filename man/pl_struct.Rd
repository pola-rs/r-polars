% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions__lazy.R
\name{pl_struct}
\alias{pl_struct}
\title{Collect columns into a struct column}
\usage{
pl_struct(exprs, schema = NULL)
}
\arguments{
\item{exprs}{Columns/Expressions to collect into a Struct.}

\item{schema}{Optional schema named list that explicitly defines the struct
field dtypes. Each name must match a column name wrapped in the struct. Can
only be used to cast some or all dtypes, not to change the names. If \code{NULL}
(default), columns datatype are not modified. Columns that do not exist are
silently ignored and not included in the final struct.}
}
\value{
Expr with dtype Struct
}
\description{
Collect columns into a struct column
}
\details{
\code{pl$struct()} creates an Expr of DataType \code{\link[=DataType_Struct]{Struct()}}.

Compared to the Python implementation, \code{pl$struct()} doesn't have the
argument \code{eager} and always returns an Expr. Use \verb{$to_series()} to return a
Series.
}
\examples{
# isolated expression to wrap all columns in a struct aliased 'my_struct'
pl$struct(pl$all())$alias("my_struct")

# wrap all column into on column/Series
df = pl$DataFrame(
  int = 1:2,
  str = c("a", "b"),
  bool = c(TRUE, NA),
  list = list(1:2, 3L)
)$select(
  pl$struct(pl$all())$alias("my_struct")
)

print(df)
print(df$schema) # returns a schema, a named list containing one element a Struct named my_struct

# wrap two columns in a struct and provide a schema to set all or some DataTypes by name
e1 = pl$struct(
  pl$col(c("int", "str")),
  schema = list(int = pl$Int64, str = pl$String)
)$alias("my_struct")
# same result as e.g. wrapping the columns in a struct and casting afterwards
e2 = pl$struct(
  list(pl$col("int"), pl$col("str"))
)$cast(
  pl$Struct(int = pl$Int64, str = pl$String)
)$alias("my_struct")

df = pl$DataFrame(
  int = 1:2,
  str = c("a", "b"),
  bool = c(TRUE, NA),
  list = list(1:2, 3L)
)

# verify equality in R
identical(df$select(e1)$to_list(), df$select(e2)$to_list())

df$select(e2)
df$select(e2)$to_data_frame()
}
